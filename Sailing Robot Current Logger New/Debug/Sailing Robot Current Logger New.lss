
Sailing Robot Current Logger New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000131ac  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000131ac  000131ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d80  20000000  000131b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000071c  20000d80  00013f38  00020d80  2**3
                  ALLOC
  4 .stack        00001004  2000149c  00014654  00020d80  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020d80  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00020daa  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003d484  00000000  00000000  00020e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000a851  00000000  00000000  0005e29f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000149a8  00000000  00000000  00068af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002058  00000000  00000000  0007d498  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000018f0  00000000  00000000  0007f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003aeea  00000000  00000000  00080de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002cbd2  00000000  00000000  000bbcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000f1488  00000000  00000000  000e889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006624  00000000  00000000  001d9d24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
       0:	200024a0 	.word	0x200024a0
       4:	0000ac55 	.word	0x0000ac55
	if (cpu_irq_critical_section_counter == 0) {
       8:	0000ac4d 	.word	0x0000ac4d
       c:	0000ac4d 	.word	0x0000ac4d
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
      10:	0000ac4d 	.word	0x0000ac4d
  return(result);
      14:	0000ac4d 	.word	0x0000ac4d
		if (cpu_irq_is_enabled()) {
      18:	0000ac4d 	.word	0x0000ac4d
	...
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
      2c:	0000ac4d 	.word	0x0000ac4d
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
      30:	0000ac4d 	.word	0x0000ac4d
		}

	}

	cpu_irq_critical_section_counter++;
      34:	00000000 	.word	0x00000000
      38:	0000ac4d 	.word	0x0000ac4d
      3c:	0000ac4d 	.word	0x0000ac4d
}
      40:	0000ac4d 	.word	0x0000ac4d
      44:	000061f5 	.word	0x000061f5
      48:	00006205 	.word	0x00006205
      4c:	00006215 	.word	0x00006215
      50:	00006225 	.word	0x00006225
      54:	00006235 	.word	0x00006235
      58:	00006245 	.word	0x00006245
      5c:	00006255 	.word	0x00006255
      60:	00006265 	.word	0x00006265
      64:	00006275 	.word	0x00006275
      68:	00006285 	.word	0x00006285
      6c:	00006295 	.word	0x00006295
      70:	000062a5 	.word	0x000062a5
      74:	000062b5 	.word	0x000062b5
      78:	000062c5 	.word	0x000062c5
      7c:	000062d5 	.word	0x000062d5
      80:	000062e5 	.word	0x000062e5
      84:	0000ac4d 	.word	0x0000ac4d
      88:	0000ac4d 	.word	0x0000ac4d
      8c:	0000ac4d 	.word	0x0000ac4d
      90:	0000ac4d 	.word	0x0000ac4d
      94:	0000ac4d 	.word	0x0000ac4d
      98:	0000ac4d 	.word	0x0000ac4d
      9c:	0000ac4d 	.word	0x0000ac4d
      a0:	0000ac4d 	.word	0x0000ac4d
      a4:	00001f55 	.word	0x00001f55
      a8:	00001f69 	.word	0x00001f69
      ac:	00001f7d 	.word	0x00001f7d
      b0:	00001f91 	.word	0x00001f91
      b4:	00001fa5 	.word	0x00001fa5
      b8:	00001fb9 	.word	0x00001fb9
      bc:	00001fcd 	.word	0x00001fcd
      c0:	00001fe1 	.word	0x00001fe1
      c4:	00001ff5 	.word	0x00001ff5
      c8:	00002009 	.word	0x00002009
      cc:	0000201d 	.word	0x0000201d
      d0:	00002031 	.word	0x00002031
      d4:	0000ac4d 	.word	0x0000ac4d
      d8:	0000ac4d 	.word	0x0000ac4d
      dc:	0000ac4d 	.word	0x0000ac4d
      e0:	00005189 	.word	0x00005189
      e4:	0000ac4d 	.word	0x0000ac4d
      e8:	0000ac4d 	.word	0x0000ac4d
      ec:	0000ac4d 	.word	0x0000ac4d
      f0:	0000ac4d 	.word	0x0000ac4d
      f4:	0000ac4d 	.word	0x0000ac4d
      f8:	0000ac4d 	.word	0x0000ac4d
      fc:	0000ac4d 	.word	0x0000ac4d
     100:	0000ac4d 	.word	0x0000ac4d
     104:	0000ac4d 	.word	0x0000ac4d
     108:	0000ac4d 	.word	0x0000ac4d
     10c:	0000ac4d 	.word	0x0000ac4d
     110:	0000ac4d 	.word	0x0000ac4d
     114:	0000ac4d 	.word	0x0000ac4d
     118:	0000ac4d 	.word	0x0000ac4d
     11c:	0000ac4d 	.word	0x0000ac4d
     120:	0000ac4d 	.word	0x0000ac4d
     124:	0000ac4d 	.word	0x0000ac4d
     128:	0000ac4d 	.word	0x0000ac4d
     12c:	0000ac4d 	.word	0x0000ac4d
     130:	0000ac4d 	.word	0x0000ac4d
     134:	0000ac4d 	.word	0x0000ac4d
     138:	0000ac4d 	.word	0x0000ac4d
     13c:	0000ac4d 	.word	0x0000ac4d
     140:	0000ac4d 	.word	0x0000ac4d
     144:	0000ac4d 	.word	0x0000ac4d
     148:	0000ac4d 	.word	0x0000ac4d
     14c:	0000ac4d 	.word	0x0000ac4d
     150:	0000ac4d 	.word	0x0000ac4d
     154:	000060e5 	.word	0x000060e5
     158:	0000ac4d 	.word	0x0000ac4d
     15c:	0000ac4d 	.word	0x0000ac4d
     160:	0000ac4d 	.word	0x0000ac4d
     164:	0000ac4d 	.word	0x0000ac4d
     168:	0000ac4d 	.word	0x0000ac4d
     16c:	0000ac4d 	.word	0x0000ac4d
     170:	0000ac4d 	.word	0x0000ac4d
     174:	0000ac4d 	.word	0x0000ac4d
     178:	0000ac4d 	.word	0x0000ac4d
     17c:	0000ac4d 	.word	0x0000ac4d

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a1b      	subs	r3, r3, r0
     188:	2b06      	cmp	r3, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4b04      	ldr	r3, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2b00      	cmp	r3, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4798      	blx	r3
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	000131b4 	.word	0x000131b4
     19c:	000131b7 	.word	0x000131b7
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a1b      	subs	r3, r3, r0
     1ac:	109b      	asrs	r3, r3, #2
     1ae:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	000131b4 	.word	0x000131b4
     1c8:	000131b4 	.word	0x000131b4
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b113      	cbz	r3, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2301      	movs	r3, #1
     1e8:	7023      	strb	r3, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000d80 	.word	0x20000d80
     1f0:	00000000 	.word	0x00000000
     1f4:	000131b4 	.word	0x000131b4

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6803      	ldr	r3, [r0, #0]
     20a:	b113      	cbz	r3, 212 <frame_dummy+0x1a>
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b103      	cbz	r3, 212 <frame_dummy+0x1a>
     210:	4798      	blx	r3
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	000131b4 	.word	0x000131b4
     224:	20000d84 	.word	0x20000d84
     228:	000131b4 	.word	0x000131b4
     22c:	00000000 	.word	0x00000000

00000230 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
     230:	b480      	push	{r7}
     232:	b083      	sub	sp, #12
     234:	af00      	add	r7, sp, #0
     236:	4603      	mov	r3, r0
     238:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
     23a:	79fb      	ldrb	r3, [r7, #7]
     23c:	2b0d      	cmp	r3, #13
     23e:	d82b      	bhi.n	298 <dfll_priv_get_source_hz+0x68>
     240:	a201      	add	r2, pc, #4	; (adr r2, 248 <dfll_priv_get_source_hz+0x18>)
     242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     246:	bf00      	nop
     248:	00000281 	.word	0x00000281
     24c:	00000285 	.word	0x00000285
     250:	00000299 	.word	0x00000299
     254:	0000028b 	.word	0x0000028b
     258:	0000028f 	.word	0x0000028f
     25c:	00000299 	.word	0x00000299
     260:	00000299 	.word	0x00000299
     264:	00000299 	.word	0x00000299
     268:	00000299 	.word	0x00000299
     26c:	00000299 	.word	0x00000299
     270:	00000299 	.word	0x00000299
     274:	00000299 	.word	0x00000299
     278:	00000299 	.word	0x00000299
     27c:	00000293 	.word	0x00000293
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <dfll_priv_get_source_hz+0x78>)
     282:	e00a      	b.n	29a <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
     284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     288:	e007      	b.n	29a <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
     28a:	4b08      	ldr	r3, [pc, #32]	; (2ac <dfll_priv_get_source_hz+0x7c>)
     28c:	e005      	b.n	29a <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
     28e:	4b08      	ldr	r3, [pc, #32]	; (2b0 <dfll_priv_get_source_hz+0x80>)
     290:	e003      	b.n	29a <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
     292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     296:	e000      	b.n	29a <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
     298:	2300      	movs	r3, #0
	}
}
     29a:	4618      	mov	r0, r3
     29c:	370c      	adds	r7, #12
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop
     2a8:	0001c138 	.word	0x0001c138
     2ac:	00b71b00 	.word	0x00b71b00
     2b0:	04c4b400 	.word	0x04c4b400

000002b4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
     2b4:	b580      	push	{r7, lr}
     2b6:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
     2b8:	2001      	movs	r0, #1
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sysclk_get_main_hz+0x18>)
     2bc:	4798      	blx	r3
     2be:	4603      	mov	r3, r0
     2c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
     2c4:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
     2c8:	4618      	mov	r0, r3
     2ca:	bd80      	pop	{r7, pc}
     2cc:	00000231 	.word	0x00000231

000002d0 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
     2d4:	4b02      	ldr	r3, [pc, #8]	; (2e0 <sysclk_get_pba_hz+0x10>)
     2d6:	4798      	blx	r3
     2d8:	4603      	mov	r3, r0
}
     2da:	4618      	mov	r0, r3
     2dc:	bd80      	pop	{r7, pc}
     2de:	bf00      	nop
     2e0:	000002b5 	.word	0x000002b5

000002e4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     2e4:	b480      	push	{r7}
     2e6:	b08d      	sub	sp, #52	; 0x34
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
     2ec:	460b      	mov	r3, r1
     2ee:	70fb      	strb	r3, [r7, #3]
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
     2f4:	78fb      	ldrb	r3, [r7, #3]
     2f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
     2fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     2fe:	2b00      	cmp	r3, #0
     300:	d016      	beq.n	330 <ioport_set_pin_level+0x4c>
     302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     304:	627b      	str	r3, [r7, #36]	; 0x24
     306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     308:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     30a:	6a3b      	ldr	r3, [r7, #32]
     30c:	095b      	lsrs	r3, r3, #5
     30e:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     310:	69fb      	ldr	r3, [r7, #28]
     312:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     316:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     31a:	025b      	lsls	r3, r3, #9
     31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     31e:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     320:	69ba      	ldr	r2, [r7, #24]
     322:	f002 021f 	and.w	r2, r2, #31
     326:	2101      	movs	r1, #1
     328:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     32c:	655a      	str	r2, [r3, #84]	; 0x54
     32e:	e015      	b.n	35c <ioport_set_pin_level+0x78>
     330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     332:	617b      	str	r3, [r7, #20]
     334:	697b      	ldr	r3, [r7, #20]
     336:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     338:	693b      	ldr	r3, [r7, #16]
     33a:	095b      	lsrs	r3, r3, #5
     33c:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     33e:	68fb      	ldr	r3, [r7, #12]
     340:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     344:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     348:	025b      	lsls	r3, r3, #9
     34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     34c:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     34e:	68ba      	ldr	r2, [r7, #8]
     350:	f002 021f 	and.w	r2, r2, #31
     354:	2101      	movs	r1, #1
     356:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     35a:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(pin, level);
}
     35c:	3734      	adds	r7, #52	; 0x34
     35e:	46bd      	mov	sp, r7
     360:	f85d 7b04 	ldr.w	r7, [sp], #4
     364:	4770      	bx	lr
     366:	bf00      	nop

00000368 <adc_configure_trigger>:
 * \param trigger trigger source selection.
 *
 */
static inline void adc_configure_trigger(struct adc_dev_inst *const dev_inst,
		const enum adc_trigger_t trigger)
{
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
     370:	460b      	mov	r3, r1
     372:	70fb      	strb	r3, [r7, #3]
	dev_inst->hw_dev->ADCIFE_SEQCFG &= ~ADCIFE_SEQCFG_TRGSEL_Msk;
     374:	687b      	ldr	r3, [r7, #4]
     376:	681b      	ldr	r3, [r3, #0]
     378:	687a      	ldr	r2, [r7, #4]
     37a:	6812      	ldr	r2, [r2, #0]
     37c:	6952      	ldr	r2, [r2, #20]
     37e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
     382:	615a      	str	r2, [r3, #20]
	dev_inst->hw_dev->ADCIFE_SEQCFG |= ADCIFE_SEQCFG_TRGSEL(trigger);
     384:	687b      	ldr	r3, [r7, #4]
     386:	681b      	ldr	r3, [r3, #0]
     388:	687a      	ldr	r2, [r7, #4]
     38a:	6812      	ldr	r2, [r2, #0]
     38c:	6951      	ldr	r1, [r2, #20]
     38e:	78fa      	ldrb	r2, [r7, #3]
     390:	0212      	lsls	r2, r2, #8
     392:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     396:	430a      	orrs	r2, r1
     398:	615a      	str	r2, [r3, #20]
}
     39a:	370c      	adds	r7, #12
     39c:	46bd      	mov	sp, r7
     39e:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a2:	4770      	bx	lr

000003a4 <adc_configure_gain>:
 * \param gain gain value.
 *
 */
static inline void adc_configure_gain(struct adc_dev_inst *const dev_inst,
		const enum adc_gain_t gain)
{
     3a4:	b480      	push	{r7}
     3a6:	b083      	sub	sp, #12
     3a8:	af00      	add	r7, sp, #0
     3aa:	6078      	str	r0, [r7, #4]
     3ac:	460b      	mov	r3, r1
     3ae:	70fb      	strb	r3, [r7, #3]
	dev_inst->hw_dev->ADCIFE_SEQCFG &= ~ADCIFE_SEQCFG_GAIN_Msk;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	687a      	ldr	r2, [r7, #4]
     3b6:	6812      	ldr	r2, [r2, #0]
     3b8:	6952      	ldr	r2, [r2, #20]
     3ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
     3be:	615a      	str	r2, [r3, #20]
	dev_inst->hw_dev->ADCIFE_SEQCFG |= ADCIFE_SEQCFG_GAIN(gain);
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	681b      	ldr	r3, [r3, #0]
     3c4:	687a      	ldr	r2, [r7, #4]
     3c6:	6812      	ldr	r2, [r2, #0]
     3c8:	6951      	ldr	r1, [r2, #20]
     3ca:	78fa      	ldrb	r2, [r7, #3]
     3cc:	0112      	lsls	r2, r2, #4
     3ce:	f002 0270 	and.w	r2, r2, #112	; 0x70
     3d2:	430a      	orrs	r2, r1
     3d4:	615a      	str	r2, [r3, #20]
}
     3d6:	370c      	adds	r7, #12
     3d8:	46bd      	mov	sp, r7
     3da:	f85d 7b04 	ldr.w	r7, [sp], #4
     3de:	4770      	bx	lr

000003e0 <adc_start_itimer>:
 *
 * \param dev_inst    Device structure pointer.
 *
 */
static inline void adc_start_itimer(struct adc_dev_inst *const dev_inst)
{
     3e0:	b480      	push	{r7}
     3e2:	b083      	sub	sp, #12
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_TSTART;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2204      	movs	r2, #4
     3ee:	601a      	str	r2, [r3, #0]
}
     3f0:	370c      	adds	r7, #12
     3f2:	46bd      	mov	sp, r7
     3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f8:	4770      	bx	lr
     3fa:	bf00      	nop

000003fc <adc_configure_itimer_period>:
 * \param period Internal Timer Max Counter
 *
 */
static inline void adc_configure_itimer_period(struct adc_dev_inst *const dev_inst,
		const uint32_t period)
{
     3fc:	b480      	push	{r7}
     3fe:	b083      	sub	sp, #12
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
     404:	6039      	str	r1, [r7, #0]
	dev_inst->hw_dev->ADCIFE_ITIMER = ADCIFE_ITIMER_ITMC(period);
     406:	687b      	ldr	r3, [r7, #4]
     408:	681b      	ldr	r3, [r3, #0]
     40a:	683a      	ldr	r2, [r7, #0]
     40c:	b292      	uxth	r2, r2
     40e:	621a      	str	r2, [r3, #32]
}
     410:	370c      	adds	r7, #12
     412:	46bd      	mov	sp, r7
     414:	f85d 7b04 	ldr.w	r7, [sp], #4
     418:	4770      	bx	lr
     41a:	bf00      	nop

0000041c <adc_get_last_conv_value>:
 *
 * \param dev_inst    Device structure pointer.
 *
 */
static inline uint16_t adc_get_last_conv_value(struct adc_dev_inst *const dev_inst)
{
     41c:	b480      	push	{r7}
     41e:	b083      	sub	sp, #12
     420:	af00      	add	r7, sp, #0
     422:	6078      	str	r0, [r7, #4]
	return (dev_inst->hw_dev->ADCIFE_LCV & ADCIFE_LCV_LCV_Msk);
     424:	687b      	ldr	r3, [r7, #4]
     426:	681b      	ldr	r3, [r3, #0]
     428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     42a:	b29b      	uxth	r3, r3
}
     42c:	4618      	mov	r0, r3
     42e:	370c      	adds	r7, #12
     430:	46bd      	mov	sp, r7
     432:	f85d 7b04 	ldr.w	r7, [sp], #4
     436:	4770      	bx	lr

00000438 <adc_get_status>:
 *
 * \param dev_inst    Device structure pointer.
 *
 */
static inline uint32_t adc_get_status(struct adc_dev_inst *const dev_inst)
{
     438:	b480      	push	{r7}
     43a:	b083      	sub	sp, #12
     43c:	af00      	add	r7, sp, #0
     43e:	6078      	str	r0, [r7, #4]
	return dev_inst->hw_dev->ADCIFE_SR;
     440:	687b      	ldr	r3, [r7, #4]
     442:	681b      	ldr	r3, [r3, #0]
     444:	689b      	ldr	r3, [r3, #8]
}
     446:	4618      	mov	r0, r3
     448:	370c      	adds	r7, #12
     44a:	46bd      	mov	sp, r7
     44c:	f85d 7b04 	ldr.w	r7, [sp], #4
     450:	4770      	bx	lr
     452:	bf00      	nop

00000454 <adc_clear_status>:
 * \param status_flags status flag.
 *
 */
static inline void adc_clear_status(struct adc_dev_inst *const dev_inst,
		const uint32_t status_flags)
{
     454:	b480      	push	{r7}
     456:	b083      	sub	sp, #12
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
	dev_inst->hw_dev->ADCIFE_SCR = status_flags;
     45e:	687b      	ldr	r3, [r7, #4]
     460:	681b      	ldr	r3, [r3, #0]
     462:	683a      	ldr	r2, [r7, #0]
     464:	60da      	str	r2, [r3, #12]
}
     466:	370c      	adds	r7, #12
     468:	46bd      	mov	sp, r7
     46a:	f85d 7b04 	ldr.w	r7, [sp], #4
     46e:	4770      	bx	lr

00000470 <init_adc>:
	TRIGGER_MODE_ITIMER,
	TRIGGER_MODE_CON,
} e_trigger_mode;

int init_adc(void)
{
     470:	b580      	push	{r7, lr}
     472:	af00      	add	r7, sp, #0
	g_adc_test_mode.uc_pdc_en = 0;
     474:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <init_adc+0x44>)
     476:	2200      	movs	r2, #0
     478:	705a      	strb	r2, [r3, #1]
	g_adc_test_mode.uc_trigger_mode = TRIGGER_MODE_ITIMER;
     47a:	4b0e      	ldr	r3, [pc, #56]	; (4b4 <init_adc+0x44>)
     47c:	2201      	movs	r2, #1
     47e:	701a      	strb	r2, [r3, #0]
	g_adc_test_mode.uc_gain_en = 0;
     480:	4b0c      	ldr	r3, [pc, #48]	; (4b4 <init_adc+0x44>)
     482:	2200      	movs	r2, #0
     484:	709a      	strb	r2, [r3, #2]
	
	if( set_pins(ADC2_pin) == 1)
     486:	2007      	movs	r0, #7
     488:	4b0b      	ldr	r3, [pc, #44]	; (4b8 <init_adc+0x48>)
     48a:	4798      	blx	r3
     48c:	4603      	mov	r3, r0
     48e:	2b01      	cmp	r3, #1
     490:	d101      	bne.n	496 <init_adc+0x26>
		return 1;
     492:	2301      	movs	r3, #1
     494:	e00b      	b.n	4ae <init_adc+0x3e>
		
	if( set_pins(ADC3_pin) == 1)
     496:	2008      	movs	r0, #8
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <init_adc+0x48>)
     49a:	4798      	blx	r3
     49c:	4603      	mov	r3, r0
     49e:	2b01      	cmp	r3, #1
     4a0:	d101      	bne.n	4a6 <init_adc+0x36>
		return 1;
     4a2:	2301      	movs	r3, #1
     4a4:	e003      	b.n	4ae <init_adc+0x3e>
	
	adc_sample_index = 0;
     4a6:	4b05      	ldr	r3, [pc, #20]	; (4bc <init_adc+0x4c>)
     4a8:	2200      	movs	r2, #0
     4aa:	601a      	str	r2, [r3, #0]
	
	return 0;
     4ac:	2300      	movs	r3, #0
}
     4ae:	4618      	mov	r0, r3
     4b0:	bd80      	pop	{r7, pc}
     4b2:	bf00      	nop
     4b4:	20000e70 	.word	0x20000e70
     4b8:	00006ce1 	.word	0x00006ce1
     4bc:	20000e6c 	.word	0x20000e6c

000004c0 <start_adc>:

void start_adc(void)
{
     4c0:	b590      	push	{r4, r7, lr}
     4c2:	b089      	sub	sp, #36	; 0x24
     4c4:	af02      	add	r7, sp, #8
	struct adc_config adc_cfg = {
     4c6:	4a42      	ldr	r2, [pc, #264]	; (5d0 <start_adc+0x110>)
     4c8:	f107 0310 	add.w	r3, r7, #16
     4cc:	6810      	ldr	r0, [r2, #0]
     4ce:	6018      	str	r0, [r3, #0]
     4d0:	7912      	ldrb	r2, [r2, #4]
     4d2:	711a      	strb	r2, [r3, #4]
		/* ADC Reference voltage is 0.625*VCC */
		.refsel = ADC_REFSEL_1,
		/* Enables the Startup time */
		.start_up = CONFIG_ADC_STARTUP
	};
	struct adc_seq_config adc_seq_cfg = {
     4d4:	2300      	movs	r3, #0
     4d6:	60fb      	str	r3, [r7, #12]
     4d8:	7b3b      	ldrb	r3, [r7, #12]
     4da:	f043 0304 	orr.w	r3, r3, #4
     4de:	733b      	strb	r3, [r7, #12]
     4e0:	7bbb      	ldrb	r3, [r7, #14]
     4e2:	2202      	movs	r2, #2
     4e4:	f362 0303 	bfi	r3, r2, #0, #4
     4e8:	73bb      	strb	r3, [r7, #14]
     4ea:	7bbb      	ldrb	r3, [r7, #14]
     4ec:	2203      	movs	r2, #3
     4ee:	f362 1306 	bfi	r3, r2, #4, #3
     4f2:	73bb      	strb	r3, [r7, #14]
		/* 12-bits resolution */
		.res = ADC_RES_12_BIT,
		/* Enables the single-ended mode */
		.bipolar = ADC_BIPOLAR_DIFFERENTIAL
	};
	struct adc_ch_config adc_ch_cfg = {
     4f4:	f107 030c 	add.w	r3, r7, #12
     4f8:	603b      	str	r3, [r7, #0]
		.seq_cfg = &adc_seq_cfg,
		/* Internal Timer Max Counter */
		.internal_timer_max_count = sysclk_get_pba_hz() / (8 * SAMPLING_FREQUENCY),
     4fa:	4b36      	ldr	r3, [pc, #216]	; (5d4 <start_adc+0x114>)
     4fc:	4798      	blx	r3
     4fe:	4602      	mov	r2, r0
     500:	4b35      	ldr	r3, [pc, #212]	; (5d8 <start_adc+0x118>)
     502:	fba3 1302 	umull	r1, r3, r3, r2
     506:	0a9b      	lsrs	r3, r3, #10
		/* 12-bits resolution */
		.res = ADC_RES_12_BIT,
		/* Enables the single-ended mode */
		.bipolar = ADC_BIPOLAR_DIFFERENTIAL
	};
	struct adc_ch_config adc_ch_cfg = {
     508:	b29b      	uxth	r3, r3
     50a:	80bb      	strh	r3, [r7, #4]
     50c:	2300      	movs	r3, #0
     50e:	71bb      	strb	r3, [r7, #6]
     510:	2300      	movs	r3, #0
     512:	813b      	strh	r3, [r7, #8]
     514:	2300      	movs	r3, #0
     516:	817b      	strh	r3, [r7, #10]
		.window_mode = 0,
		.low_threshold = 0,
		.high_threshold = 0,
	};
	
	if(adc_init(&adc_instance, ADCIFE, &adc_cfg) != STATUS_OK) {
     518:	f107 0310 	add.w	r3, r7, #16
     51c:	482f      	ldr	r0, [pc, #188]	; (5dc <start_adc+0x11c>)
     51e:	4930      	ldr	r1, [pc, #192]	; (5e0 <start_adc+0x120>)
     520:	461a      	mov	r2, r3
     522:	4b30      	ldr	r3, [pc, #192]	; (5e4 <start_adc+0x124>)
     524:	4798      	blx	r3
     526:	4603      	mov	r3, r0
     528:	2b00      	cmp	r3, #0
     52a:	d000      	beq.n	52e <start_adc+0x6e>
		//puts("-F- ADC Init Fail!\n\r");
		while(1);
     52c:	e7fe      	b.n	52c <start_adc+0x6c>
	}
	if(adc_enable(&adc_instance) != STATUS_OK) {
     52e:	482b      	ldr	r0, [pc, #172]	; (5dc <start_adc+0x11c>)
     530:	4b2d      	ldr	r3, [pc, #180]	; (5e8 <start_adc+0x128>)
     532:	4798      	blx	r3
     534:	4603      	mov	r3, r0
     536:	2b00      	cmp	r3, #0
     538:	d000      	beq.n	53c <start_adc+0x7c>
		//puts("-F- ADC Enable Fail!\n\r");
		while(1);
     53a:	e7fe      	b.n	53a <start_adc+0x7a>
	}

	if (g_adc_test_mode.uc_pdc_en) {
     53c:	4b2b      	ldr	r3, [pc, #172]	; (5ec <start_adc+0x12c>)
     53e:	785b      	ldrb	r3, [r3, #1]
     540:	2b00      	cmp	r3, #0
     542:	d114      	bne.n	56e <start_adc+0xae>
		//adc_disable_interrupt(&g_adc_inst, ADC_SEQ_SEOC);
		//adc_pdca_set_config(&g_adc_pdca_cfg);
		//pdca_channel_set_callback(CONFIG_ADC_PDCA_RX_CHANNEL, pdca_transfer_done,
		//		PDCA_0_IRQn, 1, PDCA_IER_TRC);
		} else {
		pdca_channel_disable_interrupt(CONFIG_ADC_PDCA_RX_CHANNEL,
     544:	2000      	movs	r0, #0
     546:	2102      	movs	r1, #2
     548:	4b29      	ldr	r3, [pc, #164]	; (5f0 <start_adc+0x130>)
     54a:	4798      	blx	r3
		PDCA_IDR_TRC);
		pdca_channel_disable_interrupt(CONFIG_ADC_PDCA_TX_CHANNEL,
     54c:	2001      	movs	r0, #1
     54e:	2102      	movs	r1, #2
     550:	4b27      	ldr	r3, [pc, #156]	; (5f0 <start_adc+0x130>)
     552:	4798      	blx	r3
		PDCA_IDR_TRC);
		adc_ch_set_config(&adc_instance, &adc_ch_cfg);
     554:	463b      	mov	r3, r7
     556:	4821      	ldr	r0, [pc, #132]	; (5dc <start_adc+0x11c>)
     558:	4619      	mov	r1, r3
     55a:	4b26      	ldr	r3, [pc, #152]	; (5f4 <start_adc+0x134>)
     55c:	4798      	blx	r3
		adc_set_callback(&adc_instance, ADC_SEQ_SEOC, adcife_read_conv_result,
     55e:	2301      	movs	r3, #1
     560:	9300      	str	r3, [sp, #0]
     562:	481e      	ldr	r0, [pc, #120]	; (5dc <start_adc+0x11c>)
     564:	2101      	movs	r1, #1
     566:	4a24      	ldr	r2, [pc, #144]	; (5f8 <start_adc+0x138>)
     568:	2345      	movs	r3, #69	; 0x45
     56a:	4c24      	ldr	r4, [pc, #144]	; (5fc <start_adc+0x13c>)
     56c:	47a0      	blx	r4
		ADCIFE_IRQn, 1);
	}

	/* Configure trigger mode and start convention. */
	switch (g_adc_test_mode.uc_trigger_mode) {
     56e:	4b1f      	ldr	r3, [pc, #124]	; (5ec <start_adc+0x12c>)
     570:	781b      	ldrb	r3, [r3, #0]
     572:	2b01      	cmp	r3, #1
     574:	d00e      	beq.n	594 <start_adc+0xd4>
     576:	2b02      	cmp	r3, #2
     578:	d007      	beq.n	58a <start_adc+0xca>
     57a:	2b00      	cmp	r3, #0
     57c:	d000      	beq.n	580 <start_adc+0xc0>
		adc_configure_itimer_period(&adc_instance,
		adc_ch_cfg.internal_timer_max_count);
		adc_start_itimer(&adc_instance);
		break;
		default:
		break;
     57e:	e016      	b.n	5ae <start_adc+0xee>
	}

	/* Configure trigger mode and start convention. */
	switch (g_adc_test_mode.uc_trigger_mode) {
		case TRIGGER_MODE_SOFTWARE:
		adc_configure_trigger(&adc_instance, ADC_TRIG_SW);
     580:	4816      	ldr	r0, [pc, #88]	; (5dc <start_adc+0x11c>)
     582:	2100      	movs	r1, #0
     584:	4b1e      	ldr	r3, [pc, #120]	; (600 <start_adc+0x140>)
     586:	4798      	blx	r3
		break;
     588:	e011      	b.n	5ae <start_adc+0xee>
		case TRIGGER_MODE_CON:
		adc_configure_trigger(&adc_instance, ADC_TRIG_CON);
     58a:	4814      	ldr	r0, [pc, #80]	; (5dc <start_adc+0x11c>)
     58c:	2103      	movs	r1, #3
     58e:	4b1c      	ldr	r3, [pc, #112]	; (600 <start_adc+0x140>)
     590:	4798      	blx	r3
		break;
     592:	e00c      	b.n	5ae <start_adc+0xee>
		case TRIGGER_MODE_ITIMER:
		adc_configure_trigger(&adc_instance, ADC_TRIG_INTL_TIMER);
     594:	4811      	ldr	r0, [pc, #68]	; (5dc <start_adc+0x11c>)
     596:	2101      	movs	r1, #1
     598:	4b19      	ldr	r3, [pc, #100]	; (600 <start_adc+0x140>)
     59a:	4798      	blx	r3
		adc_configure_itimer_period(&adc_instance,
		adc_ch_cfg.internal_timer_max_count);
     59c:	88bb      	ldrh	r3, [r7, #4]
		case TRIGGER_MODE_CON:
		adc_configure_trigger(&adc_instance, ADC_TRIG_CON);
		break;
		case TRIGGER_MODE_ITIMER:
		adc_configure_trigger(&adc_instance, ADC_TRIG_INTL_TIMER);
		adc_configure_itimer_period(&adc_instance,
     59e:	480f      	ldr	r0, [pc, #60]	; (5dc <start_adc+0x11c>)
     5a0:	4619      	mov	r1, r3
     5a2:	4b18      	ldr	r3, [pc, #96]	; (604 <start_adc+0x144>)
     5a4:	4798      	blx	r3
		adc_ch_cfg.internal_timer_max_count);
		adc_start_itimer(&adc_instance);
     5a6:	480d      	ldr	r0, [pc, #52]	; (5dc <start_adc+0x11c>)
     5a8:	4b17      	ldr	r3, [pc, #92]	; (608 <start_adc+0x148>)
     5aa:	4798      	blx	r3
		break;
     5ac:	bf00      	nop
		default:
		break;
	}

	if (g_adc_test_mode.uc_gain_en) {
     5ae:	4b0f      	ldr	r3, [pc, #60]	; (5ec <start_adc+0x12c>)
     5b0:	789b      	ldrb	r3, [r3, #2]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d004      	beq.n	5c0 <start_adc+0x100>
		adc_configure_gain(&adc_instance, ADC_GAIN_2X);
     5b6:	4809      	ldr	r0, [pc, #36]	; (5dc <start_adc+0x11c>)
     5b8:	2101      	movs	r1, #1
     5ba:	4b14      	ldr	r3, [pc, #80]	; (60c <start_adc+0x14c>)
     5bc:	4798      	blx	r3
     5be:	e003      	b.n	5c8 <start_adc+0x108>
		} else {
		adc_configure_gain(&adc_instance, ADC_GAIN_1X);
     5c0:	4806      	ldr	r0, [pc, #24]	; (5dc <start_adc+0x11c>)
     5c2:	2100      	movs	r1, #0
     5c4:	4b11      	ldr	r3, [pc, #68]	; (60c <start_adc+0x14c>)
     5c6:	4798      	blx	r3
	}
}
     5c8:	371c      	adds	r7, #28
     5ca:	46bd      	mov	sp, r7
     5cc:	bd90      	pop	{r4, r7, pc}
     5ce:	bf00      	nop
     5d0:	00012630 	.word	0x00012630
     5d4:	000002d1 	.word	0x000002d1
     5d8:	10624dd3 	.word	0x10624dd3
     5dc:	2000148c 	.word	0x2000148c
     5e0:	40038000 	.word	0x40038000
     5e4:	00005f09 	.word	0x00005f09
     5e8:	0000600d 	.word	0x0000600d
     5ec:	20000e70 	.word	0x20000e70
     5f0:	0000618d 	.word	0x0000618d
     5f4:	00005fc9 	.word	0x00005fc9
     5f8:	00000611 	.word	0x00000611
     5fc:	00006071 	.word	0x00006071
     600:	00000369 	.word	0x00000369
     604:	000003fd 	.word	0x000003fd
     608:	000003e1 	.word	0x000003e1
     60c:	000003a5 	.word	0x000003a5

00000610 <adcife_read_conv_result>:
{
	adc_enable_interrupt(&adc_instance, ADC_SEQ_SEOC);
}

void adcife_read_conv_result(void)
{
     610:	b5f0      	push	{r4, r5, r6, r7, lr}
     612:	b083      	sub	sp, #12
     614:	af00      	add	r7, sp, #0
	ioport_set_pin_level(PIN_PA16, true); // for debugging
     616:	2010      	movs	r0, #16
     618:	2101      	movs	r1, #1
     61a:	4b35      	ldr	r3, [pc, #212]	; (6f0 <adcife_read_conv_result+0xe0>)
     61c:	4798      	blx	r3
	
	if ((adc_get_status(&adc_instance) & ADCIFE_SR_SEOC) == ADCIFE_SR_SEOC) {
     61e:	4835      	ldr	r0, [pc, #212]	; (6f4 <adcife_read_conv_result+0xe4>)
     620:	4b35      	ldr	r3, [pc, #212]	; (6f8 <adcife_read_conv_result+0xe8>)
     622:	4798      	blx	r3
     624:	4603      	mov	r3, r0
     626:	f003 0301 	and.w	r3, r3, #1
     62a:	2b00      	cmp	r3, #0
     62c:	d014      	beq.n	658 <adcife_read_conv_result+0x48>
		adc_sample_data[adc_sample_index++] = adc_get_last_conv_value(&adc_instance);
     62e:	4b33      	ldr	r3, [pc, #204]	; (6fc <adcife_read_conv_result+0xec>)
     630:	681b      	ldr	r3, [r3, #0]
     632:	461e      	mov	r6, r3
     634:	1c72      	adds	r2, r6, #1
     636:	4b31      	ldr	r3, [pc, #196]	; (6fc <adcife_read_conv_result+0xec>)
     638:	601a      	str	r2, [r3, #0]
     63a:	482e      	ldr	r0, [pc, #184]	; (6f4 <adcife_read_conv_result+0xe4>)
     63c:	4b30      	ldr	r3, [pc, #192]	; (700 <adcife_read_conv_result+0xf0>)
     63e:	4798      	blx	r3
     640:	4603      	mov	r3, r0
     642:	461a      	mov	r2, r3
     644:	4b2f      	ldr	r3, [pc, #188]	; (704 <adcife_read_conv_result+0xf4>)
     646:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
		conversion_done_flag = 1;
     64a:	4b2f      	ldr	r3, [pc, #188]	; (708 <adcife_read_conv_result+0xf8>)
     64c:	2201      	movs	r2, #1
     64e:	701a      	strb	r2, [r3, #0]
		adc_clear_status(&adc_instance, ADCIFE_SCR_SEOC);
     650:	4828      	ldr	r0, [pc, #160]	; (6f4 <adcife_read_conv_result+0xe4>)
     652:	2101      	movs	r1, #1
     654:	4b2d      	ldr	r3, [pc, #180]	; (70c <adcife_read_conv_result+0xfc>)
     656:	4798      	blx	r3
	}
	
	if(adc_sample_index >= SAMPLE_BUFFER_SIZE)
     658:	4b28      	ldr	r3, [pc, #160]	; (6fc <adcife_read_conv_result+0xec>)
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	2bc7      	cmp	r3, #199	; 0xc7
     65e:	d940      	bls.n	6e2 <adcife_read_conv_result+0xd2>
	{
		ioport_set_pin_level(PIN_PA15, true);
     660:	200f      	movs	r0, #15
     662:	2101      	movs	r1, #1
     664:	4b22      	ldr	r3, [pc, #136]	; (6f0 <adcife_read_conv_result+0xe0>)
     666:	4798      	blx	r3
		
		adc_sample_index = 0;
     668:	4b24      	ldr	r3, [pc, #144]	; (6fc <adcife_read_conv_result+0xec>)
     66a:	2200      	movs	r2, #0
     66c:	601a      	str	r2, [r3, #0]
		
		for(int a = 0; a < (SAMPLE_BUFFER_SIZE); a++)
     66e:	2300      	movs	r3, #0
     670:	607b      	str	r3, [r7, #4]
     672:	e012      	b.n	69a <adcife_read_conv_result+0x8a>
		{
			mean_sample += adc_sample_data[a];
     674:	4b23      	ldr	r3, [pc, #140]	; (704 <adcife_read_conv_result+0xf4>)
     676:	687a      	ldr	r2, [r7, #4]
     678:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
     67c:	b298      	uxth	r0, r3
     67e:	f04f 0100 	mov.w	r1, #0
     682:	4b23      	ldr	r3, [pc, #140]	; (710 <adcife_read_conv_result+0x100>)
     684:	e9d3 2300 	ldrd	r2, r3, [r3]
     688:	1812      	adds	r2, r2, r0
     68a:	eb43 0301 	adc.w	r3, r3, r1
     68e:	4920      	ldr	r1, [pc, #128]	; (710 <adcife_read_conv_result+0x100>)
     690:	e9c1 2300 	strd	r2, r3, [r1]
	{
		ioport_set_pin_level(PIN_PA15, true);
		
		adc_sample_index = 0;
		
		for(int a = 0; a < (SAMPLE_BUFFER_SIZE); a++)
     694:	687b      	ldr	r3, [r7, #4]
     696:	3301      	adds	r3, #1
     698:	607b      	str	r3, [r7, #4]
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	2bc7      	cmp	r3, #199	; 0xc7
     69e:	dde9      	ble.n	674 <adcife_read_conv_result+0x64>
		{
			mean_sample += adc_sample_data[a];
		}
		
		mean_sample /= SAMPLE_BUFFER_SIZE;
     6a0:	4b1b      	ldr	r3, [pc, #108]	; (710 <adcife_read_conv_result+0x100>)
     6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
     6a6:	4e1b      	ldr	r6, [pc, #108]	; (714 <adcife_read_conv_result+0x104>)
     6a8:	4610      	mov	r0, r2
     6aa:	4619      	mov	r1, r3
     6ac:	f04f 02c8 	mov.w	r2, #200	; 0xc8
     6b0:	f04f 0300 	mov.w	r3, #0
     6b4:	47b0      	blx	r6
     6b6:	4602      	mov	r2, r0
     6b8:	460b      	mov	r3, r1
     6ba:	4915      	ldr	r1, [pc, #84]	; (710 <adcife_read_conv_result+0x100>)
     6bc:	e9c1 2300 	strd	r2, r3, [r1]
		
		current[CURRENT_BUFFER_SIZE - 1] = (int)( mean_sample/16 - 127 );
     6c0:	4b13      	ldr	r3, [pc, #76]	; (710 <adcife_read_conv_result+0x100>)
     6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
     6c6:	0914      	lsrs	r4, r2, #4
     6c8:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
     6cc:	091d      	lsrs	r5, r3, #4
     6ce:	b2e3      	uxtb	r3, r4
     6d0:	3b7f      	subs	r3, #127	; 0x7f
     6d2:	b2da      	uxtb	r2, r3
     6d4:	4b10      	ldr	r3, [pc, #64]	; (718 <adcife_read_conv_result+0x108>)
     6d6:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
		
		ioport_set_pin_level(PIN_PA15, false);
     6da:	200f      	movs	r0, #15
     6dc:	2100      	movs	r1, #0
     6de:	4b04      	ldr	r3, [pc, #16]	; (6f0 <adcife_read_conv_result+0xe0>)
     6e0:	4798      	blx	r3
	}
	
	ioport_set_pin_level(PIN_PA16, false);
     6e2:	2010      	movs	r0, #16
     6e4:	2100      	movs	r1, #0
     6e6:	4b02      	ldr	r3, [pc, #8]	; (6f0 <adcife_read_conv_result+0xe0>)
     6e8:	4798      	blx	r3
}
     6ea:	370c      	adds	r7, #12
     6ec:	46bd      	mov	sp, r7
     6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f0:	000002e5 	.word	0x000002e5
     6f4:	2000148c 	.word	0x2000148c
     6f8:	00000439 	.word	0x00000439
     6fc:	20000e6c 	.word	0x20000e6c
     700:	0000041d 	.word	0x0000041d
     704:	20000e78 	.word	0x20000e78
     708:	20000d9c 	.word	0x20000d9c
     70c:	00000455 	.word	0x00000455
     710:	20000e30 	.word	0x20000e30
     714:	0000d0c9 	.word	0x0000d0c9
     718:	200010a0 	.word	0x200010a0

0000071c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
     71c:	b480      	push	{r7}
     71e:	b087      	sub	sp, #28
     720:	af00      	add	r7, sp, #0
     722:	60f8      	str	r0, [r7, #12]
     724:	8179      	strh	r1, [r7, #10]
     726:	813a      	strh	r2, [r7, #8]
     728:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     72a:	897a      	ldrh	r2, [r7, #10]
     72c:	893b      	ldrh	r3, [r7, #8]
     72e:	1ad3      	subs	r3, r2, r3
     730:	3307      	adds	r3, #7
     732:	2b00      	cmp	r3, #0
     734:	da00      	bge.n	738 <SDMMC_UNSTUFF_BITS+0x1c>
     736:	3307      	adds	r3, #7
     738:	10db      	asrs	r3, r3, #3
     73a:	3b01      	subs	r3, #1
     73c:	68fa      	ldr	r2, [r7, #12]
     73e:	4413      	add	r3, r2
     740:	781b      	ldrb	r3, [r3, #0]
     742:	461a      	mov	r2, r3
     744:	893b      	ldrh	r3, [r7, #8]
     746:	f003 0307 	and.w	r3, r3, #7
     74a:	fa42 f303 	asr.w	r3, r2, r3
     74e:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
     750:	893b      	ldrh	r3, [r7, #8]
     752:	f003 0207 	and.w	r2, r3, #7
     756:	79fb      	ldrb	r3, [r7, #7]
     758:	4413      	add	r3, r2
     75a:	2b08      	cmp	r3, #8
     75c:	dd16      	ble.n	78c <SDMMC_UNSTUFF_BITS+0x70>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     75e:	897a      	ldrh	r2, [r7, #10]
     760:	893b      	ldrh	r3, [r7, #8]
     762:	1ad3      	subs	r3, r2, r3
     764:	3307      	adds	r3, #7
     766:	2b00      	cmp	r3, #0
     768:	da00      	bge.n	76c <SDMMC_UNSTUFF_BITS+0x50>
     76a:	3307      	adds	r3, #7
     76c:	10db      	asrs	r3, r3, #3
     76e:	3b02      	subs	r3, #2
     770:	68fa      	ldr	r2, [r7, #12]
     772:	4413      	add	r3, r2
     774:	781b      	ldrb	r3, [r3, #0]
     776:	461a      	mov	r2, r3
     778:	893b      	ldrh	r3, [r7, #8]
     77a:	f003 0307 	and.w	r3, r3, #7
     77e:	f1c3 0308 	rsb	r3, r3, #8
     782:	fa02 f303 	lsl.w	r3, r2, r3
     786:	697a      	ldr	r2, [r7, #20]
     788:	4313      	orrs	r3, r2
     78a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     78c:	893b      	ldrh	r3, [r7, #8]
     78e:	f003 0207 	and.w	r2, r3, #7
     792:	79fb      	ldrb	r3, [r7, #7]
     794:	4413      	add	r3, r2
     796:	2b10      	cmp	r3, #16
     798:	dd16      	ble.n	7c8 <SDMMC_UNSTUFF_BITS+0xac>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     79a:	897a      	ldrh	r2, [r7, #10]
     79c:	893b      	ldrh	r3, [r7, #8]
     79e:	1ad3      	subs	r3, r2, r3
     7a0:	3307      	adds	r3, #7
     7a2:	2b00      	cmp	r3, #0
     7a4:	da00      	bge.n	7a8 <SDMMC_UNSTUFF_BITS+0x8c>
     7a6:	3307      	adds	r3, #7
     7a8:	10db      	asrs	r3, r3, #3
     7aa:	3b03      	subs	r3, #3
     7ac:	68fa      	ldr	r2, [r7, #12]
     7ae:	4413      	add	r3, r2
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	461a      	mov	r2, r3
     7b4:	893b      	ldrh	r3, [r7, #8]
     7b6:	f003 0307 	and.w	r3, r3, #7
     7ba:	f1c3 0310 	rsb	r3, r3, #16
     7be:	fa02 f303 	lsl.w	r3, r2, r3
     7c2:	697a      	ldr	r2, [r7, #20]
     7c4:	4313      	orrs	r3, r2
     7c6:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     7c8:	893b      	ldrh	r3, [r7, #8]
     7ca:	f003 0207 	and.w	r2, r3, #7
     7ce:	79fb      	ldrb	r3, [r7, #7]
     7d0:	4413      	add	r3, r2
     7d2:	2b10      	cmp	r3, #16
     7d4:	dd16      	ble.n	804 <SDMMC_UNSTUFF_BITS+0xe8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     7d6:	897a      	ldrh	r2, [r7, #10]
     7d8:	893b      	ldrh	r3, [r7, #8]
     7da:	1ad3      	subs	r3, r2, r3
     7dc:	3307      	adds	r3, #7
     7de:	2b00      	cmp	r3, #0
     7e0:	da00      	bge.n	7e4 <SDMMC_UNSTUFF_BITS+0xc8>
     7e2:	3307      	adds	r3, #7
     7e4:	10db      	asrs	r3, r3, #3
     7e6:	3b03      	subs	r3, #3
     7e8:	68fa      	ldr	r2, [r7, #12]
     7ea:	4413      	add	r3, r2
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	461a      	mov	r2, r3
     7f0:	893b      	ldrh	r3, [r7, #8]
     7f2:	f003 0307 	and.w	r3, r3, #7
     7f6:	f1c3 0310 	rsb	r3, r3, #16
     7fa:	fa02 f303 	lsl.w	r3, r2, r3
     7fe:	697a      	ldr	r2, [r7, #20]
     800:	4313      	orrs	r3, r2
     802:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
     804:	79fb      	ldrb	r3, [r7, #7]
     806:	2201      	movs	r2, #1
     808:	fa02 f303 	lsl.w	r3, r2, r3
     80c:	3b01      	subs	r3, #1
     80e:	697a      	ldr	r2, [r7, #20]
     810:	4013      	ands	r3, r2
     812:	617b      	str	r3, [r7, #20]
	return value;
     814:	697b      	ldr	r3, [r7, #20]
}
     816:	4618      	mov	r0, r3
     818:	371c      	adds	r7, #28
     81a:	46bd      	mov	sp, r7
     81c:	f85d 7b04 	ldr.w	r7, [sp], #4
     820:	4770      	bx	lr
     822:	bf00      	nop

00000824 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
     824:	b480      	push	{r7}
     826:	b083      	sub	sp, #12
     828:	af00      	add	r7, sp, #0
     82a:	4603      	mov	r3, r0
     82c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
     82e:	79fb      	ldrb	r3, [r7, #7]
     830:	2b0d      	cmp	r3, #13
     832:	d82b      	bhi.n	88c <dfll_priv_get_source_hz+0x68>
     834:	a201      	add	r2, pc, #4	; (adr r2, 83c <dfll_priv_get_source_hz+0x18>)
     836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     83a:	bf00      	nop
     83c:	00000875 	.word	0x00000875
     840:	00000879 	.word	0x00000879
     844:	0000088d 	.word	0x0000088d
     848:	0000087f 	.word	0x0000087f
     84c:	00000883 	.word	0x00000883
     850:	0000088d 	.word	0x0000088d
     854:	0000088d 	.word	0x0000088d
     858:	0000088d 	.word	0x0000088d
     85c:	0000088d 	.word	0x0000088d
     860:	0000088d 	.word	0x0000088d
     864:	0000088d 	.word	0x0000088d
     868:	0000088d 	.word	0x0000088d
     86c:	0000088d 	.word	0x0000088d
     870:	00000887 	.word	0x00000887
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
     874:	4b09      	ldr	r3, [pc, #36]	; (89c <dfll_priv_get_source_hz+0x78>)
     876:	e00a      	b.n	88e <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
     878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     87c:	e007      	b.n	88e <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
     87e:	4b08      	ldr	r3, [pc, #32]	; (8a0 <dfll_priv_get_source_hz+0x7c>)
     880:	e005      	b.n	88e <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
     882:	4b08      	ldr	r3, [pc, #32]	; (8a4 <dfll_priv_get_source_hz+0x80>)
     884:	e003      	b.n	88e <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
     886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     88a:	e000      	b.n	88e <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
     88c:	2300      	movs	r3, #0
	}
}
     88e:	4618      	mov	r0, r3
     890:	370c      	adds	r7, #12
     892:	46bd      	mov	sp, r7
     894:	f85d 7b04 	ldr.w	r7, [sp], #4
     898:	4770      	bx	lr
     89a:	bf00      	nop
     89c:	0001c138 	.word	0x0001c138
     8a0:	00b71b00 	.word	0x00b71b00
     8a4:	04c4b400 	.word	0x04c4b400

000008a8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
     8ac:	2001      	movs	r0, #1
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <sysclk_get_main_hz+0x18>)
     8b0:	4798      	blx	r3
     8b2:	4603      	mov	r3, r0
     8b4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
     8b8:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
     8bc:	4618      	mov	r0, r3
     8be:	bd80      	pop	{r7, pc}
     8c0:	00000825 	.word	0x00000825

000008c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
     8c4:	b580      	push	{r7, lr}
     8c6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
     8c8:	4b02      	ldr	r3, [pc, #8]	; (8d4 <sysclk_get_cpu_hz+0x10>)
     8ca:	4798      	blx	r3
     8cc:	4603      	mov	r3, r0
}
     8ce:	4618      	mov	r0, r3
     8d0:	bd80      	pop	{r7, pc}
     8d2:	bf00      	nop
     8d4:	000008a9 	.word	0x000008a9

000008d8 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     8d8:	b480      	push	{r7}
     8da:	b089      	sub	sp, #36	; 0x24
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	61fb      	str	r3, [r7, #28]
     8e4:	69fb      	ldr	r3, [r7, #28]
     8e6:	61bb      	str	r3, [r7, #24]
     8e8:	69bb      	ldr	r3, [r7, #24]
     8ea:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     8ec:	697b      	ldr	r3, [r7, #20]
     8ee:	095b      	lsrs	r3, r3, #5
     8f0:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     8f2:	693b      	ldr	r3, [r7, #16]
     8f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     8f8:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     8fc:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     8fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     900:	69fb      	ldr	r3, [r7, #28]
     902:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     904:	68fb      	ldr	r3, [r7, #12]
     906:	f003 031f 	and.w	r3, r3, #31
     90a:	2101      	movs	r1, #1
     90c:	fa01 f303 	lsl.w	r3, r1, r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     910:	4013      	ands	r3, r2
     912:	2b00      	cmp	r3, #0
     914:	bf0c      	ite	eq
     916:	2300      	moveq	r3, #0
     918:	2301      	movne	r3, #1
     91a:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
     91c:	4618      	mov	r0, r3
     91e:	3724      	adds	r7, #36	; 0x24
     920:	46bd      	mov	sp, r7
     922:	f85d 7b04 	ldr.w	r7, [sp], #4
     926:	4770      	bx	lr

00000928 <SD_MMC_START_TIMEOUT>:
#  ifdef FREERTOS_USED
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
     928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
     92c:	af00      	add	r7, sp, #0
	if (!SysTick->CTRL) {
     92e:	4b2b      	ldr	r3, [pc, #172]	; (9dc <SD_MMC_START_TIMEOUT+0xb4>)
     930:	681b      	ldr	r3, [r3, #0]
     932:	2b00      	cmp	r3, #0
     934:	d113      	bne.n	95e <SD_MMC_START_TIMEOUT+0x36>
		sd_mmc_sam_systick_used = true;
     936:	4b2a      	ldr	r3, [pc, #168]	; (9e0 <SD_MMC_START_TIMEOUT+0xb8>)
     938:	2201      	movs	r2, #1
     93a:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
     93c:	4c27      	ldr	r4, [pc, #156]	; (9dc <SD_MMC_START_TIMEOUT+0xb4>)
     93e:	4b29      	ldr	r3, [pc, #164]	; (9e4 <SD_MMC_START_TIMEOUT+0xbc>)
     940:	4798      	blx	r3
     942:	4602      	mov	r2, r0
     944:	4b28      	ldr	r3, [pc, #160]	; (9e8 <SD_MMC_START_TIMEOUT+0xc0>)
     946:	fba3 1302 	umull	r1, r3, r3, r2
     94a:	0a5b      	lsrs	r3, r3, #9
				* SD_MMC_DEBOUNCE_TIMEOUT;
     94c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     950:	fb02 f303 	mul.w	r3, r2, r3

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
     954:	6063      	str	r3, [r4, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     956:	4b21      	ldr	r3, [pc, #132]	; (9dc <SD_MMC_START_TIMEOUT+0xb4>)
     958:	2201      	movs	r2, #1
     95a:	601a      	str	r2, [r3, #0]
     95c:	e03b      	b.n	9d6 <SD_MMC_START_TIMEOUT+0xae>
	} else {
		sd_mmc_sam_systick_used = false;
     95e:	4b20      	ldr	r3, [pc, #128]	; (9e0 <SD_MMC_START_TIMEOUT+0xb8>)
     960:	2200      	movs	r2, #0
     962:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     964:	4b1f      	ldr	r3, [pc, #124]	; (9e4 <SD_MMC_START_TIMEOUT+0xbc>)
     966:	4798      	blx	r3
     968:	4603      	mov	r3, r0
     96a:	4618      	mov	r0, r3
     96c:	f04f 0100 	mov.w	r1, #0
     970:	4602      	mov	r2, r0
     972:	460b      	mov	r3, r1
     974:	ea4f 0b83 	mov.w	fp, r3, lsl #2
     978:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
     97c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
     980:	4652      	mov	r2, sl
     982:	465b      	mov	r3, fp
     984:	015d      	lsls	r5, r3, #5
     986:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
     98a:	0154      	lsls	r4, r2, #5
     98c:	1aa4      	subs	r4, r4, r2
     98e:	eb65 0503 	sbc.w	r5, r5, r3
     992:	1824      	adds	r4, r4, r0
     994:	eb45 0501 	adc.w	r5, r5, r1
     998:	ea4f 09c5 	mov.w	r9, r5, lsl #3
     99c:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
     9a0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
     9a4:	4644      	mov	r4, r8
     9a6:	464d      	mov	r5, r9
     9a8:	4620      	mov	r0, r4
     9aa:	4629      	mov	r1, r5
     9ac:	f243 62af 	movw	r2, #13999	; 0x36af
     9b0:	f04f 0300 	mov.w	r3, #0
     9b4:	1812      	adds	r2, r2, r0
     9b6:	eb43 0301 	adc.w	r3, r3, r1
     9ba:	4c0c      	ldr	r4, [pc, #48]	; (9ec <SD_MMC_START_TIMEOUT+0xc4>)
     9bc:	4610      	mov	r0, r2
     9be:	4619      	mov	r1, r3
     9c0:	f243 62b0 	movw	r2, #14000	; 0x36b0
     9c4:	f04f 0300 	mov.w	r3, #0
     9c8:	47a0      	blx	r4
     9ca:	4602      	mov	r2, r0
     9cc:	460b      	mov	r3, r1
     9ce:	4613      	mov	r3, r2
     9d0:	4618      	mov	r0, r3
     9d2:	4b07      	ldr	r3, [pc, #28]	; (9f0 <SD_MMC_START_TIMEOUT+0xc8>)
     9d4:	4798      	blx	r3
#endif
	}
}
     9d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
     9da:	bf00      	nop
     9dc:	e000e010 	.word	0xe000e010
     9e0:	20000da8 	.word	0x20000da8
     9e4:	000008c5 	.word	0x000008c5
     9e8:	10624dd3 	.word	0x10624dd3
     9ec:	0000d0c9 	.word	0x0000d0c9
     9f0:	20000001 	.word	0x20000001

000009f4 <SD_MMC_IS_TIMEOUT>:

static inline bool SD_MMC_IS_TIMEOUT(void)
{
     9f4:	b480      	push	{r7}
     9f6:	af00      	add	r7, sp, #0
	if (!sd_mmc_sam_systick_used) {
     9f8:	4b0c      	ldr	r3, [pc, #48]	; (a2c <SD_MMC_IS_TIMEOUT+0x38>)
     9fa:	781b      	ldrb	r3, [r3, #0]
     9fc:	f083 0301 	eor.w	r3, r3, #1
     a00:	b2db      	uxtb	r3, r3
     a02:	2b00      	cmp	r3, #0
     a04:	d001      	beq.n	a0a <SD_MMC_IS_TIMEOUT+0x16>
#ifdef FREERTOS_USED
		portTickType xTicksToWait =
				SD_MMC_DEBOUNCE_TIMEOUT / portTICK_RATE_MS;
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
     a06:	2301      	movs	r3, #1
     a08:	e00b      	b.n	a22 <SD_MMC_IS_TIMEOUT+0x2e>
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a0a:	4b09      	ldr	r3, [pc, #36]	; (a30 <SD_MMC_IS_TIMEOUT+0x3c>)
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     a12:	2b00      	cmp	r3, #0
     a14:	d004      	beq.n	a20 <SD_MMC_IS_TIMEOUT+0x2c>
		SysTick->CTRL = 0;
     a16:	4b06      	ldr	r3, [pc, #24]	; (a30 <SD_MMC_IS_TIMEOUT+0x3c>)
     a18:	2200      	movs	r2, #0
     a1a:	601a      	str	r2, [r3, #0]
		return true;
     a1c:	2301      	movs	r3, #1
     a1e:	e000      	b.n	a22 <SD_MMC_IS_TIMEOUT+0x2e>
	}
	return false;
     a20:	2300      	movs	r3, #0
}
     a22:	4618      	mov	r0, r3
     a24:	46bd      	mov	sp, r7
     a26:	f85d 7b04 	ldr.w	r7, [sp], #4
     a2a:	4770      	bx	lr
     a2c:	20000da8 	.word	0x20000da8
     a30:	e000e010 	.word	0xe000e010

00000a34 <SD_MMC_STOP_TIMEOUT>:

static inline void SD_MMC_STOP_TIMEOUT(void)
{
     a34:	b480      	push	{r7}
     a36:	af00      	add	r7, sp, #0
	if (sd_mmc_sam_systick_used) {
     a38:	4b05      	ldr	r3, [pc, #20]	; (a50 <SD_MMC_STOP_TIMEOUT+0x1c>)
     a3a:	781b      	ldrb	r3, [r3, #0]
     a3c:	2b00      	cmp	r3, #0
     a3e:	d002      	beq.n	a46 <SD_MMC_STOP_TIMEOUT+0x12>
		SysTick->CTRL = 0;
     a40:	4b04      	ldr	r3, [pc, #16]	; (a54 <SD_MMC_STOP_TIMEOUT+0x20>)
     a42:	2200      	movs	r2, #0
     a44:	601a      	str	r2, [r3, #0]
	}
}
     a46:	46bd      	mov	sp, r7
     a48:	f85d 7b04 	ldr.w	r7, [sp], #4
     a4c:	4770      	bx	lr
     a4e:	bf00      	nop
     a50:	20000da8 	.word	0x20000da8
     a54:	e000e010 	.word	0xe000e010

00000a58 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
     a58:	b580      	push	{r7, lr}
     a5a:	b082      	sub	sp, #8
     a5c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     a5e:	f641 33ee 	movw	r3, #7150	; 0x1bee
     a62:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a64:	f241 1001 	movw	r0, #4353	; 0x1101
     a68:	2100      	movs	r1, #0
     a6a:	4b1f      	ldr	r3, [pc, #124]	; (ae8 <mmc_spi_op_cond+0x90>)
     a6c:	4798      	blx	r3
     a6e:	4603      	mov	r3, r0
     a70:	f083 0301 	eor.w	r3, r3, #1
     a74:	b2db      	uxtb	r3, r3
     a76:	2b00      	cmp	r3, #0
     a78:	d001      	beq.n	a7e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
     a7a:	2300      	movs	r3, #0
     a7c:	e030      	b.n	ae0 <mmc_spi_op_cond+0x88>
		}
		// Check busy flag
		resp = driver_get_response();
     a7e:	4b1b      	ldr	r3, [pc, #108]	; (aec <mmc_spi_op_cond+0x94>)
     a80:	4798      	blx	r3
     a82:	6038      	str	r0, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	f003 0301 	and.w	r3, r3, #1
     a8a:	2b00      	cmp	r3, #0
     a8c:	d10c      	bne.n	aa8 <mmc_spi_op_cond+0x50>
			break;
     a8e:	bf00      	nop
			return false;
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     a90:	f240 503a 	movw	r0, #1338	; 0x53a
     a94:	2100      	movs	r1, #0
     a96:	4b14      	ldr	r3, [pc, #80]	; (ae8 <mmc_spi_op_cond+0x90>)
     a98:	4798      	blx	r3
     a9a:	4603      	mov	r3, r0
     a9c:	f083 0301 	eor.w	r3, r3, #1
     aa0:	b2db      	uxtb	r3, r3
     aa2:	2b00      	cmp	r3, #0
     aa4:	d00a      	beq.n	abc <mmc_spi_op_cond+0x64>
     aa6:	e007      	b.n	ab8 <mmc_spi_op_cond+0x60>
		// Check busy flag
		resp = driver_get_response();
		if (!(resp & R1_SPI_IDLE)) {
			break;
		}
		if (retry-- == 0) {
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	1e5a      	subs	r2, r3, #1
     aac:	607a      	str	r2, [r7, #4]
     aae:	2b00      	cmp	r3, #0
     ab0:	d101      	bne.n	ab6 <mmc_spi_op_cond+0x5e>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
     ab2:	2300      	movs	r3, #0
     ab4:	e014      	b.n	ae0 <mmc_spi_op_cond+0x88>
		}
	} while (1);
     ab6:	e7d5      	b.n	a64 <mmc_spi_op_cond+0xc>

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     ab8:	2300      	movs	r3, #0
     aba:	e011      	b.n	ae0 <mmc_spi_op_cond+0x88>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <mmc_spi_op_cond+0x94>)
     abe:	4798      	blx	r3
     ac0:	4603      	mov	r3, r0
     ac2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
     ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
     aca:	d108      	bne.n	ade <mmc_spi_op_cond+0x86>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
     acc:	4b08      	ldr	r3, [pc, #32]	; (af0 <mmc_spi_op_cond+0x98>)
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	4a07      	ldr	r2, [pc, #28]	; (af0 <mmc_spi_op_cond+0x98>)
     ad2:	6812      	ldr	r2, [r2, #0]
     ad4:	7bd2      	ldrb	r2, [r2, #15]
     ad6:	f042 0208 	orr.w	r2, r2, #8
     ada:	b2d2      	uxtb	r2, r2
     adc:	73da      	strb	r2, [r3, #15]
	}
	return true;
     ade:	2301      	movs	r3, #1
}
     ae0:	4618      	mov	r0, r3
     ae2:	3708      	adds	r7, #8
     ae4:	46bd      	mov	sp, r7
     ae6:	bd80      	pop	{r7, pc}
     ae8:	00007755 	.word	0x00007755
     aec:	00007929 	.word	0x00007929
     af0:	20000da0 	.word	0x20000da0

00000af4 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
     af4:	b580      	push	{r7, lr}
     af6:	b086      	sub	sp, #24
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     afe:	f641 33ee 	movw	r3, #7150	; 0x1bee
     b02:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b04:	f241 1037 	movw	r0, #4407	; 0x1137
     b08:	2100      	movs	r1, #0
     b0a:	4b2a      	ldr	r3, [pc, #168]	; (bb4 <sd_spi_op_cond+0xc0>)
     b0c:	4798      	blx	r3
     b0e:	4603      	mov	r3, r0
     b10:	f083 0301 	eor.w	r3, r3, #1
     b14:	b2db      	uxtb	r3, r3
     b16:	2b00      	cmp	r3, #0
     b18:	d001      	beq.n	b1e <sd_spi_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
     b1a:	2300      	movs	r3, #0
     b1c:	e045      	b.n	baa <sd_spi_op_cond+0xb6>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
     b1e:	2300      	movs	r3, #0
     b20:	617b      	str	r3, [r7, #20]
		if (v2) {
     b22:	79fb      	ldrb	r3, [r7, #7]
     b24:	2b00      	cmp	r3, #0
     b26:	d003      	beq.n	b30 <sd_spi_op_cond+0x3c>
			arg |= SD_ACMD41_HCS;
     b28:	697b      	ldr	r3, [r7, #20]
     b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     b2e:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b30:	f241 1029 	movw	r0, #4393	; 0x1129
     b34:	6979      	ldr	r1, [r7, #20]
     b36:	4b1f      	ldr	r3, [pc, #124]	; (bb4 <sd_spi_op_cond+0xc0>)
     b38:	4798      	blx	r3
     b3a:	4603      	mov	r3, r0
     b3c:	f083 0301 	eor.w	r3, r3, #1
     b40:	b2db      	uxtb	r3, r3
     b42:	2b00      	cmp	r3, #0
     b44:	d001      	beq.n	b4a <sd_spi_op_cond+0x56>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
     b46:	2300      	movs	r3, #0
     b48:	e02f      	b.n	baa <sd_spi_op_cond+0xb6>
		}
		resp = driver_get_response();
     b4a:	4b1b      	ldr	r3, [pc, #108]	; (bb8 <sd_spi_op_cond+0xc4>)
     b4c:	4798      	blx	r3
     b4e:	60f8      	str	r0, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     b50:	68fb      	ldr	r3, [r7, #12]
     b52:	f003 0301 	and.w	r3, r3, #1
     b56:	2b00      	cmp	r3, #0
     b58:	d10c      	bne.n	b74 <sd_spi_op_cond+0x80>
			// Card is ready
			break;
     b5a:	bf00      	nop
			return false;
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     b5c:	f240 503a 	movw	r0, #1338	; 0x53a
     b60:	2100      	movs	r1, #0
     b62:	4b14      	ldr	r3, [pc, #80]	; (bb4 <sd_spi_op_cond+0xc0>)
     b64:	4798      	blx	r3
     b66:	4603      	mov	r3, r0
     b68:	f083 0301 	eor.w	r3, r3, #1
     b6c:	b2db      	uxtb	r3, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	d00a      	beq.n	b88 <sd_spi_op_cond+0x94>
     b72:	e007      	b.n	b84 <sd_spi_op_cond+0x90>
		resp = driver_get_response();
		if (!(resp & R1_SPI_IDLE)) {
			// Card is ready
			break;
		}
		if (retry-- == 0) {
     b74:	693b      	ldr	r3, [r7, #16]
     b76:	1e5a      	subs	r2, r3, #1
     b78:	613a      	str	r2, [r7, #16]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d101      	bne.n	b82 <sd_spi_op_cond+0x8e>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
     b7e:	2300      	movs	r3, #0
     b80:	e013      	b.n	baa <sd_spi_op_cond+0xb6>
		}
	} while (1);
     b82:	e7bf      	b.n	b04 <sd_spi_op_cond+0x10>

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     b84:	2300      	movs	r3, #0
     b86:	e010      	b.n	baa <sd_spi_op_cond+0xb6>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
     b88:	4b0b      	ldr	r3, [pc, #44]	; (bb8 <sd_spi_op_cond+0xc4>)
     b8a:	4798      	blx	r3
     b8c:	4603      	mov	r3, r0
     b8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
     b92:	2b00      	cmp	r3, #0
     b94:	d008      	beq.n	ba8 <sd_spi_op_cond+0xb4>
		sd_mmc_card->type |= CARD_TYPE_HC;
     b96:	4b09      	ldr	r3, [pc, #36]	; (bbc <sd_spi_op_cond+0xc8>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	4a08      	ldr	r2, [pc, #32]	; (bbc <sd_spi_op_cond+0xc8>)
     b9c:	6812      	ldr	r2, [r2, #0]
     b9e:	7bd2      	ldrb	r2, [r2, #15]
     ba0:	f042 0208 	orr.w	r2, r2, #8
     ba4:	b2d2      	uxtb	r2, r2
     ba6:	73da      	strb	r2, [r3, #15]
	}
	return true;
     ba8:	2301      	movs	r3, #1
}
     baa:	4618      	mov	r0, r3
     bac:	3718      	adds	r7, #24
     bae:	46bd      	mov	sp, r7
     bb0:	bd80      	pop	{r7, pc}
     bb2:	bf00      	nop
     bb4:	00007755 	.word	0x00007755
     bb8:	00007929 	.word	0x00007929
     bbc:	20000da0 	.word	0x20000da0

00000bc0 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
     bc0:	b480      	push	{r7}
     bc2:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
     bc4:	2301      	movs	r3, #1
}
     bc6:	4618      	mov	r0, r3
     bc8:	46bd      	mov	sp, r7
     bca:	f85d 7b04 	ldr.w	r7, [sp], #4
     bce:	4770      	bx	lr

00000bd0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
     bd0:	b580      	push	{r7, lr}
     bd2:	b084      	sub	sp, #16
     bd4:	af00      	add	r7, sp, #0
     bd6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	2200      	movs	r2, #0
     bdc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     bde:	f245 5008 	movw	r0, #21768	; 0x5508
     be2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
     be6:	4b11      	ldr	r3, [pc, #68]	; (c2c <sd_cmd8+0x5c>)
     be8:	4798      	blx	r3
     bea:	4603      	mov	r3, r0
     bec:	f083 0301 	eor.w	r3, r3, #1
     bf0:	b2db      	uxtb	r3, r3
     bf2:	2b00      	cmp	r3, #0
     bf4:	d001      	beq.n	bfa <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
     bf6:	2301      	movs	r3, #1
     bf8:	e014      	b.n	c24 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
     bfa:	4b0d      	ldr	r3, [pc, #52]	; (c30 <sd_cmd8+0x60>)
     bfc:	4798      	blx	r3
     bfe:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
     c00:	68fb      	ldr	r3, [r7, #12]
     c02:	f1b3 3fff 	cmp.w	r3, #4294967295
     c06:	d101      	bne.n	c0c <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
     c08:	2301      	movs	r3, #1
     c0a:	e00b      	b.n	c24 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     c12:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
     c16:	d001      	beq.n	c1c <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
     c18:	2300      	movs	r3, #0
     c1a:	e003      	b.n	c24 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	2201      	movs	r2, #1
     c20:	701a      	strb	r2, [r3, #0]
	return true;
     c22:	2301      	movs	r3, #1
}
     c24:	4618      	mov	r0, r3
     c26:	3710      	adds	r7, #16
     c28:	46bd      	mov	sp, r7
     c2a:	bd80      	pop	{r7, pc}
     c2c:	00007755 	.word	0x00007755
     c30:	00007929 	.word	0x00007929

00000c34 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
     c34:	b590      	push	{r4, r7, lr}
     c36:	b089      	sub	sp, #36	; 0x24
     c38:	af02      	add	r7, sp, #8
     c3a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     c3c:	2300      	movs	r3, #0
     c3e:	9300      	str	r3, [sp, #0]
     c40:	4836      	ldr	r0, [pc, #216]	; (d1c <mmc_cmd8+0xe8>)
     c42:	2100      	movs	r1, #0
     c44:	f44f 7200 	mov.w	r2, #512	; 0x200
     c48:	2301      	movs	r3, #1
     c4a:	4c35      	ldr	r4, [pc, #212]	; (d20 <mmc_cmd8+0xec>)
     c4c:	47a0      	blx	r4
     c4e:	4603      	mov	r3, r0
     c50:	f083 0301 	eor.w	r3, r3, #1
     c54:	b2db      	uxtb	r3, r3
     c56:	2b00      	cmp	r3, #0
     c58:	d001      	beq.n	c5e <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
     c5a:	2300      	movs	r3, #0
     c5c:	e059      	b.n	d12 <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c5e:	2300      	movs	r3, #0
     c60:	82fb      	strh	r3, [r7, #22]
     c62:	e00f      	b.n	c84 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
     c64:	f107 0310 	add.w	r3, r7, #16
     c68:	4618      	mov	r0, r3
     c6a:	4b2e      	ldr	r3, [pc, #184]	; (d24 <mmc_cmd8+0xf0>)
     c6c:	4798      	blx	r3
     c6e:	4603      	mov	r3, r0
     c70:	f083 0301 	eor.w	r3, r3, #1
     c74:	b2db      	uxtb	r3, r3
     c76:	2b00      	cmp	r3, #0
     c78:	d001      	beq.n	c7e <mmc_cmd8+0x4a>
			return false;
     c7a:	2300      	movs	r3, #0
     c7c:	e049      	b.n	d12 <mmc_cmd8+0xde>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c7e:	8afb      	ldrh	r3, [r7, #22]
     c80:	3301      	adds	r3, #1
     c82:	82fb      	strh	r3, [r7, #22]
     c84:	8afb      	ldrh	r3, [r7, #22]
     c86:	2b31      	cmp	r3, #49	; 0x31
     c88:	d9ec      	bls.n	c64 <mmc_cmd8+0x30>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
     c8a:	693b      	ldr	r3, [r7, #16]
     c8c:	b2db      	uxtb	r3, r3
     c8e:	f003 0302 	and.w	r3, r3, #2
     c92:	b2da      	uxtb	r2, r3
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	701a      	strb	r2, [r3, #0]
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     c98:	4b23      	ldr	r3, [pc, #140]	; (d28 <mmc_cmd8+0xf4>)
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	3312      	adds	r3, #18
     c9e:	4618      	mov	r0, r3
     ca0:	2180      	movs	r1, #128	; 0x80
     ca2:	223e      	movs	r2, #62	; 0x3e
     ca4:	230c      	movs	r3, #12
     ca6:	4c21      	ldr	r4, [pc, #132]	; (d2c <mmc_cmd8+0xf8>)
     ca8:	47a0      	blx	r4
     caa:	4602      	mov	r2, r0
     cac:	f640 73ff 	movw	r3, #4095	; 0xfff
     cb0:	429a      	cmp	r2, r3
     cb2:	d119      	bne.n	ce8 <mmc_cmd8+0xb4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     cb4:	e00f      	b.n	cd6 <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
     cb6:	f107 030c 	add.w	r3, r7, #12
     cba:	4618      	mov	r0, r3
     cbc:	4b19      	ldr	r3, [pc, #100]	; (d24 <mmc_cmd8+0xf0>)
     cbe:	4798      	blx	r3
     cc0:	4603      	mov	r3, r0
     cc2:	f083 0301 	eor.w	r3, r3, #1
     cc6:	b2db      	uxtb	r3, r3
     cc8:	2b00      	cmp	r3, #0
     cca:	d001      	beq.n	cd0 <mmc_cmd8+0x9c>
				return false;
     ccc:	2300      	movs	r3, #0
     cce:	e020      	b.n	d12 <mmc_cmd8+0xde>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     cd0:	8afb      	ldrh	r3, [r7, #22]
     cd2:	3301      	adds	r3, #1
     cd4:	82fb      	strh	r3, [r7, #22]
     cd6:	8afb      	ldrh	r3, [r7, #22]
     cd8:	2b35      	cmp	r3, #53	; 0x35
     cda:	d9ec      	bls.n	cb6 <mmc_cmd8+0x82>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
     cdc:	4b12      	ldr	r3, [pc, #72]	; (d28 <mmc_cmd8+0xf4>)
     cde:	681b      	ldr	r3, [r3, #0]
     ce0:	68fa      	ldr	r2, [r7, #12]
     ce2:	0852      	lsrs	r2, r2, #1
     ce4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     ce6:	e010      	b.n	d0a <mmc_cmd8+0xd6>
     ce8:	e00f      	b.n	d0a <mmc_cmd8+0xd6>
		if (!driver_read_word(&sec_count)) {
     cea:	f107 030c 	add.w	r3, r7, #12
     cee:	4618      	mov	r0, r3
     cf0:	4b0c      	ldr	r3, [pc, #48]	; (d24 <mmc_cmd8+0xf0>)
     cf2:	4798      	blx	r3
     cf4:	4603      	mov	r3, r0
     cf6:	f083 0301 	eor.w	r3, r3, #1
     cfa:	b2db      	uxtb	r3, r3
     cfc:	2b00      	cmp	r3, #0
     cfe:	d001      	beq.n	d04 <mmc_cmd8+0xd0>
			return false;
     d00:	2300      	movs	r3, #0
     d02:	e006      	b.n	d12 <mmc_cmd8+0xde>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     d04:	8afb      	ldrh	r3, [r7, #22]
     d06:	3301      	adds	r3, #1
     d08:	82fb      	strh	r3, [r7, #22]
     d0a:	8afb      	ldrh	r3, [r7, #22]
     d0c:	2b7f      	cmp	r3, #127	; 0x7f
     d0e:	d9ec      	bls.n	cea <mmc_cmd8+0xb6>
		if (!driver_read_word(&sec_count)) {
			return false;
		}
	}
	return true;
     d10:	2301      	movs	r3, #1
}
     d12:	4618      	mov	r0, r3
     d14:	371c      	adds	r7, #28
     d16:	46bd      	mov	sp, r7
     d18:	bd90      	pop	{r4, r7, pc}
     d1a:	bf00      	nop
     d1c:	00081108 	.word	0x00081108
     d20:	0000777d 	.word	0x0000777d
     d24:	00007941 	.word	0x00007941
     d28:	20000da0 	.word	0x20000da0
     d2c:	0000071d 	.word	0x0000071d

00000d30 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
     d30:	b590      	push	{r4, r7, lr}
     d32:	b083      	sub	sp, #12
     d34:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     d36:	4b15      	ldr	r3, [pc, #84]	; (d8c <sd_mmc_cmd9_spi+0x5c>)
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	899b      	ldrh	r3, [r3, #12]
     d3c:	041b      	lsls	r3, r3, #16
     d3e:	2201      	movs	r2, #1
     d40:	9200      	str	r2, [sp, #0]
     d42:	4813      	ldr	r0, [pc, #76]	; (d90 <sd_mmc_cmd9_spi+0x60>)
     d44:	4619      	mov	r1, r3
     d46:	2210      	movs	r2, #16
     d48:	2301      	movs	r3, #1
     d4a:	4c12      	ldr	r4, [pc, #72]	; (d94 <sd_mmc_cmd9_spi+0x64>)
     d4c:	47a0      	blx	r4
     d4e:	4603      	mov	r3, r0
     d50:	f083 0301 	eor.w	r3, r3, #1
     d54:	b2db      	uxtb	r3, r3
     d56:	2b00      	cmp	r3, #0
     d58:	d001      	beq.n	d5e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
     d5a:	2300      	movs	r3, #0
     d5c:	e011      	b.n	d82 <sd_mmc_cmd9_spi+0x52>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     d5e:	4b0b      	ldr	r3, [pc, #44]	; (d8c <sd_mmc_cmd9_spi+0x5c>)
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	3312      	adds	r3, #18
     d64:	4618      	mov	r0, r3
     d66:	2101      	movs	r1, #1
     d68:	4b0b      	ldr	r3, [pc, #44]	; (d98 <sd_mmc_cmd9_spi+0x68>)
     d6a:	4798      	blx	r3
     d6c:	4603      	mov	r3, r0
     d6e:	f083 0301 	eor.w	r3, r3, #1
     d72:	b2db      	uxtb	r3, r3
     d74:	2b00      	cmp	r3, #0
     d76:	d001      	beq.n	d7c <sd_mmc_cmd9_spi+0x4c>
		return false;
     d78:	2300      	movs	r3, #0
     d7a:	e002      	b.n	d82 <sd_mmc_cmd9_spi+0x52>
	}
	return driver_wait_end_of_read_blocks();
     d7c:	4b07      	ldr	r3, [pc, #28]	; (d9c <sd_mmc_cmd9_spi+0x6c>)
     d7e:	4798      	blx	r3
     d80:	4603      	mov	r3, r0
}
     d82:	4618      	mov	r0, r3
     d84:	3704      	adds	r7, #4
     d86:	46bd      	mov	sp, r7
     d88:	bd90      	pop	{r4, r7, pc}
     d8a:	bf00      	nop
     d8c:	20000da0 	.word	0x20000da0
     d90:	00081109 	.word	0x00081109
     d94:	0000777d 	.word	0x0000777d
     d98:	000079d5 	.word	0x000079d5
     d9c:	00007a65 	.word	0x00007a65

00000da0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
     da0:	b5b0      	push	{r4, r5, r7, lr}
     da2:	b084      	sub	sp, #16
     da4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     da6:	4b48      	ldr	r3, [pc, #288]	; (ec8 <mmc_decode_csd+0x128>)
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	3312      	adds	r3, #18
     dac:	4618      	mov	r0, r3
     dae:	2180      	movs	r1, #128	; 0x80
     db0:	227a      	movs	r2, #122	; 0x7a
     db2:	2304      	movs	r3, #4
     db4:	4c45      	ldr	r4, [pc, #276]	; (ecc <mmc_decode_csd+0x12c>)
     db6:	47a0      	blx	r4
     db8:	4603      	mov	r3, r0
     dba:	3b01      	subs	r3, #1
     dbc:	2b03      	cmp	r3, #3
     dbe:	d80b      	bhi.n	dd8 <mmc_decode_csd+0x38>
     dc0:	a201      	add	r2, pc, #4	; (adr r2, dc8 <mmc_decode_csd+0x28>)
     dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     dc6:	bf00      	nop
     dc8:	00000de3 	.word	0x00000de3
     dcc:	00000ded 	.word	0x00000ded
     dd0:	00000df7 	.word	0x00000df7
     dd4:	00000e01 	.word	0x00000e01
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     dd8:	4b3b      	ldr	r3, [pc, #236]	; (ec8 <mmc_decode_csd+0x128>)
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2212      	movs	r2, #18
     dde:	741a      	strb	r2, [r3, #16]
		break;
     de0:	e013      	b.n	e0a <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     de2:	4b39      	ldr	r3, [pc, #228]	; (ec8 <mmc_decode_csd+0x128>)
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	2214      	movs	r2, #20
     de8:	741a      	strb	r2, [r3, #16]
		break;
     dea:	e00e      	b.n	e0a <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     dec:	4b36      	ldr	r3, [pc, #216]	; (ec8 <mmc_decode_csd+0x128>)
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	2222      	movs	r2, #34	; 0x22
     df2:	741a      	strb	r2, [r3, #16]
		break;
     df4:	e009      	b.n	e0a <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
     df6:	4b34      	ldr	r3, [pc, #208]	; (ec8 <mmc_decode_csd+0x128>)
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	2230      	movs	r2, #48	; 0x30
     dfc:	741a      	strb	r2, [r3, #16]
		break;
     dfe:	e004      	b.n	e0a <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
     e00:	4b31      	ldr	r3, [pc, #196]	; (ec8 <mmc_decode_csd+0x128>)
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	2240      	movs	r2, #64	; 0x40
     e06:	741a      	strb	r2, [r3, #16]
		break;
     e08:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     e0a:	4b2f      	ldr	r3, [pc, #188]	; (ec8 <mmc_decode_csd+0x128>)
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	3312      	adds	r3, #18
     e10:	4618      	mov	r0, r3
     e12:	2180      	movs	r1, #128	; 0x80
     e14:	2260      	movs	r2, #96	; 0x60
     e16:	2308      	movs	r3, #8
     e18:	4c2c      	ldr	r4, [pc, #176]	; (ecc <mmc_decode_csd+0x12c>)
     e1a:	47a0      	blx	r4
     e1c:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	f003 0207 	and.w	r2, r3, #7
     e24:	4b2a      	ldr	r3, [pc, #168]	; (ed0 <mmc_decode_csd+0x130>)
     e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     e2a:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	08db      	lsrs	r3, r3, #3
     e30:	f003 020f 	and.w	r2, r3, #15
     e34:	4b27      	ldr	r3, [pc, #156]	; (ed4 <mmc_decode_csd+0x134>)
     e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     e3a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     e3c:	4b22      	ldr	r3, [pc, #136]	; (ec8 <mmc_decode_csd+0x128>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	68ba      	ldr	r2, [r7, #8]
     e42:	6879      	ldr	r1, [r7, #4]
     e44:	fb01 f202 	mul.w	r2, r1, r2
     e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     e4c:	fb01 f202 	mul.w	r2, r1, r2
     e50:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     e52:	4b1d      	ldr	r3, [pc, #116]	; (ec8 <mmc_decode_csd+0x128>)
     e54:	681b      	ldr	r3, [r3, #0]
     e56:	3312      	adds	r3, #18
     e58:	4618      	mov	r0, r3
     e5a:	2180      	movs	r1, #128	; 0x80
     e5c:	223e      	movs	r2, #62	; 0x3e
     e5e:	230c      	movs	r3, #12
     e60:	4c1a      	ldr	r4, [pc, #104]	; (ecc <mmc_decode_csd+0x12c>)
     e62:	47a0      	blx	r4
     e64:	4602      	mov	r2, r0
     e66:	f640 73ff 	movw	r3, #4095	; 0xfff
     e6a:	429a      	cmp	r2, r3
     e6c:	d029      	beq.n	ec2 <mmc_decode_csd+0x122>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     e6e:	4b16      	ldr	r3, [pc, #88]	; (ec8 <mmc_decode_csd+0x128>)
     e70:	681b      	ldr	r3, [r3, #0]
     e72:	3312      	adds	r3, #18
     e74:	4618      	mov	r0, r3
     e76:	2180      	movs	r1, #128	; 0x80
     e78:	223e      	movs	r2, #62	; 0x3e
     e7a:	230c      	movs	r3, #12
     e7c:	4c13      	ldr	r4, [pc, #76]	; (ecc <mmc_decode_csd+0x12c>)
     e7e:	47a0      	blx	r4
     e80:	4603      	mov	r3, r0
     e82:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     e84:	4b10      	ldr	r3, [pc, #64]	; (ec8 <mmc_decode_csd+0x128>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	3312      	adds	r3, #18
     e8a:	4618      	mov	r0, r3
     e8c:	2180      	movs	r1, #128	; 0x80
     e8e:	222f      	movs	r2, #47	; 0x2f
     e90:	2303      	movs	r3, #3
     e92:	4d0e      	ldr	r5, [pc, #56]	; (ecc <mmc_decode_csd+0x12c>)
     e94:	47a8      	blx	r5
     e96:	4603      	mov	r3, r0
     e98:	3302      	adds	r3, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     e9a:	fa04 f303 	lsl.w	r3, r4, r3
     e9e:	603b      	str	r3, [r7, #0]
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
     ea0:	4b09      	ldr	r3, [pc, #36]	; (ec8 <mmc_decode_csd+0x128>)
     ea2:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     ea4:	4b08      	ldr	r3, [pc, #32]	; (ec8 <mmc_decode_csd+0x128>)
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	3312      	adds	r3, #18
     eaa:	4618      	mov	r0, r3
     eac:	2180      	movs	r1, #128	; 0x80
     eae:	2250      	movs	r2, #80	; 0x50
     eb0:	2304      	movs	r3, #4
     eb2:	4d06      	ldr	r5, [pc, #24]	; (ecc <mmc_decode_csd+0x12c>)
     eb4:	47a8      	blx	r5
     eb6:	4603      	mov	r3, r0
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
     eb8:	683a      	ldr	r2, [r7, #0]
     eba:	fa02 f303 	lsl.w	r3, r2, r3
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     ebe:	0a9b      	lsrs	r3, r3, #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
     ec0:	6063      	str	r3, [r4, #4]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
	}
}
     ec2:	3710      	adds	r7, #16
     ec4:	46bd      	mov	sp, r7
     ec6:	bdb0      	pop	{r4, r5, r7, pc}
     ec8:	20000da0 	.word	0x20000da0
     ecc:	0000071d 	.word	0x0000071d
     ed0:	00012638 	.word	0x00012638
     ed4:	00012694 	.word	0x00012694

00000ed8 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
     ed8:	b5b0      	push	{r4, r5, r7, lr}
     eda:	b084      	sub	sp, #16
     edc:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     ede:	4b36      	ldr	r3, [pc, #216]	; (fb8 <sd_decode_csd+0xe0>)
     ee0:	681b      	ldr	r3, [r3, #0]
     ee2:	3312      	adds	r3, #18
     ee4:	4618      	mov	r0, r3
     ee6:	2180      	movs	r1, #128	; 0x80
     ee8:	2260      	movs	r2, #96	; 0x60
     eea:	2308      	movs	r3, #8
     eec:	4c33      	ldr	r4, [pc, #204]	; (fbc <sd_decode_csd+0xe4>)
     eee:	47a0      	blx	r4
     ef0:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     ef2:	68fb      	ldr	r3, [r7, #12]
     ef4:	f003 0207 	and.w	r2, r3, #7
     ef8:	4b31      	ldr	r3, [pc, #196]	; (fc0 <sd_decode_csd+0xe8>)
     efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     efe:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     f00:	68fb      	ldr	r3, [r7, #12]
     f02:	08db      	lsrs	r3, r3, #3
     f04:	f003 020f 	and.w	r2, r3, #15
     f08:	4b2e      	ldr	r3, [pc, #184]	; (fc4 <sd_decode_csd+0xec>)
     f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     f0e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     f10:	4b29      	ldr	r3, [pc, #164]	; (fb8 <sd_decode_csd+0xe0>)
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	68ba      	ldr	r2, [r7, #8]
     f16:	6879      	ldr	r1, [r7, #4]
     f18:	fb01 f202 	mul.w	r2, r1, r2
     f1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     f20:	fb01 f202 	mul.w	r2, r1, r2
     f24:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     f26:	4b24      	ldr	r3, [pc, #144]	; (fb8 <sd_decode_csd+0xe0>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	3312      	adds	r3, #18
     f2c:	4618      	mov	r0, r3
     f2e:	2180      	movs	r1, #128	; 0x80
     f30:	227e      	movs	r2, #126	; 0x7e
     f32:	2302      	movs	r3, #2
     f34:	4c21      	ldr	r4, [pc, #132]	; (fbc <sd_decode_csd+0xe4>)
     f36:	47a0      	blx	r4
     f38:	4603      	mov	r3, r0
     f3a:	2b00      	cmp	r3, #0
     f3c:	d00f      	beq.n	f5e <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
     f3e:	4b1e      	ldr	r3, [pc, #120]	; (fb8 <sd_decode_csd+0xe0>)
     f40:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
     f42:	4b1d      	ldr	r3, [pc, #116]	; (fb8 <sd_decode_csd+0xe0>)
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	3312      	adds	r3, #18
     f48:	4618      	mov	r0, r3
     f4a:	2180      	movs	r1, #128	; 0x80
     f4c:	2230      	movs	r2, #48	; 0x30
     f4e:	2316      	movs	r3, #22
     f50:	4d1a      	ldr	r5, [pc, #104]	; (fbc <sd_decode_csd+0xe4>)
     f52:	47a8      	blx	r5
     f54:	4603      	mov	r3, r0
				* 512;
     f56:	3301      	adds	r3, #1
     f58:	025b      	lsls	r3, r3, #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
     f5a:	6063      	str	r3, [r4, #4]
     f5c:	e029      	b.n	fb2 <sd_decode_csd+0xda>
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     f5e:	4b16      	ldr	r3, [pc, #88]	; (fb8 <sd_decode_csd+0xe0>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	3312      	adds	r3, #18
     f64:	4618      	mov	r0, r3
     f66:	2180      	movs	r1, #128	; 0x80
     f68:	223e      	movs	r2, #62	; 0x3e
     f6a:	230c      	movs	r3, #12
     f6c:	4c13      	ldr	r4, [pc, #76]	; (fbc <sd_decode_csd+0xe4>)
     f6e:	47a0      	blx	r4
     f70:	4603      	mov	r3, r0
     f72:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     f74:	4b10      	ldr	r3, [pc, #64]	; (fb8 <sd_decode_csd+0xe0>)
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	3312      	adds	r3, #18
     f7a:	4618      	mov	r0, r3
     f7c:	2180      	movs	r1, #128	; 0x80
     f7e:	222f      	movs	r2, #47	; 0x2f
     f80:	2303      	movs	r3, #3
     f82:	4d0e      	ldr	r5, [pc, #56]	; (fbc <sd_decode_csd+0xe4>)
     f84:	47a8      	blx	r5
     f86:	4603      	mov	r3, r0
     f88:	3302      	adds	r3, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     f8a:	fa04 f303 	lsl.w	r3, r4, r3
     f8e:	603b      	str	r3, [r7, #0]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
     f90:	4b09      	ldr	r3, [pc, #36]	; (fb8 <sd_decode_csd+0xe0>)
     f92:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
     f94:	4b08      	ldr	r3, [pc, #32]	; (fb8 <sd_decode_csd+0xe0>)
     f96:	681b      	ldr	r3, [r3, #0]
     f98:	3312      	adds	r3, #18
     f9a:	4618      	mov	r0, r3
     f9c:	2180      	movs	r1, #128	; 0x80
     f9e:	2250      	movs	r2, #80	; 0x50
     fa0:	2304      	movs	r3, #4
     fa2:	4d06      	ldr	r5, [pc, #24]	; (fbc <sd_decode_csd+0xe4>)
     fa4:	47a8      	blx	r5
     fa6:	4603      	mov	r3, r0
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
     fa8:	683a      	ldr	r2, [r7, #0]
     faa:	fa02 f303 	lsl.w	r3, r2, r3
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
     fae:	0a9b      	lsrs	r3, r3, #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
     fb0:	6063      	str	r3, [r4, #4]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
     fb2:	3710      	adds	r7, #16
     fb4:	46bd      	mov	sp, r7
     fb6:	bdb0      	pop	{r4, r5, r7, pc}
     fb8:	20000da0 	.word	0x20000da0
     fbc:	0000071d 	.word	0x0000071d
     fc0:	00012638 	.word	0x00012638
     fc4:	00012654 	.word	0x00012654

00000fc8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <__stack_size__+0x18>)
     fd0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     fd2:	f641 300d 	movw	r0, #6925	; 0x1b0d
     fd6:	2100      	movs	r1, #0
     fd8:	4b10      	ldr	r3, [pc, #64]	; (101c <__stack_size__+0x1c>)
     fda:	4798      	blx	r3
     fdc:	4603      	mov	r3, r0
     fde:	f083 0301 	eor.w	r3, r3, #1
     fe2:	b2db      	uxtb	r3, r3
     fe4:	2b00      	cmp	r3, #0
     fe6:	d001      	beq.n	fec <sd_mmc_cmd13+0x24>
				return false;
     fe8:	2300      	movs	r3, #0
     fea:	e010      	b.n	100e <__stack_size__+0xe>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
     fec:	4b0c      	ldr	r3, [pc, #48]	; (1020 <__stack_size__+0x20>)
     fee:	4798      	blx	r3
     ff0:	4603      	mov	r3, r0
     ff2:	b2db      	uxtb	r3, r3
     ff4:	2b00      	cmp	r3, #0
     ff6:	d102      	bne.n	ffe <sd_mmc_cmd13+0x36>
				break;
     ff8:	bf00      	nop
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
		}
	} while (1);

	return true;
     ffa:	2301      	movs	r3, #1
     ffc:	e007      	b.n	100e <__stack_size__+0xe>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	1e5a      	subs	r2, r3, #1
    1002:	607a      	str	r2, [r7, #4]
    1004:	2b00      	cmp	r3, #0
    1006:	d101      	bne.n	100c <__stack_size__+0xc>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1008:	2300      	movs	r3, #0
    100a:	e000      	b.n	100e <__stack_size__+0xe>
		}
	} while (1);
    100c:	e7e1      	b.n	fd2 <sd_mmc_cmd13+0xa>

	return true;
}
    100e:	4618      	mov	r0, r3
    1010:	3708      	adds	r7, #8
    1012:	46bd      	mov	sp, r7
    1014:	bd80      	pop	{r7, pc}
    1016:	bf00      	nop
    1018:	00030d40 	.word	0x00030d40
    101c:	00007755 	.word	0x00007755
    1020:	00007929 	.word	0x00007929

00001024 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    1024:	b590      	push	{r4, r7, lr}
    1026:	b085      	sub	sp, #20
    1028:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    102a:	4b37      	ldr	r3, [pc, #220]	; (1108 <sd_acmd51+0xe4>)
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	899b      	ldrh	r3, [r3, #12]
    1030:	041b      	lsls	r3, r3, #16
    1032:	f241 1037 	movw	r0, #4407	; 0x1137
    1036:	4619      	mov	r1, r3
    1038:	4b34      	ldr	r3, [pc, #208]	; (110c <sd_acmd51+0xe8>)
    103a:	4798      	blx	r3
    103c:	4603      	mov	r3, r0
    103e:	f083 0301 	eor.w	r3, r3, #1
    1042:	b2db      	uxtb	r3, r3
    1044:	2b00      	cmp	r3, #0
    1046:	d001      	beq.n	104c <sd_acmd51+0x28>
		return false;
    1048:	2300      	movs	r3, #0
    104a:	e059      	b.n	1100 <sd_acmd51+0xdc>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    104c:	2301      	movs	r3, #1
    104e:	9300      	str	r3, [sp, #0]
    1050:	482f      	ldr	r0, [pc, #188]	; (1110 <sd_acmd51+0xec>)
    1052:	2100      	movs	r1, #0
    1054:	2208      	movs	r2, #8
    1056:	2301      	movs	r3, #1
    1058:	4c2e      	ldr	r4, [pc, #184]	; (1114 <sd_acmd51+0xf0>)
    105a:	47a0      	blx	r4
    105c:	4603      	mov	r3, r0
    105e:	f083 0301 	eor.w	r3, r3, #1
    1062:	b2db      	uxtb	r3, r3
    1064:	2b00      	cmp	r3, #0
    1066:	d001      	beq.n	106c <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    1068:	2300      	movs	r3, #0
    106a:	e049      	b.n	1100 <sd_acmd51+0xdc>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    106c:	463b      	mov	r3, r7
    106e:	4618      	mov	r0, r3
    1070:	2101      	movs	r1, #1
    1072:	4b29      	ldr	r3, [pc, #164]	; (1118 <sd_acmd51+0xf4>)
    1074:	4798      	blx	r3
    1076:	4603      	mov	r3, r0
    1078:	f083 0301 	eor.w	r3, r3, #1
    107c:	b2db      	uxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	d001      	beq.n	1086 <sd_acmd51+0x62>
		return false;
    1082:	2300      	movs	r3, #0
    1084:	e03c      	b.n	1100 <sd_acmd51+0xdc>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1086:	4b25      	ldr	r3, [pc, #148]	; (111c <sd_acmd51+0xf8>)
    1088:	4798      	blx	r3
    108a:	4603      	mov	r3, r0
    108c:	f083 0301 	eor.w	r3, r3, #1
    1090:	b2db      	uxtb	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	d001      	beq.n	109a <sd_acmd51+0x76>
		return false;
    1096:	2300      	movs	r3, #0
    1098:	e032      	b.n	1100 <sd_acmd51+0xdc>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    109a:	463b      	mov	r3, r7
    109c:	4618      	mov	r0, r3
    109e:	2140      	movs	r1, #64	; 0x40
    10a0:	2238      	movs	r2, #56	; 0x38
    10a2:	2304      	movs	r3, #4
    10a4:	4c1e      	ldr	r4, [pc, #120]	; (1120 <sd_acmd51+0xfc>)
    10a6:	47a0      	blx	r4
    10a8:	4603      	mov	r3, r0
    10aa:	2b01      	cmp	r3, #1
    10ac:	d009      	beq.n	10c2 <sd_acmd51+0x9e>
    10ae:	2b01      	cmp	r3, #1
    10b0:	d302      	bcc.n	10b8 <sd_acmd51+0x94>
    10b2:	2b02      	cmp	r3, #2
    10b4:	d00a      	beq.n	10cc <sd_acmd51+0xa8>
    10b6:	e01d      	b.n	10f4 <sd_acmd51+0xd0>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    10b8:	4b13      	ldr	r3, [pc, #76]	; (1108 <sd_acmd51+0xe4>)
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	2210      	movs	r2, #16
    10be:	741a      	strb	r2, [r3, #16]
		break;
    10c0:	e01d      	b.n	10fe <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    10c2:	4b11      	ldr	r3, [pc, #68]	; (1108 <sd_acmd51+0xe4>)
    10c4:	681b      	ldr	r3, [r3, #0]
    10c6:	221a      	movs	r2, #26
    10c8:	741a      	strb	r2, [r3, #16]
		break;
    10ca:	e018      	b.n	10fe <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    10cc:	463b      	mov	r3, r7
    10ce:	4618      	mov	r0, r3
    10d0:	2140      	movs	r1, #64	; 0x40
    10d2:	222f      	movs	r2, #47	; 0x2f
    10d4:	2301      	movs	r3, #1
    10d6:	4c12      	ldr	r4, [pc, #72]	; (1120 <sd_acmd51+0xfc>)
    10d8:	47a0      	blx	r4
    10da:	4603      	mov	r3, r0
    10dc:	2b01      	cmp	r3, #1
    10de:	d104      	bne.n	10ea <sd_acmd51+0xc6>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    10e0:	4b09      	ldr	r3, [pc, #36]	; (1108 <sd_acmd51+0xe4>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	2230      	movs	r2, #48	; 0x30
    10e6:	741a      	strb	r2, [r3, #16]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    10e8:	e009      	b.n	10fe <sd_acmd51+0xda>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
			sd_mmc_card->version = CARD_VER_SD_3_0;
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
    10ea:	4b07      	ldr	r3, [pc, #28]	; (1108 <sd_acmd51+0xe4>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	2220      	movs	r2, #32
    10f0:	741a      	strb	r2, [r3, #16]
		}
		break;
    10f2:	e004      	b.n	10fe <sd_acmd51+0xda>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    10f4:	4b04      	ldr	r3, [pc, #16]	; (1108 <sd_acmd51+0xe4>)
    10f6:	681b      	ldr	r3, [r3, #0]
    10f8:	2210      	movs	r2, #16
    10fa:	741a      	strb	r2, [r3, #16]
		break;
    10fc:	bf00      	nop
	}
	return true;
    10fe:	2301      	movs	r3, #1
}
    1100:	4618      	mov	r0, r3
    1102:	370c      	adds	r7, #12
    1104:	46bd      	mov	sp, r7
    1106:	bd90      	pop	{r4, r7, pc}
    1108:	20000da0 	.word	0x20000da0
    110c:	00007755 	.word	0x00007755
    1110:	00081133 	.word	0x00081133
    1114:	0000777d 	.word	0x0000777d
    1118:	000079d5 	.word	0x000079d5
    111c:	00007a65 	.word	0x00007a65
    1120:	0000071d 	.word	0x0000071d

00001124 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1124:	b580      	push	{r7, lr}
    1126:	b082      	sub	sp, #8
    1128:	af00      	add	r7, sp, #0
    112a:	4603      	mov	r3, r0
    112c:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
    112e:	79fb      	ldrb	r3, [r7, #7]
    1130:	2b00      	cmp	r3, #0
    1132:	d001      	beq.n	1138 <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
    1134:	2304      	movs	r3, #4
    1136:	e0a5      	b.n	1284 <sd_mmc_select_slot+0x160>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
    1138:	79fa      	ldrb	r2, [r7, #7]
    113a:	4954      	ldr	r1, [pc, #336]	; (128c <sd_mmc_select_slot+0x168>)
    113c:	4613      	mov	r3, r2
    113e:	00db      	lsls	r3, r3, #3
    1140:	4413      	add	r3, r2
    1142:	009b      	lsls	r3, r3, #2
    1144:	440b      	add	r3, r1
    1146:	3308      	adds	r3, #8
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	4618      	mov	r0, r3
    114c:	4b50      	ldr	r3, [pc, #320]	; (1290 <sd_mmc_select_slot+0x16c>)
    114e:	4798      	blx	r3
    1150:	4603      	mov	r3, r0
    1152:	2b00      	cmp	r3, #0
    1154:	d018      	beq.n	1188 <sd_mmc_select_slot+0x64>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    1156:	79fa      	ldrb	r2, [r7, #7]
    1158:	494c      	ldr	r1, [pc, #304]	; (128c <sd_mmc_select_slot+0x168>)
    115a:	4613      	mov	r3, r2
    115c:	00db      	lsls	r3, r3, #3
    115e:	4413      	add	r3, r2
    1160:	009b      	lsls	r3, r3, #2
    1162:	440b      	add	r3, r1
    1164:	3308      	adds	r3, #8
    1166:	799b      	ldrb	r3, [r3, #6]
    1168:	2b01      	cmp	r3, #1
    116a:	d101      	bne.n	1170 <sd_mmc_select_slot+0x4c>
			SD_MMC_STOP_TIMEOUT();
    116c:	4b49      	ldr	r3, [pc, #292]	; (1294 <sd_mmc_select_slot+0x170>)
    116e:	4798      	blx	r3
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1170:	79fa      	ldrb	r2, [r7, #7]
    1172:	4946      	ldr	r1, [pc, #280]	; (128c <sd_mmc_select_slot+0x168>)
    1174:	4613      	mov	r3, r2
    1176:	00db      	lsls	r3, r3, #3
    1178:	4413      	add	r3, r2
    117a:	009b      	lsls	r3, r3, #2
    117c:	440b      	add	r3, r1
    117e:	3308      	adds	r3, #8
    1180:	2204      	movs	r2, #4
    1182:	719a      	strb	r2, [r3, #6]
		return SD_MMC_ERR_NO_CARD;
    1184:	2302      	movs	r3, #2
    1186:	e07d      	b.n	1284 <sd_mmc_select_slot+0x160>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    1188:	79fa      	ldrb	r2, [r7, #7]
    118a:	4940      	ldr	r1, [pc, #256]	; (128c <sd_mmc_select_slot+0x168>)
    118c:	4613      	mov	r3, r2
    118e:	00db      	lsls	r3, r3, #3
    1190:	4413      	add	r3, r2
    1192:	009b      	lsls	r3, r3, #2
    1194:	440b      	add	r3, r1
    1196:	3308      	adds	r3, #8
    1198:	799b      	ldrb	r3, [r3, #6]
    119a:	2b04      	cmp	r3, #4
    119c:	d10d      	bne.n	11ba <sd_mmc_select_slot+0x96>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    119e:	79fa      	ldrb	r2, [r7, #7]
    11a0:	493a      	ldr	r1, [pc, #232]	; (128c <sd_mmc_select_slot+0x168>)
    11a2:	4613      	mov	r3, r2
    11a4:	00db      	lsls	r3, r3, #3
    11a6:	4413      	add	r3, r2
    11a8:	009b      	lsls	r3, r3, #2
    11aa:	440b      	add	r3, r1
    11ac:	3308      	adds	r3, #8
    11ae:	2201      	movs	r2, #1
    11b0:	719a      	strb	r2, [r3, #6]
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
    11b2:	4b39      	ldr	r3, [pc, #228]	; (1298 <sd_mmc_select_slot+0x174>)
    11b4:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
    11b6:	2302      	movs	r3, #2
    11b8:	e064      	b.n	1284 <sd_mmc_select_slot+0x160>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    11ba:	79fa      	ldrb	r2, [r7, #7]
    11bc:	4933      	ldr	r1, [pc, #204]	; (128c <sd_mmc_select_slot+0x168>)
    11be:	4613      	mov	r3, r2
    11c0:	00db      	lsls	r3, r3, #3
    11c2:	4413      	add	r3, r2
    11c4:	009b      	lsls	r3, r3, #2
    11c6:	440b      	add	r3, r1
    11c8:	3308      	adds	r3, #8
    11ca:	799b      	ldrb	r3, [r3, #6]
    11cc:	2b01      	cmp	r3, #1
    11ce:	d130      	bne.n	1232 <sd_mmc_select_slot+0x10e>
		if (!SD_MMC_IS_TIMEOUT()) {
    11d0:	4b32      	ldr	r3, [pc, #200]	; (129c <sd_mmc_select_slot+0x178>)
    11d2:	4798      	blx	r3
    11d4:	4603      	mov	r3, r0
    11d6:	f083 0301 	eor.w	r3, r3, #1
    11da:	b2db      	uxtb	r3, r3
    11dc:	2b00      	cmp	r3, #0
    11de:	d001      	beq.n	11e4 <sd_mmc_select_slot+0xc0>
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
    11e0:	2302      	movs	r3, #2
    11e2:	e04f      	b.n	1284 <sd_mmc_select_slot+0x160>
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    11e4:	79fa      	ldrb	r2, [r7, #7]
    11e6:	4929      	ldr	r1, [pc, #164]	; (128c <sd_mmc_select_slot+0x168>)
    11e8:	4613      	mov	r3, r2
    11ea:	00db      	lsls	r3, r3, #3
    11ec:	4413      	add	r3, r2
    11ee:	009b      	lsls	r3, r3, #2
    11f0:	440b      	add	r3, r1
    11f2:	3308      	adds	r3, #8
    11f4:	2202      	movs	r2, #2
    11f6:	719a      	strb	r2, [r3, #6]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    11f8:	79fa      	ldrb	r2, [r7, #7]
    11fa:	4924      	ldr	r1, [pc, #144]	; (128c <sd_mmc_select_slot+0x168>)
    11fc:	4613      	mov	r3, r2
    11fe:	00db      	lsls	r3, r3, #3
    1200:	4413      	add	r3, r2
    1202:	009b      	lsls	r3, r3, #2
    1204:	440b      	add	r3, r1
    1206:	4a26      	ldr	r2, [pc, #152]	; (12a0 <sd_mmc_select_slot+0x17c>)
    1208:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    120a:	79fa      	ldrb	r2, [r7, #7]
    120c:	491f      	ldr	r1, [pc, #124]	; (128c <sd_mmc_select_slot+0x168>)
    120e:	4613      	mov	r3, r2
    1210:	00db      	lsls	r3, r3, #3
    1212:	4413      	add	r3, r2
    1214:	009b      	lsls	r3, r3, #2
    1216:	440b      	add	r3, r1
    1218:	3310      	adds	r3, #16
    121a:	2201      	movs	r2, #1
    121c:	705a      	strb	r2, [r3, #1]
		sd_mmc_cards[slot].high_speed = 0;
    121e:	79fa      	ldrb	r2, [r7, #7]
    1220:	491a      	ldr	r1, [pc, #104]	; (128c <sd_mmc_select_slot+0x168>)
    1222:	4613      	mov	r3, r2
    1224:	00db      	lsls	r3, r3, #3
    1226:	4413      	add	r3, r2
    1228:	009b      	lsls	r3, r3, #2
    122a:	440b      	add	r3, r1
    122c:	3320      	adds	r3, #32
    122e:	2200      	movs	r2, #0
    1230:	709a      	strb	r2, [r3, #2]
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    1232:	79fa      	ldrb	r2, [r7, #7]
    1234:	4915      	ldr	r1, [pc, #84]	; (128c <sd_mmc_select_slot+0x168>)
    1236:	4613      	mov	r3, r2
    1238:	00db      	lsls	r3, r3, #3
    123a:	4413      	add	r3, r2
    123c:	009b      	lsls	r3, r3, #2
    123e:	440b      	add	r3, r1
    1240:	3308      	adds	r3, #8
    1242:	799b      	ldrb	r3, [r3, #6]
    1244:	2b03      	cmp	r3, #3
    1246:	d101      	bne.n	124c <sd_mmc_select_slot+0x128>
		return SD_MMC_ERR_UNUSABLE;
    1248:	2303      	movs	r3, #3
    124a:	e01b      	b.n	1284 <sd_mmc_select_slot+0x160>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    124c:	4b15      	ldr	r3, [pc, #84]	; (12a4 <sd_mmc_select_slot+0x180>)
    124e:	79fa      	ldrb	r2, [r7, #7]
    1250:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1252:	79fa      	ldrb	r2, [r7, #7]
    1254:	4613      	mov	r3, r2
    1256:	00db      	lsls	r3, r3, #3
    1258:	4413      	add	r3, r2
    125a:	009b      	lsls	r3, r3, #2
    125c:	4a0b      	ldr	r2, [pc, #44]	; (128c <sd_mmc_select_slot+0x168>)
    125e:	441a      	add	r2, r3
    1260:	4b11      	ldr	r3, [pc, #68]	; (12a8 <sd_mmc_select_slot+0x184>)
    1262:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1264:	4b11      	ldr	r3, [pc, #68]	; (12ac <sd_mmc_select_slot+0x188>)
    1266:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1268:	79fa      	ldrb	r2, [r7, #7]
    126a:	4908      	ldr	r1, [pc, #32]	; (128c <sd_mmc_select_slot+0x168>)
    126c:	4613      	mov	r3, r2
    126e:	00db      	lsls	r3, r3, #3
    1270:	4413      	add	r3, r2
    1272:	009b      	lsls	r3, r3, #2
    1274:	440b      	add	r3, r1
    1276:	3308      	adds	r3, #8
    1278:	799b      	ldrb	r3, [r3, #6]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    127a:	2b02      	cmp	r3, #2
    127c:	bf14      	ite	ne
    127e:	2300      	movne	r3, #0
    1280:	2301      	moveq	r3, #1
    1282:	b2db      	uxtb	r3, r3
}
    1284:	4618      	mov	r0, r3
    1286:	3708      	adds	r7, #8
    1288:	46bd      	mov	sp, r7
    128a:	bd80      	pop	{r7, pc}
    128c:	2000048c 	.word	0x2000048c
    1290:	000008d9 	.word	0x000008d9
    1294:	00000a35 	.word	0x00000a35
    1298:	00000929 	.word	0x00000929
    129c:	000009f5 	.word	0x000009f5
    12a0:	00061a80 	.word	0x00061a80
    12a4:	20000d9d 	.word	0x20000d9d
    12a8:	20000da0 	.word	0x20000da0
    12ac:	000012b1 	.word	0x000012b1

000012b0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    12b0:	b598      	push	{r3, r4, r7, lr}
    12b2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    12b4:	4b09      	ldr	r3, [pc, #36]	; (12dc <sd_mmc_configure_slot+0x2c>)
    12b6:	7818      	ldrb	r0, [r3, #0]
    12b8:	4b09      	ldr	r3, [pc, #36]	; (12e0 <sd_mmc_configure_slot+0x30>)
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    12be:	4b08      	ldr	r3, [pc, #32]	; (12e0 <sd_mmc_configure_slot+0x30>)
    12c0:	681b      	ldr	r3, [r3, #0]
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    12c2:	7c5a      	ldrb	r2, [r3, #17]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    12c4:	4b06      	ldr	r3, [pc, #24]	; (12e0 <sd_mmc_configure_slot+0x30>)
    12c6:	681b      	ldr	r3, [r3, #0]
    12c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    12cc:	2b00      	cmp	r3, #0
    12ce:	bf0c      	ite	eq
    12d0:	2300      	moveq	r3, #0
    12d2:	2301      	movne	r3, #1
    12d4:	b2db      	uxtb	r3, r3
    12d6:	4c03      	ldr	r4, [pc, #12]	; (12e4 <sd_mmc_configure_slot+0x34>)
    12d8:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    12da:	bd98      	pop	{r3, r4, r7, pc}
    12dc:	20000d9d 	.word	0x20000d9d
    12e0:	20000da0 	.word	0x20000da0
    12e4:	00007675 	.word	0x00007675

000012e8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    12ec:	4b04      	ldr	r3, [pc, #16]	; (1300 <sd_mmc_deselect_slot+0x18>)
    12ee:	781b      	ldrb	r3, [r3, #0]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d104      	bne.n	12fe <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    12f4:	4b02      	ldr	r3, [pc, #8]	; (1300 <sd_mmc_deselect_slot+0x18>)
    12f6:	781b      	ldrb	r3, [r3, #0]
    12f8:	4618      	mov	r0, r3
    12fa:	4b02      	ldr	r3, [pc, #8]	; (1304 <sd_mmc_deselect_slot+0x1c>)
    12fc:	4798      	blx	r3
	}
}
    12fe:	bd80      	pop	{r7, pc}
    1300:	20000d9d 	.word	0x20000d9d
    1304:	000076dd 	.word	0x000076dd

00001308 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1308:	b580      	push	{r7, lr}
    130a:	b082      	sub	sp, #8
    130c:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    130e:	2300      	movs	r3, #0
    1310:	71fb      	strb	r3, [r7, #7]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1312:	4b54      	ldr	r3, [pc, #336]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    1314:	681b      	ldr	r3, [r3, #0]
    1316:	2201      	movs	r2, #1
    1318:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    131a:	4b52      	ldr	r3, [pc, #328]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    131c:	681b      	ldr	r3, [r3, #0]
    131e:	2200      	movs	r2, #0
    1320:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
    1322:	4b50      	ldr	r3, [pc, #320]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    1324:	681b      	ldr	r3, [r3, #0]
    1326:	2200      	movs	r2, #0
    1328:	819a      	strh	r2, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    132a:	4b4f      	ldr	r3, [pc, #316]	; (1468 <sd_mmc_spi_card_init+0x160>)
    132c:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    132e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
    1332:	2100      	movs	r1, #0
    1334:	4b4d      	ldr	r3, [pc, #308]	; (146c <sd_mmc_spi_card_init+0x164>)
    1336:	4798      	blx	r3
    1338:	4603      	mov	r3, r0
    133a:	f083 0301 	eor.w	r3, r3, #1
    133e:	b2db      	uxtb	r3, r3
    1340:	2b00      	cmp	r3, #0
    1342:	d001      	beq.n	1348 <sd_mmc_spi_card_init+0x40>
		return false;
    1344:	2300      	movs	r3, #0
    1346:	e088      	b.n	145a <sd_mmc_spi_card_init+0x152>
	}
	if (!sd_cmd8(&v2)) {
    1348:	1dfb      	adds	r3, r7, #7
    134a:	4618      	mov	r0, r3
    134c:	4b48      	ldr	r3, [pc, #288]	; (1470 <sd_mmc_spi_card_init+0x168>)
    134e:	4798      	blx	r3
    1350:	4603      	mov	r3, r0
    1352:	f083 0301 	eor.w	r3, r3, #1
    1356:	b2db      	uxtb	r3, r3
    1358:	2b00      	cmp	r3, #0
    135a:	d001      	beq.n	1360 <sd_mmc_spi_card_init+0x58>
		return false;
    135c:	2300      	movs	r3, #0
    135e:	e07c      	b.n	145a <sd_mmc_spi_card_init+0x152>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1360:	4b44      	ldr	r3, [pc, #272]	; (1474 <sd_mmc_spi_card_init+0x16c>)
    1362:	4798      	blx	r3
    1364:	4603      	mov	r3, r0
    1366:	f083 0301 	eor.w	r3, r3, #1
    136a:	b2db      	uxtb	r3, r3
    136c:	2b00      	cmp	r3, #0
    136e:	d001      	beq.n	1374 <sd_mmc_spi_card_init+0x6c>
		return false;
    1370:	2300      	movs	r3, #0
    1372:	e072      	b.n	145a <sd_mmc_spi_card_init+0x152>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1374:	4b3b      	ldr	r3, [pc, #236]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    1376:	681b      	ldr	r3, [r3, #0]
    1378:	7bdb      	ldrb	r3, [r3, #15]
    137a:	f003 0301 	and.w	r3, r3, #1
    137e:	2b00      	cmp	r3, #0
    1380:	d01e      	beq.n	13c0 <sd_mmc_spi_card_init+0xb8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1382:	79fb      	ldrb	r3, [r7, #7]
    1384:	4618      	mov	r0, r3
    1386:	4b3c      	ldr	r3, [pc, #240]	; (1478 <sd_mmc_spi_card_init+0x170>)
    1388:	4798      	blx	r3
    138a:	4603      	mov	r3, r0
    138c:	f083 0301 	eor.w	r3, r3, #1
    1390:	b2db      	uxtb	r3, r3
    1392:	2b00      	cmp	r3, #0
    1394:	d007      	beq.n	13a6 <sd_mmc_spi_card_init+0x9e>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1396:	4b33      	ldr	r3, [pc, #204]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	2202      	movs	r2, #2
    139c:	73da      	strb	r2, [r3, #15]
			return sd_mmc_spi_install_mmc();
    139e:	4b37      	ldr	r3, [pc, #220]	; (147c <sd_mmc_spi_card_init+0x174>)
    13a0:	4798      	blx	r3
    13a2:	4603      	mov	r3, r0
    13a4:	e059      	b.n	145a <sd_mmc_spi_card_init+0x152>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    13a6:	f241 103b 	movw	r0, #4411	; 0x113b
    13aa:	2100      	movs	r1, #0
    13ac:	4b2f      	ldr	r3, [pc, #188]	; (146c <sd_mmc_spi_card_init+0x164>)
    13ae:	4798      	blx	r3
    13b0:	4603      	mov	r3, r0
    13b2:	f083 0301 	eor.w	r3, r3, #1
    13b6:	b2db      	uxtb	r3, r3
    13b8:	2b00      	cmp	r3, #0
    13ba:	d001      	beq.n	13c0 <sd_mmc_spi_card_init+0xb8>
			return false;
    13bc:	2300      	movs	r3, #0
    13be:	e04c      	b.n	145a <sd_mmc_spi_card_init+0x152>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    13c0:	4b28      	ldr	r3, [pc, #160]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	7bdb      	ldrb	r3, [r3, #15]
    13c6:	f003 0301 	and.w	r3, r3, #1
    13ca:	2b00      	cmp	r3, #0
    13cc:	d015      	beq.n	13fa <sd_mmc_spi_card_init+0xf2>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    13ce:	4b2c      	ldr	r3, [pc, #176]	; (1480 <sd_mmc_spi_card_init+0x178>)
    13d0:	4798      	blx	r3
    13d2:	4603      	mov	r3, r0
    13d4:	f083 0301 	eor.w	r3, r3, #1
    13d8:	b2db      	uxtb	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	d001      	beq.n	13e2 <sd_mmc_spi_card_init+0xda>
			return false;
    13de:	2300      	movs	r3, #0
    13e0:	e03b      	b.n	145a <sd_mmc_spi_card_init+0x152>
		}
		sd_decode_csd();
    13e2:	4b28      	ldr	r3, [pc, #160]	; (1484 <sd_mmc_spi_card_init+0x17c>)
    13e4:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    13e6:	4b28      	ldr	r3, [pc, #160]	; (1488 <sd_mmc_spi_card_init+0x180>)
    13e8:	4798      	blx	r3
    13ea:	4603      	mov	r3, r0
    13ec:	f083 0301 	eor.w	r3, r3, #1
    13f0:	b2db      	uxtb	r3, r3
    13f2:	2b00      	cmp	r3, #0
    13f4:	d001      	beq.n	13fa <sd_mmc_spi_card_init+0xf2>
			return false;
    13f6:	2300      	movs	r3, #0
    13f8:	e02f      	b.n	145a <sd_mmc_spi_card_init+0x152>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    13fa:	4b1a      	ldr	r3, [pc, #104]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	7bdb      	ldrb	r3, [r3, #15]
    1400:	f003 0301 	and.w	r3, r3, #1
    1404:	2b00      	cmp	r3, #0
    1406:	d014      	beq.n	1432 <sd_mmc_spi_card_init+0x12a>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1408:	4b16      	ldr	r3, [pc, #88]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	7bdb      	ldrb	r3, [r3, #15]
    140e:	f003 0308 	and.w	r3, r3, #8
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1412:	2b00      	cmp	r3, #0
    1414:	d10d      	bne.n	1432 <sd_mmc_spi_card_init+0x12a>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1416:	f241 1010 	movw	r0, #4368	; 0x1110
    141a:	f44f 7100 	mov.w	r1, #512	; 0x200
    141e:	4b13      	ldr	r3, [pc, #76]	; (146c <sd_mmc_spi_card_init+0x164>)
    1420:	4798      	blx	r3
    1422:	4603      	mov	r3, r0
    1424:	f083 0301 	eor.w	r3, r3, #1
    1428:	b2db      	uxtb	r3, r3
    142a:	2b00      	cmp	r3, #0
    142c:	d001      	beq.n	1432 <sd_mmc_spi_card_init+0x12a>
			return false;
    142e:	2300      	movs	r3, #0
    1430:	e013      	b.n	145a <sd_mmc_spi_card_init+0x152>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1432:	4b0c      	ldr	r3, [pc, #48]	; (1464 <sd_mmc_spi_card_init+0x15c>)
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	7bdb      	ldrb	r3, [r3, #15]
    1438:	f003 0301 	and.w	r3, r3, #1
    143c:	2b00      	cmp	r3, #0
    143e:	d009      	beq.n	1454 <sd_mmc_spi_card_init+0x14c>
		if (!sd_mmc_cmd13()) {
    1440:	4b12      	ldr	r3, [pc, #72]	; (148c <sd_mmc_spi_card_init+0x184>)
    1442:	4798      	blx	r3
    1444:	4603      	mov	r3, r0
    1446:	f083 0301 	eor.w	r3, r3, #1
    144a:	b2db      	uxtb	r3, r3
    144c:	2b00      	cmp	r3, #0
    144e:	d001      	beq.n	1454 <sd_mmc_spi_card_init+0x14c>
			return false;
    1450:	2300      	movs	r3, #0
    1452:	e002      	b.n	145a <sd_mmc_spi_card_init+0x152>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1454:	4b0e      	ldr	r3, [pc, #56]	; (1490 <sd_mmc_spi_card_init+0x188>)
    1456:	4798      	blx	r3
	return true;
    1458:	2301      	movs	r3, #1
}
    145a:	4618      	mov	r0, r3
    145c:	3708      	adds	r7, #8
    145e:	46bd      	mov	sp, r7
    1460:	bd80      	pop	{r7, pc}
    1462:	bf00      	nop
    1464:	20000da0 	.word	0x20000da0
    1468:	00007715 	.word	0x00007715
    146c:	00007755 	.word	0x00007755
    1470:	00000bd1 	.word	0x00000bd1
    1474:	00000bc1 	.word	0x00000bc1
    1478:	00000af5 	.word	0x00000af5
    147c:	00001495 	.word	0x00001495
    1480:	00000d31 	.word	0x00000d31
    1484:	00000ed9 	.word	0x00000ed9
    1488:	00001025 	.word	0x00001025
    148c:	00000fc9 	.word	0x00000fc9
    1490:	000012b1 	.word	0x000012b1

00001494 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1494:	b580      	push	{r7, lr}
    1496:	b082      	sub	sp, #8
    1498:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    149a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
    149e:	2100      	movs	r1, #0
    14a0:	4b2e      	ldr	r3, [pc, #184]	; (155c <sd_mmc_spi_install_mmc+0xc8>)
    14a2:	4798      	blx	r3
    14a4:	4603      	mov	r3, r0
    14a6:	f083 0301 	eor.w	r3, r3, #1
    14aa:	b2db      	uxtb	r3, r3
    14ac:	2b00      	cmp	r3, #0
    14ae:	d001      	beq.n	14b4 <sd_mmc_spi_install_mmc+0x20>
		return false;
    14b0:	2300      	movs	r3, #0
    14b2:	e04e      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
	}

	if (!mmc_spi_op_cond()) {
    14b4:	4b2a      	ldr	r3, [pc, #168]	; (1560 <sd_mmc_spi_install_mmc+0xcc>)
    14b6:	4798      	blx	r3
    14b8:	4603      	mov	r3, r0
    14ba:	f083 0301 	eor.w	r3, r3, #1
    14be:	b2db      	uxtb	r3, r3
    14c0:	2b00      	cmp	r3, #0
    14c2:	d001      	beq.n	14c8 <sd_mmc_spi_install_mmc+0x34>
		return false;
    14c4:	2300      	movs	r3, #0
    14c6:	e044      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    14c8:	f241 103b 	movw	r0, #4411	; 0x113b
    14cc:	2100      	movs	r1, #0
    14ce:	4b23      	ldr	r3, [pc, #140]	; (155c <sd_mmc_spi_install_mmc+0xc8>)
    14d0:	4798      	blx	r3
    14d2:	4603      	mov	r3, r0
    14d4:	f083 0301 	eor.w	r3, r3, #1
    14d8:	b2db      	uxtb	r3, r3
    14da:	2b00      	cmp	r3, #0
    14dc:	d001      	beq.n	14e2 <sd_mmc_spi_install_mmc+0x4e>
		return false;
    14de:	2300      	movs	r3, #0
    14e0:	e037      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    14e2:	4b20      	ldr	r3, [pc, #128]	; (1564 <sd_mmc_spi_install_mmc+0xd0>)
    14e4:	4798      	blx	r3
    14e6:	4603      	mov	r3, r0
    14e8:	f083 0301 	eor.w	r3, r3, #1
    14ec:	b2db      	uxtb	r3, r3
    14ee:	2b00      	cmp	r3, #0
    14f0:	d001      	beq.n	14f6 <sd_mmc_spi_install_mmc+0x62>
		return false;
    14f2:	2300      	movs	r3, #0
    14f4:	e02d      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
	}
	mmc_decode_csd();
    14f6:	4b1c      	ldr	r3, [pc, #112]	; (1568 <sd_mmc_spi_install_mmc+0xd4>)
    14f8:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    14fa:	4b1c      	ldr	r3, [pc, #112]	; (156c <sd_mmc_spi_install_mmc+0xd8>)
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	7c1b      	ldrb	r3, [r3, #16]
    1500:	2b3f      	cmp	r3, #63	; 0x3f
    1502:	d90b      	bls.n	151c <sd_mmc_spi_install_mmc+0x88>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1504:	1dfb      	adds	r3, r7, #7
    1506:	4618      	mov	r0, r3
    1508:	4b19      	ldr	r3, [pc, #100]	; (1570 <sd_mmc_spi_install_mmc+0xdc>)
    150a:	4798      	blx	r3
    150c:	4603      	mov	r3, r0
    150e:	f083 0301 	eor.w	r3, r3, #1
    1512:	b2db      	uxtb	r3, r3
    1514:	2b00      	cmp	r3, #0
    1516:	d001      	beq.n	151c <sd_mmc_spi_install_mmc+0x88>
			return false;
    1518:	2300      	movs	r3, #0
    151a:	e01a      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    151c:	f241 1010 	movw	r0, #4368	; 0x1110
    1520:	f44f 7100 	mov.w	r1, #512	; 0x200
    1524:	4b0d      	ldr	r3, [pc, #52]	; (155c <sd_mmc_spi_install_mmc+0xc8>)
    1526:	4798      	blx	r3
    1528:	4603      	mov	r3, r0
    152a:	f083 0301 	eor.w	r3, r3, #1
    152e:	b2db      	uxtb	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	d001      	beq.n	1538 <sd_mmc_spi_install_mmc+0xa4>
		return false;
    1534:	2300      	movs	r3, #0
    1536:	e00c      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1538:	4b0e      	ldr	r3, [pc, #56]	; (1574 <sd_mmc_spi_install_mmc+0xe0>)
    153a:	4798      	blx	r3
    153c:	4603      	mov	r3, r0
    153e:	f083 0301 	eor.w	r3, r3, #1
    1542:	b2db      	uxtb	r3, r3
    1544:	2b00      	cmp	r3, #0
    1546:	d001      	beq.n	154c <sd_mmc_spi_install_mmc+0xb8>
		return false;
    1548:	2300      	movs	r3, #0
    154a:	e002      	b.n	1552 <sd_mmc_spi_install_mmc+0xbe>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    154c:	4b0a      	ldr	r3, [pc, #40]	; (1578 <sd_mmc_spi_install_mmc+0xe4>)
    154e:	4798      	blx	r3
	return true;
    1550:	2301      	movs	r3, #1
}
    1552:	4618      	mov	r0, r3
    1554:	3708      	adds	r7, #8
    1556:	46bd      	mov	sp, r7
    1558:	bd80      	pop	{r7, pc}
    155a:	bf00      	nop
    155c:	00007755 	.word	0x00007755
    1560:	00000a59 	.word	0x00000a59
    1564:	00000d31 	.word	0x00000d31
    1568:	00000da1 	.word	0x00000da1
    156c:	20000da0 	.word	0x20000da0
    1570:	00000c35 	.word	0x00000c35
    1574:	00000fc9 	.word	0x00000fc9
    1578:	000012b1 	.word	0x000012b1

0000157c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    157c:	b580      	push	{r7, lr}
    157e:	b082      	sub	sp, #8
    1580:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1582:	2300      	movs	r3, #0
    1584:	71fb      	strb	r3, [r7, #7]
    1586:	e00c      	b.n	15a2 <sd_mmc_init+0x26>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1588:	79fa      	ldrb	r2, [r7, #7]
    158a:	490b      	ldr	r1, [pc, #44]	; (15b8 <sd_mmc_init+0x3c>)
    158c:	4613      	mov	r3, r2
    158e:	00db      	lsls	r3, r3, #3
    1590:	4413      	add	r3, r2
    1592:	009b      	lsls	r3, r3, #2
    1594:	440b      	add	r3, r1
    1596:	3308      	adds	r3, #8
    1598:	2204      	movs	r2, #4
    159a:	719a      	strb	r2, [r3, #6]
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    159c:	79fb      	ldrb	r3, [r7, #7]
    159e:	3301      	adds	r3, #1
    15a0:	71fb      	strb	r3, [r7, #7]
    15a2:	79fb      	ldrb	r3, [r7, #7]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d0ef      	beq.n	1588 <sd_mmc_init+0xc>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    15a8:	4b04      	ldr	r3, [pc, #16]	; (15bc <sd_mmc_init+0x40>)
    15aa:	22ff      	movs	r2, #255	; 0xff
    15ac:	701a      	strb	r2, [r3, #0]
	driver_init();
    15ae:	4b04      	ldr	r3, [pc, #16]	; (15c0 <sd_mmc_init+0x44>)
    15b0:	4798      	blx	r3
}
    15b2:	3708      	adds	r7, #8
    15b4:	46bd      	mov	sp, r7
    15b6:	bd80      	pop	{r7, pc}
    15b8:	2000048c 	.word	0x2000048c
    15bc:	20000d9d 	.word	0x20000d9d
    15c0:	0000763d 	.word	0x0000763d

000015c4 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    15c4:	b580      	push	{r7, lr}
    15c6:	b084      	sub	sp, #16
    15c8:	af00      	add	r7, sp, #0
    15ca:	4603      	mov	r3, r0
    15cc:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    15ce:	79fb      	ldrb	r3, [r7, #7]
    15d0:	4618      	mov	r0, r3
    15d2:	4b11      	ldr	r3, [pc, #68]	; (1618 <sd_mmc_check+0x54>)
    15d4:	4798      	blx	r3
    15d6:	4603      	mov	r3, r0
    15d8:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    15da:	7bfb      	ldrb	r3, [r7, #15]
    15dc:	2b01      	cmp	r3, #1
    15de:	d003      	beq.n	15e8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
    15e0:	4b0e      	ldr	r3, [pc, #56]	; (161c <sd_mmc_check+0x58>)
    15e2:	4798      	blx	r3
		return sd_mmc_err;
    15e4:	7bfb      	ldrb	r3, [r7, #15]
    15e6:	e013      	b.n	1610 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    15e8:	4b0d      	ldr	r3, [pc, #52]	; (1620 <sd_mmc_check+0x5c>)
    15ea:	4798      	blx	r3
    15ec:	4603      	mov	r3, r0
    15ee:	2b00      	cmp	r3, #0
    15f0:	d007      	beq.n	1602 <sd_mmc_check+0x3e>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    15f2:	4b0c      	ldr	r3, [pc, #48]	; (1624 <sd_mmc_check+0x60>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	2200      	movs	r2, #0
    15f8:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
    15fa:	4b08      	ldr	r3, [pc, #32]	; (161c <sd_mmc_check+0x58>)
    15fc:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    15fe:	2301      	movs	r3, #1
    1600:	e006      	b.n	1610 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1602:	4b08      	ldr	r3, [pc, #32]	; (1624 <sd_mmc_check+0x60>)
    1604:	681b      	ldr	r3, [r3, #0]
    1606:	2203      	movs	r2, #3
    1608:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
    160a:	4b04      	ldr	r3, [pc, #16]	; (161c <sd_mmc_check+0x58>)
    160c:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    160e:	2303      	movs	r3, #3
}
    1610:	4618      	mov	r0, r3
    1612:	3710      	adds	r7, #16
    1614:	46bd      	mov	sp, r7
    1616:	bd80      	pop	{r7, pc}
    1618:	00001125 	.word	0x00001125
    161c:	000012e9 	.word	0x000012e9
    1620:	00001309 	.word	0x00001309
    1624:	20000da0 	.word	0x20000da0

00001628 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1628:	b580      	push	{r7, lr}
    162a:	b082      	sub	sp, #8
    162c:	af00      	add	r7, sp, #0
    162e:	4603      	mov	r3, r0
    1630:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1632:	79fb      	ldrb	r3, [r7, #7]
    1634:	4618      	mov	r0, r3
    1636:	4b08      	ldr	r3, [pc, #32]	; (1658 <sd_mmc_get_type+0x30>)
    1638:	4798      	blx	r3
    163a:	4603      	mov	r3, r0
    163c:	2b00      	cmp	r3, #0
    163e:	d001      	beq.n	1644 <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
    1640:	2300      	movs	r3, #0
    1642:	e004      	b.n	164e <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
    1644:	4b05      	ldr	r3, [pc, #20]	; (165c <sd_mmc_get_type+0x34>)
    1646:	4798      	blx	r3
	return sd_mmc_card->type;
    1648:	4b05      	ldr	r3, [pc, #20]	; (1660 <sd_mmc_get_type+0x38>)
    164a:	681b      	ldr	r3, [r3, #0]
    164c:	7bdb      	ldrb	r3, [r3, #15]
}
    164e:	4618      	mov	r0, r3
    1650:	3708      	adds	r7, #8
    1652:	46bd      	mov	sp, r7
    1654:	bd80      	pop	{r7, pc}
    1656:	bf00      	nop
    1658:	00001125 	.word	0x00001125
    165c:	000012e9 	.word	0x000012e9
    1660:	20000da0 	.word	0x20000da0

00001664 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	4603      	mov	r3, r0
    166c:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    166e:	79fb      	ldrb	r3, [r7, #7]
    1670:	4618      	mov	r0, r3
    1672:	4b08      	ldr	r3, [pc, #32]	; (1694 <sd_mmc_get_capacity+0x30>)
    1674:	4798      	blx	r3
    1676:	4603      	mov	r3, r0
    1678:	2b00      	cmp	r3, #0
    167a:	d001      	beq.n	1680 <sd_mmc_get_capacity+0x1c>
		return 0;
    167c:	2300      	movs	r3, #0
    167e:	e004      	b.n	168a <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
    1680:	4b05      	ldr	r3, [pc, #20]	; (1698 <sd_mmc_get_capacity+0x34>)
    1682:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1684:	4b05      	ldr	r3, [pc, #20]	; (169c <sd_mmc_get_capacity+0x38>)
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	685b      	ldr	r3, [r3, #4]
}
    168a:	4618      	mov	r0, r3
    168c:	3708      	adds	r7, #8
    168e:	46bd      	mov	sp, r7
    1690:	bd80      	pop	{r7, pc}
    1692:	bf00      	nop
    1694:	00001125 	.word	0x00001125
    1698:	000012e9 	.word	0x000012e9
    169c:	20000da0 	.word	0x20000da0

000016a0 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    16a0:	b480      	push	{r7}
    16a2:	b083      	sub	sp, #12
    16a4:	af00      	add	r7, sp, #0
    16a6:	4603      	mov	r3, r0
    16a8:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    16aa:	2300      	movs	r3, #0
}
    16ac:	4618      	mov	r0, r3
    16ae:	370c      	adds	r7, #12
    16b0:	46bd      	mov	sp, r7
    16b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b6:	4770      	bx	lr

000016b8 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    16b8:	b590      	push	{r4, r7, lr}
    16ba:	b089      	sub	sp, #36	; 0x24
    16bc:	af02      	add	r7, sp, #8
    16be:	6039      	str	r1, [r7, #0]
    16c0:	4613      	mov	r3, r2
    16c2:	4602      	mov	r2, r0
    16c4:	71fa      	strb	r2, [r7, #7]
    16c6:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    16c8:	79fb      	ldrb	r3, [r7, #7]
    16ca:	4618      	mov	r0, r3
    16cc:	4b23      	ldr	r3, [pc, #140]	; (175c <sd_mmc_init_read_blocks+0xa4>)
    16ce:	4798      	blx	r3
    16d0:	4603      	mov	r3, r0
    16d2:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
    16d4:	7bfb      	ldrb	r3, [r7, #15]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d001      	beq.n	16de <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
    16da:	7bfb      	ldrb	r3, [r7, #15]
    16dc:	e03a      	b.n	1754 <sd_mmc_init_read_blocks+0x9c>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    16de:	4b20      	ldr	r3, [pc, #128]	; (1760 <sd_mmc_init_read_blocks+0xa8>)
    16e0:	4798      	blx	r3
    16e2:	4603      	mov	r3, r0
    16e4:	f083 0301 	eor.w	r3, r3, #1
    16e8:	b2db      	uxtb	r3, r3
    16ea:	2b00      	cmp	r3, #0
    16ec:	d003      	beq.n	16f6 <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
    16ee:	4b1d      	ldr	r3, [pc, #116]	; (1764 <sd_mmc_init_read_blocks+0xac>)
    16f0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    16f2:	2305      	movs	r3, #5
    16f4:	e02e      	b.n	1754 <sd_mmc_init_read_blocks+0x9c>
	}

	if (nb_block > 1) {
    16f6:	88bb      	ldrh	r3, [r7, #4]
    16f8:	2b01      	cmp	r3, #1
    16fa:	d902      	bls.n	1702 <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    16fc:	4b1a      	ldr	r3, [pc, #104]	; (1768 <sd_mmc_init_read_blocks+0xb0>)
    16fe:	617b      	str	r3, [r7, #20]
    1700:	e001      	b.n	1706 <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1702:	4b1a      	ldr	r3, [pc, #104]	; (176c <sd_mmc_init_read_blocks+0xb4>)
    1704:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1706:	4b1a      	ldr	r3, [pc, #104]	; (1770 <sd_mmc_init_read_blocks+0xb8>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	7bdb      	ldrb	r3, [r3, #15]
    170c:	f003 0308 	and.w	r3, r3, #8
    1710:	2b00      	cmp	r3, #0
    1712:	d002      	beq.n	171a <sd_mmc_init_read_blocks+0x62>
		arg = start;
    1714:	683b      	ldr	r3, [r7, #0]
    1716:	613b      	str	r3, [r7, #16]
    1718:	e002      	b.n	1720 <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	025b      	lsls	r3, r3, #9
    171e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1720:	88bb      	ldrh	r3, [r7, #4]
    1722:	2201      	movs	r2, #1
    1724:	9200      	str	r2, [sp, #0]
    1726:	6978      	ldr	r0, [r7, #20]
    1728:	6939      	ldr	r1, [r7, #16]
    172a:	f44f 7200 	mov.w	r2, #512	; 0x200
    172e:	4c11      	ldr	r4, [pc, #68]	; (1774 <sd_mmc_init_read_blocks+0xbc>)
    1730:	47a0      	blx	r4
    1732:	4603      	mov	r3, r0
    1734:	f083 0301 	eor.w	r3, r3, #1
    1738:	b2db      	uxtb	r3, r3
    173a:	2b00      	cmp	r3, #0
    173c:	d003      	beq.n	1746 <sd_mmc_init_read_blocks+0x8e>
		sd_mmc_deselect_slot();
    173e:	4b09      	ldr	r3, [pc, #36]	; (1764 <sd_mmc_init_read_blocks+0xac>)
    1740:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1742:	2305      	movs	r3, #5
    1744:	e006      	b.n	1754 <sd_mmc_init_read_blocks+0x9c>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1746:	4b0c      	ldr	r3, [pc, #48]	; (1778 <sd_mmc_init_read_blocks+0xc0>)
    1748:	88ba      	ldrh	r2, [r7, #4]
    174a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    174c:	4b0b      	ldr	r3, [pc, #44]	; (177c <sd_mmc_init_read_blocks+0xc4>)
    174e:	88ba      	ldrh	r2, [r7, #4]
    1750:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1752:	2300      	movs	r3, #0
}
    1754:	4618      	mov	r0, r3
    1756:	371c      	adds	r7, #28
    1758:	46bd      	mov	sp, r7
    175a:	bd90      	pop	{r4, r7, pc}
    175c:	00001125 	.word	0x00001125
    1760:	00000fc9 	.word	0x00000fc9
    1764:	000012e9 	.word	0x000012e9
    1768:	00101112 	.word	0x00101112
    176c:	00081111 	.word	0x00081111
    1770:	20000da0 	.word	0x20000da0
    1774:	0000777d 	.word	0x0000777d
    1778:	20000da6 	.word	0x20000da6
    177c:	20000da4 	.word	0x20000da4

00001780 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1780:	b580      	push	{r7, lr}
    1782:	b082      	sub	sp, #8
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
    1788:	460b      	mov	r3, r1
    178a:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    178c:	887b      	ldrh	r3, [r7, #2]
    178e:	6878      	ldr	r0, [r7, #4]
    1790:	4619      	mov	r1, r3
    1792:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <sd_mmc_start_read_blocks+0x44>)
    1794:	4798      	blx	r3
    1796:	4603      	mov	r3, r0
    1798:	f083 0301 	eor.w	r3, r3, #1
    179c:	b2db      	uxtb	r3, r3
    179e:	2b00      	cmp	r3, #0
    17a0:	d004      	beq.n	17ac <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <sd_mmc_start_read_blocks+0x48>)
    17a4:	2200      	movs	r2, #0
    17a6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    17a8:	2305      	movs	r3, #5
    17aa:	e007      	b.n	17bc <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    17ac:	4b06      	ldr	r3, [pc, #24]	; (17c8 <sd_mmc_start_read_blocks+0x48>)
    17ae:	881a      	ldrh	r2, [r3, #0]
    17b0:	887b      	ldrh	r3, [r7, #2]
    17b2:	1ad3      	subs	r3, r2, r3
    17b4:	b29a      	uxth	r2, r3
    17b6:	4b04      	ldr	r3, [pc, #16]	; (17c8 <sd_mmc_start_read_blocks+0x48>)
    17b8:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    17ba:	2300      	movs	r3, #0
}
    17bc:	4618      	mov	r0, r3
    17be:	3708      	adds	r7, #8
    17c0:	46bd      	mov	sp, r7
    17c2:	bd80      	pop	{r7, pc}
    17c4:	000079d5 	.word	0x000079d5
    17c8:	20000da6 	.word	0x20000da6

000017cc <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	b082      	sub	sp, #8
    17d0:	af00      	add	r7, sp, #0
    17d2:	4603      	mov	r3, r0
    17d4:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
    17d6:	4b1b      	ldr	r3, [pc, #108]	; (1844 <sd_mmc_wait_end_of_read_blocks+0x78>)
    17d8:	4798      	blx	r3
    17da:	4603      	mov	r3, r0
    17dc:	f083 0301 	eor.w	r3, r3, #1
    17e0:	b2db      	uxtb	r3, r3
    17e2:	2b00      	cmp	r3, #0
    17e4:	d001      	beq.n	17ea <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
    17e6:	2305      	movs	r3, #5
    17e8:	e027      	b.n	183a <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
    17ea:	79fb      	ldrb	r3, [r7, #7]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d003      	beq.n	17f8 <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    17f0:	4b15      	ldr	r3, [pc, #84]	; (1848 <sd_mmc_wait_end_of_read_blocks+0x7c>)
    17f2:	2200      	movs	r2, #0
    17f4:	801a      	strh	r2, [r3, #0]
    17f6:	e005      	b.n	1804 <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
    17f8:	4b13      	ldr	r3, [pc, #76]	; (1848 <sd_mmc_wait_end_of_read_blocks+0x7c>)
    17fa:	881b      	ldrh	r3, [r3, #0]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d001      	beq.n	1804 <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
    1800:	2300      	movs	r3, #0
    1802:	e01a      	b.n	183a <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1804:	4b11      	ldr	r3, [pc, #68]	; (184c <sd_mmc_wait_end_of_read_blocks+0x80>)
    1806:	881b      	ldrh	r3, [r3, #0]
    1808:	2b01      	cmp	r3, #1
    180a:	d103      	bne.n	1814 <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    180c:	4b10      	ldr	r3, [pc, #64]	; (1850 <sd_mmc_wait_end_of_read_blocks+0x84>)
    180e:	4798      	blx	r3
		return SD_MMC_OK;
    1810:	2300      	movs	r3, #0
    1812:	e012      	b.n	183a <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1814:	f243 100c 	movw	r0, #12556	; 0x310c
    1818:	2100      	movs	r1, #0
    181a:	4b0e      	ldr	r3, [pc, #56]	; (1854 <sd_mmc_wait_end_of_read_blocks+0x88>)
    181c:	4798      	blx	r3
    181e:	4603      	mov	r3, r0
    1820:	f083 0301 	eor.w	r3, r3, #1
    1824:	b2db      	uxtb	r3, r3
    1826:	2b00      	cmp	r3, #0
    1828:	d004      	beq.n	1834 <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    182a:	f243 100c 	movw	r0, #12556	; 0x310c
    182e:	2100      	movs	r1, #0
    1830:	4b08      	ldr	r3, [pc, #32]	; (1854 <sd_mmc_wait_end_of_read_blocks+0x88>)
    1832:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1836:	4798      	blx	r3
	return SD_MMC_OK;
    1838:	2300      	movs	r3, #0
}
    183a:	4618      	mov	r0, r3
    183c:	3708      	adds	r7, #8
    183e:	46bd      	mov	sp, r7
    1840:	bd80      	pop	{r7, pc}
    1842:	bf00      	nop
    1844:	00007a65 	.word	0x00007a65
    1848:	20000da6 	.word	0x20000da6
    184c:	20000da4 	.word	0x20000da4
    1850:	000012e9 	.word	0x000012e9
    1854:	00007755 	.word	0x00007755

00001858 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1858:	b590      	push	{r4, r7, lr}
    185a:	b089      	sub	sp, #36	; 0x24
    185c:	af02      	add	r7, sp, #8
    185e:	6039      	str	r1, [r7, #0]
    1860:	4613      	mov	r3, r2
    1862:	4602      	mov	r2, r0
    1864:	71fa      	strb	r2, [r7, #7]
    1866:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1868:	79fb      	ldrb	r3, [r7, #7]
    186a:	4618      	mov	r0, r3
    186c:	4b23      	ldr	r3, [pc, #140]	; (18fc <sd_mmc_init_write_blocks+0xa4>)
    186e:	4798      	blx	r3
    1870:	4603      	mov	r3, r0
    1872:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
    1874:	7bfb      	ldrb	r3, [r7, #15]
    1876:	2b00      	cmp	r3, #0
    1878:	d001      	beq.n	187e <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
    187a:	7bfb      	ldrb	r3, [r7, #15]
    187c:	e039      	b.n	18f2 <sd_mmc_init_write_blocks+0x9a>
	}
	if (sd_mmc_is_write_protected(slot)) {
    187e:	79fb      	ldrb	r3, [r7, #7]
    1880:	4618      	mov	r0, r3
    1882:	4b1f      	ldr	r3, [pc, #124]	; (1900 <sd_mmc_init_write_blocks+0xa8>)
    1884:	4798      	blx	r3
    1886:	4603      	mov	r3, r0
    1888:	2b00      	cmp	r3, #0
    188a:	d003      	beq.n	1894 <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
    188c:	4b1d      	ldr	r3, [pc, #116]	; (1904 <sd_mmc_init_write_blocks+0xac>)
    188e:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    1890:	2307      	movs	r3, #7
    1892:	e02e      	b.n	18f2 <sd_mmc_init_write_blocks+0x9a>
	}

	if (nb_block > 1) {
    1894:	88bb      	ldrh	r3, [r7, #4]
    1896:	2b01      	cmp	r3, #1
    1898:	d902      	bls.n	18a0 <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    189a:	4b1b      	ldr	r3, [pc, #108]	; (1908 <sd_mmc_init_write_blocks+0xb0>)
    189c:	617b      	str	r3, [r7, #20]
    189e:	e001      	b.n	18a4 <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    18a0:	4b1a      	ldr	r3, [pc, #104]	; (190c <sd_mmc_init_write_blocks+0xb4>)
    18a2:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    18a4:	4b1a      	ldr	r3, [pc, #104]	; (1910 <sd_mmc_init_write_blocks+0xb8>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	7bdb      	ldrb	r3, [r3, #15]
    18aa:	f003 0308 	and.w	r3, r3, #8
    18ae:	2b00      	cmp	r3, #0
    18b0:	d002      	beq.n	18b8 <sd_mmc_init_write_blocks+0x60>
		arg = start;
    18b2:	683b      	ldr	r3, [r7, #0]
    18b4:	613b      	str	r3, [r7, #16]
    18b6:	e002      	b.n	18be <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    18b8:	683b      	ldr	r3, [r7, #0]
    18ba:	025b      	lsls	r3, r3, #9
    18bc:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    18be:	88bb      	ldrh	r3, [r7, #4]
    18c0:	2201      	movs	r2, #1
    18c2:	9200      	str	r2, [sp, #0]
    18c4:	6978      	ldr	r0, [r7, #20]
    18c6:	6939      	ldr	r1, [r7, #16]
    18c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    18cc:	4c11      	ldr	r4, [pc, #68]	; (1914 <sd_mmc_init_write_blocks+0xbc>)
    18ce:	47a0      	blx	r4
    18d0:	4603      	mov	r3, r0
    18d2:	f083 0301 	eor.w	r3, r3, #1
    18d6:	b2db      	uxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	d003      	beq.n	18e4 <sd_mmc_init_write_blocks+0x8c>
		sd_mmc_deselect_slot();
    18dc:	4b09      	ldr	r3, [pc, #36]	; (1904 <sd_mmc_init_write_blocks+0xac>)
    18de:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    18e0:	2305      	movs	r3, #5
    18e2:	e006      	b.n	18f2 <sd_mmc_init_write_blocks+0x9a>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    18e4:	4b0c      	ldr	r3, [pc, #48]	; (1918 <sd_mmc_init_write_blocks+0xc0>)
    18e6:	88ba      	ldrh	r2, [r7, #4]
    18e8:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    18ea:	4b0c      	ldr	r3, [pc, #48]	; (191c <sd_mmc_init_write_blocks+0xc4>)
    18ec:	88ba      	ldrh	r2, [r7, #4]
    18ee:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    18f0:	2300      	movs	r3, #0
}
    18f2:	4618      	mov	r0, r3
    18f4:	371c      	adds	r7, #28
    18f6:	46bd      	mov	sp, r7
    18f8:	bd90      	pop	{r4, r7, pc}
    18fa:	bf00      	nop
    18fc:	00001125 	.word	0x00001125
    1900:	000016a1 	.word	0x000016a1
    1904:	000012e9 	.word	0x000012e9
    1908:	00109119 	.word	0x00109119
    190c:	00089118 	.word	0x00089118
    1910:	20000da0 	.word	0x20000da0
    1914:	0000777d 	.word	0x0000777d
    1918:	20000da6 	.word	0x20000da6
    191c:	20000da4 	.word	0x20000da4

00001920 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1920:	b580      	push	{r7, lr}
    1922:	b082      	sub	sp, #8
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	460b      	mov	r3, r1
    192a:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    192c:	887b      	ldrh	r3, [r7, #2]
    192e:	6878      	ldr	r0, [r7, #4]
    1930:	4619      	mov	r1, r3
    1932:	4b0c      	ldr	r3, [pc, #48]	; (1964 <sd_mmc_start_write_blocks+0x44>)
    1934:	4798      	blx	r3
    1936:	4603      	mov	r3, r0
    1938:	f083 0301 	eor.w	r3, r3, #1
    193c:	b2db      	uxtb	r3, r3
    193e:	2b00      	cmp	r3, #0
    1940:	d004      	beq.n	194c <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1942:	4b09      	ldr	r3, [pc, #36]	; (1968 <sd_mmc_start_write_blocks+0x48>)
    1944:	2200      	movs	r2, #0
    1946:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1948:	2305      	movs	r3, #5
    194a:	e007      	b.n	195c <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    194c:	4b06      	ldr	r3, [pc, #24]	; (1968 <sd_mmc_start_write_blocks+0x48>)
    194e:	881a      	ldrh	r2, [r3, #0]
    1950:	887b      	ldrh	r3, [r7, #2]
    1952:	1ad3      	subs	r3, r2, r3
    1954:	b29a      	uxth	r2, r3
    1956:	4b04      	ldr	r3, [pc, #16]	; (1968 <sd_mmc_start_write_blocks+0x48>)
    1958:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    195a:	2300      	movs	r3, #0
}
    195c:	4618      	mov	r0, r3
    195e:	3708      	adds	r7, #8
    1960:	46bd      	mov	sp, r7
    1962:	bd80      	pop	{r7, pc}
    1964:	00007a75 	.word	0x00007a75
    1968:	20000da6 	.word	0x20000da6

0000196c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	4603      	mov	r3, r0
    1974:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
    1976:	4b13      	ldr	r3, [pc, #76]	; (19c4 <sd_mmc_wait_end_of_write_blocks+0x58>)
    1978:	4798      	blx	r3
    197a:	4603      	mov	r3, r0
    197c:	f083 0301 	eor.w	r3, r3, #1
    1980:	b2db      	uxtb	r3, r3
    1982:	2b00      	cmp	r3, #0
    1984:	d001      	beq.n	198a <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
    1986:	2305      	movs	r3, #5
    1988:	e017      	b.n	19ba <sd_mmc_wait_end_of_write_blocks+0x4e>
	}
	if (abort) {
    198a:	79fb      	ldrb	r3, [r7, #7]
    198c:	2b00      	cmp	r3, #0
    198e:	d003      	beq.n	1998 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1990:	4b0d      	ldr	r3, [pc, #52]	; (19c8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    1992:	2200      	movs	r2, #0
    1994:	801a      	strh	r2, [r3, #0]
    1996:	e005      	b.n	19a4 <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
    1998:	4b0b      	ldr	r3, [pc, #44]	; (19c8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    199a:	881b      	ldrh	r3, [r3, #0]
    199c:	2b00      	cmp	r3, #0
    199e:	d001      	beq.n	19a4 <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
    19a0:	2300      	movs	r3, #0
    19a2:	e00a      	b.n	19ba <sd_mmc_wait_end_of_write_blocks+0x4e>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    19a4:	4b09      	ldr	r3, [pc, #36]	; (19cc <sd_mmc_wait_end_of_write_blocks+0x60>)
    19a6:	881b      	ldrh	r3, [r3, #0]
    19a8:	2b01      	cmp	r3, #1
    19aa:	d103      	bne.n	19b4 <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <sd_mmc_wait_end_of_write_blocks+0x64>)
    19ae:	4798      	blx	r3
		return SD_MMC_OK;
    19b0:	2300      	movs	r3, #0
    19b2:	e002      	b.n	19ba <sd_mmc_wait_end_of_write_blocks+0x4e>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    19b4:	4b06      	ldr	r3, [pc, #24]	; (19d0 <sd_mmc_wait_end_of_write_blocks+0x64>)
    19b6:	4798      	blx	r3
	return SD_MMC_OK;
    19b8:	2300      	movs	r3, #0
}
    19ba:	4618      	mov	r0, r3
    19bc:	3708      	adds	r7, #8
    19be:	46bd      	mov	sp, r7
    19c0:	bd80      	pop	{r7, pc}
    19c2:	bf00      	nop
    19c4:	00007b29 	.word	0x00007b29
    19c8:	20000da6 	.word	0x20000da6
    19cc:	20000da4 	.word	0x20000da4
    19d0:	000012e9 	.word	0x000012e9

000019d4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    19d4:	b580      	push	{r7, lr}
    19d6:	b082      	sub	sp, #8
    19d8:	af00      	add	r7, sp, #0
    19da:	4603      	mov	r3, r0
    19dc:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
    19de:	79fb      	ldrb	r3, [r7, #7]
    19e0:	4618      	mov	r0, r3
    19e2:	4b15      	ldr	r3, [pc, #84]	; (1a38 <sd_mmc_test_unit_ready+0x64>)
    19e4:	4798      	blx	r3
    19e6:	4603      	mov	r3, r0
    19e8:	2b01      	cmp	r3, #1
    19ea:	d017      	beq.n	1a1c <sd_mmc_test_unit_ready+0x48>
    19ec:	2b02      	cmp	r3, #2
    19ee:	d017      	beq.n	1a20 <sd_mmc_test_unit_ready+0x4c>
    19f0:	2b00      	cmp	r3, #0
    19f2:	d11b      	bne.n	1a2c <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    19f4:	79fb      	ldrb	r3, [r7, #7]
    19f6:	4a11      	ldr	r2, [pc, #68]	; (1a3c <sd_mmc_test_unit_ready+0x68>)
    19f8:	5cd3      	ldrb	r3, [r2, r3]
    19fa:	2b00      	cmp	r3, #0
    19fc:	d001      	beq.n	1a02 <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
    19fe:	2302      	movs	r3, #2
    1a00:	e015      	b.n	1a2e <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    1a02:	79fb      	ldrb	r3, [r7, #7]
    1a04:	4618      	mov	r0, r3
    1a06:	4b0e      	ldr	r3, [pc, #56]	; (1a40 <sd_mmc_test_unit_ready+0x6c>)
    1a08:	4798      	blx	r3
    1a0a:	4603      	mov	r3, r0
    1a0c:	f003 0303 	and.w	r3, r3, #3
    1a10:	2b00      	cmp	r3, #0
    1a12:	d001      	beq.n	1a18 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
    1a14:	2300      	movs	r3, #0
    1a16:	e00a      	b.n	1a2e <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    1a18:	2302      	movs	r3, #2
    1a1a:	e008      	b.n	1a2e <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    1a1c:	2303      	movs	r3, #3
    1a1e:	e006      	b.n	1a2e <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    1a20:	79fb      	ldrb	r3, [r7, #7]
    1a22:	4a06      	ldr	r2, [pc, #24]	; (1a3c <sd_mmc_test_unit_ready+0x68>)
    1a24:	2100      	movs	r1, #0
    1a26:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    1a28:	2302      	movs	r3, #2
    1a2a:	e000      	b.n	1a2e <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
    1a2c:	2301      	movs	r3, #1
	}
}
    1a2e:	4618      	mov	r0, r3
    1a30:	3708      	adds	r7, #8
    1a32:	46bd      	mov	sp, r7
    1a34:	bd80      	pop	{r7, pc}
    1a36:	bf00      	nop
    1a38:	000015c5 	.word	0x000015c5
    1a3c:	20000dac 	.word	0x20000dac
    1a40:	00001629 	.word	0x00001629

00001a44 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1a44:	b580      	push	{r7, lr}
    1a46:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    1a48:	2000      	movs	r0, #0
    1a4a:	4b02      	ldr	r3, [pc, #8]	; (1a54 <sd_mmc_test_unit_ready_0+0x10>)
    1a4c:	4798      	blx	r3
    1a4e:	4603      	mov	r3, r0
}
    1a50:	4618      	mov	r0, r3
    1a52:	bd80      	pop	{r7, pc}
    1a54:	000019d5 	.word	0x000019d5

00001a58 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1a58:	b580      	push	{r7, lr}
    1a5a:	b082      	sub	sp, #8
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	4603      	mov	r3, r0
    1a60:	6039      	str	r1, [r7, #0]
    1a62:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1a64:	79fb      	ldrb	r3, [r7, #7]
    1a66:	4618      	mov	r0, r3
    1a68:	4b07      	ldr	r3, [pc, #28]	; (1a88 <sd_mmc_read_capacity+0x30>)
    1a6a:	4798      	blx	r3
    1a6c:	4603      	mov	r3, r0
    1a6e:	005b      	lsls	r3, r3, #1
    1a70:	1e5a      	subs	r2, r3, #1
    1a72:	683b      	ldr	r3, [r7, #0]
    1a74:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    1a76:	79fb      	ldrb	r3, [r7, #7]
    1a78:	4618      	mov	r0, r3
    1a7a:	4b04      	ldr	r3, [pc, #16]	; (1a8c <sd_mmc_read_capacity+0x34>)
    1a7c:	4798      	blx	r3
    1a7e:	4603      	mov	r3, r0
}
    1a80:	4618      	mov	r0, r3
    1a82:	3708      	adds	r7, #8
    1a84:	46bd      	mov	sp, r7
    1a86:	bd80      	pop	{r7, pc}
    1a88:	00001665 	.word	0x00001665
    1a8c:	000019d5 	.word	0x000019d5

00001a90 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b082      	sub	sp, #8
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    1a98:	2000      	movs	r0, #0
    1a9a:	6879      	ldr	r1, [r7, #4]
    1a9c:	4b03      	ldr	r3, [pc, #12]	; (1aac <sd_mmc_read_capacity_0+0x1c>)
    1a9e:	4798      	blx	r3
    1aa0:	4603      	mov	r3, r0
}
    1aa2:	4618      	mov	r0, r3
    1aa4:	3708      	adds	r7, #8
    1aa6:	46bd      	mov	sp, r7
    1aa8:	bd80      	pop	{r7, pc}
    1aaa:	bf00      	nop
    1aac:	00001a59 	.word	0x00001a59

00001ab0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b082      	sub	sp, #8
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	4603      	mov	r3, r0
    1ab8:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
    1aba:	79fb      	ldrb	r3, [r7, #7]
    1abc:	4618      	mov	r0, r3
    1abe:	4b03      	ldr	r3, [pc, #12]	; (1acc <sd_mmc_wr_protect+0x1c>)
    1ac0:	4798      	blx	r3
    1ac2:	4603      	mov	r3, r0
}
    1ac4:	4618      	mov	r0, r3
    1ac6:	3708      	adds	r7, #8
    1ac8:	46bd      	mov	sp, r7
    1aca:	bd80      	pop	{r7, pc}
    1acc:	000016a1 	.word	0x000016a1

00001ad0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    1ad4:	2000      	movs	r0, #0
    1ad6:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <sd_mmc_wr_protect_0+0x10>)
    1ad8:	4798      	blx	r3
    1ada:	4603      	mov	r3, r0
}
    1adc:	4618      	mov	r0, r3
    1ade:	bd80      	pop	{r7, pc}
    1ae0:	00001ab1 	.word	0x00001ab1

00001ae4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    1ae4:	b480      	push	{r7}
    1ae6:	b083      	sub	sp, #12
    1ae8:	af00      	add	r7, sp, #0
    1aea:	4603      	mov	r3, r0
    1aec:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
    1aee:	2301      	movs	r3, #1
}
    1af0:	4618      	mov	r0, r3
    1af2:	370c      	adds	r7, #12
    1af4:	46bd      	mov	sp, r7
    1af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1afa:	4770      	bx	lr

00001afc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    1b00:	2000      	movs	r0, #0
    1b02:	4b02      	ldr	r3, [pc, #8]	; (1b0c <sd_mmc_removal_0+0x10>)
    1b04:	4798      	blx	r3
    1b06:	4603      	mov	r3, r0
}
    1b08:	4618      	mov	r0, r3
    1b0a:	bd80      	pop	{r7, pc}
    1b0c:	00001ae5 	.word	0x00001ae5

00001b10 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	b084      	sub	sp, #16
    1b14:	af00      	add	r7, sp, #0
    1b16:	4603      	mov	r3, r0
    1b18:	60b9      	str	r1, [r7, #8]
    1b1a:	607a      	str	r2, [r7, #4]
    1b1c:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    1b1e:	7bfb      	ldrb	r3, [r7, #15]
    1b20:	4618      	mov	r0, r3
    1b22:	68b9      	ldr	r1, [r7, #8]
    1b24:	2201      	movs	r2, #1
    1b26:	4b11      	ldr	r3, [pc, #68]	; (1b6c <sd_mmc_mem_2_ram+0x5c>)
    1b28:	4798      	blx	r3
    1b2a:	4603      	mov	r3, r0
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d005      	beq.n	1b3c <sd_mmc_mem_2_ram+0x2c>
    1b30:	2b02      	cmp	r3, #2
    1b32:	d101      	bne.n	1b38 <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1b34:	2302      	movs	r3, #2
    1b36:	e014      	b.n	1b62 <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
    1b38:	2301      	movs	r3, #1
    1b3a:	e012      	b.n	1b62 <sd_mmc_mem_2_ram+0x52>
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
    1b3c:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1b3e:	6878      	ldr	r0, [r7, #4]
    1b40:	2101      	movs	r1, #1
    1b42:	4b0b      	ldr	r3, [pc, #44]	; (1b70 <sd_mmc_mem_2_ram+0x60>)
    1b44:	4798      	blx	r3
    1b46:	4603      	mov	r3, r0
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d001      	beq.n	1b50 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
    1b4c:	2301      	movs	r3, #1
    1b4e:	e008      	b.n	1b62 <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1b50:	2000      	movs	r0, #0
    1b52:	4b08      	ldr	r3, [pc, #32]	; (1b74 <sd_mmc_mem_2_ram+0x64>)
    1b54:	4798      	blx	r3
    1b56:	4603      	mov	r3, r0
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d001      	beq.n	1b60 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
    1b5c:	2301      	movs	r3, #1
    1b5e:	e000      	b.n	1b62 <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
    1b60:	2300      	movs	r3, #0
}
    1b62:	4618      	mov	r0, r3
    1b64:	3710      	adds	r7, #16
    1b66:	46bd      	mov	sp, r7
    1b68:	bd80      	pop	{r7, pc}
    1b6a:	bf00      	nop
    1b6c:	000016b9 	.word	0x000016b9
    1b70:	00001781 	.word	0x00001781
    1b74:	000017cd 	.word	0x000017cd

00001b78 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b082      	sub	sp, #8
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	6078      	str	r0, [r7, #4]
    1b80:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    1b82:	2000      	movs	r0, #0
    1b84:	6879      	ldr	r1, [r7, #4]
    1b86:	683a      	ldr	r2, [r7, #0]
    1b88:	4b03      	ldr	r3, [pc, #12]	; (1b98 <sd_mmc_mem_2_ram_0+0x20>)
    1b8a:	4798      	blx	r3
    1b8c:	4603      	mov	r3, r0
}
    1b8e:	4618      	mov	r0, r3
    1b90:	3708      	adds	r7, #8
    1b92:	46bd      	mov	sp, r7
    1b94:	bd80      	pop	{r7, pc}
    1b96:	bf00      	nop
    1b98:	00001b11 	.word	0x00001b11

00001b9c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b084      	sub	sp, #16
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	4603      	mov	r3, r0
    1ba4:	60b9      	str	r1, [r7, #8]
    1ba6:	607a      	str	r2, [r7, #4]
    1ba8:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1baa:	7bfb      	ldrb	r3, [r7, #15]
    1bac:	4618      	mov	r0, r3
    1bae:	68b9      	ldr	r1, [r7, #8]
    1bb0:	2201      	movs	r2, #1
    1bb2:	4b11      	ldr	r3, [pc, #68]	; (1bf8 <sd_mmc_ram_2_mem+0x5c>)
    1bb4:	4798      	blx	r3
    1bb6:	4603      	mov	r3, r0
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d005      	beq.n	1bc8 <sd_mmc_ram_2_mem+0x2c>
    1bbc:	2b02      	cmp	r3, #2
    1bbe:	d101      	bne.n	1bc4 <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1bc0:	2302      	movs	r3, #2
    1bc2:	e014      	b.n	1bee <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
    1bc4:	2301      	movs	r3, #1
    1bc6:	e012      	b.n	1bee <sd_mmc_ram_2_mem+0x52>

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
    1bc8:	bf00      	nop
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1bca:	6878      	ldr	r0, [r7, #4]
    1bcc:	2101      	movs	r1, #1
    1bce:	4b0b      	ldr	r3, [pc, #44]	; (1bfc <sd_mmc_ram_2_mem+0x60>)
    1bd0:	4798      	blx	r3
    1bd2:	4603      	mov	r3, r0
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d001      	beq.n	1bdc <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
    1bd8:	2301      	movs	r3, #1
    1bda:	e008      	b.n	1bee <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    1bdc:	2000      	movs	r0, #0
    1bde:	4b08      	ldr	r3, [pc, #32]	; (1c00 <sd_mmc_ram_2_mem+0x64>)
    1be0:	4798      	blx	r3
    1be2:	4603      	mov	r3, r0
    1be4:	2b00      	cmp	r3, #0
    1be6:	d001      	beq.n	1bec <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
    1be8:	2301      	movs	r3, #1
    1bea:	e000      	b.n	1bee <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
    1bec:	2300      	movs	r3, #0
}
    1bee:	4618      	mov	r0, r3
    1bf0:	3710      	adds	r7, #16
    1bf2:	46bd      	mov	sp, r7
    1bf4:	bd80      	pop	{r7, pc}
    1bf6:	bf00      	nop
    1bf8:	00001859 	.word	0x00001859
    1bfc:	00001921 	.word	0x00001921
    1c00:	0000196d 	.word	0x0000196d

00001c04 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1c04:	b580      	push	{r7, lr}
    1c06:	b082      	sub	sp, #8
    1c08:	af00      	add	r7, sp, #0
    1c0a:	6078      	str	r0, [r7, #4]
    1c0c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    1c0e:	2000      	movs	r0, #0
    1c10:	6879      	ldr	r1, [r7, #4]
    1c12:	683a      	ldr	r2, [r7, #0]
    1c14:	4b03      	ldr	r3, [pc, #12]	; (1c24 <sd_mmc_ram_2_mem_0+0x20>)
    1c16:	4798      	blx	r3
    1c18:	4603      	mov	r3, r0
}
    1c1a:	4618      	mov	r0, r3
    1c1c:	3708      	adds	r7, #8
    1c1e:	46bd      	mov	sp, r7
    1c20:	bd80      	pop	{r7, pc}
    1c22:	bf00      	nop
    1c24:	00001b9d 	.word	0x00001b9d

00001c28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c28:	b580      	push	{r7, lr}
    1c2a:	b086      	sub	sp, #24
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	60f8      	str	r0, [r7, #12]
    1c30:	60b9      	str	r1, [r7, #8]
    1c32:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1c34:	2300      	movs	r3, #0
    1c36:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d002      	beq.n	1c44 <_read+0x1c>
		return -1;
    1c3e:	f04f 33ff 	mov.w	r3, #4294967295
    1c42:	e014      	b.n	1c6e <_read+0x46>
	}

	for (; len > 0; --len) {
    1c44:	e00f      	b.n	1c66 <_read+0x3e>
		ptr_get(stdio_base, ptr);
    1c46:	4b0c      	ldr	r3, [pc, #48]	; (1c78 <_read+0x50>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	4a0c      	ldr	r2, [pc, #48]	; (1c7c <_read+0x54>)
    1c4c:	6812      	ldr	r2, [r2, #0]
    1c4e:	4610      	mov	r0, r2
    1c50:	68b9      	ldr	r1, [r7, #8]
    1c52:	4798      	blx	r3
		ptr++;
    1c54:	68bb      	ldr	r3, [r7, #8]
    1c56:	3301      	adds	r3, #1
    1c58:	60bb      	str	r3, [r7, #8]
		nChars++;
    1c5a:	697b      	ldr	r3, [r7, #20]
    1c5c:	3301      	adds	r3, #1
    1c5e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	3b01      	subs	r3, #1
    1c64:	607b      	str	r3, [r7, #4]
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	dcec      	bgt.n	1c46 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1c6c:	697b      	ldr	r3, [r7, #20]
}
    1c6e:	4618      	mov	r0, r3
    1c70:	3718      	adds	r7, #24
    1c72:	46bd      	mov	sp, r7
    1c74:	bd80      	pop	{r7, pc}
    1c76:	bf00      	nop
    1c78:	20001008 	.word	0x20001008
    1c7c:	20001010 	.word	0x20001010

00001c80 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
    1c80:	b580      	push	{r7, lr}
    1c82:	b086      	sub	sp, #24
    1c84:	af00      	add	r7, sp, #0
    1c86:	60f8      	str	r0, [r7, #12]
    1c88:	60b9      	str	r1, [r7, #8]
    1c8a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1c8c:	2300      	movs	r3, #0
    1c8e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1c90:	68fb      	ldr	r3, [r7, #12]
    1c92:	2b01      	cmp	r3, #1
    1c94:	d008      	beq.n	1ca8 <_write+0x28>
    1c96:	68fb      	ldr	r3, [r7, #12]
    1c98:	2b02      	cmp	r3, #2
    1c9a:	d005      	beq.n	1ca8 <_write+0x28>
    1c9c:	68fb      	ldr	r3, [r7, #12]
    1c9e:	2b03      	cmp	r3, #3
    1ca0:	d002      	beq.n	1ca8 <_write+0x28>
		return -1;
    1ca2:	f04f 33ff 	mov.w	r3, #4294967295
    1ca6:	e01b      	b.n	1ce0 <_write+0x60>
	}

	for (; len != 0; --len) {
    1ca8:	e016      	b.n	1cd8 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1caa:	4b0f      	ldr	r3, [pc, #60]	; (1ce8 <_write+0x68>)
    1cac:	681a      	ldr	r2, [r3, #0]
    1cae:	4b0f      	ldr	r3, [pc, #60]	; (1cec <_write+0x6c>)
    1cb0:	6819      	ldr	r1, [r3, #0]
    1cb2:	68bb      	ldr	r3, [r7, #8]
    1cb4:	1c58      	adds	r0, r3, #1
    1cb6:	60b8      	str	r0, [r7, #8]
    1cb8:	781b      	ldrb	r3, [r3, #0]
    1cba:	4608      	mov	r0, r1
    1cbc:	4619      	mov	r1, r3
    1cbe:	4790      	blx	r2
    1cc0:	4603      	mov	r3, r0
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	da02      	bge.n	1ccc <_write+0x4c>
			return -1;
    1cc6:	f04f 33ff 	mov.w	r3, #4294967295
    1cca:	e009      	b.n	1ce0 <_write+0x60>
		}
		++nChars;
    1ccc:	697b      	ldr	r3, [r7, #20]
    1cce:	3301      	adds	r3, #1
    1cd0:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	3b01      	subs	r3, #1
    1cd6:	607b      	str	r3, [r7, #4]
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d1e5      	bne.n	1caa <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1cde:	697b      	ldr	r3, [r7, #20]
}
    1ce0:	4618      	mov	r0, r3
    1ce2:	3718      	adds	r7, #24
    1ce4:	46bd      	mov	sp, r7
    1ce6:	bd80      	pop	{r7, pc}
    1ce8:	2000100c 	.word	0x2000100c
    1cec:	20001010 	.word	0x20001010

00001cf0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1cf0:	b480      	push	{r7}
    1cf2:	b083      	sub	sp, #12
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	4603      	mov	r3, r0
    1cf8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <NVIC_EnableIRQ+0x2c>)
    1cfc:	f997 2007 	ldrsb.w	r2, [r7, #7]
    1d00:	0952      	lsrs	r2, r2, #5
    1d02:	79f9      	ldrb	r1, [r7, #7]
    1d04:	f001 011f 	and.w	r1, r1, #31
    1d08:	2001      	movs	r0, #1
    1d0a:	fa00 f101 	lsl.w	r1, r0, r1
    1d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1d12:	370c      	adds	r7, #12
    1d14:	46bd      	mov	sp, r7
    1d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d1a:	4770      	bx	lr
    1d1c:	e000e100 	.word	0xe000e100

00001d20 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1d20:	b480      	push	{r7}
    1d22:	b083      	sub	sp, #12
    1d24:	af00      	add	r7, sp, #0
    1d26:	4603      	mov	r3, r0
    1d28:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1d2a:	4b09      	ldr	r3, [pc, #36]	; (1d50 <NVIC_ClearPendingIRQ+0x30>)
    1d2c:	f997 2007 	ldrsb.w	r2, [r7, #7]
    1d30:	0952      	lsrs	r2, r2, #5
    1d32:	79f9      	ldrb	r1, [r7, #7]
    1d34:	f001 011f 	and.w	r1, r1, #31
    1d38:	2001      	movs	r0, #1
    1d3a:	fa00 f101 	lsl.w	r1, r0, r1
    1d3e:	3260      	adds	r2, #96	; 0x60
    1d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop
    1d50:	e000e100 	.word	0xe000e100

00001d54 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1d54:	b480      	push	{r7}
    1d56:	b083      	sub	sp, #12
    1d58:	af00      	add	r7, sp, #0
    1d5a:	4603      	mov	r3, r0
    1d5c:	6039      	str	r1, [r7, #0]
    1d5e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1d64:	2b00      	cmp	r3, #0
    1d66:	da0b      	bge.n	1d80 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1d68:	490d      	ldr	r1, [pc, #52]	; (1da0 <NVIC_SetPriority+0x4c>)
    1d6a:	79fb      	ldrb	r3, [r7, #7]
    1d6c:	f003 030f 	and.w	r3, r3, #15
    1d70:	3b04      	subs	r3, #4
    1d72:	683a      	ldr	r2, [r7, #0]
    1d74:	b2d2      	uxtb	r2, r2
    1d76:	0112      	lsls	r2, r2, #4
    1d78:	b2d2      	uxtb	r2, r2
    1d7a:	440b      	add	r3, r1
    1d7c:	761a      	strb	r2, [r3, #24]
    1d7e:	e009      	b.n	1d94 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1d80:	4908      	ldr	r1, [pc, #32]	; (1da4 <NVIC_SetPriority+0x50>)
    1d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1d86:	683a      	ldr	r2, [r7, #0]
    1d88:	b2d2      	uxtb	r2, r2
    1d8a:	0112      	lsls	r2, r2, #4
    1d8c:	b2d2      	uxtb	r2, r2
    1d8e:	440b      	add	r3, r1
    1d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1d94:	370c      	adds	r7, #12
    1d96:	46bd      	mov	sp, r7
    1d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d9c:	4770      	bx	lr
    1d9e:	bf00      	nop
    1da0:	e000ed00 	.word	0xe000ed00
    1da4:	e000e100 	.word	0xe000e100

00001da8 <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
    1da8:	b480      	push	{r7}
    1daa:	b085      	sub	sp, #20
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	60fb      	str	r3, [r7, #12]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1db4:	68fb      	ldr	r3, [r7, #12]
    1db6:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
}
    1db8:	4618      	mov	r0, r3
    1dba:	3714      	adds	r7, #20
    1dbc:	46bd      	mov	sp, r7
    1dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dc2:	4770      	bx	lr

00001dc4 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    1dc4:	b480      	push	{r7}
    1dc6:	b085      	sub	sp, #20
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1dd0:	68fb      	ldr	r3, [r7, #12]
    1dd2:	f003 031f 	and.w	r3, r3, #31
    1dd6:	2201      	movs	r2, #1
    1dd8:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
}
    1ddc:	4618      	mov	r0, r3
    1dde:	3714      	adds	r7, #20
    1de0:	46bd      	mov	sp, r7
    1de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1de6:	4770      	bx	lr

00001de8 <gpio_set_pin_callback>:
 * \retval \c false Wrong parameters or exceeding maximum number of interrupt
 *                  sources has been defined.
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b086      	sub	sp, #24
    1dec:	af00      	add	r7, sp, #0
    1dee:	60f8      	str	r0, [r7, #12]
    1df0:	60b9      	str	r1, [r7, #8]
    1df2:	4613      	mov	r3, r2
    1df4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    1df6:	4b29      	ldr	r3, [pc, #164]	; (1e9c <gpio_set_pin_callback+0xb4>)
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	2b05      	cmp	r3, #5
    1dfc:	d901      	bls.n	1e02 <gpio_set_pin_callback+0x1a>
		return false;
    1dfe:	2300      	movs	r3, #0
    1e00:	e048      	b.n	1e94 <gpio_set_pin_callback+0xac>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    1e02:	2300      	movs	r3, #0
    1e04:	75fb      	strb	r3, [r7, #23]
    1e06:	e010      	b.n	1e2a <gpio_set_pin_callback+0x42>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    1e08:	68f8      	ldr	r0, [r7, #12]
    1e0a:	4b25      	ldr	r3, [pc, #148]	; (1ea0 <gpio_set_pin_callback+0xb8>)
    1e0c:	4798      	blx	r3
    1e0e:	4602      	mov	r2, r0
    1e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1e14:	00db      	lsls	r3, r3, #3
    1e16:	21ff      	movs	r1, #255	; 0xff
    1e18:	fa01 f303 	lsl.w	r3, r1, r3
    1e1c:	4013      	ands	r3, r2
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d000      	beq.n	1e24 <gpio_set_pin_callback+0x3c>
			break;
    1e22:	e006      	b.n	1e32 <gpio_set_pin_callback+0x4a>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    1e24:	7dfb      	ldrb	r3, [r7, #23]
    1e26:	3301      	adds	r3, #1
    1e28:	75fb      	strb	r3, [r7, #23]
    1e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1e2e:	2b03      	cmp	r3, #3
    1e30:	ddea      	ble.n	1e08 <gpio_set_pin_callback+0x20>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    1e32:	68f8      	ldr	r0, [r7, #12]
    1e34:	4b1b      	ldr	r3, [pc, #108]	; (1ea4 <gpio_set_pin_callback+0xbc>)
    1e36:	4798      	blx	r3
    1e38:	4603      	mov	r3, r0
    1e3a:	b2db      	uxtb	r3, r3
    1e3c:	009b      	lsls	r3, r3, #2
    1e3e:	b2da      	uxtb	r2, r3
    1e40:	7dfb      	ldrb	r3, [r7, #23]
    1e42:	4413      	add	r3, r2
    1e44:	b2db      	uxtb	r3, r3
    1e46:	3319      	adds	r3, #25
    1e48:	b2db      	uxtb	r3, r3
    1e4a:	75bb      	strb	r3, [r7, #22]

	gpio_int_sources[gpio_nb_sources].pin = pin;
    1e4c:	4b13      	ldr	r3, [pc, #76]	; (1e9c <gpio_set_pin_callback+0xb4>)
    1e4e:	681a      	ldr	r2, [r3, #0]
    1e50:	4b15      	ldr	r3, [pc, #84]	; (1ea8 <gpio_set_pin_callback+0xc0>)
    1e52:	68f9      	ldr	r1, [r7, #12]
    1e54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    1e58:	4b10      	ldr	r3, [pc, #64]	; (1e9c <gpio_set_pin_callback+0xb4>)
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	4a12      	ldr	r2, [pc, #72]	; (1ea8 <gpio_set_pin_callback+0xc0>)
    1e5e:	00db      	lsls	r3, r3, #3
    1e60:	4413      	add	r3, r2
    1e62:	68ba      	ldr	r2, [r7, #8]
    1e64:	605a      	str	r2, [r3, #4]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    1e66:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1e6a:	4618      	mov	r0, r3
    1e6c:	4b0f      	ldr	r3, [pc, #60]	; (1eac <gpio_set_pin_callback+0xc4>)
    1e6e:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    1e70:	79fb      	ldrb	r3, [r7, #7]
    1e72:	f997 2016 	ldrsb.w	r2, [r7, #22]
    1e76:	4610      	mov	r0, r2
    1e78:	4619      	mov	r1, r3
    1e7a:	4b0d      	ldr	r3, [pc, #52]	; (1eb0 <gpio_set_pin_callback+0xc8>)
    1e7c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    1e7e:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1e82:	4618      	mov	r0, r3
    1e84:	4b0b      	ldr	r3, [pc, #44]	; (1eb4 <gpio_set_pin_callback+0xcc>)
    1e86:	4798      	blx	r3

	gpio_nb_sources++;
    1e88:	4b04      	ldr	r3, [pc, #16]	; (1e9c <gpio_set_pin_callback+0xb4>)
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	1c5a      	adds	r2, r3, #1
    1e8e:	4b03      	ldr	r3, [pc, #12]	; (1e9c <gpio_set_pin_callback+0xb4>)
    1e90:	601a      	str	r2, [r3, #0]

	return true;
    1e92:	2301      	movs	r3, #1
}
    1e94:	4618      	mov	r0, r3
    1e96:	3718      	adds	r7, #24
    1e98:	46bd      	mov	sp, r7
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	20000de0 	.word	0x20000de0
    1ea0:	00001dc5 	.word	0x00001dc5
    1ea4:	00001da9 	.word	0x00001da9
    1ea8:	20000db0 	.word	0x20000db0
    1eac:	00001d21 	.word	0x00001d21
    1eb0:	00001d55 	.word	0x00001d55
    1eb4:	00001cf1 	.word	0x00001cf1

00001eb8 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b086      	sub	sp, #24
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
    1ec0:	6039      	str	r1, [r7, #0]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	025b      	lsls	r3, r3, #9
    1ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1eca:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    1ece:	613b      	str	r3, [r7, #16]
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    1ed0:	693b      	ldr	r3, [r7, #16]
    1ed2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    1ed6:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    1ed8:	68fa      	ldr	r2, [r7, #12]
    1eda:	683b      	ldr	r3, [r7, #0]
    1edc:	401a      	ands	r2, r3
    1ede:	693b      	ldr	r3, [r7, #16]
    1ee0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
    1ee4:	2300      	movs	r3, #0
    1ee6:	617b      	str	r3, [r7, #20]
    1ee8:	e023      	b.n	1f32 <gpio_common_handler+0x7a>
		pin = gpio_int_sources[i].pin;
    1eea:	4b16      	ldr	r3, [pc, #88]	; (1f44 <gpio_common_handler+0x8c>)
    1eec:	697a      	ldr	r2, [r7, #20]
    1eee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1ef2:	60bb      	str	r3, [r7, #8]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    1ef4:	68b8      	ldr	r0, [r7, #8]
    1ef6:	4b14      	ldr	r3, [pc, #80]	; (1f48 <gpio_common_handler+0x90>)
    1ef8:	4798      	blx	r3
    1efa:	4602      	mov	r2, r0
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	429a      	cmp	r2, r3
    1f00:	d114      	bne.n	1f2c <gpio_common_handler+0x74>
				(ioport_pin_to_mask(pin) & int_flags)) {
    1f02:	68b8      	ldr	r0, [r7, #8]
    1f04:	4b11      	ldr	r3, [pc, #68]	; (1f4c <gpio_common_handler+0x94>)
    1f06:	4798      	blx	r3
    1f08:	4602      	mov	r2, r0
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	4013      	ands	r3, r2
	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d00c      	beq.n	1f2c <gpio_common_handler+0x74>
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    1f12:	4a0c      	ldr	r2, [pc, #48]	; (1f44 <gpio_common_handler+0x8c>)
    1f14:	697b      	ldr	r3, [r7, #20]
    1f16:	00db      	lsls	r3, r3, #3
    1f18:	4413      	add	r3, r2
    1f1a:	685b      	ldr	r3, [r3, #4]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d005      	beq.n	1f2c <gpio_common_handler+0x74>
				gpio_int_sources[i].callback();
    1f20:	4a08      	ldr	r2, [pc, #32]	; (1f44 <gpio_common_handler+0x8c>)
    1f22:	697b      	ldr	r3, [r7, #20]
    1f24:	00db      	lsls	r3, r3, #3
    1f26:	4413      	add	r3, r2
    1f28:	685b      	ldr	r3, [r3, #4]
    1f2a:	4798      	blx	r3
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
    1f2c:	697b      	ldr	r3, [r7, #20]
    1f2e:	3301      	adds	r3, #1
    1f30:	617b      	str	r3, [r7, #20]
    1f32:	4b07      	ldr	r3, [pc, #28]	; (1f50 <gpio_common_handler+0x98>)
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	697a      	ldr	r2, [r7, #20]
    1f38:	429a      	cmp	r2, r3
    1f3a:	d3d6      	bcc.n	1eea <gpio_common_handler+0x32>
			} else {
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}
}
    1f3c:	3718      	adds	r7, #24
    1f3e:	46bd      	mov	sp, r7
    1f40:	bd80      	pop	{r7, pc}
    1f42:	bf00      	nop
    1f44:	20000db0 	.word	0x20000db0
    1f48:	00001da9 	.word	0x00001da9
    1f4c:	00001dc5 	.word	0x00001dc5
    1f50:	20000de0 	.word	0x20000de0

00001f54 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    1f58:	2000      	movs	r0, #0
    1f5a:	21ff      	movs	r1, #255	; 0xff
    1f5c:	4b01      	ldr	r3, [pc, #4]	; (1f64 <GPIO_0_Handler+0x10>)
    1f5e:	4798      	blx	r3
}
    1f60:	bd80      	pop	{r7, pc}
    1f62:	bf00      	nop
    1f64:	00001eb9 	.word	0x00001eb9

00001f68 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    1f6c:	2000      	movs	r0, #0
    1f6e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1f72:	4b01      	ldr	r3, [pc, #4]	; (1f78 <GPIO_1_Handler+0x10>)
    1f74:	4798      	blx	r3
}
    1f76:	bd80      	pop	{r7, pc}
    1f78:	00001eb9 	.word	0x00001eb9

00001f7c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    1f80:	2000      	movs	r0, #0
    1f82:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1f86:	4b01      	ldr	r3, [pc, #4]	; (1f8c <GPIO_2_Handler+0x10>)
    1f88:	4798      	blx	r3
}
    1f8a:	bd80      	pop	{r7, pc}
    1f8c:	00001eb9 	.word	0x00001eb9

00001f90 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    1f90:	b580      	push	{r7, lr}
    1f92:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    1f94:	2000      	movs	r0, #0
    1f96:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1f9a:	4b01      	ldr	r3, [pc, #4]	; (1fa0 <GPIO_3_Handler+0x10>)
    1f9c:	4798      	blx	r3
}
    1f9e:	bd80      	pop	{r7, pc}
    1fa0:	00001eb9 	.word	0x00001eb9

00001fa4 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    1fa8:	2001      	movs	r0, #1
    1faa:	21ff      	movs	r1, #255	; 0xff
    1fac:	4b01      	ldr	r3, [pc, #4]	; (1fb4 <GPIO_4_Handler+0x10>)
    1fae:	4798      	blx	r3
}
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	bf00      	nop
    1fb4:	00001eb9 	.word	0x00001eb9

00001fb8 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    1fb8:	b580      	push	{r7, lr}
    1fba:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    1fbc:	2001      	movs	r0, #1
    1fbe:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1fc2:	4b01      	ldr	r3, [pc, #4]	; (1fc8 <GPIO_5_Handler+0x10>)
    1fc4:	4798      	blx	r3
}
    1fc6:	bd80      	pop	{r7, pc}
    1fc8:	00001eb9 	.word	0x00001eb9

00001fcc <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    1fd0:	2001      	movs	r0, #1
    1fd2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1fd6:	4b01      	ldr	r3, [pc, #4]	; (1fdc <GPIO_6_Handler+0x10>)
    1fd8:	4798      	blx	r3
}
    1fda:	bd80      	pop	{r7, pc}
    1fdc:	00001eb9 	.word	0x00001eb9

00001fe0 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    1fe4:	2001      	movs	r0, #1
    1fe6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1fea:	4b01      	ldr	r3, [pc, #4]	; (1ff0 <GPIO_7_Handler+0x10>)
    1fec:	4798      	blx	r3
}
    1fee:	bd80      	pop	{r7, pc}
    1ff0:	00001eb9 	.word	0x00001eb9

00001ff4 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    1ff8:	2002      	movs	r0, #2
    1ffa:	21ff      	movs	r1, #255	; 0xff
    1ffc:	4b01      	ldr	r3, [pc, #4]	; (2004 <GPIO_8_Handler+0x10>)
    1ffe:	4798      	blx	r3
}
    2000:	bd80      	pop	{r7, pc}
    2002:	bf00      	nop
    2004:	00001eb9 	.word	0x00001eb9

00002008 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    2008:	b580      	push	{r7, lr}
    200a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    200c:	2002      	movs	r0, #2
    200e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    2012:	4b01      	ldr	r3, [pc, #4]	; (2018 <GPIO_9_Handler+0x10>)
    2014:	4798      	blx	r3
}
    2016:	bd80      	pop	{r7, pc}
    2018:	00001eb9 	.word	0x00001eb9

0000201c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    201c:	b580      	push	{r7, lr}
    201e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    2020:	2002      	movs	r0, #2
    2022:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2026:	4b01      	ldr	r3, [pc, #4]	; (202c <GPIO_10_Handler+0x10>)
    2028:	4798      	blx	r3
}
    202a:	bd80      	pop	{r7, pc}
    202c:	00001eb9 	.word	0x00001eb9

00002030 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    2030:	b580      	push	{r7, lr}
    2032:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    2034:	2002      	movs	r0, #2
    2036:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    203a:	4b01      	ldr	r3, [pc, #4]	; (2040 <GPIO_11_Handler+0x10>)
    203c:	4798      	blx	r3
}
    203e:	bd80      	pop	{r7, pc}
    2040:	00001eb9 	.word	0x00001eb9

00002044 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    2044:	b580      	push	{r7, lr}
    2046:	b084      	sub	sp, #16
    2048:	af00      	add	r7, sp, #0
    204a:	4603      	mov	r3, r0
    204c:	71fb      	strb	r3, [r7, #7]
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    204e:	79fb      	ldrb	r3, [r7, #7]
    2050:	2b01      	cmp	r3, #1
    2052:	d901      	bls.n	2058 <disk_initialize+0x14>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    2054:	2301      	movs	r3, #1
    2056:	e021      	b.n	209c <disk_initialize+0x58>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    2058:	2300      	movs	r3, #0
    205a:	60fb      	str	r3, [r7, #12]
    205c:	e00c      	b.n	2078 <disk_initialize+0x34>
		mem_status = mem_test_unit_ready(drv);
    205e:	79fb      	ldrb	r3, [r7, #7]
    2060:	4618      	mov	r0, r3
    2062:	4b10      	ldr	r3, [pc, #64]	; (20a4 <disk_initialize+0x60>)
    2064:	4798      	blx	r3
    2066:	4603      	mov	r3, r0
    2068:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
    206a:	7afb      	ldrb	r3, [r7, #11]
    206c:	2b03      	cmp	r3, #3
    206e:	d000      	beq.n	2072 <disk_initialize+0x2e>
			break;
    2070:	e005      	b.n	207e <disk_initialize+0x3a>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    2072:	68fb      	ldr	r3, [r7, #12]
    2074:	3301      	adds	r3, #1
    2076:	60fb      	str	r3, [r7, #12]
    2078:	68fb      	ldr	r3, [r7, #12]
    207a:	2b01      	cmp	r3, #1
    207c:	ddef      	ble.n	205e <disk_initialize+0x1a>
		mem_status = mem_test_unit_ready(drv);
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
    207e:	7afb      	ldrb	r3, [r7, #11]
    2080:	2b00      	cmp	r3, #0
    2082:	d001      	beq.n	2088 <disk_initialize+0x44>
		return STA_NOINIT;
    2084:	2301      	movs	r3, #1
    2086:	e009      	b.n	209c <disk_initialize+0x58>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    2088:	79fb      	ldrb	r3, [r7, #7]
    208a:	4618      	mov	r0, r3
    208c:	4b06      	ldr	r3, [pc, #24]	; (20a8 <disk_initialize+0x64>)
    208e:	4798      	blx	r3
    2090:	4603      	mov	r3, r0
    2092:	2b00      	cmp	r3, #0
    2094:	d001      	beq.n	209a <disk_initialize+0x56>
		return STA_PROTECT;
    2096:	2304      	movs	r3, #4
    2098:	e000      	b.n	209c <disk_initialize+0x58>
	}

	/* The memory should already be initialized */
	return 0;
    209a:	2300      	movs	r3, #0
}
    209c:	4618      	mov	r0, r3
    209e:	3710      	adds	r7, #16
    20a0:	46bd      	mov	sp, r7
    20a2:	bd80      	pop	{r7, pc}
    20a4:	00004a65 	.word	0x00004a65
    20a8:	00004af9 	.word	0x00004af9

000020ac <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b082      	sub	sp, #8
    20b0:	af00      	add	r7, sp, #0
    20b2:	4603      	mov	r3, r0
    20b4:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
    20b6:	79fb      	ldrb	r3, [r7, #7]
    20b8:	4618      	mov	r0, r3
    20ba:	4b08      	ldr	r3, [pc, #32]	; (20dc <disk_status+0x30>)
    20bc:	4798      	blx	r3
    20be:	4603      	mov	r3, r0
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <disk_status+0x1e>
    20c4:	2b02      	cmp	r3, #2
    20c6:	d002      	beq.n	20ce <disk_status+0x22>
    20c8:	e003      	b.n	20d2 <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
    20ca:	2300      	movs	r3, #0
    20cc:	e002      	b.n	20d4 <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    20ce:	2303      	movs	r3, #3
    20d0:	e000      	b.n	20d4 <disk_status+0x28>
	default:
		return STA_NOINIT;
    20d2:	2301      	movs	r3, #1
	}
}
    20d4:	4618      	mov	r0, r3
    20d6:	3708      	adds	r7, #8
    20d8:	46bd      	mov	sp, r7
    20da:	bd80      	pop	{r7, pc}
    20dc:	00004a65 	.word	0x00004a65

000020e0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b088      	sub	sp, #32
    20e4:	af00      	add	r7, sp, #0
    20e6:	60b9      	str	r1, [r7, #8]
    20e8:	607a      	str	r2, [r7, #4]
    20ea:	4602      	mov	r2, r0
    20ec:	73fa      	strb	r2, [r7, #15]
    20ee:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    20f0:	7bfb      	ldrb	r3, [r7, #15]
    20f2:	4618      	mov	r0, r3
    20f4:	4b23      	ldr	r3, [pc, #140]	; (2184 <disk_read+0xa4>)
    20f6:	4798      	blx	r3
    20f8:	4603      	mov	r3, r0
    20fa:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    20fc:	7efb      	ldrb	r3, [r7, #27]
    20fe:	2b00      	cmp	r3, #0
    2100:	d101      	bne.n	2106 <disk_read+0x26>
		return RES_ERROR;
    2102:	2301      	movs	r3, #1
    2104:	e039      	b.n	217a <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    2106:	7bfa      	ldrb	r2, [r7, #15]
    2108:	f107 0314 	add.w	r3, r7, #20
    210c:	4610      	mov	r0, r2
    210e:	4619      	mov	r1, r3
    2110:	4b1d      	ldr	r3, [pc, #116]	; (2188 <disk_read+0xa8>)
    2112:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    2114:	7bbb      	ldrb	r3, [r7, #14]
    2116:	7efa      	ldrb	r2, [r7, #27]
    2118:	fb02 f303 	mul.w	r3, r2, r3
    211c:	461a      	mov	r2, r3
    211e:	687b      	ldr	r3, [r7, #4]
    2120:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    2122:	697b      	ldr	r3, [r7, #20]
    2124:	3301      	adds	r3, #1
    2126:	7ef9      	ldrb	r1, [r7, #27]
    2128:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
    212c:	429a      	cmp	r2, r3
    212e:	d901      	bls.n	2134 <disk_read+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
    2130:	2304      	movs	r3, #4
    2132:	e022      	b.n	217a <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    2134:	2300      	movs	r3, #0
    2136:	61fb      	str	r3, [r7, #28]
    2138:	e01a      	b.n	2170 <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    213a:	7efb      	ldrb	r3, [r7, #27]
    213c:	69fa      	ldr	r2, [r7, #28]
    213e:	fb02 f203 	mul.w	r2, r2, r3
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    2146:	7efb      	ldrb	r3, [r7, #27]
    2148:	69f9      	ldr	r1, [r7, #28]
    214a:	fb01 f303 	mul.w	r3, r1, r3
    214e:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    2150:	68b9      	ldr	r1, [r7, #8]
    2152:	440b      	add	r3, r1
    2154:	7bf9      	ldrb	r1, [r7, #15]
    2156:	4608      	mov	r0, r1
    2158:	4611      	mov	r1, r2
    215a:	461a      	mov	r2, r3
    215c:	4b0b      	ldr	r3, [pc, #44]	; (218c <disk_read+0xac>)
    215e:	4798      	blx	r3
    2160:	4603      	mov	r3, r0
    2162:	2b00      	cmp	r3, #0
    2164:	d001      	beq.n	216a <disk_read+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
    2166:	2301      	movs	r3, #1
    2168:	e007      	b.n	217a <disk_read+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    216a:	69fb      	ldr	r3, [r7, #28]
    216c:	3301      	adds	r3, #1
    216e:	61fb      	str	r3, [r7, #28]
    2170:	7bba      	ldrb	r2, [r7, #14]
    2172:	69fb      	ldr	r3, [r7, #28]
    2174:	429a      	cmp	r2, r3
    2176:	d8e0      	bhi.n	213a <disk_read+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
    2178:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    217a:	4618      	mov	r0, r3
    217c:	3720      	adds	r7, #32
    217e:	46bd      	mov	sp, r7
    2180:	bd80      	pop	{r7, pc}
    2182:	bf00      	nop
    2184:	00004ad1 	.word	0x00004ad1
    2188:	00004a99 	.word	0x00004a99
    218c:	00004b35 	.word	0x00004b35

00002190 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    2190:	b580      	push	{r7, lr}
    2192:	b088      	sub	sp, #32
    2194:	af00      	add	r7, sp, #0
    2196:	60b9      	str	r1, [r7, #8]
    2198:	607a      	str	r2, [r7, #4]
    219a:	4602      	mov	r2, r0
    219c:	73fa      	strb	r2, [r7, #15]
    219e:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    21a0:	7bfb      	ldrb	r3, [r7, #15]
    21a2:	4618      	mov	r0, r3
    21a4:	4b23      	ldr	r3, [pc, #140]	; (2234 <disk_write+0xa4>)
    21a6:	4798      	blx	r3
    21a8:	4603      	mov	r3, r0
    21aa:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    21ac:	7efb      	ldrb	r3, [r7, #27]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d101      	bne.n	21b6 <disk_write+0x26>
		return RES_ERROR;
    21b2:	2301      	movs	r3, #1
    21b4:	e039      	b.n	222a <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    21b6:	7bfa      	ldrb	r2, [r7, #15]
    21b8:	f107 0314 	add.w	r3, r7, #20
    21bc:	4610      	mov	r0, r2
    21be:	4619      	mov	r1, r3
    21c0:	4b1d      	ldr	r3, [pc, #116]	; (2238 <disk_write+0xa8>)
    21c2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    21c4:	7bbb      	ldrb	r3, [r7, #14]
    21c6:	7efa      	ldrb	r2, [r7, #27]
    21c8:	fb02 f303 	mul.w	r3, r2, r3
    21cc:	461a      	mov	r2, r3
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    21d2:	697b      	ldr	r3, [r7, #20]
    21d4:	3301      	adds	r3, #1
    21d6:	7ef9      	ldrb	r1, [r7, #27]
    21d8:	fb01 f303 	mul.w	r3, r1, r3
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
    21dc:	429a      	cmp	r2, r3
    21de:	d901      	bls.n	21e4 <disk_write+0x54>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
    21e0:	2304      	movs	r3, #4
    21e2:	e022      	b.n	222a <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    21e4:	2300      	movs	r3, #0
    21e6:	61fb      	str	r3, [r7, #28]
    21e8:	e01a      	b.n	2220 <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    21ea:	7efb      	ldrb	r3, [r7, #27]
    21ec:	69fa      	ldr	r2, [r7, #28]
    21ee:	fb02 f203 	mul.w	r2, r2, r3
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	441a      	add	r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    21f6:	7efb      	ldrb	r3, [r7, #27]
    21f8:	69f9      	ldr	r1, [r7, #28]
    21fa:	fb01 f303 	mul.w	r3, r1, r3
    21fe:	025b      	lsls	r3, r3, #9
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    2200:	68b9      	ldr	r1, [r7, #8]
    2202:	440b      	add	r3, r1
    2204:	7bf9      	ldrb	r1, [r7, #15]
    2206:	4608      	mov	r0, r1
    2208:	4611      	mov	r1, r2
    220a:	461a      	mov	r2, r3
    220c:	4b0b      	ldr	r3, [pc, #44]	; (223c <disk_write+0xac>)
    220e:	4798      	blx	r3
    2210:	4603      	mov	r3, r0
    2212:	2b00      	cmp	r3, #0
    2214:	d001      	beq.n	221a <disk_write+0x8a>
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
    2216:	2301      	movs	r3, #1
    2218:	e007      	b.n	222a <disk_write+0x9a>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    221a:	69fb      	ldr	r3, [r7, #28]
    221c:	3301      	adds	r3, #1
    221e:	61fb      	str	r3, [r7, #28]
    2220:	7bba      	ldrb	r2, [r7, #14]
    2222:	69fb      	ldr	r3, [r7, #28]
    2224:	429a      	cmp	r2, r3
    2226:	d8e0      	bhi.n	21ea <disk_write+0x5a>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
    2228:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    222a:	4618      	mov	r0, r3
    222c:	3720      	adds	r7, #32
    222e:	46bd      	mov	sp, r7
    2230:	bd80      	pop	{r7, pc}
    2232:	bf00      	nop
    2234:	00004ad1 	.word	0x00004ad1
    2238:	00004a99 	.word	0x00004a99
    223c:	00004b71 	.word	0x00004b71

00002240 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    2240:	b580      	push	{r7, lr}
    2242:	b084      	sub	sp, #16
    2244:	af00      	add	r7, sp, #0
    2246:	460b      	mov	r3, r1
    2248:	603a      	str	r2, [r7, #0]
    224a:	4602      	mov	r2, r0
    224c:	71fa      	strb	r2, [r7, #7]
    224e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
    2250:	2304      	movs	r3, #4
    2252:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
    2254:	79bb      	ldrb	r3, [r7, #6]
    2256:	2b03      	cmp	r3, #3
    2258:	d845      	bhi.n	22e6 <disk_ioctl+0xa6>
    225a:	a201      	add	r2, pc, #4	; (adr r2, 2260 <disk_ioctl+0x20>)
    225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2260:	000022cd 	.word	0x000022cd
    2264:	0000227d 	.word	0x0000227d
    2268:	00002299 	.word	0x00002299
    226c:	00002271 	.word	0x00002271
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    2270:	683b      	ldr	r3, [r7, #0]
    2272:	2201      	movs	r2, #1
    2274:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    2276:	2300      	movs	r3, #0
    2278:	73fb      	strb	r3, [r7, #15]
		break;
    227a:	e036      	b.n	22ea <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    227c:	79fa      	ldrb	r2, [r7, #7]
    227e:	f107 0308 	add.w	r3, r7, #8
    2282:	4610      	mov	r0, r2
    2284:	4619      	mov	r1, r3
    2286:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <disk_ioctl+0xb4>)
    2288:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    228a:	68bb      	ldr	r3, [r7, #8]
    228c:	1c5a      	adds	r2, r3, #1
    228e:	683b      	ldr	r3, [r7, #0]
    2290:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    2292:	2300      	movs	r3, #0
    2294:	73fb      	strb	r3, [r7, #15]
	}
	break;
    2296:	e028      	b.n	22ea <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    2298:	79fb      	ldrb	r3, [r7, #7]
    229a:	4618      	mov	r0, r3
    229c:	4b16      	ldr	r3, [pc, #88]	; (22f8 <disk_ioctl+0xb8>)
    229e:	4798      	blx	r3
    22a0:	4603      	mov	r3, r0
    22a2:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    22a4:	7bbb      	ldrb	r3, [r7, #14]
    22a6:	2b01      	cmp	r3, #1
    22a8:	d00a      	beq.n	22c0 <disk_ioctl+0x80>
    22aa:	7bbb      	ldrb	r3, [r7, #14]
    22ac:	2b02      	cmp	r3, #2
    22ae:	d007      	beq.n	22c0 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    22b0:	7bbb      	ldrb	r3, [r7, #14]
    22b2:	2b04      	cmp	r3, #4
    22b4:	d004      	beq.n	22c0 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    22b6:	7bbb      	ldrb	r3, [r7, #14]
    22b8:	2b08      	cmp	r3, #8
    22ba:	d001      	beq.n	22c0 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    22bc:	2301      	movs	r3, #1
    22be:	e015      	b.n	22ec <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    22c0:	683b      	ldr	r3, [r7, #0]
    22c2:	2200      	movs	r2, #0
    22c4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    22c6:	2300      	movs	r3, #0
    22c8:	73fb      	strb	r3, [r7, #15]
	}
	break;
    22ca:	e00e      	b.n	22ea <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    22cc:	79fb      	ldrb	r3, [r7, #7]
    22ce:	4618      	mov	r0, r3
    22d0:	4b0a      	ldr	r3, [pc, #40]	; (22fc <disk_ioctl+0xbc>)
    22d2:	4798      	blx	r3
    22d4:	4603      	mov	r3, r0
    22d6:	2b00      	cmp	r3, #0
    22d8:	d102      	bne.n	22e0 <disk_ioctl+0xa0>
			res = RES_OK;
    22da:	2300      	movs	r3, #0
    22dc:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
    22de:	e004      	b.n	22ea <disk_ioctl+0xaa>
	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
    22e0:	2303      	movs	r3, #3
    22e2:	73fb      	strb	r3, [r7, #15]
		}
		break;
    22e4:	e001      	b.n	22ea <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
    22e6:	2304      	movs	r3, #4
    22e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
    22ea:	7bfb      	ldrb	r3, [r7, #15]
}
    22ec:	4618      	mov	r0, r3
    22ee:	3710      	adds	r7, #16
    22f0:	46bd      	mov	sp, r7
    22f2:	bd80      	pop	{r7, pc}
    22f4:	00004a99 	.word	0x00004a99
    22f8:	00004ad1 	.word	0x00004ad1
    22fc:	00004a65 	.word	0x00004a65

00002300 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    2300:	b580      	push	{r7, lr}
    2302:	b082      	sub	sp, #8
    2304:	af00      	add	r7, sp, #0
	uint32_t time_val;
	struct ast_calv calendar;

	/* Retrieve date and time */
	calendar = ast_read_calendar_value(AST).FIELD;
    2306:	4817      	ldr	r0, [pc, #92]	; (2364 <get_fattime+0x64>)
    2308:	4b17      	ldr	r3, [pc, #92]	; (2368 <get_fattime+0x68>)
    230a:	4798      	blx	r3
    230c:	4603      	mov	r3, r0
    230e:	603b      	str	r3, [r7, #0]

	time_val = ((calendar.year - 1980) << 25)
    2310:	78fb      	ldrb	r3, [r7, #3]
    2312:	f3c3 0385 	ubfx	r3, r3, #2, #6
    2316:	b2db      	uxtb	r3, r3
    2318:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    231c:	065a      	lsls	r2, r3, #25
			| (calendar.month << 21)
    231e:	887b      	ldrh	r3, [r7, #2]
    2320:	f3c3 1383 	ubfx	r3, r3, #6, #4
    2324:	b2db      	uxtb	r3, r3
    2326:	055b      	lsls	r3, r3, #21
    2328:	431a      	orrs	r2, r3
			| (calendar.day << 16)
    232a:	78bb      	ldrb	r3, [r7, #2]
    232c:	f3c3 0344 	ubfx	r3, r3, #1, #5
    2330:	b2db      	uxtb	r3, r3
    2332:	041b      	lsls	r3, r3, #16
    2334:	431a      	orrs	r2, r3
			| (calendar.hour << 11)
    2336:	683b      	ldr	r3, [r7, #0]
    2338:	f3c3 3304 	ubfx	r3, r3, #12, #5
    233c:	b2db      	uxtb	r3, r3
    233e:	02db      	lsls	r3, r3, #11
    2340:	431a      	orrs	r2, r3
			| (calendar.min << 5)
    2342:	883b      	ldrh	r3, [r7, #0]
    2344:	f3c3 1385 	ubfx	r3, r3, #6, #6
    2348:	b2db      	uxtb	r3, r3
    234a:	015b      	lsls	r3, r3, #5
    234c:	431a      	orrs	r2, r3
			| (calendar.sec << 0);
    234e:	783b      	ldrb	r3, [r7, #0]
    2350:	f3c3 0305 	ubfx	r3, r3, #0, #6
    2354:	b2db      	uxtb	r3, r3
    2356:	4313      	orrs	r3, r2
	struct ast_calv calendar;

	/* Retrieve date and time */
	calendar = ast_read_calendar_value(AST).FIELD;

	time_val = ((calendar.year - 1980) << 25)
    2358:	607b      	str	r3, [r7, #4]
			| (calendar.day << 16)
			| (calendar.hour << 11)
			| (calendar.min << 5)
			| (calendar.sec << 0);

	return time_val;
    235a:	687b      	ldr	r3, [r7, #4]
}
    235c:	4618      	mov	r0, r3
    235e:	3708      	adds	r7, #8
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}
    2364:	400f0800 	.word	0x400f0800
    2368:	00004f3d 	.word	0x00004f3d

0000236c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    236c:	b480      	push	{r7}
    236e:	b085      	sub	sp, #20
    2370:	af00      	add	r7, sp, #0
    2372:	4603      	mov	r3, r0
    2374:	6039      	str	r1, [r7, #0]
    2376:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    2378:	88fb      	ldrh	r3, [r7, #6]
    237a:	2b7f      	cmp	r3, #127	; 0x7f
    237c:	d802      	bhi.n	2384 <ff_convert+0x18>
		c = src;
    237e:	88fb      	ldrh	r3, [r7, #6]
    2380:	81fb      	strh	r3, [r7, #14]
    2382:	e025      	b.n	23d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    2384:	683b      	ldr	r3, [r7, #0]
    2386:	2b00      	cmp	r3, #0
    2388:	d00c      	beq.n	23a4 <ff_convert+0x38>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    238a:	88fb      	ldrh	r3, [r7, #6]
    238c:	2bff      	cmp	r3, #255	; 0xff
    238e:	d806      	bhi.n	239e <ff_convert+0x32>
    2390:	88fb      	ldrh	r3, [r7, #6]
    2392:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
    2396:	4b12      	ldr	r3, [pc, #72]	; (23e0 <ff_convert+0x74>)
    2398:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    239c:	e000      	b.n	23a0 <ff_convert+0x34>
    239e:	2300      	movs	r3, #0
    23a0:	81fb      	strh	r3, [r7, #14]
    23a2:	e015      	b.n	23d0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    23a4:	2300      	movs	r3, #0
    23a6:	81fb      	strh	r3, [r7, #14]
    23a8:	e00a      	b.n	23c0 <ff_convert+0x54>
				if (src == Tbl[c]) break;
    23aa:	89fa      	ldrh	r2, [r7, #14]
    23ac:	4b0c      	ldr	r3, [pc, #48]	; (23e0 <ff_convert+0x74>)
    23ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    23b2:	88fa      	ldrh	r2, [r7, #6]
    23b4:	429a      	cmp	r2, r3
    23b6:	d100      	bne.n	23ba <ff_convert+0x4e>
    23b8:	e005      	b.n	23c6 <ff_convert+0x5a>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    23ba:	89fb      	ldrh	r3, [r7, #14]
    23bc:	3301      	adds	r3, #1
    23be:	81fb      	strh	r3, [r7, #14]
    23c0:	89fb      	ldrh	r3, [r7, #14]
    23c2:	2b7f      	cmp	r3, #127	; 0x7f
    23c4:	d9f1      	bls.n	23aa <ff_convert+0x3e>
				if (src == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    23c6:	89fb      	ldrh	r3, [r7, #14]
    23c8:	3380      	adds	r3, #128	; 0x80
    23ca:	b29b      	uxth	r3, r3
    23cc:	b2db      	uxtb	r3, r3
    23ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
    23d0:	89fb      	ldrh	r3, [r7, #14]
}
    23d2:	4618      	mov	r0, r3
    23d4:	3714      	adds	r7, #20
    23d6:	46bd      	mov	sp, r7
    23d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	000126d4 	.word	0x000126d4

000023e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    23e4:	b480      	push	{r7}
    23e6:	b085      	sub	sp, #20
    23e8:	af00      	add	r7, sp, #0
    23ea:	4603      	mov	r3, r0
    23ec:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    23ee:	2300      	movs	r3, #0
    23f0:	60fb      	str	r3, [r7, #12]
    23f2:	e002      	b.n	23fa <ff_wtoupper+0x16>
    23f4:	68fb      	ldr	r3, [r7, #12]
    23f6:	3301      	adds	r3, #1
    23f8:	60fb      	str	r3, [r7, #12]
    23fa:	4b0f      	ldr	r3, [pc, #60]	; (2438 <ff_wtoupper+0x54>)
    23fc:	68fa      	ldr	r2, [r7, #12]
    23fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2402:	2b00      	cmp	r3, #0
    2404:	d006      	beq.n	2414 <ff_wtoupper+0x30>
    2406:	4b0c      	ldr	r3, [pc, #48]	; (2438 <ff_wtoupper+0x54>)
    2408:	68fa      	ldr	r2, [r7, #12]
    240a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    240e:	88fa      	ldrh	r2, [r7, #6]
    2410:	429a      	cmp	r2, r3
    2412:	d1ef      	bne.n	23f4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    2414:	4b08      	ldr	r3, [pc, #32]	; (2438 <ff_wtoupper+0x54>)
    2416:	68fa      	ldr	r2, [r7, #12]
    2418:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    241c:	2b00      	cmp	r3, #0
    241e:	d004      	beq.n	242a <ff_wtoupper+0x46>
    2420:	4b06      	ldr	r3, [pc, #24]	; (243c <ff_wtoupper+0x58>)
    2422:	68fa      	ldr	r2, [r7, #12]
    2424:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2428:	e000      	b.n	242c <ff_wtoupper+0x48>
    242a:	88fb      	ldrh	r3, [r7, #6]
}
    242c:	4618      	mov	r0, r3
    242e:	3714      	adds	r7, #20
    2430:	46bd      	mov	sp, r7
    2432:	f85d 7b04 	ldr.w	r7, [sp], #4
    2436:	4770      	bx	lr
    2438:	000127d4 	.word	0x000127d4
    243c:	000129b4 	.word	0x000129b4

00002440 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2440:	b480      	push	{r7}
    2442:	b087      	sub	sp, #28
    2444:	af00      	add	r7, sp, #0
    2446:	60f8      	str	r0, [r7, #12]
    2448:	60b9      	str	r1, [r7, #8]
    244a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    244c:	68fb      	ldr	r3, [r7, #12]
    244e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    2450:	68bb      	ldr	r3, [r7, #8]
    2452:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2454:	e007      	b.n	2466 <mem_cpy+0x26>
		*d++ = *s++;
    2456:	697b      	ldr	r3, [r7, #20]
    2458:	1c5a      	adds	r2, r3, #1
    245a:	617a      	str	r2, [r7, #20]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	1c51      	adds	r1, r2, #1
    2460:	6139      	str	r1, [r7, #16]
    2462:	7812      	ldrb	r2, [r2, #0]
    2464:	701a      	strb	r2, [r3, #0]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	1e5a      	subs	r2, r3, #1
    246a:	607a      	str	r2, [r7, #4]
    246c:	2b00      	cmp	r3, #0
    246e:	d1f2      	bne.n	2456 <mem_cpy+0x16>
		*d++ = *s++;
}
    2470:	371c      	adds	r7, #28
    2472:	46bd      	mov	sp, r7
    2474:	f85d 7b04 	ldr.w	r7, [sp], #4
    2478:	4770      	bx	lr
    247a:	bf00      	nop

0000247c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    247c:	b480      	push	{r7}
    247e:	b087      	sub	sp, #28
    2480:	af00      	add	r7, sp, #0
    2482:	60f8      	str	r0, [r7, #12]
    2484:	60b9      	str	r1, [r7, #8]
    2486:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    2488:	68fb      	ldr	r3, [r7, #12]
    248a:	617b      	str	r3, [r7, #20]

	while (cnt--)
    248c:	e005      	b.n	249a <mem_set+0x1e>
		*d++ = (BYTE)val;
    248e:	697b      	ldr	r3, [r7, #20]
    2490:	1c5a      	adds	r2, r3, #1
    2492:	617a      	str	r2, [r7, #20]
    2494:	68ba      	ldr	r2, [r7, #8]
    2496:	b2d2      	uxtb	r2, r2
    2498:	701a      	strb	r2, [r3, #0]
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	1e5a      	subs	r2, r3, #1
    249e:	607a      	str	r2, [r7, #4]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d1f4      	bne.n	248e <mem_set+0x12>
		*d++ = (BYTE)val;
}
    24a4:	371c      	adds	r7, #28
    24a6:	46bd      	mov	sp, r7
    24a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop

000024b0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    24b0:	b480      	push	{r7}
    24b2:	b089      	sub	sp, #36	; 0x24
    24b4:	af00      	add	r7, sp, #0
    24b6:	60f8      	str	r0, [r7, #12]
    24b8:	60b9      	str	r1, [r7, #8]
    24ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    24bc:	68fb      	ldr	r3, [r7, #12]
    24be:	61fb      	str	r3, [r7, #28]
    24c0:	68bb      	ldr	r3, [r7, #8]
    24c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
    24c4:	2300      	movs	r3, #0
    24c6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    24c8:	bf00      	nop
    24ca:	687b      	ldr	r3, [r7, #4]
    24cc:	1e5a      	subs	r2, r3, #1
    24ce:	607a      	str	r2, [r7, #4]
    24d0:	2b00      	cmp	r3, #0
    24d2:	d00d      	beq.n	24f0 <mem_cmp+0x40>
    24d4:	69fb      	ldr	r3, [r7, #28]
    24d6:	1c5a      	adds	r2, r3, #1
    24d8:	61fa      	str	r2, [r7, #28]
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	461a      	mov	r2, r3
    24de:	69bb      	ldr	r3, [r7, #24]
    24e0:	1c59      	adds	r1, r3, #1
    24e2:	61b9      	str	r1, [r7, #24]
    24e4:	781b      	ldrb	r3, [r3, #0]
    24e6:	1ad3      	subs	r3, r2, r3
    24e8:	617b      	str	r3, [r7, #20]
    24ea:	697b      	ldr	r3, [r7, #20]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d0ec      	beq.n	24ca <mem_cmp+0x1a>
	return r;
    24f0:	697b      	ldr	r3, [r7, #20]
}
    24f2:	4618      	mov	r0, r3
    24f4:	3724      	adds	r7, #36	; 0x24
    24f6:	46bd      	mov	sp, r7
    24f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    24fc:	4770      	bx	lr
    24fe:	bf00      	nop

00002500 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    2500:	b480      	push	{r7}
    2502:	b083      	sub	sp, #12
    2504:	af00      	add	r7, sp, #0
    2506:	6078      	str	r0, [r7, #4]
    2508:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    250a:	e002      	b.n	2512 <chk_chr+0x12>
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	3301      	adds	r3, #1
    2510:	607b      	str	r3, [r7, #4]
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	2b00      	cmp	r3, #0
    2518:	d005      	beq.n	2526 <chk_chr+0x26>
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	781b      	ldrb	r3, [r3, #0]
    251e:	461a      	mov	r2, r3
    2520:	683b      	ldr	r3, [r7, #0]
    2522:	429a      	cmp	r2, r3
    2524:	d1f2      	bne.n	250c <chk_chr+0xc>
	return *str;
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	781b      	ldrb	r3, [r3, #0]
}
    252a:	4618      	mov	r0, r3
    252c:	370c      	adds	r7, #12
    252e:	46bd      	mov	sp, r7
    2530:	f85d 7b04 	ldr.w	r7, [sp], #4
    2534:	4770      	bx	lr
    2536:	bf00      	nop

00002538 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    2538:	b590      	push	{r4, r7, lr}
    253a:	b085      	sub	sp, #20
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
    2540:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2546:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    2548:	68fa      	ldr	r2, [r7, #12]
    254a:	683b      	ldr	r3, [r7, #0]
    254c:	429a      	cmp	r2, r3
    254e:	d04b      	beq.n	25e8 <move_window+0xb0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	791b      	ldrb	r3, [r3, #4]
    2554:	2b00      	cmp	r3, #0
    2556:	d032      	beq.n	25be <move_window+0x86>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	785a      	ldrb	r2, [r3, #1]
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	3330      	adds	r3, #48	; 0x30
    2560:	4610      	mov	r0, r2
    2562:	4619      	mov	r1, r3
    2564:	68fa      	ldr	r2, [r7, #12]
    2566:	2301      	movs	r3, #1
    2568:	4c22      	ldr	r4, [pc, #136]	; (25f4 <move_window+0xbc>)
    256a:	47a0      	blx	r4
    256c:	4603      	mov	r3, r0
    256e:	2b00      	cmp	r3, #0
    2570:	d001      	beq.n	2576 <move_window+0x3e>
				return FR_DISK_ERR;
    2572:	2301      	movs	r3, #1
    2574:	e039      	b.n	25ea <move_window+0xb2>
			fs->wflag = 0;
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	2200      	movs	r2, #0
    257a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	6a1a      	ldr	r2, [r3, #32]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	69db      	ldr	r3, [r3, #28]
    2584:	441a      	add	r2, r3
    2586:	68fb      	ldr	r3, [r7, #12]
    2588:	429a      	cmp	r2, r3
    258a:	d918      	bls.n	25be <move_window+0x86>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	78db      	ldrb	r3, [r3, #3]
    2590:	72fb      	strb	r3, [r7, #11]
    2592:	e011      	b.n	25b8 <move_window+0x80>
					wsect += fs->fsize;
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	69db      	ldr	r3, [r3, #28]
    2598:	68fa      	ldr	r2, [r7, #12]
    259a:	4413      	add	r3, r2
    259c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    259e:	687b      	ldr	r3, [r7, #4]
    25a0:	785a      	ldrb	r2, [r3, #1]
    25a2:	687b      	ldr	r3, [r7, #4]
    25a4:	3330      	adds	r3, #48	; 0x30
    25a6:	4610      	mov	r0, r2
    25a8:	4619      	mov	r1, r3
    25aa:	68fa      	ldr	r2, [r7, #12]
    25ac:	2301      	movs	r3, #1
    25ae:	4c11      	ldr	r4, [pc, #68]	; (25f4 <move_window+0xbc>)
    25b0:	47a0      	blx	r4
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    25b2:	7afb      	ldrb	r3, [r7, #11]
    25b4:	3b01      	subs	r3, #1
    25b6:	72fb      	strb	r3, [r7, #11]
    25b8:	7afb      	ldrb	r3, [r7, #11]
    25ba:	2b01      	cmp	r3, #1
    25bc:	d8ea      	bhi.n	2594 <move_window+0x5c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    25be:	683b      	ldr	r3, [r7, #0]
    25c0:	2b00      	cmp	r3, #0
    25c2:	d011      	beq.n	25e8 <move_window+0xb0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	785a      	ldrb	r2, [r3, #1]
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	3330      	adds	r3, #48	; 0x30
    25cc:	4610      	mov	r0, r2
    25ce:	4619      	mov	r1, r3
    25d0:	683a      	ldr	r2, [r7, #0]
    25d2:	2301      	movs	r3, #1
    25d4:	4c08      	ldr	r4, [pc, #32]	; (25f8 <move_window+0xc0>)
    25d6:	47a0      	blx	r4
    25d8:	4603      	mov	r3, r0
    25da:	2b00      	cmp	r3, #0
    25dc:	d001      	beq.n	25e2 <move_window+0xaa>
				return FR_DISK_ERR;
    25de:	2301      	movs	r3, #1
    25e0:	e003      	b.n	25ea <move_window+0xb2>
			fs->winsect = sector;
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	683a      	ldr	r2, [r7, #0]
    25e6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    25e8:	2300      	movs	r3, #0
}
    25ea:	4618      	mov	r0, r3
    25ec:	3714      	adds	r7, #20
    25ee:	46bd      	mov	sp, r7
    25f0:	bd90      	pop	{r4, r7, pc}
    25f2:	bf00      	nop
    25f4:	00002191 	.word	0x00002191
    25f8:	000020e1 	.word	0x000020e1

000025fc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    25fc:	b590      	push	{r4, r7, lr}
    25fe:	b085      	sub	sp, #20
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    2604:	6878      	ldr	r0, [r7, #4]
    2606:	2100      	movs	r1, #0
    2608:	4b4f      	ldr	r3, [pc, #316]	; (2748 <sync+0x14c>)
    260a:	4798      	blx	r3
    260c:	4603      	mov	r3, r0
    260e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
    2610:	7bfb      	ldrb	r3, [r7, #15]
    2612:	2b00      	cmp	r3, #0
    2614:	f040 8092 	bne.w	273c <sync+0x140>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	781b      	ldrb	r3, [r3, #0]
    261c:	2b03      	cmp	r3, #3
    261e:	f040 8081 	bne.w	2724 <sync+0x128>
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	795b      	ldrb	r3, [r3, #5]
    2626:	2b00      	cmp	r3, #0
    2628:	d07c      	beq.n	2724 <sync+0x128>
			fs->winsect = 0;
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	2200      	movs	r2, #0
    262e:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	3330      	adds	r3, #48	; 0x30
    2634:	4618      	mov	r0, r3
    2636:	2100      	movs	r1, #0
    2638:	f44f 7200 	mov.w	r2, #512	; 0x200
    263c:	4b43      	ldr	r3, [pc, #268]	; (274c <sync+0x150>)
    263e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2640:	687b      	ldr	r3, [r7, #4]
    2642:	2255      	movs	r2, #85	; 0x55
    2644:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	22aa      	movs	r2, #170	; 0xaa
    264c:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	2252      	movs	r2, #82	; 0x52
    2654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	2252      	movs	r2, #82	; 0x52
    265c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	2261      	movs	r2, #97	; 0x61
    2664:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	2241      	movs	r2, #65	; 0x41
    266c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	2272      	movs	r2, #114	; 0x72
    2674:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	2272      	movs	r2, #114	; 0x72
    267c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    2680:	687b      	ldr	r3, [r7, #4]
    2682:	2241      	movs	r2, #65	; 0x41
    2684:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	2261      	movs	r2, #97	; 0x61
    268c:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	691b      	ldr	r3, [r3, #16]
    2694:	b2da      	uxtb	r2, r3
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	691b      	ldr	r3, [r3, #16]
    26a0:	b29b      	uxth	r3, r3
    26a2:	0a1b      	lsrs	r3, r3, #8
    26a4:	b29b      	uxth	r3, r3
    26a6:	b2da      	uxtb	r2, r3
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    26ae:	687b      	ldr	r3, [r7, #4]
    26b0:	691b      	ldr	r3, [r3, #16]
    26b2:	0c1b      	lsrs	r3, r3, #16
    26b4:	b2da      	uxtb	r2, r3
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    26bc:	687b      	ldr	r3, [r7, #4]
    26be:	691b      	ldr	r3, [r3, #16]
    26c0:	0e1b      	lsrs	r3, r3, #24
    26c2:	b2da      	uxtb	r2, r3
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	68db      	ldr	r3, [r3, #12]
    26ce:	b2da      	uxtb	r2, r3
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	68db      	ldr	r3, [r3, #12]
    26da:	b29b      	uxth	r3, r3
    26dc:	0a1b      	lsrs	r3, r3, #8
    26de:	b29b      	uxth	r3, r3
    26e0:	b2da      	uxtb	r2, r3
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	68db      	ldr	r3, [r3, #12]
    26ec:	0c1b      	lsrs	r3, r3, #16
    26ee:	b2da      	uxtb	r2, r3
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	68db      	ldr	r3, [r3, #12]
    26fa:	0e1b      	lsrs	r3, r3, #24
    26fc:	b2da      	uxtb	r2, r3
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	7859      	ldrb	r1, [r3, #1]
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	f103 0230 	add.w	r2, r3, #48	; 0x30
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	695b      	ldr	r3, [r3, #20]
    2712:	4608      	mov	r0, r1
    2714:	4611      	mov	r1, r2
    2716:	461a      	mov	r2, r3
    2718:	2301      	movs	r3, #1
    271a:	4c0d      	ldr	r4, [pc, #52]	; (2750 <sync+0x154>)
    271c:	47a0      	blx	r4
			fs->fsi_flag = 0;
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	2200      	movs	r2, #0
    2722:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	785b      	ldrb	r3, [r3, #1]
    2728:	4618      	mov	r0, r3
    272a:	2100      	movs	r1, #0
    272c:	2200      	movs	r2, #0
    272e:	4b09      	ldr	r3, [pc, #36]	; (2754 <sync+0x158>)
    2730:	4798      	blx	r3
    2732:	4603      	mov	r3, r0
    2734:	2b00      	cmp	r3, #0
    2736:	d001      	beq.n	273c <sync+0x140>
			res = FR_DISK_ERR;
    2738:	2301      	movs	r3, #1
    273a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
    273c:	7bfb      	ldrb	r3, [r7, #15]
}
    273e:	4618      	mov	r0, r3
    2740:	3714      	adds	r7, #20
    2742:	46bd      	mov	sp, r7
    2744:	bd90      	pop	{r4, r7, pc}
    2746:	bf00      	nop
    2748:	00002539 	.word	0x00002539
    274c:	0000247d 	.word	0x0000247d
    2750:	00002191 	.word	0x00002191
    2754:	00002241 	.word	0x00002241

00002758 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2758:	b480      	push	{r7}
    275a:	b083      	sub	sp, #12
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
    2760:	6039      	str	r1, [r7, #0]
	clst -= 2;
    2762:	683b      	ldr	r3, [r7, #0]
    2764:	3b02      	subs	r3, #2
    2766:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	699b      	ldr	r3, [r3, #24]
    276c:	1e9a      	subs	r2, r3, #2
    276e:	683b      	ldr	r3, [r7, #0]
    2770:	429a      	cmp	r2, r3
    2772:	d801      	bhi.n	2778 <clust2sect+0x20>
    2774:	2300      	movs	r3, #0
    2776:	e007      	b.n	2788 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	789b      	ldrb	r3, [r3, #2]
    277c:	683a      	ldr	r2, [r7, #0]
    277e:	fb02 f203 	mul.w	r2, r2, r3
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2786:	4413      	add	r3, r2
}
    2788:	4618      	mov	r0, r3
    278a:	370c      	adds	r7, #12
    278c:	46bd      	mov	sp, r7
    278e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2792:	4770      	bx	lr

00002794 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    2794:	b580      	push	{r7, lr}
    2796:	b086      	sub	sp, #24
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
    279c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    279e:	683b      	ldr	r3, [r7, #0]
    27a0:	2b01      	cmp	r3, #1
    27a2:	d904      	bls.n	27ae <get_fat+0x1a>
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	699a      	ldr	r2, [r3, #24]
    27a8:	683b      	ldr	r3, [r7, #0]
    27aa:	429a      	cmp	r2, r3
    27ac:	d801      	bhi.n	27b2 <get_fat+0x1e>
		return 1;
    27ae:	2301      	movs	r3, #1
    27b0:	e096      	b.n	28e0 <get_fat+0x14c>

	switch (fs->fs_type) {
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	2b02      	cmp	r3, #2
    27b8:	d047      	beq.n	284a <get_fat+0xb6>
    27ba:	2b03      	cmp	r3, #3
    27bc:	d065      	beq.n	288a <get_fat+0xf6>
    27be:	2b01      	cmp	r3, #1
    27c0:	f040 808c 	bne.w	28dc <get_fat+0x148>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    27c4:	683b      	ldr	r3, [r7, #0]
    27c6:	617b      	str	r3, [r7, #20]
    27c8:	697b      	ldr	r3, [r7, #20]
    27ca:	085b      	lsrs	r3, r3, #1
    27cc:	697a      	ldr	r2, [r7, #20]
    27ce:	4413      	add	r3, r2
    27d0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	6a1a      	ldr	r2, [r3, #32]
    27d6:	697b      	ldr	r3, [r7, #20]
    27d8:	0a5b      	lsrs	r3, r3, #9
    27da:	4413      	add	r3, r2
    27dc:	6878      	ldr	r0, [r7, #4]
    27de:	4619      	mov	r1, r3
    27e0:	4b41      	ldr	r3, [pc, #260]	; (28e8 <get_fat+0x154>)
    27e2:	4798      	blx	r3
    27e4:	4603      	mov	r3, r0
    27e6:	2b00      	cmp	r3, #0
    27e8:	d000      	beq.n	27ec <get_fat+0x58>
    27ea:	e077      	b.n	28dc <get_fat+0x148>
		wc = fs->win[bc % SS(fs)]; bc++;
    27ec:	697b      	ldr	r3, [r7, #20]
    27ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	4413      	add	r3, r2
    27f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    27fa:	613b      	str	r3, [r7, #16]
    27fc:	697b      	ldr	r3, [r7, #20]
    27fe:	3301      	adds	r3, #1
    2800:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	6a1a      	ldr	r2, [r3, #32]
    2806:	697b      	ldr	r3, [r7, #20]
    2808:	0a5b      	lsrs	r3, r3, #9
    280a:	4413      	add	r3, r2
    280c:	6878      	ldr	r0, [r7, #4]
    280e:	4619      	mov	r1, r3
    2810:	4b35      	ldr	r3, [pc, #212]	; (28e8 <get_fat+0x154>)
    2812:	4798      	blx	r3
    2814:	4603      	mov	r3, r0
    2816:	2b00      	cmp	r3, #0
    2818:	d000      	beq.n	281c <get_fat+0x88>
    281a:	e05f      	b.n	28dc <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
    281c:	697b      	ldr	r3, [r7, #20]
    281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2822:	687a      	ldr	r2, [r7, #4]
    2824:	4413      	add	r3, r2
    2826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    282a:	021b      	lsls	r3, r3, #8
    282c:	693a      	ldr	r2, [r7, #16]
    282e:	4313      	orrs	r3, r2
    2830:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    2832:	683b      	ldr	r3, [r7, #0]
    2834:	f003 0301 	and.w	r3, r3, #1
    2838:	2b00      	cmp	r3, #0
    283a:	d002      	beq.n	2842 <get_fat+0xae>
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	091b      	lsrs	r3, r3, #4
    2840:	e002      	b.n	2848 <get_fat+0xb4>
    2842:	693b      	ldr	r3, [r7, #16]
    2844:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2848:	e04a      	b.n	28e0 <get_fat+0x14c>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	6a1a      	ldr	r2, [r3, #32]
    284e:	683b      	ldr	r3, [r7, #0]
    2850:	0a1b      	lsrs	r3, r3, #8
    2852:	4413      	add	r3, r2
    2854:	6878      	ldr	r0, [r7, #4]
    2856:	4619      	mov	r1, r3
    2858:	4b23      	ldr	r3, [pc, #140]	; (28e8 <get_fat+0x154>)
    285a:	4798      	blx	r3
    285c:	4603      	mov	r3, r0
    285e:	2b00      	cmp	r3, #0
    2860:	d000      	beq.n	2864 <get_fat+0xd0>
    2862:	e03b      	b.n	28dc <get_fat+0x148>
		p = &fs->win[clst * 2 % SS(fs)];
    2864:	683b      	ldr	r3, [r7, #0]
    2866:	005b      	lsls	r3, r3, #1
    2868:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
    286c:	3330      	adds	r3, #48	; 0x30
    286e:	687a      	ldr	r2, [r7, #4]
    2870:	4413      	add	r3, r2
    2872:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	3301      	adds	r3, #1
    2878:	781b      	ldrb	r3, [r3, #0]
    287a:	021b      	lsls	r3, r3, #8
    287c:	b29a      	uxth	r2, r3
    287e:	68fb      	ldr	r3, [r7, #12]
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	4313      	orrs	r3, r2
    2884:	b29b      	uxth	r3, r3
    2886:	b29b      	uxth	r3, r3
    2888:	e02a      	b.n	28e0 <get_fat+0x14c>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	6a1a      	ldr	r2, [r3, #32]
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	09db      	lsrs	r3, r3, #7
    2892:	4413      	add	r3, r2
    2894:	6878      	ldr	r0, [r7, #4]
    2896:	4619      	mov	r1, r3
    2898:	4b13      	ldr	r3, [pc, #76]	; (28e8 <get_fat+0x154>)
    289a:	4798      	blx	r3
    289c:	4603      	mov	r3, r0
    289e:	2b00      	cmp	r3, #0
    28a0:	d000      	beq.n	28a4 <get_fat+0x110>
    28a2:	e01b      	b.n	28dc <get_fat+0x148>
		p = &fs->win[clst * 4 % SS(fs)];
    28a4:	683b      	ldr	r3, [r7, #0]
    28a6:	009b      	lsls	r3, r3, #2
    28a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
    28ac:	3330      	adds	r3, #48	; 0x30
    28ae:	687a      	ldr	r2, [r7, #4]
    28b0:	4413      	add	r3, r2
    28b2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    28b4:	68fb      	ldr	r3, [r7, #12]
    28b6:	3303      	adds	r3, #3
    28b8:	781b      	ldrb	r3, [r3, #0]
    28ba:	061a      	lsls	r2, r3, #24
    28bc:	68fb      	ldr	r3, [r7, #12]
    28be:	3302      	adds	r3, #2
    28c0:	781b      	ldrb	r3, [r3, #0]
    28c2:	041b      	lsls	r3, r3, #16
    28c4:	431a      	orrs	r2, r3
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	3301      	adds	r3, #1
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	021b      	lsls	r3, r3, #8
    28ce:	431a      	orrs	r2, r3
    28d0:	68fb      	ldr	r3, [r7, #12]
    28d2:	781b      	ldrb	r3, [r3, #0]
    28d4:	4313      	orrs	r3, r2
    28d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    28da:	e001      	b.n	28e0 <get_fat+0x14c>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    28dc:	f04f 33ff 	mov.w	r3, #4294967295
}
    28e0:	4618      	mov	r0, r3
    28e2:	3718      	adds	r7, #24
    28e4:	46bd      	mov	sp, r7
    28e6:	bd80      	pop	{r7, pc}
    28e8:	00002539 	.word	0x00002539

000028ec <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    28ec:	b580      	push	{r7, lr}
    28ee:	b088      	sub	sp, #32
    28f0:	af00      	add	r7, sp, #0
    28f2:	60f8      	str	r0, [r7, #12]
    28f4:	60b9      	str	r1, [r7, #8]
    28f6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    28f8:	68bb      	ldr	r3, [r7, #8]
    28fa:	2b01      	cmp	r3, #1
    28fc:	d904      	bls.n	2908 <put_fat+0x1c>
    28fe:	68fb      	ldr	r3, [r7, #12]
    2900:	699a      	ldr	r2, [r3, #24]
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	429a      	cmp	r2, r3
    2906:	d802      	bhi.n	290e <put_fat+0x22>
		res = FR_INT_ERR;
    2908:	2302      	movs	r3, #2
    290a:	77fb      	strb	r3, [r7, #31]
    290c:	e0e3      	b.n	2ad6 <put_fat+0x1ea>

	} else {
		switch (fs->fs_type) {
    290e:	68fb      	ldr	r3, [r7, #12]
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	2b02      	cmp	r3, #2
    2914:	d070      	beq.n	29f8 <put_fat+0x10c>
    2916:	2b03      	cmp	r3, #3
    2918:	f000 8092 	beq.w	2a40 <put_fat+0x154>
    291c:	2b01      	cmp	r3, #1
    291e:	f040 80d5 	bne.w	2acc <put_fat+0x1e0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	61bb      	str	r3, [r7, #24]
    2926:	69bb      	ldr	r3, [r7, #24]
    2928:	085b      	lsrs	r3, r3, #1
    292a:	69ba      	ldr	r2, [r7, #24]
    292c:	4413      	add	r3, r2
    292e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2930:	68fb      	ldr	r3, [r7, #12]
    2932:	6a1a      	ldr	r2, [r3, #32]
    2934:	69bb      	ldr	r3, [r7, #24]
    2936:	0a5b      	lsrs	r3, r3, #9
    2938:	4413      	add	r3, r2
    293a:	68f8      	ldr	r0, [r7, #12]
    293c:	4619      	mov	r1, r3
    293e:	4b68      	ldr	r3, [pc, #416]	; (2ae0 <put_fat+0x1f4>)
    2940:	4798      	blx	r3
    2942:	4603      	mov	r3, r0
    2944:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
    2946:	7ffb      	ldrb	r3, [r7, #31]
    2948:	2b00      	cmp	r3, #0
    294a:	d000      	beq.n	294e <put_fat+0x62>
    294c:	e0c0      	b.n	2ad0 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
    294e:	69bb      	ldr	r3, [r7, #24]
    2950:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2954:	3330      	adds	r3, #48	; 0x30
    2956:	68fa      	ldr	r2, [r7, #12]
    2958:	4413      	add	r3, r2
    295a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    295c:	68bb      	ldr	r3, [r7, #8]
    295e:	f003 0301 	and.w	r3, r3, #1
    2962:	2b00      	cmp	r3, #0
    2964:	d00d      	beq.n	2982 <put_fat+0x96>
    2966:	697b      	ldr	r3, [r7, #20]
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	b2db      	uxtb	r3, r3
    296c:	f003 030f 	and.w	r3, r3, #15
    2970:	b2da      	uxtb	r2, r3
    2972:	687b      	ldr	r3, [r7, #4]
    2974:	b2db      	uxtb	r3, r3
    2976:	011b      	lsls	r3, r3, #4
    2978:	b2db      	uxtb	r3, r3
    297a:	4313      	orrs	r3, r2
    297c:	b2db      	uxtb	r3, r3
    297e:	b2db      	uxtb	r3, r3
    2980:	e001      	b.n	2986 <put_fat+0x9a>
    2982:	687b      	ldr	r3, [r7, #4]
    2984:	b2db      	uxtb	r3, r3
    2986:	697a      	ldr	r2, [r7, #20]
    2988:	7013      	strb	r3, [r2, #0]
			bc++;
    298a:	69bb      	ldr	r3, [r7, #24]
    298c:	3301      	adds	r3, #1
    298e:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    2990:	68fb      	ldr	r3, [r7, #12]
    2992:	2201      	movs	r2, #1
    2994:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	6a1a      	ldr	r2, [r3, #32]
    299a:	69bb      	ldr	r3, [r7, #24]
    299c:	0a5b      	lsrs	r3, r3, #9
    299e:	4413      	add	r3, r2
    29a0:	68f8      	ldr	r0, [r7, #12]
    29a2:	4619      	mov	r1, r3
    29a4:	4b4e      	ldr	r3, [pc, #312]	; (2ae0 <put_fat+0x1f4>)
    29a6:	4798      	blx	r3
    29a8:	4603      	mov	r3, r0
    29aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
    29ac:	7ffb      	ldrb	r3, [r7, #31]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d000      	beq.n	29b4 <put_fat+0xc8>
    29b2:	e08d      	b.n	2ad0 <put_fat+0x1e4>
			p = &fs->win[bc % SS(fs)];
    29b4:	69bb      	ldr	r3, [r7, #24]
    29b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    29ba:	3330      	adds	r3, #48	; 0x30
    29bc:	68fa      	ldr	r2, [r7, #12]
    29be:	4413      	add	r3, r2
    29c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    29c2:	68bb      	ldr	r3, [r7, #8]
    29c4:	f003 0301 	and.w	r3, r3, #1
    29c8:	2b00      	cmp	r3, #0
    29ca:	d003      	beq.n	29d4 <put_fat+0xe8>
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	091b      	lsrs	r3, r3, #4
    29d0:	b2db      	uxtb	r3, r3
    29d2:	e00e      	b.n	29f2 <put_fat+0x106>
    29d4:	697b      	ldr	r3, [r7, #20]
    29d6:	781b      	ldrb	r3, [r3, #0]
    29d8:	b2db      	uxtb	r3, r3
    29da:	f023 030f 	bic.w	r3, r3, #15
    29de:	b2da      	uxtb	r2, r3
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	0a1b      	lsrs	r3, r3, #8
    29e4:	b2db      	uxtb	r3, r3
    29e6:	f003 030f 	and.w	r3, r3, #15
    29ea:	b2db      	uxtb	r3, r3
    29ec:	4313      	orrs	r3, r2
    29ee:	b2db      	uxtb	r3, r3
    29f0:	b2db      	uxtb	r3, r3
    29f2:	697a      	ldr	r2, [r7, #20]
    29f4:	7013      	strb	r3, [r2, #0]
			break;
    29f6:	e06b      	b.n	2ad0 <put_fat+0x1e4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    29f8:	68fb      	ldr	r3, [r7, #12]
    29fa:	6a1a      	ldr	r2, [r3, #32]
    29fc:	68bb      	ldr	r3, [r7, #8]
    29fe:	0a1b      	lsrs	r3, r3, #8
    2a00:	4413      	add	r3, r2
    2a02:	68f8      	ldr	r0, [r7, #12]
    2a04:	4619      	mov	r1, r3
    2a06:	4b36      	ldr	r3, [pc, #216]	; (2ae0 <put_fat+0x1f4>)
    2a08:	4798      	blx	r3
    2a0a:	4603      	mov	r3, r0
    2a0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
    2a0e:	7ffb      	ldrb	r3, [r7, #31]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d000      	beq.n	2a16 <put_fat+0x12a>
    2a14:	e05c      	b.n	2ad0 <put_fat+0x1e4>
			p = &fs->win[clst * 2 % SS(fs)];
    2a16:	68bb      	ldr	r3, [r7, #8]
    2a18:	005b      	lsls	r3, r3, #1
    2a1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
    2a1e:	3330      	adds	r3, #48	; 0x30
    2a20:	68fa      	ldr	r2, [r7, #12]
    2a22:	4413      	add	r3, r2
    2a24:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	b2da      	uxtb	r2, r3
    2a2a:	697b      	ldr	r3, [r7, #20]
    2a2c:	701a      	strb	r2, [r3, #0]
    2a2e:	697b      	ldr	r3, [r7, #20]
    2a30:	3301      	adds	r3, #1
    2a32:	687a      	ldr	r2, [r7, #4]
    2a34:	b292      	uxth	r2, r2
    2a36:	0a12      	lsrs	r2, r2, #8
    2a38:	b292      	uxth	r2, r2
    2a3a:	b2d2      	uxtb	r2, r2
    2a3c:	701a      	strb	r2, [r3, #0]
			break;
    2a3e:	e047      	b.n	2ad0 <put_fat+0x1e4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2a40:	68fb      	ldr	r3, [r7, #12]
    2a42:	6a1a      	ldr	r2, [r3, #32]
    2a44:	68bb      	ldr	r3, [r7, #8]
    2a46:	09db      	lsrs	r3, r3, #7
    2a48:	4413      	add	r3, r2
    2a4a:	68f8      	ldr	r0, [r7, #12]
    2a4c:	4619      	mov	r1, r3
    2a4e:	4b24      	ldr	r3, [pc, #144]	; (2ae0 <put_fat+0x1f4>)
    2a50:	4798      	blx	r3
    2a52:	4603      	mov	r3, r0
    2a54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
    2a56:	7ffb      	ldrb	r3, [r7, #31]
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d000      	beq.n	2a5e <put_fat+0x172>
    2a5c:	e038      	b.n	2ad0 <put_fat+0x1e4>
			p = &fs->win[clst * 4 % SS(fs)];
    2a5e:	68bb      	ldr	r3, [r7, #8]
    2a60:	009b      	lsls	r3, r3, #2
    2a62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
    2a66:	3330      	adds	r3, #48	; 0x30
    2a68:	68fa      	ldr	r2, [r7, #12]
    2a6a:	4413      	add	r3, r2
    2a6c:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    2a6e:	697b      	ldr	r3, [r7, #20]
    2a70:	3303      	adds	r3, #3
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	061a      	lsls	r2, r3, #24
    2a76:	697b      	ldr	r3, [r7, #20]
    2a78:	3302      	adds	r3, #2
    2a7a:	781b      	ldrb	r3, [r3, #0]
    2a7c:	041b      	lsls	r3, r3, #16
    2a7e:	431a      	orrs	r2, r3
    2a80:	697b      	ldr	r3, [r7, #20]
    2a82:	3301      	adds	r3, #1
    2a84:	781b      	ldrb	r3, [r3, #0]
    2a86:	021b      	lsls	r3, r3, #8
    2a88:	431a      	orrs	r2, r3
    2a8a:	697b      	ldr	r3, [r7, #20]
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	4313      	orrs	r3, r2
    2a90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    2a94:	687a      	ldr	r2, [r7, #4]
    2a96:	4313      	orrs	r3, r2
    2a98:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	b2da      	uxtb	r2, r3
    2a9e:	697b      	ldr	r3, [r7, #20]
    2aa0:	701a      	strb	r2, [r3, #0]
    2aa2:	697b      	ldr	r3, [r7, #20]
    2aa4:	3301      	adds	r3, #1
    2aa6:	687a      	ldr	r2, [r7, #4]
    2aa8:	b292      	uxth	r2, r2
    2aaa:	0a12      	lsrs	r2, r2, #8
    2aac:	b292      	uxth	r2, r2
    2aae:	b2d2      	uxtb	r2, r2
    2ab0:	701a      	strb	r2, [r3, #0]
    2ab2:	697b      	ldr	r3, [r7, #20]
    2ab4:	3302      	adds	r3, #2
    2ab6:	687a      	ldr	r2, [r7, #4]
    2ab8:	0c12      	lsrs	r2, r2, #16
    2aba:	b2d2      	uxtb	r2, r2
    2abc:	701a      	strb	r2, [r3, #0]
    2abe:	697b      	ldr	r3, [r7, #20]
    2ac0:	3303      	adds	r3, #3
    2ac2:	687a      	ldr	r2, [r7, #4]
    2ac4:	0e12      	lsrs	r2, r2, #24
    2ac6:	b2d2      	uxtb	r2, r2
    2ac8:	701a      	strb	r2, [r3, #0]
			break;
    2aca:	e001      	b.n	2ad0 <put_fat+0x1e4>

		default :
			res = FR_INT_ERR;
    2acc:	2302      	movs	r3, #2
    2ace:	77fb      	strb	r3, [r7, #31]
		}
		fs->wflag = 1;
    2ad0:	68fb      	ldr	r3, [r7, #12]
    2ad2:	2201      	movs	r2, #1
    2ad4:	711a      	strb	r2, [r3, #4]
	}

	return res;
    2ad6:	7ffb      	ldrb	r3, [r7, #31]
}
    2ad8:	4618      	mov	r0, r3
    2ada:	3720      	adds	r7, #32
    2adc:	46bd      	mov	sp, r7
    2ade:	bd80      	pop	{r7, pc}
    2ae0:	00002539 	.word	0x00002539

00002ae4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	b084      	sub	sp, #16
    2ae8:	af00      	add	r7, sp, #0
    2aea:	6078      	str	r0, [r7, #4]
    2aec:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2aee:	683b      	ldr	r3, [r7, #0]
    2af0:	2b01      	cmp	r3, #1
    2af2:	d904      	bls.n	2afe <remove_chain+0x1a>
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	699a      	ldr	r2, [r3, #24]
    2af8:	683b      	ldr	r3, [r7, #0]
    2afa:	429a      	cmp	r2, r3
    2afc:	d802      	bhi.n	2b04 <remove_chain+0x20>
		res = FR_INT_ERR;
    2afe:	2302      	movs	r3, #2
    2b00:	73fb      	strb	r3, [r7, #15]
    2b02:	e037      	b.n	2b74 <remove_chain+0x90>

	} else {
		res = FR_OK;
    2b04:	2300      	movs	r3, #0
    2b06:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2b08:	e02f      	b.n	2b6a <remove_chain+0x86>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2b0a:	6878      	ldr	r0, [r7, #4]
    2b0c:	6839      	ldr	r1, [r7, #0]
    2b0e:	4b1c      	ldr	r3, [pc, #112]	; (2b80 <remove_chain+0x9c>)
    2b10:	4798      	blx	r3
    2b12:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    2b14:	68bb      	ldr	r3, [r7, #8]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d100      	bne.n	2b1c <remove_chain+0x38>
    2b1a:	e02b      	b.n	2b74 <remove_chain+0x90>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2b1c:	68bb      	ldr	r3, [r7, #8]
    2b1e:	2b01      	cmp	r3, #1
    2b20:	d102      	bne.n	2b28 <remove_chain+0x44>
    2b22:	2302      	movs	r3, #2
    2b24:	73fb      	strb	r3, [r7, #15]
    2b26:	e025      	b.n	2b74 <remove_chain+0x90>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2b28:	68bb      	ldr	r3, [r7, #8]
    2b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2b2e:	d102      	bne.n	2b36 <remove_chain+0x52>
    2b30:	2301      	movs	r3, #1
    2b32:	73fb      	strb	r3, [r7, #15]
    2b34:	e01e      	b.n	2b74 <remove_chain+0x90>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2b36:	6878      	ldr	r0, [r7, #4]
    2b38:	6839      	ldr	r1, [r7, #0]
    2b3a:	2200      	movs	r2, #0
    2b3c:	4b11      	ldr	r3, [pc, #68]	; (2b84 <remove_chain+0xa0>)
    2b3e:	4798      	blx	r3
    2b40:	4603      	mov	r3, r0
    2b42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
    2b44:	7bfb      	ldrb	r3, [r7, #15]
    2b46:	2b00      	cmp	r3, #0
    2b48:	d000      	beq.n	2b4c <remove_chain+0x68>
    2b4a:	e013      	b.n	2b74 <remove_chain+0x90>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	691b      	ldr	r3, [r3, #16]
    2b50:	f1b3 3fff 	cmp.w	r3, #4294967295
    2b54:	d007      	beq.n	2b66 <remove_chain+0x82>
				fs->free_clust++;
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	691b      	ldr	r3, [r3, #16]
    2b5a:	1c5a      	adds	r2, r3, #1
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	2201      	movs	r2, #1
    2b64:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    2b66:	68bb      	ldr	r3, [r7, #8]
    2b68:	603b      	str	r3, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	699a      	ldr	r2, [r3, #24]
    2b6e:	683b      	ldr	r3, [r7, #0]
    2b70:	429a      	cmp	r2, r3
    2b72:	d8ca      	bhi.n	2b0a <remove_chain+0x26>
#endif
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
    2b74:	7bfb      	ldrb	r3, [r7, #15]
}
    2b76:	4618      	mov	r0, r3
    2b78:	3710      	adds	r7, #16
    2b7a:	46bd      	mov	sp, r7
    2b7c:	bd80      	pop	{r7, pc}
    2b7e:	bf00      	nop
    2b80:	00002795 	.word	0x00002795
    2b84:	000028ed 	.word	0x000028ed

00002b88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    2b88:	b580      	push	{r7, lr}
    2b8a:	b086      	sub	sp, #24
    2b8c:	af00      	add	r7, sp, #0
    2b8e:	6078      	str	r0, [r7, #4]
    2b90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    2b92:	683b      	ldr	r3, [r7, #0]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d10d      	bne.n	2bb4 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	68db      	ldr	r3, [r3, #12]
    2b9c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2b9e:	693b      	ldr	r3, [r7, #16]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d004      	beq.n	2bae <create_chain+0x26>
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	699a      	ldr	r2, [r3, #24]
    2ba8:	693b      	ldr	r3, [r7, #16]
    2baa:	429a      	cmp	r2, r3
    2bac:	d815      	bhi.n	2bda <create_chain+0x52>
    2bae:	2301      	movs	r3, #1
    2bb0:	613b      	str	r3, [r7, #16]
    2bb2:	e012      	b.n	2bda <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2bb4:	6878      	ldr	r0, [r7, #4]
    2bb6:	6839      	ldr	r1, [r7, #0]
    2bb8:	4b39      	ldr	r3, [pc, #228]	; (2ca0 <create_chain+0x118>)
    2bba:	4798      	blx	r3
    2bbc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2bbe:	68bb      	ldr	r3, [r7, #8]
    2bc0:	2b01      	cmp	r3, #1
    2bc2:	d801      	bhi.n	2bc8 <create_chain+0x40>
    2bc4:	2301      	movs	r3, #1
    2bc6:	e066      	b.n	2c96 <create_chain+0x10e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	699a      	ldr	r2, [r3, #24]
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	429a      	cmp	r2, r3
    2bd0:	d901      	bls.n	2bd6 <create_chain+0x4e>
    2bd2:	68bb      	ldr	r3, [r7, #8]
    2bd4:	e05f      	b.n	2c96 <create_chain+0x10e>
		scl = clst;
    2bd6:	683b      	ldr	r3, [r7, #0]
    2bd8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    2bde:	697b      	ldr	r3, [r7, #20]
    2be0:	3301      	adds	r3, #1
    2be2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	699a      	ldr	r2, [r3, #24]
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	429a      	cmp	r2, r3
    2bec:	d807      	bhi.n	2bfe <create_chain+0x76>
			ncl = 2;
    2bee:	2302      	movs	r3, #2
    2bf0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    2bf2:	697a      	ldr	r2, [r7, #20]
    2bf4:	693b      	ldr	r3, [r7, #16]
    2bf6:	429a      	cmp	r2, r3
    2bf8:	d901      	bls.n	2bfe <create_chain+0x76>
    2bfa:	2300      	movs	r3, #0
    2bfc:	e04b      	b.n	2c96 <create_chain+0x10e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    2bfe:	6878      	ldr	r0, [r7, #4]
    2c00:	6979      	ldr	r1, [r7, #20]
    2c02:	4b27      	ldr	r3, [pc, #156]	; (2ca0 <create_chain+0x118>)
    2c04:	4798      	blx	r3
    2c06:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    2c08:	68bb      	ldr	r3, [r7, #8]
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d10c      	bne.n	2c28 <create_chain+0xa0>
    2c0e:	bf00      	nop
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2c10:	6878      	ldr	r0, [r7, #4]
    2c12:	6979      	ldr	r1, [r7, #20]
    2c14:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    2c18:	4b22      	ldr	r3, [pc, #136]	; (2ca4 <create_chain+0x11c>)
    2c1a:	4798      	blx	r3
    2c1c:	4603      	mov	r3, r0
    2c1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
    2c20:	7bfb      	ldrb	r3, [r7, #15]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d11a      	bne.n	2c5c <create_chain+0xd4>
    2c26:	e00f      	b.n	2c48 <create_chain+0xc0>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2c28:	68bb      	ldr	r3, [r7, #8]
    2c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c2e:	d002      	beq.n	2c36 <create_chain+0xae>
    2c30:	68bb      	ldr	r3, [r7, #8]
    2c32:	2b01      	cmp	r3, #1
    2c34:	d101      	bne.n	2c3a <create_chain+0xb2>
			return cs;
    2c36:	68bb      	ldr	r3, [r7, #8]
    2c38:	e02d      	b.n	2c96 <create_chain+0x10e>
		if (ncl == scl) return 0;		/* No free cluster */
    2c3a:	697a      	ldr	r2, [r7, #20]
    2c3c:	693b      	ldr	r3, [r7, #16]
    2c3e:	429a      	cmp	r2, r3
    2c40:	d101      	bne.n	2c46 <create_chain+0xbe>
    2c42:	2300      	movs	r3, #0
    2c44:	e027      	b.n	2c96 <create_chain+0x10e>
	}
    2c46:	e7ca      	b.n	2bde <create_chain+0x56>

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
    2c48:	683b      	ldr	r3, [r7, #0]
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d006      	beq.n	2c5c <create_chain+0xd4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    2c4e:	6878      	ldr	r0, [r7, #4]
    2c50:	6839      	ldr	r1, [r7, #0]
    2c52:	697a      	ldr	r2, [r7, #20]
    2c54:	4b13      	ldr	r3, [pc, #76]	; (2ca4 <create_chain+0x11c>)
    2c56:	4798      	blx	r3
    2c58:	4603      	mov	r3, r0
    2c5a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
    2c5c:	7bfb      	ldrb	r3, [r7, #15]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d110      	bne.n	2c84 <create_chain+0xfc>
		fs->last_clust = ncl;			/* Update FSINFO */
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	697a      	ldr	r2, [r7, #20]
    2c66:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	691b      	ldr	r3, [r3, #16]
    2c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c70:	d010      	beq.n	2c94 <create_chain+0x10c>
			fs->free_clust--;
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	691b      	ldr	r3, [r3, #16]
    2c76:	1e5a      	subs	r2, r3, #1
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    2c7c:	687b      	ldr	r3, [r7, #4]
    2c7e:	2201      	movs	r2, #1
    2c80:	715a      	strb	r2, [r3, #5]
    2c82:	e007      	b.n	2c94 <create_chain+0x10c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2c84:	7bfb      	ldrb	r3, [r7, #15]
    2c86:	2b01      	cmp	r3, #1
    2c88:	d102      	bne.n	2c90 <create_chain+0x108>
    2c8a:	f04f 33ff 	mov.w	r3, #4294967295
    2c8e:	e000      	b.n	2c92 <create_chain+0x10a>
    2c90:	2301      	movs	r3, #1
    2c92:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    2c94:	697b      	ldr	r3, [r7, #20]
}
    2c96:	4618      	mov	r0, r3
    2c98:	3718      	adds	r7, #24
    2c9a:	46bd      	mov	sp, r7
    2c9c:	bd80      	pop	{r7, pc}
    2c9e:	bf00      	nop
    2ca0:	00002795 	.word	0x00002795
    2ca4:	000028ed 	.word	0x000028ed

00002ca8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
    2cb0:	460b      	mov	r3, r1
    2cb2:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	887a      	ldrh	r2, [r7, #2]
    2cb8:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	689b      	ldr	r3, [r3, #8]
    2cbe:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	2b01      	cmp	r3, #1
    2cc4:	d005      	beq.n	2cd2 <dir_sdi+0x2a>
    2cc6:	687b      	ldr	r3, [r7, #4]
    2cc8:	681b      	ldr	r3, [r3, #0]
    2cca:	699a      	ldr	r2, [r3, #24]
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	429a      	cmp	r2, r3
    2cd0:	d801      	bhi.n	2cd6 <dir_sdi+0x2e>
		return FR_INT_ERR;
    2cd2:	2302      	movs	r3, #2
    2cd4:	e064      	b.n	2da0 <dir_sdi+0xf8>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2cd6:	68fb      	ldr	r3, [r7, #12]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d108      	bne.n	2cee <dir_sdi+0x46>
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	2b03      	cmp	r3, #3
    2ce4:	d103      	bne.n	2cee <dir_sdi+0x46>
		clst = dj->fs->dirbase;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2cec:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    2cee:	68fb      	ldr	r3, [r7, #12]
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d114      	bne.n	2d1e <dir_sdi+0x76>
		dj->clust = clst;
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	68fa      	ldr	r2, [r7, #12]
    2cf8:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	681b      	ldr	r3, [r3, #0]
    2cfe:	891b      	ldrh	r3, [r3, #8]
    2d00:	887a      	ldrh	r2, [r7, #2]
    2d02:	429a      	cmp	r2, r3
    2d04:	d301      	bcc.n	2d0a <dir_sdi+0x62>
			return FR_INT_ERR;
    2d06:	2302      	movs	r3, #2
    2d08:	e04a      	b.n	2da0 <dir_sdi+0xf8>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2d10:	887b      	ldrh	r3, [r7, #2]
    2d12:	091b      	lsrs	r3, r3, #4
    2d14:	b29b      	uxth	r3, r3
    2d16:	441a      	add	r2, r3
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	611a      	str	r2, [r3, #16]
    2d1c:	e035      	b.n	2d8a <dir_sdi+0xe2>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	789b      	ldrb	r3, [r3, #2]
    2d24:	011b      	lsls	r3, r3, #4
    2d26:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
    2d28:	e01b      	b.n	2d62 <dir_sdi+0xba>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	681b      	ldr	r3, [r3, #0]
    2d2e:	4618      	mov	r0, r3
    2d30:	68f9      	ldr	r1, [r7, #12]
    2d32:	4b1d      	ldr	r3, [pc, #116]	; (2da8 <dir_sdi+0x100>)
    2d34:	4798      	blx	r3
    2d36:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d3e:	d101      	bne.n	2d44 <dir_sdi+0x9c>
    2d40:	2301      	movs	r3, #1
    2d42:	e02d      	b.n	2da0 <dir_sdi+0xf8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    2d44:	68fb      	ldr	r3, [r7, #12]
    2d46:	2b01      	cmp	r3, #1
    2d48:	d905      	bls.n	2d56 <dir_sdi+0xae>
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	681b      	ldr	r3, [r3, #0]
    2d4e:	699a      	ldr	r2, [r3, #24]
    2d50:	68fb      	ldr	r3, [r7, #12]
    2d52:	429a      	cmp	r2, r3
    2d54:	d801      	bhi.n	2d5a <dir_sdi+0xb2>
				return FR_INT_ERR;
    2d56:	2302      	movs	r3, #2
    2d58:	e022      	b.n	2da0 <dir_sdi+0xf8>
			idx -= ic;
    2d5a:	887a      	ldrh	r2, [r7, #2]
    2d5c:	897b      	ldrh	r3, [r7, #10]
    2d5e:	1ad3      	subs	r3, r2, r3
    2d60:	807b      	strh	r3, [r7, #2]
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2d62:	887a      	ldrh	r2, [r7, #2]
    2d64:	897b      	ldrh	r3, [r7, #10]
    2d66:	429a      	cmp	r2, r3
    2d68:	d2df      	bcs.n	2d2a <dir_sdi+0x82>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	68fa      	ldr	r2, [r7, #12]
    2d6e:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	4618      	mov	r0, r3
    2d76:	68f9      	ldr	r1, [r7, #12]
    2d78:	4b0c      	ldr	r3, [pc, #48]	; (2dac <dir_sdi+0x104>)
    2d7a:	4798      	blx	r3
    2d7c:	4602      	mov	r2, r0
    2d7e:	887b      	ldrh	r3, [r7, #2]
    2d80:	091b      	lsrs	r3, r3, #4
    2d82:	b29b      	uxth	r3, r3
    2d84:	441a      	add	r2, r3
    2d86:	687b      	ldr	r3, [r7, #4]
    2d88:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	681a      	ldr	r2, [r3, #0]
    2d8e:	887b      	ldrh	r3, [r7, #2]
    2d90:	f003 030f 	and.w	r3, r3, #15
    2d94:	015b      	lsls	r3, r3, #5
    2d96:	3330      	adds	r3, #48	; 0x30
    2d98:	441a      	add	r2, r3
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    2d9e:	2300      	movs	r3, #0
}
    2da0:	4618      	mov	r0, r3
    2da2:	3710      	adds	r7, #16
    2da4:	46bd      	mov	sp, r7
    2da6:	bd80      	pop	{r7, pc}
    2da8:	00002795 	.word	0x00002795
    2dac:	00002759 	.word	0x00002759

00002db0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2db0:	b590      	push	{r4, r7, lr}
    2db2:	b085      	sub	sp, #20
    2db4:	af00      	add	r7, sp, #0
    2db6:	6078      	str	r0, [r7, #4]
    2db8:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	88db      	ldrh	r3, [r3, #6]
    2dbe:	3301      	adds	r3, #1
    2dc0:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2dc2:	893b      	ldrh	r3, [r7, #8]
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d003      	beq.n	2dd0 <dir_next+0x20>
    2dc8:	687b      	ldr	r3, [r7, #4]
    2dca:	691b      	ldr	r3, [r3, #16]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d101      	bne.n	2dd4 <dir_next+0x24>
		return FR_NO_FILE;
    2dd0:	2304      	movs	r3, #4
    2dd2:	e0bc      	b.n	2f4e <dir_next+0x19e>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2dd4:	893b      	ldrh	r3, [r7, #8]
    2dd6:	f003 030f 	and.w	r3, r3, #15
    2dda:	b29b      	uxth	r3, r3
    2ddc:	2b00      	cmp	r3, #0
    2dde:	f040 80a8 	bne.w	2f32 <dir_next+0x182>
		dj->sect++;					/* Next sector */
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	691b      	ldr	r3, [r3, #16]
    2de6:	1c5a      	adds	r2, r3, #1
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	68db      	ldr	r3, [r3, #12]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d108      	bne.n	2e06 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	891b      	ldrh	r3, [r3, #8]
    2dfa:	893a      	ldrh	r2, [r7, #8]
    2dfc:	429a      	cmp	r2, r3
    2dfe:	f0c0 8098 	bcc.w	2f32 <dir_next+0x182>
				return FR_NO_FILE;
    2e02:	2304      	movs	r3, #4
    2e04:	e0a3      	b.n	2f4e <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2e06:	893b      	ldrh	r3, [r7, #8]
    2e08:	091b      	lsrs	r3, r3, #4
    2e0a:	b29b      	uxth	r3, r3
    2e0c:	461a      	mov	r2, r3
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	681b      	ldr	r3, [r3, #0]
    2e12:	789b      	ldrb	r3, [r3, #2]
    2e14:	3b01      	subs	r3, #1
    2e16:	4013      	ands	r3, r2
    2e18:	2b00      	cmp	r3, #0
    2e1a:	f040 808a 	bne.w	2f32 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	681a      	ldr	r2, [r3, #0]
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	68db      	ldr	r3, [r3, #12]
    2e26:	4610      	mov	r0, r2
    2e28:	4619      	mov	r1, r3
    2e2a:	4b4b      	ldr	r3, [pc, #300]	; (2f58 <dir_next+0x1a8>)
    2e2c:	4798      	blx	r3
    2e2e:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    2e30:	68fb      	ldr	r3, [r7, #12]
    2e32:	2b01      	cmp	r3, #1
    2e34:	d801      	bhi.n	2e3a <dir_next+0x8a>
    2e36:	2302      	movs	r3, #2
    2e38:	e089      	b.n	2f4e <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2e3a:	68fb      	ldr	r3, [r7, #12]
    2e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e40:	d101      	bne.n	2e46 <dir_next+0x96>
    2e42:	2301      	movs	r3, #1
    2e44:	e083      	b.n	2f4e <dir_next+0x19e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	699a      	ldr	r2, [r3, #24]
    2e4c:	68fb      	ldr	r3, [r7, #12]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d863      	bhi.n	2f1a <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2e52:	683b      	ldr	r3, [r7, #0]
    2e54:	2b00      	cmp	r3, #0
    2e56:	d101      	bne.n	2e5c <dir_next+0xac>
    2e58:	2304      	movs	r3, #4
    2e5a:	e078      	b.n	2f4e <dir_next+0x19e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	681a      	ldr	r2, [r3, #0]
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	68db      	ldr	r3, [r3, #12]
    2e64:	4610      	mov	r0, r2
    2e66:	4619      	mov	r1, r3
    2e68:	4b3c      	ldr	r3, [pc, #240]	; (2f5c <dir_next+0x1ac>)
    2e6a:	4798      	blx	r3
    2e6c:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d101      	bne.n	2e78 <dir_next+0xc8>
    2e74:	2307      	movs	r3, #7
    2e76:	e06a      	b.n	2f4e <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	2b01      	cmp	r3, #1
    2e7c:	d101      	bne.n	2e82 <dir_next+0xd2>
    2e7e:	2302      	movs	r3, #2
    2e80:	e065      	b.n	2f4e <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2e82:	68fb      	ldr	r3, [r7, #12]
    2e84:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e88:	d101      	bne.n	2e8e <dir_next+0xde>
    2e8a:	2301      	movs	r3, #1
    2e8c:	e05f      	b.n	2f4e <dir_next+0x19e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	681b      	ldr	r3, [r3, #0]
    2e92:	4618      	mov	r0, r3
    2e94:	2100      	movs	r1, #0
    2e96:	4b32      	ldr	r3, [pc, #200]	; (2f60 <dir_next+0x1b0>)
    2e98:	4798      	blx	r3
    2e9a:	4603      	mov	r3, r0
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d001      	beq.n	2ea4 <dir_next+0xf4>
    2ea0:	2301      	movs	r3, #1
    2ea2:	e054      	b.n	2f4e <dir_next+0x19e>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	681b      	ldr	r3, [r3, #0]
    2ea8:	3330      	adds	r3, #48	; 0x30
    2eaa:	4618      	mov	r0, r3
    2eac:	2100      	movs	r1, #0
    2eae:	f44f 7200 	mov.w	r2, #512	; 0x200
    2eb2:	4b2c      	ldr	r3, [pc, #176]	; (2f64 <dir_next+0x1b4>)
    2eb4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	681c      	ldr	r4, [r3, #0]
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	4618      	mov	r0, r3
    2ec0:	68f9      	ldr	r1, [r7, #12]
    2ec2:	4b29      	ldr	r3, [pc, #164]	; (2f68 <dir_next+0x1b8>)
    2ec4:	4798      	blx	r3
    2ec6:	4603      	mov	r3, r0
    2ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2eca:	2300      	movs	r3, #0
    2ecc:	72fb      	strb	r3, [r7, #11]
    2ece:	e016      	b.n	2efe <dir_next+0x14e>
						dj->fs->wflag = 1;
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	681b      	ldr	r3, [r3, #0]
    2ed4:	2201      	movs	r2, #1
    2ed6:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	681b      	ldr	r3, [r3, #0]
    2edc:	4618      	mov	r0, r3
    2ede:	2100      	movs	r1, #0
    2ee0:	4b1f      	ldr	r3, [pc, #124]	; (2f60 <dir_next+0x1b0>)
    2ee2:	4798      	blx	r3
    2ee4:	4603      	mov	r3, r0
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d001      	beq.n	2eee <dir_next+0x13e>
    2eea:	2301      	movs	r3, #1
    2eec:	e02f      	b.n	2f4e <dir_next+0x19e>
						dj->fs->winsect++;
    2eee:	687b      	ldr	r3, [r7, #4]
    2ef0:	681b      	ldr	r3, [r3, #0]
    2ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ef4:	3201      	adds	r2, #1
    2ef6:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2ef8:	7afb      	ldrb	r3, [r7, #11]
    2efa:	3301      	adds	r3, #1
    2efc:	72fb      	strb	r3, [r7, #11]
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	681b      	ldr	r3, [r3, #0]
    2f02:	789b      	ldrb	r3, [r3, #2]
    2f04:	7afa      	ldrb	r2, [r7, #11]
    2f06:	429a      	cmp	r2, r3
    2f08:	d3e2      	bcc.n	2ed0 <dir_next+0x120>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	687a      	ldr	r2, [r7, #4]
    2f10:	6812      	ldr	r2, [r2, #0]
    2f12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2f14:	7afa      	ldrb	r2, [r7, #11]
    2f16:	1a8a      	subs	r2, r1, r2
    2f18:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	68fa      	ldr	r2, [r7, #12]
    2f1e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	681b      	ldr	r3, [r3, #0]
    2f24:	4618      	mov	r0, r3
    2f26:	68f9      	ldr	r1, [r7, #12]
    2f28:	4b0f      	ldr	r3, [pc, #60]	; (2f68 <dir_next+0x1b8>)
    2f2a:	4798      	blx	r3
    2f2c:	4602      	mov	r2, r0
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    2f32:	687b      	ldr	r3, [r7, #4]
    2f34:	893a      	ldrh	r2, [r7, #8]
    2f36:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	681a      	ldr	r2, [r3, #0]
    2f3c:	893b      	ldrh	r3, [r7, #8]
    2f3e:	f003 030f 	and.w	r3, r3, #15
    2f42:	015b      	lsls	r3, r3, #5
    2f44:	3330      	adds	r3, #48	; 0x30
    2f46:	441a      	add	r2, r3
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	615a      	str	r2, [r3, #20]

	return FR_OK;
    2f4c:	2300      	movs	r3, #0
}
    2f4e:	4618      	mov	r0, r3
    2f50:	3714      	adds	r7, #20
    2f52:	46bd      	mov	sp, r7
    2f54:	bd90      	pop	{r4, r7, pc}
    2f56:	bf00      	nop
    2f58:	00002795 	.word	0x00002795
    2f5c:	00002b89 	.word	0x00002b89
    2f60:	00002539 	.word	0x00002539
    2f64:	0000247d 	.word	0x0000247d
    2f68:	00002759 	.word	0x00002759

00002f6c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b086      	sub	sp, #24
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
    2f74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    2f76:	683b      	ldr	r3, [r7, #0]
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2f7e:	1e5a      	subs	r2, r3, #1
    2f80:	4613      	mov	r3, r2
    2f82:	005b      	lsls	r3, r3, #1
    2f84:	4413      	add	r3, r2
    2f86:	009b      	lsls	r3, r3, #2
    2f88:	4413      	add	r3, r2
    2f8a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    2f8c:	2300      	movs	r3, #0
    2f8e:	613b      	str	r3, [r7, #16]
    2f90:	2301      	movs	r3, #1
    2f92:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    2f94:	4a29      	ldr	r2, [pc, #164]	; (303c <cmp_lfn+0xd0>)
    2f96:	693b      	ldr	r3, [r7, #16]
    2f98:	4413      	add	r3, r2
    2f9a:	781b      	ldrb	r3, [r3, #0]
    2f9c:	3301      	adds	r3, #1
    2f9e:	683a      	ldr	r2, [r7, #0]
    2fa0:	4413      	add	r3, r2
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	021b      	lsls	r3, r3, #8
    2fa6:	b29a      	uxth	r2, r3
    2fa8:	4924      	ldr	r1, [pc, #144]	; (303c <cmp_lfn+0xd0>)
    2faa:	693b      	ldr	r3, [r7, #16]
    2fac:	440b      	add	r3, r1
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	6839      	ldr	r1, [r7, #0]
    2fb2:	440b      	add	r3, r1
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	4313      	orrs	r3, r2
    2fb8:	b29b      	uxth	r3, r3
    2fba:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
    2fbc:	89fb      	ldrh	r3, [r7, #14]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d018      	beq.n	2ff4 <cmp_lfn+0x88>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    2fc2:	89bb      	ldrh	r3, [r7, #12]
    2fc4:	4618      	mov	r0, r3
    2fc6:	4b1e      	ldr	r3, [pc, #120]	; (3040 <cmp_lfn+0xd4>)
    2fc8:	4798      	blx	r3
    2fca:	4603      	mov	r3, r0
    2fcc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    2fce:	697b      	ldr	r3, [r7, #20]
    2fd0:	2bfe      	cmp	r3, #254	; 0xfe
    2fd2:	d80d      	bhi.n	2ff0 <cmp_lfn+0x84>
    2fd4:	697b      	ldr	r3, [r7, #20]
    2fd6:	1c5a      	adds	r2, r3, #1
    2fd8:	617a      	str	r2, [r7, #20]
    2fda:	005b      	lsls	r3, r3, #1
    2fdc:	687a      	ldr	r2, [r7, #4]
    2fde:	4413      	add	r3, r2
    2fe0:	881b      	ldrh	r3, [r3, #0]
    2fe2:	4618      	mov	r0, r3
    2fe4:	4b16      	ldr	r3, [pc, #88]	; (3040 <cmp_lfn+0xd4>)
    2fe6:	4798      	blx	r3
    2fe8:	4603      	mov	r3, r0
    2fea:	89fa      	ldrh	r2, [r7, #14]
    2fec:	429a      	cmp	r2, r3
    2fee:	d008      	beq.n	3002 <cmp_lfn+0x96>
				return 0;				/* Not matched */
    2ff0:	2300      	movs	r3, #0
    2ff2:	e01f      	b.n	3034 <cmp_lfn+0xc8>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    2ff4:	89ba      	ldrh	r2, [r7, #12]
    2ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2ffa:	429a      	cmp	r2, r3
    2ffc:	d001      	beq.n	3002 <cmp_lfn+0x96>
    2ffe:	2300      	movs	r3, #0
    3000:	e018      	b.n	3034 <cmp_lfn+0xc8>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    3002:	693b      	ldr	r3, [r7, #16]
    3004:	3301      	adds	r3, #1
    3006:	613b      	str	r3, [r7, #16]
    3008:	693b      	ldr	r3, [r7, #16]
    300a:	2b0c      	cmp	r3, #12
    300c:	d9c2      	bls.n	2f94 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    300e:	683b      	ldr	r3, [r7, #0]
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3016:	2b00      	cmp	r3, #0
    3018:	d00b      	beq.n	3032 <cmp_lfn+0xc6>
    301a:	89fb      	ldrh	r3, [r7, #14]
    301c:	2b00      	cmp	r3, #0
    301e:	d008      	beq.n	3032 <cmp_lfn+0xc6>
    3020:	697b      	ldr	r3, [r7, #20]
    3022:	005b      	lsls	r3, r3, #1
    3024:	687a      	ldr	r2, [r7, #4]
    3026:	4413      	add	r3, r2
    3028:	881b      	ldrh	r3, [r3, #0]
    302a:	2b00      	cmp	r3, #0
    302c:	d001      	beq.n	3032 <cmp_lfn+0xc6>
		return 0;
    302e:	2300      	movs	r3, #0
    3030:	e000      	b.n	3034 <cmp_lfn+0xc8>

	return 1;						/* The part of LFN matched */
    3032:	2301      	movs	r3, #1
}
    3034:	4618      	mov	r0, r3
    3036:	3718      	adds	r7, #24
    3038:	46bd      	mov	sp, r7
    303a:	bd80      	pop	{r7, pc}
    303c:	00012b94 	.word	0x00012b94
    3040:	000023e5 	.word	0x000023e5

00003044 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    3044:	b480      	push	{r7}
    3046:	b089      	sub	sp, #36	; 0x24
    3048:	af00      	add	r7, sp, #0
    304a:	60f8      	str	r0, [r7, #12]
    304c:	60b9      	str	r1, [r7, #8]
    304e:	71fa      	strb	r2, [r7, #7]
    3050:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    3052:	68bb      	ldr	r3, [r7, #8]
    3054:	330d      	adds	r3, #13
    3056:	79ba      	ldrb	r2, [r7, #6]
    3058:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    305a:	68bb      	ldr	r3, [r7, #8]
    305c:	330b      	adds	r3, #11
    305e:	220f      	movs	r2, #15
    3060:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    3062:	68bb      	ldr	r3, [r7, #8]
    3064:	330c      	adds	r3, #12
    3066:	2200      	movs	r2, #0
    3068:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    306a:	68bb      	ldr	r3, [r7, #8]
    306c:	331a      	adds	r3, #26
    306e:	2200      	movs	r2, #0
    3070:	701a      	strb	r2, [r3, #0]
    3072:	68bb      	ldr	r3, [r7, #8]
    3074:	331b      	adds	r3, #27
    3076:	2200      	movs	r2, #0
    3078:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    307a:	79fb      	ldrb	r3, [r7, #7]
    307c:	1e5a      	subs	r2, r3, #1
    307e:	4613      	mov	r3, r2
    3080:	005b      	lsls	r3, r3, #1
    3082:	4413      	add	r3, r2
    3084:	009b      	lsls	r3, r3, #2
    3086:	4413      	add	r3, r2
    3088:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    308a:	2300      	movs	r3, #0
    308c:	82fb      	strh	r3, [r7, #22]
    308e:	2300      	movs	r3, #0
    3090:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    3092:	8afa      	ldrh	r2, [r7, #22]
    3094:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3098:	429a      	cmp	r2, r3
    309a:	d007      	beq.n	30ac <fit_lfn+0x68>
    309c:	69fb      	ldr	r3, [r7, #28]
    309e:	1c5a      	adds	r2, r3, #1
    30a0:	61fa      	str	r2, [r7, #28]
    30a2:	005b      	lsls	r3, r3, #1
    30a4:	68fa      	ldr	r2, [r7, #12]
    30a6:	4413      	add	r3, r2
    30a8:	881b      	ldrh	r3, [r3, #0]
    30aa:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    30ac:	4a1c      	ldr	r2, [pc, #112]	; (3120 <fit_lfn+0xdc>)
    30ae:	69bb      	ldr	r3, [r7, #24]
    30b0:	4413      	add	r3, r2
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	68ba      	ldr	r2, [r7, #8]
    30b6:	4413      	add	r3, r2
    30b8:	8afa      	ldrh	r2, [r7, #22]
    30ba:	b2d2      	uxtb	r2, r2
    30bc:	701a      	strb	r2, [r3, #0]
    30be:	4a18      	ldr	r2, [pc, #96]	; (3120 <fit_lfn+0xdc>)
    30c0:	69bb      	ldr	r3, [r7, #24]
    30c2:	4413      	add	r3, r2
    30c4:	781b      	ldrb	r3, [r3, #0]
    30c6:	3301      	adds	r3, #1
    30c8:	68ba      	ldr	r2, [r7, #8]
    30ca:	4413      	add	r3, r2
    30cc:	8afa      	ldrh	r2, [r7, #22]
    30ce:	0a12      	lsrs	r2, r2, #8
    30d0:	b292      	uxth	r2, r2
    30d2:	b2d2      	uxtb	r2, r2
    30d4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    30d6:	8afb      	ldrh	r3, [r7, #22]
    30d8:	2b00      	cmp	r3, #0
    30da:	d102      	bne.n	30e2 <fit_lfn+0x9e>
    30dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    30e0:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
    30e2:	69bb      	ldr	r3, [r7, #24]
    30e4:	3301      	adds	r3, #1
    30e6:	61bb      	str	r3, [r7, #24]
    30e8:	69bb      	ldr	r3, [r7, #24]
    30ea:	2b0c      	cmp	r3, #12
    30ec:	d9d1      	bls.n	3092 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    30ee:	8afa      	ldrh	r2, [r7, #22]
    30f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    30f4:	429a      	cmp	r2, r3
    30f6:	d006      	beq.n	3106 <fit_lfn+0xc2>
    30f8:	69fb      	ldr	r3, [r7, #28]
    30fa:	005b      	lsls	r3, r3, #1
    30fc:	68fa      	ldr	r2, [r7, #12]
    30fe:	4413      	add	r3, r2
    3100:	881b      	ldrh	r3, [r3, #0]
    3102:	2b00      	cmp	r3, #0
    3104:	d103      	bne.n	310e <fit_lfn+0xca>
    3106:	79fb      	ldrb	r3, [r7, #7]
    3108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    310c:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    310e:	68bb      	ldr	r3, [r7, #8]
    3110:	79fa      	ldrb	r2, [r7, #7]
    3112:	701a      	strb	r2, [r3, #0]
}
    3114:	3724      	adds	r7, #36	; 0x24
    3116:	46bd      	mov	sp, r7
    3118:	f85d 7b04 	ldr.w	r7, [sp], #4
    311c:	4770      	bx	lr
    311e:	bf00      	nop
    3120:	00012b94 	.word	0x00012b94

00003124 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    3124:	b580      	push	{r7, lr}
    3126:	b08a      	sub	sp, #40	; 0x28
    3128:	af00      	add	r7, sp, #0
    312a:	60f8      	str	r0, [r7, #12]
    312c:	60b9      	str	r1, [r7, #8]
    312e:	607a      	str	r2, [r7, #4]
    3130:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    3132:	68f8      	ldr	r0, [r7, #12]
    3134:	68b9      	ldr	r1, [r7, #8]
    3136:	220b      	movs	r2, #11
    3138:	4b33      	ldr	r3, [pc, #204]	; (3208 <gen_numname+0xe4>)
    313a:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    313c:	887b      	ldrh	r3, [r7, #2]
    313e:	2b05      	cmp	r3, #5
    3140:	d90f      	bls.n	3162 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    3142:	887b      	ldrh	r3, [r7, #2]
    3144:	b29a      	uxth	r2, r3
    3146:	0852      	lsrs	r2, r2, #1
    3148:	03db      	lsls	r3, r3, #15
    314a:	4313      	orrs	r3, r2
    314c:	b29a      	uxth	r2, r3
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	1c99      	adds	r1, r3, #2
    3152:	6079      	str	r1, [r7, #4]
    3154:	881b      	ldrh	r3, [r3, #0]
    3156:	4413      	add	r3, r2
    3158:	807b      	strh	r3, [r7, #2]
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	881b      	ldrh	r3, [r3, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d1ef      	bne.n	3142 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
    3162:	2307      	movs	r3, #7
    3164:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    3166:	887b      	ldrh	r3, [r7, #2]
    3168:	b2db      	uxtb	r3, r3
    316a:	f003 030f 	and.w	r3, r3, #15
    316e:	b2db      	uxtb	r3, r3
    3170:	3330      	adds	r3, #48	; 0x30
    3172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
    3176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    317a:	2b39      	cmp	r3, #57	; 0x39
    317c:	d904      	bls.n	3188 <gen_numname+0x64>
    317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3182:	3307      	adds	r3, #7
    3184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
    3188:	6a3b      	ldr	r3, [r7, #32]
    318a:	1e5a      	subs	r2, r3, #1
    318c:	623a      	str	r2, [r7, #32]
    318e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    3192:	440b      	add	r3, r1
    3194:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    3198:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
    319c:	887b      	ldrh	r3, [r7, #2]
    319e:	091b      	lsrs	r3, r3, #4
    31a0:	807b      	strh	r3, [r7, #2]
	} while (seq);
    31a2:	887b      	ldrh	r3, [r7, #2]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d1de      	bne.n	3166 <gen_numname+0x42>
	ns[i] = '~';
    31a8:	f107 0214 	add.w	r2, r7, #20
    31ac:	6a3b      	ldr	r3, [r7, #32]
    31ae:	4413      	add	r3, r2
    31b0:	227e      	movs	r2, #126	; 0x7e
    31b2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    31b4:	2300      	movs	r3, #0
    31b6:	61fb      	str	r3, [r7, #28]
    31b8:	e002      	b.n	31c0 <gen_numname+0x9c>
    31ba:	69fb      	ldr	r3, [r7, #28]
    31bc:	3301      	adds	r3, #1
    31be:	61fb      	str	r3, [r7, #28]
    31c0:	69fa      	ldr	r2, [r7, #28]
    31c2:	6a3b      	ldr	r3, [r7, #32]
    31c4:	429a      	cmp	r2, r3
    31c6:	d205      	bcs.n	31d4 <gen_numname+0xb0>
    31c8:	68fa      	ldr	r2, [r7, #12]
    31ca:	69fb      	ldr	r3, [r7, #28]
    31cc:	4413      	add	r3, r2
    31ce:	781b      	ldrb	r3, [r3, #0]
    31d0:	2b20      	cmp	r3, #32
    31d2:	d1f2      	bne.n	31ba <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    31d4:	69fb      	ldr	r3, [r7, #28]
    31d6:	1c5a      	adds	r2, r3, #1
    31d8:	61fa      	str	r2, [r7, #28]
    31da:	68fa      	ldr	r2, [r7, #12]
    31dc:	441a      	add	r2, r3
    31de:	6a3b      	ldr	r3, [r7, #32]
    31e0:	2b07      	cmp	r3, #7
    31e2:	d808      	bhi.n	31f6 <gen_numname+0xd2>
    31e4:	6a3b      	ldr	r3, [r7, #32]
    31e6:	1c59      	adds	r1, r3, #1
    31e8:	6239      	str	r1, [r7, #32]
    31ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
    31ee:	440b      	add	r3, r1
    31f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    31f4:	e000      	b.n	31f8 <gen_numname+0xd4>
    31f6:	2320      	movs	r3, #32
    31f8:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    31fa:	69fb      	ldr	r3, [r7, #28]
    31fc:	2b07      	cmp	r3, #7
    31fe:	d9e9      	bls.n	31d4 <gen_numname+0xb0>
}
    3200:	3728      	adds	r7, #40	; 0x28
    3202:	46bd      	mov	sp, r7
    3204:	bd80      	pop	{r7, pc}
    3206:	bf00      	nop
    3208:	00002441 	.word	0x00002441

0000320c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    320c:	b480      	push	{r7}
    320e:	b085      	sub	sp, #20
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    3214:	2300      	movs	r3, #0
    3216:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
    3218:	230b      	movs	r3, #11
    321a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    321c:	7bfb      	ldrb	r3, [r7, #15]
    321e:	b2da      	uxtb	r2, r3
    3220:	0852      	lsrs	r2, r2, #1
    3222:	01db      	lsls	r3, r3, #7
    3224:	4313      	orrs	r3, r2
    3226:	b2da      	uxtb	r2, r3
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	1c59      	adds	r1, r3, #1
    322c:	6079      	str	r1, [r7, #4]
    322e:	781b      	ldrb	r3, [r3, #0]
    3230:	4413      	add	r3, r2
    3232:	73fb      	strb	r3, [r7, #15]
    3234:	68bb      	ldr	r3, [r7, #8]
    3236:	3b01      	subs	r3, #1
    3238:	60bb      	str	r3, [r7, #8]
    323a:	68bb      	ldr	r3, [r7, #8]
    323c:	2b00      	cmp	r3, #0
    323e:	d1ed      	bne.n	321c <sum_sfn+0x10>
	return sum;
    3240:	7bfb      	ldrb	r3, [r7, #15]
}
    3242:	4618      	mov	r0, r3
    3244:	3714      	adds	r7, #20
    3246:	46bd      	mov	sp, r7
    3248:	f85d 7b04 	ldr.w	r7, [sp], #4
    324c:	4770      	bx	lr
    324e:	bf00      	nop

00003250 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    3250:	b580      	push	{r7, lr}
    3252:	b086      	sub	sp, #24
    3254:	af00      	add	r7, sp, #0
    3256:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    3258:	6878      	ldr	r0, [r7, #4]
    325a:	2100      	movs	r1, #0
    325c:	4b50      	ldr	r3, [pc, #320]	; (33a0 <dir_find+0x150>)
    325e:	4798      	blx	r3
    3260:	4603      	mov	r3, r0
    3262:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
    3264:	7dfb      	ldrb	r3, [r7, #23]
    3266:	2b00      	cmp	r3, #0
    3268:	d001      	beq.n	326e <dir_find+0x1e>
    326a:	7dfb      	ldrb	r3, [r7, #23]
    326c:	e093      	b.n	3396 <dir_find+0x146>

#if _USE_LFN
	ord = sum = 0xFF;
    326e:	23ff      	movs	r3, #255	; 0xff
    3270:	753b      	strb	r3, [r7, #20]
    3272:	7d3b      	ldrb	r3, [r7, #20]
    3274:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	681a      	ldr	r2, [r3, #0]
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	691b      	ldr	r3, [r3, #16]
    327e:	4610      	mov	r0, r2
    3280:	4619      	mov	r1, r3
    3282:	4b48      	ldr	r3, [pc, #288]	; (33a4 <dir_find+0x154>)
    3284:	4798      	blx	r3
    3286:	4603      	mov	r3, r0
    3288:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
    328a:	7dfb      	ldrb	r3, [r7, #23]
    328c:	2b00      	cmp	r3, #0
    328e:	d000      	beq.n	3292 <dir_find+0x42>
    3290:	e080      	b.n	3394 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	695b      	ldr	r3, [r3, #20]
    3296:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    3298:	693b      	ldr	r3, [r7, #16]
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    329e:	7dbb      	ldrb	r3, [r7, #22]
    32a0:	2b00      	cmp	r3, #0
    32a2:	d102      	bne.n	32aa <dir_find+0x5a>
    32a4:	2304      	movs	r3, #4
    32a6:	75fb      	strb	r3, [r7, #23]
    32a8:	e074      	b.n	3394 <dir_find+0x144>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    32aa:	693b      	ldr	r3, [r7, #16]
    32ac:	330b      	adds	r3, #11
    32ae:	781b      	ldrb	r3, [r3, #0]
    32b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    32b4:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    32b6:	7dbb      	ldrb	r3, [r7, #22]
    32b8:	2be5      	cmp	r3, #229	; 0xe5
    32ba:	d007      	beq.n	32cc <dir_find+0x7c>
    32bc:	7bfb      	ldrb	r3, [r7, #15]
    32be:	f003 0308 	and.w	r3, r3, #8
    32c2:	2b00      	cmp	r3, #0
    32c4:	d005      	beq.n	32d2 <dir_find+0x82>
    32c6:	7bfb      	ldrb	r3, [r7, #15]
    32c8:	2b0f      	cmp	r3, #15
    32ca:	d002      	beq.n	32d2 <dir_find+0x82>
			ord = 0xFF;
    32cc:	23ff      	movs	r3, #255	; 0xff
    32ce:	757b      	strb	r3, [r7, #21]
    32d0:	e056      	b.n	3380 <dir_find+0x130>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    32d2:	7bfb      	ldrb	r3, [r7, #15]
    32d4:	2b0f      	cmp	r3, #15
    32d6:	d12f      	bne.n	3338 <dir_find+0xe8>
				if (dj->lfn) {
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	69db      	ldr	r3, [r3, #28]
    32dc:	2b00      	cmp	r3, #0
    32de:	d04f      	beq.n	3380 <dir_find+0x130>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    32e0:	7dbb      	ldrb	r3, [r7, #22]
    32e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    32e6:	2b00      	cmp	r3, #0
    32e8:	d00c      	beq.n	3304 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
    32ea:	693b      	ldr	r3, [r7, #16]
    32ec:	7b5b      	ldrb	r3, [r3, #13]
    32ee:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
    32f0:	7dbb      	ldrb	r3, [r7, #22]
    32f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    32f6:	75bb      	strb	r3, [r7, #22]
    32f8:	7dbb      	ldrb	r3, [r7, #22]
    32fa:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	88da      	ldrh	r2, [r3, #6]
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    3304:	7dba      	ldrb	r2, [r7, #22]
    3306:	7d7b      	ldrb	r3, [r7, #21]
    3308:	429a      	cmp	r2, r3
    330a:	d112      	bne.n	3332 <dir_find+0xe2>
    330c:	693b      	ldr	r3, [r7, #16]
    330e:	330d      	adds	r3, #13
    3310:	781b      	ldrb	r3, [r3, #0]
    3312:	7d3a      	ldrb	r2, [r7, #20]
    3314:	429a      	cmp	r2, r3
    3316:	d10c      	bne.n	3332 <dir_find+0xe2>
    3318:	687b      	ldr	r3, [r7, #4]
    331a:	69db      	ldr	r3, [r3, #28]
    331c:	4618      	mov	r0, r3
    331e:	6939      	ldr	r1, [r7, #16]
    3320:	4b21      	ldr	r3, [pc, #132]	; (33a8 <dir_find+0x158>)
    3322:	4798      	blx	r3
    3324:	4603      	mov	r3, r0
    3326:	2b00      	cmp	r3, #0
    3328:	d003      	beq.n	3332 <dir_find+0xe2>
    332a:	7d7b      	ldrb	r3, [r7, #21]
    332c:	3b01      	subs	r3, #1
    332e:	b2db      	uxtb	r3, r3
    3330:	e000      	b.n	3334 <dir_find+0xe4>
    3332:	23ff      	movs	r3, #255	; 0xff
    3334:	757b      	strb	r3, [r7, #21]
    3336:	e023      	b.n	3380 <dir_find+0x130>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    3338:	7d7b      	ldrb	r3, [r7, #21]
    333a:	2b00      	cmp	r3, #0
    333c:	d107      	bne.n	334e <dir_find+0xfe>
    333e:	6938      	ldr	r0, [r7, #16]
    3340:	4b1a      	ldr	r3, [pc, #104]	; (33ac <dir_find+0x15c>)
    3342:	4798      	blx	r3
    3344:	4603      	mov	r3, r0
    3346:	7d3a      	ldrb	r2, [r7, #20]
    3348:	429a      	cmp	r2, r3
    334a:	d100      	bne.n	334e <dir_find+0xfe>
    334c:	e022      	b.n	3394 <dir_find+0x144>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    334e:	23ff      	movs	r3, #255	; 0xff
    3350:	757b      	strb	r3, [r7, #21]
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3358:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	699b      	ldr	r3, [r3, #24]
    335e:	330b      	adds	r3, #11
    3360:	781b      	ldrb	r3, [r3, #0]
    3362:	f003 0301 	and.w	r3, r3, #1
    3366:	2b00      	cmp	r3, #0
    3368:	d10a      	bne.n	3380 <dir_find+0x130>
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	699b      	ldr	r3, [r3, #24]
    336e:	6938      	ldr	r0, [r7, #16]
    3370:	4619      	mov	r1, r3
    3372:	220b      	movs	r2, #11
    3374:	4b0e      	ldr	r3, [pc, #56]	; (33b0 <dir_find+0x160>)
    3376:	4798      	blx	r3
    3378:	4603      	mov	r3, r0
    337a:	2b00      	cmp	r3, #0
    337c:	d100      	bne.n	3380 <dir_find+0x130>
    337e:	e009      	b.n	3394 <dir_find+0x144>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    3380:	6878      	ldr	r0, [r7, #4]
    3382:	2100      	movs	r1, #0
    3384:	4b0b      	ldr	r3, [pc, #44]	; (33b4 <dir_find+0x164>)
    3386:	4798      	blx	r3
    3388:	4603      	mov	r3, r0
    338a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
    338c:	7dfb      	ldrb	r3, [r7, #23]
    338e:	2b00      	cmp	r3, #0
    3390:	f43f af71 	beq.w	3276 <dir_find+0x26>

	return res;
    3394:	7dfb      	ldrb	r3, [r7, #23]
}
    3396:	4618      	mov	r0, r3
    3398:	3718      	adds	r7, #24
    339a:	46bd      	mov	sp, r7
    339c:	bd80      	pop	{r7, pc}
    339e:	bf00      	nop
    33a0:	00002ca9 	.word	0x00002ca9
    33a4:	00002539 	.word	0x00002539
    33a8:	00002f6d 	.word	0x00002f6d
    33ac:	0000320d 	.word	0x0000320d
    33b0:	000024b1 	.word	0x000024b1
    33b4:	00002db1 	.word	0x00002db1

000033b8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    33b8:	b590      	push	{r4, r7, lr}
    33ba:	b08d      	sub	sp, #52	; 0x34
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	699b      	ldr	r3, [r3, #24]
    33c4:	627b      	str	r3, [r7, #36]	; 0x24
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	69db      	ldr	r3, [r3, #28]
    33ca:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    33cc:	f107 030c 	add.w	r3, r7, #12
    33d0:	4618      	mov	r0, r3
    33d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    33d4:	220c      	movs	r2, #12
    33d6:	4b92      	ldr	r3, [pc, #584]	; (3620 <dir_register+0x268>)
    33d8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    33da:	7dfb      	ldrb	r3, [r7, #23]
    33dc:	f003 0301 	and.w	r3, r3, #1
    33e0:	2b00      	cmp	r3, #0
    33e2:	d035      	beq.n	3450 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    33e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33e6:	330b      	adds	r3, #11
    33e8:	2200      	movs	r2, #0
    33ea:	701a      	strb	r2, [r3, #0]
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	2200      	movs	r2, #0
    33f0:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    33f2:	2301      	movs	r3, #1
    33f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    33f6:	e015      	b.n	3424 <dir_register+0x6c>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    33f8:	f107 020c 	add.w	r2, r7, #12
    33fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    33fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3400:	4611      	mov	r1, r2
    3402:	6a3a      	ldr	r2, [r7, #32]
    3404:	4c87      	ldr	r4, [pc, #540]	; (3624 <dir_register+0x26c>)
    3406:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    3408:	6878      	ldr	r0, [r7, #4]
    340a:	4b87      	ldr	r3, [pc, #540]	; (3628 <dir_register+0x270>)
    340c:	4798      	blx	r3
    340e:	4603      	mov	r3, r0
    3410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
    3414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3418:	2b00      	cmp	r3, #0
    341a:	d000      	beq.n	341e <dir_register+0x66>
    341c:	e005      	b.n	342a <dir_register+0x72>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
    341e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    3420:	3301      	adds	r3, #1
    3422:	85bb      	strh	r3, [r7, #44]	; 0x2c
    3424:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    3426:	2b63      	cmp	r3, #99	; 0x63
    3428:	d9e6      	bls.n	33f8 <dir_register+0x40>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    342a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    342c:	2b64      	cmp	r3, #100	; 0x64
    342e:	d101      	bne.n	3434 <dir_register+0x7c>
    3430:	2307      	movs	r3, #7
    3432:	e0f0      	b.n	3616 <dir_register+0x25e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    3434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3438:	2b04      	cmp	r3, #4
    343a:	d002      	beq.n	3442 <dir_register+0x8a>
    343c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3440:	e0e9      	b.n	3616 <dir_register+0x25e>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    3442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3444:	330b      	adds	r3, #11
    3446:	7dfa      	ldrb	r2, [r7, #23]
    3448:	701a      	strb	r2, [r3, #0]
    344a:	687b      	ldr	r3, [r7, #4]
    344c:	6a3a      	ldr	r2, [r7, #32]
    344e:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    3450:	7dfb      	ldrb	r3, [r7, #23]
    3452:	f003 0302 	and.w	r3, r3, #2
    3456:	2b00      	cmp	r3, #0
    3458:	d016      	beq.n	3488 <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
    345a:	2300      	movs	r3, #0
    345c:	857b      	strh	r3, [r7, #42]	; 0x2a
    345e:	e002      	b.n	3466 <dir_register+0xae>
    3460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    3462:	3301      	adds	r3, #1
    3464:	857b      	strh	r3, [r7, #42]	; 0x2a
    3466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    3468:	005b      	lsls	r3, r3, #1
    346a:	6a3a      	ldr	r2, [r7, #32]
    346c:	4413      	add	r3, r2
    346e:	881b      	ldrh	r3, [r3, #0]
    3470:	2b00      	cmp	r3, #0
    3472:	d1f5      	bne.n	3460 <dir_register+0xa8>
		ne = (ne + 25) / 13;
    3474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    3476:	3319      	adds	r3, #25
    3478:	4a6c      	ldr	r2, [pc, #432]	; (362c <dir_register+0x274>)
    347a:	fb82 1203 	smull	r1, r2, r2, r3
    347e:	1092      	asrs	r2, r2, #2
    3480:	17db      	asrs	r3, r3, #31
    3482:	1ad3      	subs	r3, r2, r3
    3484:	857b      	strh	r3, [r7, #42]	; 0x2a
    3486:	e001      	b.n	348c <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    3488:	2301      	movs	r3, #1
    348a:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    348c:	6878      	ldr	r0, [r7, #4]
    348e:	2100      	movs	r1, #0
    3490:	4b67      	ldr	r3, [pc, #412]	; (3630 <dir_register+0x278>)
    3492:	4798      	blx	r3
    3494:	4603      	mov	r3, r0
    3496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
    349a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    349e:	2b00      	cmp	r3, #0
    34a0:	d002      	beq.n	34a8 <dir_register+0xf0>
    34a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    34a6:	e0b6      	b.n	3616 <dir_register+0x25e>
	n = is = 0;
    34a8:	2300      	movs	r3, #0
    34aa:	853b      	strh	r3, [r7, #40]	; 0x28
    34ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    34ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	681a      	ldr	r2, [r3, #0]
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	691b      	ldr	r3, [r3, #16]
    34b8:	4610      	mov	r0, r2
    34ba:	4619      	mov	r1, r3
    34bc:	4b5d      	ldr	r3, [pc, #372]	; (3634 <dir_register+0x27c>)
    34be:	4798      	blx	r3
    34c0:	4603      	mov	r3, r0
    34c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
    34c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    34ca:	2b00      	cmp	r3, #0
    34cc:	d000      	beq.n	34d0 <dir_register+0x118>
    34ce:	e025      	b.n	351c <dir_register+0x164>
		c = *dj->dir;				/* Check the entry status */
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	695b      	ldr	r3, [r3, #20]
    34d4:	781b      	ldrb	r3, [r3, #0]
    34d6:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    34d8:	7ffb      	ldrb	r3, [r7, #31]
    34da:	2be5      	cmp	r3, #229	; 0xe5
    34dc:	d002      	beq.n	34e4 <dir_register+0x12c>
    34de:	7ffb      	ldrb	r3, [r7, #31]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d10e      	bne.n	3502 <dir_register+0x14a>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    34e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    34e6:	2b00      	cmp	r3, #0
    34e8:	d102      	bne.n	34f0 <dir_register+0x138>
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	88db      	ldrh	r3, [r3, #6]
    34ee:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    34f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    34f2:	3301      	adds	r3, #1
    34f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    34f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    34f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    34fa:	429a      	cmp	r2, r3
    34fc:	d100      	bne.n	3500 <dir_register+0x148>
    34fe:	e00d      	b.n	351c <dir_register+0x164>
    3500:	e001      	b.n	3506 <dir_register+0x14e>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    3502:	2300      	movs	r3, #0
    3504:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    3506:	6878      	ldr	r0, [r7, #4]
    3508:	2101      	movs	r1, #1
    350a:	4b4b      	ldr	r3, [pc, #300]	; (3638 <dir_register+0x280>)
    350c:	4798      	blx	r3
    350e:	4603      	mov	r3, r0
    3510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
    3514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3518:	2b00      	cmp	r3, #0
    351a:	d0c9      	beq.n	34b0 <dir_register+0xf8>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    351c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3520:	2b00      	cmp	r3, #0
    3522:	d146      	bne.n	35b2 <dir_register+0x1fa>
    3524:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    3526:	2b01      	cmp	r3, #1
    3528:	d943      	bls.n	35b2 <dir_register+0x1fa>
		res = dir_sdi(dj, is);
    352a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    352c:	6878      	ldr	r0, [r7, #4]
    352e:	4619      	mov	r1, r3
    3530:	4b3f      	ldr	r3, [pc, #252]	; (3630 <dir_register+0x278>)
    3532:	4798      	blx	r3
    3534:	4603      	mov	r3, r0
    3536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
    353a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    353e:	2b00      	cmp	r3, #0
    3540:	d137      	bne.n	35b2 <dir_register+0x1fa>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	699b      	ldr	r3, [r3, #24]
    3546:	4618      	mov	r0, r3
    3548:	4b3c      	ldr	r3, [pc, #240]	; (363c <dir_register+0x284>)
    354a:	4798      	blx	r3
    354c:	4603      	mov	r3, r0
    354e:	77bb      	strb	r3, [r7, #30]
			ne--;
    3550:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    3552:	3b01      	subs	r3, #1
    3554:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	681a      	ldr	r2, [r3, #0]
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	691b      	ldr	r3, [r3, #16]
    355e:	4610      	mov	r0, r2
    3560:	4619      	mov	r1, r3
    3562:	4b34      	ldr	r3, [pc, #208]	; (3634 <dir_register+0x27c>)
    3564:	4798      	blx	r3
    3566:	4603      	mov	r3, r0
    3568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
    356c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3570:	2b00      	cmp	r3, #0
    3572:	d000      	beq.n	3576 <dir_register+0x1be>
    3574:	e01d      	b.n	35b2 <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    3576:	687b      	ldr	r3, [r7, #4]
    3578:	69d8      	ldr	r0, [r3, #28]
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	6959      	ldr	r1, [r3, #20]
    357e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    3580:	b2da      	uxtb	r2, r3
    3582:	7fbb      	ldrb	r3, [r7, #30]
    3584:	4c2e      	ldr	r4, [pc, #184]	; (3640 <dir_register+0x288>)
    3586:	47a0      	blx	r4
				dj->fs->wflag = 1;
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	681b      	ldr	r3, [r3, #0]
    358c:	2201      	movs	r2, #1
    358e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    3590:	6878      	ldr	r0, [r7, #4]
    3592:	2100      	movs	r1, #0
    3594:	4b28      	ldr	r3, [pc, #160]	; (3638 <dir_register+0x280>)
    3596:	4798      	blx	r3
    3598:	4603      	mov	r3, r0
    359a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
    359e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    35a2:	2b00      	cmp	r3, #0
    35a4:	d105      	bne.n	35b2 <dir_register+0x1fa>
    35a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    35a8:	3b01      	subs	r3, #1
    35aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    35ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    35ae:	2b00      	cmp	r3, #0
    35b0:	d1d1      	bne.n	3556 <dir_register+0x19e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    35b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    35b6:	2b00      	cmp	r3, #0
    35b8:	d12b      	bne.n	3612 <dir_register+0x25a>
		res = move_window(dj->fs, dj->sect);
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	681a      	ldr	r2, [r3, #0]
    35be:	687b      	ldr	r3, [r7, #4]
    35c0:	691b      	ldr	r3, [r3, #16]
    35c2:	4610      	mov	r0, r2
    35c4:	4619      	mov	r1, r3
    35c6:	4b1b      	ldr	r3, [pc, #108]	; (3634 <dir_register+0x27c>)
    35c8:	4798      	blx	r3
    35ca:	4603      	mov	r3, r0
    35cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
    35d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    35d4:	2b00      	cmp	r3, #0
    35d6:	d11c      	bne.n	3612 <dir_register+0x25a>
			dir = dj->dir;
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	695b      	ldr	r3, [r3, #20]
    35dc:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    35de:	69b8      	ldr	r0, [r7, #24]
    35e0:	2100      	movs	r1, #0
    35e2:	2220      	movs	r2, #32
    35e4:	4b17      	ldr	r3, [pc, #92]	; (3644 <dir_register+0x28c>)
    35e6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	699b      	ldr	r3, [r3, #24]
    35ec:	69b8      	ldr	r0, [r7, #24]
    35ee:	4619      	mov	r1, r3
    35f0:	220b      	movs	r2, #11
    35f2:	4b0b      	ldr	r3, [pc, #44]	; (3620 <dir_register+0x268>)
    35f4:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    35f6:	69bb      	ldr	r3, [r7, #24]
    35f8:	330c      	adds	r3, #12
    35fa:	687a      	ldr	r2, [r7, #4]
    35fc:	6992      	ldr	r2, [r2, #24]
    35fe:	320b      	adds	r2, #11
    3600:	7812      	ldrb	r2, [r2, #0]
    3602:	f002 0218 	and.w	r2, r2, #24
    3606:	b2d2      	uxtb	r2, r2
    3608:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	2201      	movs	r2, #1
    3610:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    3612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
    3616:	4618      	mov	r0, r3
    3618:	3734      	adds	r7, #52	; 0x34
    361a:	46bd      	mov	sp, r7
    361c:	bd90      	pop	{r4, r7, pc}
    361e:	bf00      	nop
    3620:	00002441 	.word	0x00002441
    3624:	00003125 	.word	0x00003125
    3628:	00003251 	.word	0x00003251
    362c:	4ec4ec4f 	.word	0x4ec4ec4f
    3630:	00002ca9 	.word	0x00002ca9
    3634:	00002539 	.word	0x00002539
    3638:	00002db1 	.word	0x00002db1
    363c:	0000320d 	.word	0x0000320d
    3640:	00003045 	.word	0x00003045
    3644:	0000247d 	.word	0x0000247d

00003648 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    3648:	b580      	push	{r7, lr}
    364a:	b08a      	sub	sp, #40	; 0x28
    364c:	af00      	add	r7, sp, #0
    364e:	6078      	str	r0, [r7, #4]
    3650:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    3652:	683b      	ldr	r3, [r7, #0]
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	613b      	str	r3, [r7, #16]
    3658:	e002      	b.n	3660 <create_name+0x18>
    365a:	693b      	ldr	r3, [r7, #16]
    365c:	3301      	adds	r3, #1
    365e:	613b      	str	r3, [r7, #16]
    3660:	693b      	ldr	r3, [r7, #16]
    3662:	781b      	ldrb	r3, [r3, #0]
    3664:	2b2f      	cmp	r3, #47	; 0x2f
    3666:	d0f8      	beq.n	365a <create_name+0x12>
    3668:	693b      	ldr	r3, [r7, #16]
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	2b5c      	cmp	r3, #92	; 0x5c
    366e:	d0f4      	beq.n	365a <create_name+0x12>
	lfn = dj->lfn;
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	69db      	ldr	r3, [r3, #28]
    3674:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    3676:	2300      	movs	r3, #0
    3678:	617b      	str	r3, [r7, #20]
    367a:	697b      	ldr	r3, [r7, #20]
    367c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    367e:	69bb      	ldr	r3, [r7, #24]
    3680:	1c5a      	adds	r2, r3, #1
    3682:	61ba      	str	r2, [r7, #24]
    3684:	693a      	ldr	r2, [r7, #16]
    3686:	4413      	add	r3, r2
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    368c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    368e:	2b1f      	cmp	r3, #31
    3690:	d92f      	bls.n	36f2 <create_name+0xaa>
    3692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3694:	2b2f      	cmp	r3, #47	; 0x2f
    3696:	d02c      	beq.n	36f2 <create_name+0xaa>
    3698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    369a:	2b5c      	cmp	r3, #92	; 0x5c
    369c:	d029      	beq.n	36f2 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
    369e:	697b      	ldr	r3, [r7, #20]
    36a0:	2bfe      	cmp	r3, #254	; 0xfe
    36a2:	d901      	bls.n	36a8 <create_name+0x60>
			return FR_INVALID_NAME;
    36a4:	2306      	movs	r3, #6
    36a6:	e181      	b.n	39ac <create_name+0x364>
#if !_LFN_UNICODE
		w &= 0xFF;
    36a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    36aa:	b2db      	uxtb	r3, r3
    36ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    36ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    36b0:	4618      	mov	r0, r3
    36b2:	2101      	movs	r1, #1
    36b4:	4b93      	ldr	r3, [pc, #588]	; (3904 <create_name+0x2bc>)
    36b6:	4798      	blx	r3
    36b8:	4603      	mov	r3, r0
    36ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    36bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    36be:	2b00      	cmp	r3, #0
    36c0:	d101      	bne.n	36c6 <create_name+0x7e>
    36c2:	2306      	movs	r3, #6
    36c4:	e172      	b.n	39ac <create_name+0x364>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    36c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    36c8:	2b7f      	cmp	r3, #127	; 0x7f
    36ca:	d809      	bhi.n	36e0 <create_name+0x98>
    36cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    36ce:	488e      	ldr	r0, [pc, #568]	; (3908 <create_name+0x2c0>)
    36d0:	4619      	mov	r1, r3
    36d2:	4b8e      	ldr	r3, [pc, #568]	; (390c <create_name+0x2c4>)
    36d4:	4798      	blx	r3
    36d6:	4603      	mov	r3, r0
    36d8:	2b00      	cmp	r3, #0
    36da:	d001      	beq.n	36e0 <create_name+0x98>
			return FR_INVALID_NAME;
    36dc:	2306      	movs	r3, #6
    36de:	e165      	b.n	39ac <create_name+0x364>
		lfn[di++] = w;					/* Store the Unicode char */
    36e0:	697b      	ldr	r3, [r7, #20]
    36e2:	1c5a      	adds	r2, r3, #1
    36e4:	617a      	str	r2, [r7, #20]
    36e6:	005b      	lsls	r3, r3, #1
    36e8:	68fa      	ldr	r2, [r7, #12]
    36ea:	4413      	add	r3, r2
    36ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    36ee:	801a      	strh	r2, [r3, #0]
	}
    36f0:	e7c5      	b.n	367e <create_name+0x36>
	*path = &p[si];						/* Return pointer to the next segment */
    36f2:	693a      	ldr	r2, [r7, #16]
    36f4:	69bb      	ldr	r3, [r7, #24]
    36f6:	441a      	add	r2, r3
    36f8:	683b      	ldr	r3, [r7, #0]
    36fa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    36fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    36fe:	2b1f      	cmp	r3, #31
    3700:	d801      	bhi.n	3706 <create_name+0xbe>
    3702:	2304      	movs	r3, #4
    3704:	e000      	b.n	3708 <create_name+0xc0>
    3706:	2300      	movs	r3, #0
    3708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    370c:	e012      	b.n	3734 <create_name+0xec>
		w = lfn[di-1];
    370e:	697b      	ldr	r3, [r7, #20]
    3710:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    3714:	3b01      	subs	r3, #1
    3716:	005b      	lsls	r3, r3, #1
    3718:	68fa      	ldr	r2, [r7, #12]
    371a:	4413      	add	r3, r2
    371c:	881b      	ldrh	r3, [r3, #0]
    371e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
    3720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3722:	2b20      	cmp	r3, #32
    3724:	d003      	beq.n	372e <create_name+0xe6>
    3726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3728:	2b2e      	cmp	r3, #46	; 0x2e
    372a:	d000      	beq.n	372e <create_name+0xe6>
    372c:	e005      	b.n	373a <create_name+0xf2>
		di--;
    372e:	697b      	ldr	r3, [r7, #20]
    3730:	3b01      	subs	r3, #1
    3732:	617b      	str	r3, [r7, #20]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    3734:	697b      	ldr	r3, [r7, #20]
    3736:	2b00      	cmp	r3, #0
    3738:	d1e9      	bne.n	370e <create_name+0xc6>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    373a:	697b      	ldr	r3, [r7, #20]
    373c:	2b00      	cmp	r3, #0
    373e:	d101      	bne.n	3744 <create_name+0xfc>
    3740:	2306      	movs	r3, #6
    3742:	e133      	b.n	39ac <create_name+0x364>

	lfn[di] = 0;						/* LFN is created */
    3744:	697b      	ldr	r3, [r7, #20]
    3746:	005b      	lsls	r3, r3, #1
    3748:	68fa      	ldr	r2, [r7, #12]
    374a:	4413      	add	r3, r2
    374c:	2200      	movs	r2, #0
    374e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	699b      	ldr	r3, [r3, #24]
    3754:	4618      	mov	r0, r3
    3756:	2120      	movs	r1, #32
    3758:	220b      	movs	r2, #11
    375a:	4b6d      	ldr	r3, [pc, #436]	; (3910 <create_name+0x2c8>)
    375c:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    375e:	2300      	movs	r3, #0
    3760:	61bb      	str	r3, [r7, #24]
    3762:	e002      	b.n	376a <create_name+0x122>
    3764:	69bb      	ldr	r3, [r7, #24]
    3766:	3301      	adds	r3, #1
    3768:	61bb      	str	r3, [r7, #24]
    376a:	69bb      	ldr	r3, [r7, #24]
    376c:	005b      	lsls	r3, r3, #1
    376e:	68fa      	ldr	r2, [r7, #12]
    3770:	4413      	add	r3, r2
    3772:	881b      	ldrh	r3, [r3, #0]
    3774:	2b20      	cmp	r3, #32
    3776:	d0f5      	beq.n	3764 <create_name+0x11c>
    3778:	69bb      	ldr	r3, [r7, #24]
    377a:	005b      	lsls	r3, r3, #1
    377c:	68fa      	ldr	r2, [r7, #12]
    377e:	4413      	add	r3, r2
    3780:	881b      	ldrh	r3, [r3, #0]
    3782:	2b2e      	cmp	r3, #46	; 0x2e
    3784:	d0ee      	beq.n	3764 <create_name+0x11c>
	if (si) cf |= NS_LOSS | NS_LFN;
    3786:	69bb      	ldr	r3, [r7, #24]
    3788:	2b00      	cmp	r3, #0
    378a:	d006      	beq.n	379a <create_name+0x152>
    378c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3790:	f043 0303 	orr.w	r3, r3, #3
    3794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    3798:	e003      	b.n	37a2 <create_name+0x15a>
    379a:	e002      	b.n	37a2 <create_name+0x15a>
    379c:	697b      	ldr	r3, [r7, #20]
    379e:	3b01      	subs	r3, #1
    37a0:	617b      	str	r3, [r7, #20]
    37a2:	697b      	ldr	r3, [r7, #20]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d009      	beq.n	37bc <create_name+0x174>
    37a8:	697b      	ldr	r3, [r7, #20]
    37aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    37ae:	3b01      	subs	r3, #1
    37b0:	005b      	lsls	r3, r3, #1
    37b2:	68fa      	ldr	r2, [r7, #12]
    37b4:	4413      	add	r3, r2
    37b6:	881b      	ldrh	r3, [r3, #0]
    37b8:	2b2e      	cmp	r3, #46	; 0x2e
    37ba:	d1ef      	bne.n	379c <create_name+0x154>

	b = i = 0; ni = 8;
    37bc:	2300      	movs	r3, #0
    37be:	623b      	str	r3, [r7, #32]
    37c0:	2300      	movs	r3, #0
    37c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    37c6:	2308      	movs	r3, #8
    37c8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    37ca:	69bb      	ldr	r3, [r7, #24]
    37cc:	1c5a      	adds	r2, r3, #1
    37ce:	61ba      	str	r2, [r7, #24]
    37d0:	005b      	lsls	r3, r3, #1
    37d2:	68fa      	ldr	r2, [r7, #12]
    37d4:	4413      	add	r3, r2
    37d6:	881b      	ldrh	r3, [r3, #0]
    37d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
    37da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    37dc:	2b00      	cmp	r3, #0
    37de:	d100      	bne.n	37e2 <create_name+0x19a>
    37e0:	e09c      	b.n	391c <create_name+0x2d4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    37e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    37e4:	2b20      	cmp	r3, #32
    37e6:	d006      	beq.n	37f6 <create_name+0x1ae>
    37e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    37ea:	2b2e      	cmp	r3, #46	; 0x2e
    37ec:	d10a      	bne.n	3804 <create_name+0x1bc>
    37ee:	69ba      	ldr	r2, [r7, #24]
    37f0:	697b      	ldr	r3, [r7, #20]
    37f2:	429a      	cmp	r2, r3
    37f4:	d006      	beq.n	3804 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
    37f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    37fa:	f043 0303 	orr.w	r3, r3, #3
    37fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3802:	e07e      	b.n	3902 <create_name+0x2ba>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    3804:	6a3a      	ldr	r2, [r7, #32]
    3806:	69fb      	ldr	r3, [r7, #28]
    3808:	429a      	cmp	r2, r3
    380a:	d203      	bcs.n	3814 <create_name+0x1cc>
    380c:	69ba      	ldr	r2, [r7, #24]
    380e:	697b      	ldr	r3, [r7, #20]
    3810:	429a      	cmp	r2, r3
    3812:	d124      	bne.n	385e <create_name+0x216>
			if (ni == 11) {				/* Long extension */
    3814:	69fb      	ldr	r3, [r7, #28]
    3816:	2b0b      	cmp	r3, #11
    3818:	d106      	bne.n	3828 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
    381a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    381e:	f043 0303 	orr.w	r3, r3, #3
    3822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3826:	e079      	b.n	391c <create_name+0x2d4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    3828:	69ba      	ldr	r2, [r7, #24]
    382a:	697b      	ldr	r3, [r7, #20]
    382c:	429a      	cmp	r2, r3
    382e:	d005      	beq.n	383c <create_name+0x1f4>
    3830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3834:	f043 0303 	orr.w	r3, r3, #3
    3838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
    383c:	69ba      	ldr	r2, [r7, #24]
    383e:	697b      	ldr	r3, [r7, #20]
    3840:	429a      	cmp	r2, r3
    3842:	d900      	bls.n	3846 <create_name+0x1fe>
    3844:	e06a      	b.n	391c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    3846:	697b      	ldr	r3, [r7, #20]
    3848:	61bb      	str	r3, [r7, #24]
    384a:	2308      	movs	r3, #8
    384c:	623b      	str	r3, [r7, #32]
    384e:	230b      	movs	r3, #11
    3850:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    3852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3856:	009b      	lsls	r3, r3, #2
    3858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    385c:	e051      	b.n	3902 <create_name+0x2ba>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    385e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3860:	2b7f      	cmp	r3, #127	; 0x7f
    3862:	d914      	bls.n	388e <create_name+0x246>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    3864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3866:	4618      	mov	r0, r3
    3868:	2100      	movs	r1, #0
    386a:	4b26      	ldr	r3, [pc, #152]	; (3904 <create_name+0x2bc>)
    386c:	4798      	blx	r3
    386e:	4603      	mov	r3, r0
    3870:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    3872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3874:	2b00      	cmp	r3, #0
    3876:	d004      	beq.n	3882 <create_name+0x23a>
    3878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    387a:	3b80      	subs	r3, #128	; 0x80
    387c:	4a25      	ldr	r2, [pc, #148]	; (3914 <create_name+0x2cc>)
    387e:	5cd3      	ldrb	r3, [r2, r3]
    3880:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    3882:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3886:	f043 0302 	orr.w	r3, r3, #2
    388a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    388e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3890:	2b00      	cmp	r3, #0
    3892:	d007      	beq.n	38a4 <create_name+0x25c>
    3894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3896:	4820      	ldr	r0, [pc, #128]	; (3918 <create_name+0x2d0>)
    3898:	4619      	mov	r1, r3
    389a:	4b1c      	ldr	r3, [pc, #112]	; (390c <create_name+0x2c4>)
    389c:	4798      	blx	r3
    389e:	4603      	mov	r3, r0
    38a0:	2b00      	cmp	r3, #0
    38a2:	d008      	beq.n	38b6 <create_name+0x26e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    38a4:	235f      	movs	r3, #95	; 0x5f
    38a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    38a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    38ac:	f043 0303 	orr.w	r3, r3, #3
    38b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    38b4:	e01b      	b.n	38ee <create_name+0x2a6>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    38b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    38b8:	2b40      	cmp	r3, #64	; 0x40
    38ba:	d909      	bls.n	38d0 <create_name+0x288>
    38bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    38be:	2b5a      	cmp	r3, #90	; 0x5a
    38c0:	d806      	bhi.n	38d0 <create_name+0x288>
					b |= 2;
    38c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    38c6:	f043 0302 	orr.w	r3, r3, #2
    38ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    38ce:	e00e      	b.n	38ee <create_name+0x2a6>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    38d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    38d2:	2b60      	cmp	r3, #96	; 0x60
    38d4:	d90b      	bls.n	38ee <create_name+0x2a6>
    38d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    38d8:	2b7a      	cmp	r3, #122	; 0x7a
    38da:	d808      	bhi.n	38ee <create_name+0x2a6>
						b |= 1; w -= 0x20;
    38dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    38e0:	f043 0301 	orr.w	r3, r3, #1
    38e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    38e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    38ea:	3b20      	subs	r3, #32
    38ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	699a      	ldr	r2, [r3, #24]
    38f2:	6a3b      	ldr	r3, [r7, #32]
    38f4:	1c59      	adds	r1, r3, #1
    38f6:	6239      	str	r1, [r7, #32]
    38f8:	4413      	add	r3, r2
    38fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    38fc:	b2d2      	uxtb	r2, r2
    38fe:	701a      	strb	r2, [r3, #0]
	}
    3900:	e763      	b.n	37ca <create_name+0x182>
    3902:	e762      	b.n	37ca <create_name+0x182>
    3904:	0000236d 	.word	0x0000236d
    3908:	00012ba4 	.word	0x00012ba4
    390c:	00002501 	.word	0x00002501
    3910:	0000247d 	.word	0x0000247d
    3914:	00012bec 	.word	0x00012bec
    3918:	00012bb0 	.word	0x00012bb0

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    391c:	687b      	ldr	r3, [r7, #4]
    391e:	699b      	ldr	r3, [r3, #24]
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	2be5      	cmp	r3, #229	; 0xe5
    3924:	d103      	bne.n	392e <create_name+0x2e6>
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	699b      	ldr	r3, [r3, #24]
    392a:	2205      	movs	r2, #5
    392c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    392e:	69fb      	ldr	r3, [r7, #28]
    3930:	2b08      	cmp	r3, #8
    3932:	d104      	bne.n	393e <create_name+0x2f6>
    3934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3938:	009b      	lsls	r3, r3, #2
    393a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    393e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3942:	f003 030c 	and.w	r3, r3, #12
    3946:	2b0c      	cmp	r3, #12
    3948:	d005      	beq.n	3956 <create_name+0x30e>
    394a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    394e:	f003 0303 	and.w	r3, r3, #3
    3952:	2b03      	cmp	r3, #3
    3954:	d105      	bne.n	3962 <create_name+0x31a>
		cf |= NS_LFN;
    3956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    395a:	f043 0302 	orr.w	r3, r3, #2
    395e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    3962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3966:	f003 0302 	and.w	r3, r3, #2
    396a:	2b00      	cmp	r3, #0
    396c:	d117      	bne.n	399e <create_name+0x356>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    396e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3972:	f003 0303 	and.w	r3, r3, #3
    3976:	2b01      	cmp	r3, #1
    3978:	d105      	bne.n	3986 <create_name+0x33e>
    397a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    397e:	f043 0310 	orr.w	r3, r3, #16
    3982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    3986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    398a:	f003 030c 	and.w	r3, r3, #12
    398e:	2b04      	cmp	r3, #4
    3990:	d105      	bne.n	399e <create_name+0x356>
    3992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3996:	f043 0308 	orr.w	r3, r3, #8
    399a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	699b      	ldr	r3, [r3, #24]
    39a2:	330b      	adds	r3, #11
    39a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    39a8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    39aa:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    39ac:	4618      	mov	r0, r3
    39ae:	3728      	adds	r7, #40	; 0x28
    39b0:	46bd      	mov	sp, r7
    39b2:	bd80      	pop	{r7, pc}

000039b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    39b4:	b580      	push	{r7, lr}
    39b6:	b084      	sub	sp, #16
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
    39bc:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	781b      	ldrb	r3, [r3, #0]
    39c2:	2b2f      	cmp	r3, #47	; 0x2f
    39c4:	d003      	beq.n	39ce <follow_path+0x1a>
    39c6:	683b      	ldr	r3, [r7, #0]
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	2b5c      	cmp	r3, #92	; 0x5c
    39cc:	d102      	bne.n	39d4 <follow_path+0x20>
		path++;
    39ce:	683b      	ldr	r3, [r7, #0]
    39d0:	3301      	adds	r3, #1
    39d2:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    39d4:	687b      	ldr	r3, [r7, #4]
    39d6:	2200      	movs	r2, #0
    39d8:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	781b      	ldrb	r3, [r3, #0]
    39de:	2b1f      	cmp	r3, #31
    39e0:	d809      	bhi.n	39f6 <follow_path+0x42>
		res = dir_sdi(dj, 0);
    39e2:	6878      	ldr	r0, [r7, #4]
    39e4:	2100      	movs	r1, #0
    39e6:	4b2f      	ldr	r3, [pc, #188]	; (3aa4 <follow_path+0xf0>)
    39e8:	4798      	blx	r3
    39ea:	4603      	mov	r3, r0
    39ec:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	2200      	movs	r2, #0
    39f2:	615a      	str	r2, [r3, #20]
    39f4:	e051      	b.n	3a9a <follow_path+0xe6>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    39f6:	463b      	mov	r3, r7
    39f8:	6878      	ldr	r0, [r7, #4]
    39fa:	4619      	mov	r1, r3
    39fc:	4b2a      	ldr	r3, [pc, #168]	; (3aa8 <follow_path+0xf4>)
    39fe:	4798      	blx	r3
    3a00:	4603      	mov	r3, r0
    3a02:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
    3a04:	7bfb      	ldrb	r3, [r7, #15]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d000      	beq.n	3a0c <follow_path+0x58>
    3a0a:	e046      	b.n	3a9a <follow_path+0xe6>
			res = dir_find(dj);				/* Find it */
    3a0c:	6878      	ldr	r0, [r7, #4]
    3a0e:	4b27      	ldr	r3, [pc, #156]	; (3aac <follow_path+0xf8>)
    3a10:	4798      	blx	r3
    3a12:	4603      	mov	r3, r0
    3a14:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	699b      	ldr	r3, [r3, #24]
    3a1a:	7adb      	ldrb	r3, [r3, #11]
    3a1c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
    3a1e:	7bfb      	ldrb	r3, [r7, #15]
    3a20:	2b00      	cmp	r3, #0
    3a22:	d00c      	beq.n	3a3e <follow_path+0x8a>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    3a24:	7bfb      	ldrb	r3, [r7, #15]
    3a26:	2b04      	cmp	r3, #4
    3a28:	d000      	beq.n	3a2c <follow_path+0x78>
    3a2a:	e036      	b.n	3a9a <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    3a2c:	7bbb      	ldrb	r3, [r7, #14]
    3a2e:	f003 0304 	and.w	r3, r3, #4
    3a32:	2b00      	cmp	r3, #0
    3a34:	d102      	bne.n	3a3c <follow_path+0x88>
    3a36:	2305      	movs	r3, #5
    3a38:	73fb      	strb	r3, [r7, #15]
				}
				break;
    3a3a:	e02e      	b.n	3a9a <follow_path+0xe6>
    3a3c:	e02d      	b.n	3a9a <follow_path+0xe6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    3a3e:	7bbb      	ldrb	r3, [r7, #14]
    3a40:	f003 0304 	and.w	r3, r3, #4
    3a44:	2b00      	cmp	r3, #0
    3a46:	d000      	beq.n	3a4a <follow_path+0x96>
    3a48:	e027      	b.n	3a9a <follow_path+0xe6>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3a4a:	687b      	ldr	r3, [r7, #4]
    3a4c:	695b      	ldr	r3, [r3, #20]
    3a4e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    3a50:	68bb      	ldr	r3, [r7, #8]
    3a52:	330b      	adds	r3, #11
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	f003 0310 	and.w	r3, r3, #16
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d102      	bne.n	3a64 <follow_path+0xb0>
				res = FR_NO_PATH; break;
    3a5e:	2305      	movs	r3, #5
    3a60:	73fb      	strb	r3, [r7, #15]
    3a62:	e01a      	b.n	3a9a <follow_path+0xe6>
			}
			dj->sclust = LD_CLUST(dir);
    3a64:	68bb      	ldr	r3, [r7, #8]
    3a66:	3315      	adds	r3, #21
    3a68:	781b      	ldrb	r3, [r3, #0]
    3a6a:	021b      	lsls	r3, r3, #8
    3a6c:	b29a      	uxth	r2, r3
    3a6e:	68bb      	ldr	r3, [r7, #8]
    3a70:	3314      	adds	r3, #20
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	4313      	orrs	r3, r2
    3a76:	b29b      	uxth	r3, r3
    3a78:	b29b      	uxth	r3, r3
    3a7a:	041a      	lsls	r2, r3, #16
    3a7c:	68bb      	ldr	r3, [r7, #8]
    3a7e:	331b      	adds	r3, #27
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	021b      	lsls	r3, r3, #8
    3a84:	b299      	uxth	r1, r3
    3a86:	68bb      	ldr	r3, [r7, #8]
    3a88:	331a      	adds	r3, #26
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	430b      	orrs	r3, r1
    3a8e:	b29b      	uxth	r3, r3
    3a90:	b29b      	uxth	r3, r3
    3a92:	431a      	orrs	r2, r3
    3a94:	687b      	ldr	r3, [r7, #4]
    3a96:	609a      	str	r2, [r3, #8]
		}
    3a98:	e7ad      	b.n	39f6 <follow_path+0x42>
	}

	return res;
    3a9a:	7bfb      	ldrb	r3, [r7, #15]
}
    3a9c:	4618      	mov	r0, r3
    3a9e:	3710      	adds	r7, #16
    3aa0:	46bd      	mov	sp, r7
    3aa2:	bd80      	pop	{r7, pc}
    3aa4:	00002ca9 	.word	0x00002ca9
    3aa8:	00003649 	.word	0x00003649
    3aac:	00003251 	.word	0x00003251

00003ab0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    3ab0:	b590      	push	{r4, r7, lr}
    3ab2:	b083      	sub	sp, #12
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	6078      	str	r0, [r7, #4]
    3ab8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	785a      	ldrb	r2, [r3, #1]
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	3330      	adds	r3, #48	; 0x30
    3ac2:	4610      	mov	r0, r2
    3ac4:	4619      	mov	r1, r3
    3ac6:	683a      	ldr	r2, [r7, #0]
    3ac8:	2301      	movs	r3, #1
    3aca:	4c27      	ldr	r4, [pc, #156]	; (3b68 <check_fs+0xb8>)
    3acc:	47a0      	blx	r4
    3ace:	4603      	mov	r3, r0
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d001      	beq.n	3ad8 <check_fs+0x28>
		return 3;
    3ad4:	2303      	movs	r3, #3
    3ad6:	e042      	b.n	3b5e <check_fs+0xae>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
    3ade:	021b      	lsls	r3, r3, #8
    3ae0:	b29a      	uxth	r2, r3
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
    3ae8:	4313      	orrs	r3, r2
    3aea:	b29b      	uxth	r3, r3
    3aec:	b21a      	sxth	r2, r3
    3aee:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <check_fs+0xbc>)
    3af0:	429a      	cmp	r2, r3
    3af2:	d001      	beq.n	3af8 <check_fs+0x48>
		return 2;
    3af4:	2302      	movs	r3, #2
    3af6:	e032      	b.n	3b5e <check_fs+0xae>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    3afe:	061a      	lsls	r2, r3, #24
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    3b06:	041b      	lsls	r3, r3, #16
    3b08:	431a      	orrs	r2, r3
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    3b10:	021b      	lsls	r3, r3, #8
    3b12:	431a      	orrs	r2, r3
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    3b1a:	4313      	orrs	r3, r2
    3b1c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3b20:	4b13      	ldr	r3, [pc, #76]	; (3b70 <check_fs+0xc0>)
    3b22:	429a      	cmp	r2, r3
    3b24:	d101      	bne.n	3b2a <check_fs+0x7a>
		return 0;
    3b26:	2300      	movs	r3, #0
    3b28:	e019      	b.n	3b5e <check_fs+0xae>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
    3b30:	061a      	lsls	r2, r3, #24
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
    3b38:	041b      	lsls	r3, r3, #16
    3b3a:	431a      	orrs	r2, r3
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
    3b42:	021b      	lsls	r3, r3, #8
    3b44:	431a      	orrs	r2, r3
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    3b4c:	4313      	orrs	r3, r2
    3b4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3b52:	4b07      	ldr	r3, [pc, #28]	; (3b70 <check_fs+0xc0>)
    3b54:	429a      	cmp	r2, r3
    3b56:	d101      	bne.n	3b5c <check_fs+0xac>
		return 0;
    3b58:	2300      	movs	r3, #0
    3b5a:	e000      	b.n	3b5e <check_fs+0xae>

	return 1;
    3b5c:	2301      	movs	r3, #1
}
    3b5e:	4618      	mov	r0, r3
    3b60:	370c      	adds	r7, #12
    3b62:	46bd      	mov	sp, r7
    3b64:	bd90      	pop	{r4, r7, pc}
    3b66:	bf00      	nop
    3b68:	000020e1 	.word	0x000020e1
    3b6c:	ffffaa55 	.word	0xffffaa55
    3b70:	00544146 	.word	0x00544146

00003b74 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    3b74:	b590      	push	{r4, r7, lr}
    3b76:	b093      	sub	sp, #76	; 0x4c
    3b78:	af00      	add	r7, sp, #0
    3b7a:	60f8      	str	r0, [r7, #12]
    3b7c:	60b9      	str	r1, [r7, #8]
    3b7e:	4613      	mov	r3, r2
    3b80:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    3b82:	68fb      	ldr	r3, [r7, #12]
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    3b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b8a:	781b      	ldrb	r3, [r3, #0]
    3b8c:	3b30      	subs	r3, #48	; 0x30
    3b8e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3b92:	2b09      	cmp	r3, #9
    3b94:	d80b      	bhi.n	3bae <chk_mounted+0x3a>
    3b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b98:	3301      	adds	r3, #1
    3b9a:	781b      	ldrb	r3, [r3, #0]
    3b9c:	2b3a      	cmp	r3, #58	; 0x3a
    3b9e:	d106      	bne.n	3bae <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    3ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ba2:	3302      	adds	r3, #2
    3ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3baa:	601a      	str	r2, [r3, #0]
    3bac:	e001      	b.n	3bb2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    3bae:	2300      	movs	r3, #0
    3bb0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3bb4:	2b07      	cmp	r3, #7
    3bb6:	d901      	bls.n	3bbc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    3bb8:	230b      	movs	r3, #11
    3bba:	e274      	b.n	40a6 <chk_mounted+0x532>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3bbc:	4ba6      	ldr	r3, [pc, #664]	; (3e58 <chk_mounted+0x2e4>)
    3bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    3bc6:	68bb      	ldr	r3, [r7, #8]
    3bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bca:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d101      	bne.n	3bd6 <chk_mounted+0x62>
    3bd2:	230c      	movs	r3, #12
    3bd4:	e267      	b.n	40a6 <chk_mounted+0x532>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bd8:	781b      	ldrb	r3, [r3, #0]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d01a      	beq.n	3c14 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
    3bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3be0:	785b      	ldrb	r3, [r3, #1]
    3be2:	4618      	mov	r0, r3
    3be4:	4b9d      	ldr	r3, [pc, #628]	; (3e5c <chk_mounted+0x2e8>)
    3be6:	4798      	blx	r3
    3be8:	4603      	mov	r3, r0
    3bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3bf2:	f003 0301 	and.w	r3, r3, #1
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d10c      	bne.n	3c14 <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3bfa:	79fb      	ldrb	r3, [r7, #7]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d007      	beq.n	3c10 <chk_mounted+0x9c>
    3c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c04:	f003 0304 	and.w	r3, r3, #4
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d001      	beq.n	3c10 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
    3c0c:	230a      	movs	r3, #10
    3c0e:	e24a      	b.n	40a6 <chk_mounted+0x532>
			return FR_OK;				/* The file system object is valid */
    3c10:	2300      	movs	r3, #0
    3c12:	e248      	b.n	40a6 <chk_mounted+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    3c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c16:	2200      	movs	r2, #0
    3c18:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3c1c:	b2da      	uxtb	r2, r3
    3c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c20:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c24:	785b      	ldrb	r3, [r3, #1]
    3c26:	4618      	mov	r0, r3
    3c28:	4b8d      	ldr	r3, [pc, #564]	; (3e60 <chk_mounted+0x2ec>)
    3c2a:	4798      	blx	r3
    3c2c:	4603      	mov	r3, r0
    3c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c36:	f003 0301 	and.w	r3, r3, #1
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d001      	beq.n	3c42 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3c3e:	2303      	movs	r3, #3
    3c40:	e231      	b.n	40a6 <chk_mounted+0x532>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3c42:	79fb      	ldrb	r3, [r7, #7]
    3c44:	2b00      	cmp	r3, #0
    3c46:	d007      	beq.n	3c58 <chk_mounted+0xe4>
    3c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c4c:	f003 0304 	and.w	r3, r3, #4
    3c50:	2b00      	cmp	r3, #0
    3c52:	d001      	beq.n	3c58 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
    3c54:	230a      	movs	r3, #10
    3c56:	e226      	b.n	40a6 <chk_mounted+0x532>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3c58:	2300      	movs	r3, #0
    3c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    3c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3c5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3c60:	4b80      	ldr	r3, [pc, #512]	; (3e64 <chk_mounted+0x2f0>)
    3c62:	4798      	blx	r3
    3c64:	4603      	mov	r3, r0
    3c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3c6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    3c6e:	2b01      	cmp	r3, #1
    3c70:	d133      	bne.n	3cda <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    3c72:	2300      	movs	r3, #0
    3c74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
    3c78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	d004      	beq.n	3c8a <chk_mounted+0x116>
    3c80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    3c84:	3b01      	subs	r3, #1
    3c86:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    3c8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    3c8e:	011b      	lsls	r3, r3, #4
    3c90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
    3c94:	3330      	adds	r3, #48	; 0x30
    3c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c98:	4413      	add	r3, r2
    3c9a:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    3c9c:	6a3b      	ldr	r3, [r7, #32]
    3c9e:	3304      	adds	r3, #4
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d019      	beq.n	3cda <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3ca6:	6a3b      	ldr	r3, [r7, #32]
    3ca8:	330b      	adds	r3, #11
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	061a      	lsls	r2, r3, #24
    3cae:	6a3b      	ldr	r3, [r7, #32]
    3cb0:	330a      	adds	r3, #10
    3cb2:	781b      	ldrb	r3, [r3, #0]
    3cb4:	041b      	lsls	r3, r3, #16
    3cb6:	431a      	orrs	r2, r3
    3cb8:	6a3b      	ldr	r3, [r7, #32]
    3cba:	3309      	adds	r3, #9
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	021b      	lsls	r3, r3, #8
    3cc0:	431a      	orrs	r2, r3
    3cc2:	6a3b      	ldr	r3, [r7, #32]
    3cc4:	3308      	adds	r3, #8
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	4313      	orrs	r3, r2
    3cca:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3cce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3cd0:	4b64      	ldr	r3, [pc, #400]	; (3e64 <chk_mounted+0x2f0>)
    3cd2:	4798      	blx	r3
    3cd4:	4603      	mov	r3, r0
    3cd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    3cda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    3cde:	2b03      	cmp	r3, #3
    3ce0:	d101      	bne.n	3ce6 <chk_mounted+0x172>
    3ce2:	2301      	movs	r3, #1
    3ce4:	e1df      	b.n	40a6 <chk_mounted+0x532>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3ce6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    3cea:	2b00      	cmp	r3, #0
    3cec:	d001      	beq.n	3cf2 <chk_mounted+0x17e>
    3cee:	230d      	movs	r3, #13
    3cf0:	e1d9      	b.n	40a6 <chk_mounted+0x532>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    3cf8:	021b      	lsls	r3, r3, #8
    3cfa:	b29a      	uxth	r2, r3
    3cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cfe:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    3d02:	4313      	orrs	r3, r2
    3d04:	b29b      	uxth	r3, r3
    3d06:	b21b      	sxth	r3, r3
    3d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3d0c:	d001      	beq.n	3d12 <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
    3d0e:	230d      	movs	r3, #13
    3d10:	e1c9      	b.n	40a6 <chk_mounted+0x532>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d14:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    3d18:	021b      	lsls	r3, r3, #8
    3d1a:	b29a      	uxth	r2, r3
    3d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d1e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    3d22:	4313      	orrs	r3, r2
    3d24:	b29b      	uxth	r3, r3
    3d26:	b29b      	uxth	r3, r3
    3d28:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d112      	bne.n	3d56 <chk_mounted+0x1e2>
    3d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d32:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
    3d36:	061a      	lsls	r2, r3, #24
    3d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
    3d3e:	041b      	lsls	r3, r3, #16
    3d40:	431a      	orrs	r2, r3
    3d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
    3d48:	021b      	lsls	r3, r3, #8
    3d4a:	431a      	orrs	r2, r3
    3d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    3d52:	4313      	orrs	r3, r2
    3d54:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    3d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d5a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3d62:	77fb      	strb	r3, [r7, #31]
    3d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d66:	7ffa      	ldrb	r2, [r7, #31]
    3d68:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3d6a:	7ffb      	ldrb	r3, [r7, #31]
    3d6c:	2b01      	cmp	r3, #1
    3d6e:	d004      	beq.n	3d7a <chk_mounted+0x206>
    3d70:	7ffb      	ldrb	r3, [r7, #31]
    3d72:	2b02      	cmp	r3, #2
    3d74:	d001      	beq.n	3d7a <chk_mounted+0x206>
    3d76:	230d      	movs	r3, #13
    3d78:	e195      	b.n	40a6 <chk_mounted+0x532>
	fasize *= b;										/* Number of sectors for FAT area */
    3d7a:	7ffa      	ldrb	r2, [r7, #31]
    3d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d7e:	fb02 f303 	mul.w	r3, r2, r3
    3d82:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    3d8a:	77fb      	strb	r3, [r7, #31]
    3d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d8e:	7ffa      	ldrb	r2, [r7, #31]
    3d90:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3d92:	7ffb      	ldrb	r3, [r7, #31]
    3d94:	2b00      	cmp	r3, #0
    3d96:	d005      	beq.n	3da4 <chk_mounted+0x230>
    3d98:	7ffa      	ldrb	r2, [r7, #31]
    3d9a:	7ffb      	ldrb	r3, [r7, #31]
    3d9c:	3b01      	subs	r3, #1
    3d9e:	4013      	ands	r3, r2
    3da0:	2b00      	cmp	r3, #0
    3da2:	d001      	beq.n	3da8 <chk_mounted+0x234>
    3da4:	230d      	movs	r3, #13
    3da6:	e17e      	b.n	40a6 <chk_mounted+0x532>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    3dae:	021b      	lsls	r3, r3, #8
    3db0:	b29a      	uxth	r2, r3
    3db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    3db8:	4313      	orrs	r3, r2
    3dba:	b29b      	uxth	r3, r3
    3dbc:	b29a      	uxth	r2, r3
    3dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dc0:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dc4:	891b      	ldrh	r3, [r3, #8]
    3dc6:	f003 030f 	and.w	r3, r3, #15
    3dca:	b29b      	uxth	r3, r3
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d001      	beq.n	3dd4 <chk_mounted+0x260>
    3dd0:	230d      	movs	r3, #13
    3dd2:	e168      	b.n	40a6 <chk_mounted+0x532>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    3dda:	021b      	lsls	r3, r3, #8
    3ddc:	b29a      	uxth	r2, r3
    3dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3de0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    3de4:	4313      	orrs	r3, r2
    3de6:	b29b      	uxth	r3, r3
    3de8:	b29b      	uxth	r3, r3
    3dea:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3dee:	2b00      	cmp	r3, #0
    3df0:	d112      	bne.n	3e18 <chk_mounted+0x2a4>
    3df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3df4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
    3df8:	061a      	lsls	r2, r3, #24
    3dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dfc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
    3e00:	041b      	lsls	r3, r3, #16
    3e02:	431a      	orrs	r2, r3
    3e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
    3e0a:	021b      	lsls	r3, r3, #8
    3e0c:	431a      	orrs	r2, r3
    3e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    3e14:	4313      	orrs	r3, r2
    3e16:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    3e1e:	021b      	lsls	r3, r3, #8
    3e20:	b29a      	uxth	r2, r3
    3e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    3e28:	4313      	orrs	r3, r2
    3e2a:	b29b      	uxth	r3, r3
    3e2c:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3e2e:	8bbb      	ldrh	r3, [r7, #28]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d101      	bne.n	3e38 <chk_mounted+0x2c4>
    3e34:	230d      	movs	r3, #13
    3e36:	e136      	b.n	40a6 <chk_mounted+0x532>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3e38:	8bba      	ldrh	r2, [r7, #28]
    3e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e3c:	441a      	add	r2, r3
    3e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e40:	891b      	ldrh	r3, [r3, #8]
    3e42:	091b      	lsrs	r3, r3, #4
    3e44:	b29b      	uxth	r3, r3
    3e46:	4413      	add	r3, r2
    3e48:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3e4c:	69bb      	ldr	r3, [r7, #24]
    3e4e:	429a      	cmp	r2, r3
    3e50:	d20a      	bcs.n	3e68 <chk_mounted+0x2f4>
    3e52:	230d      	movs	r3, #13
    3e54:	e127      	b.n	40a6 <chk_mounted+0x532>
    3e56:	bf00      	nop
    3e58:	20000de4 	.word	0x20000de4
    3e5c:	000020ad 	.word	0x000020ad
    3e60:	00002045 	.word	0x00002045
    3e64:	00003ab1 	.word	0x00003ab1
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3e6a:	69bb      	ldr	r3, [r7, #24]
    3e6c:	1ad2      	subs	r2, r2, r3
    3e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e70:	789b      	ldrb	r3, [r3, #2]
    3e72:	fbb2 f3f3 	udiv	r3, r2, r3
    3e76:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3e78:	697b      	ldr	r3, [r7, #20]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d101      	bne.n	3e82 <chk_mounted+0x30e>
    3e7e:	230d      	movs	r3, #13
    3e80:	e111      	b.n	40a6 <chk_mounted+0x532>
	fmt = FS_FAT12;
    3e82:	2301      	movs	r3, #1
    3e84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3e88:	697a      	ldr	r2, [r7, #20]
    3e8a:	f640 73f5 	movw	r3, #4085	; 0xff5
    3e8e:	429a      	cmp	r2, r3
    3e90:	d902      	bls.n	3e98 <chk_mounted+0x324>
    3e92:	2302      	movs	r3, #2
    3e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3e98:	697a      	ldr	r2, [r7, #20]
    3e9a:	f64f 73f5 	movw	r3, #65525	; 0xfff5
    3e9e:	429a      	cmp	r2, r3
    3ea0:	d902      	bls.n	3ea8 <chk_mounted+0x334>
    3ea2:	2303      	movs	r3, #3
    3ea4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3ea8:	697b      	ldr	r3, [r7, #20]
    3eaa:	1c9a      	adds	r2, r3, #2
    3eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eae:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3eb2:	69bb      	ldr	r3, [r7, #24]
    3eb4:	441a      	add	r2, r3
    3eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eb8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3eba:	8bba      	ldrh	r2, [r7, #28]
    3ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ebe:	441a      	add	r2, r3
    3ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ec2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    3ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    3ec8:	2b03      	cmp	r3, #3
    3eca:	d11e      	bne.n	3f0a <chk_mounted+0x396>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ece:	891b      	ldrh	r3, [r3, #8]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d001      	beq.n	3ed8 <chk_mounted+0x364>
    3ed4:	230d      	movs	r3, #13
    3ed6:	e0e6      	b.n	40a6 <chk_mounted+0x532>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eda:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    3ede:	061a      	lsls	r2, r3, #24
    3ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ee2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    3ee6:	041b      	lsls	r3, r3, #16
    3ee8:	431a      	orrs	r2, r3
    3eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
    3ef0:	021b      	lsls	r3, r3, #8
    3ef2:	431a      	orrs	r2, r3
    3ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ef6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    3efa:	431a      	orrs	r2, r3
    3efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3efe:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f02:	699b      	ldr	r3, [r3, #24]
    3f04:	009b      	lsls	r3, r3, #2
    3f06:	633b      	str	r3, [r7, #48]	; 0x30
    3f08:	e01f      	b.n	3f4a <chk_mounted+0x3d6>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f0c:	891b      	ldrh	r3, [r3, #8]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d101      	bne.n	3f16 <chk_mounted+0x3a2>
    3f12:	230d      	movs	r3, #13
    3f14:	e0c7      	b.n	40a6 <chk_mounted+0x532>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f18:	6a1a      	ldr	r2, [r3, #32]
    3f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f1c:	441a      	add	r2, r3
    3f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f20:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3f22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    3f26:	2b02      	cmp	r3, #2
    3f28:	d103      	bne.n	3f32 <chk_mounted+0x3be>
    3f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f2c:	699b      	ldr	r3, [r3, #24]
    3f2e:	005b      	lsls	r3, r3, #1
    3f30:	e00a      	b.n	3f48 <chk_mounted+0x3d4>
    3f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f34:	699a      	ldr	r2, [r3, #24]
    3f36:	4613      	mov	r3, r2
    3f38:	005b      	lsls	r3, r3, #1
    3f3a:	4413      	add	r3, r2
    3f3c:	085a      	lsrs	r2, r3, #1
    3f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f40:	699b      	ldr	r3, [r3, #24]
    3f42:	f003 0301 	and.w	r3, r3, #1
    3f46:	4413      	add	r3, r2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    3f48:	633b      	str	r3, [r7, #48]	; 0x30
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f4c:	69da      	ldr	r2, [r3, #28]
    3f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    3f54:	0a5b      	lsrs	r3, r3, #9
    3f56:	429a      	cmp	r2, r3
    3f58:	d201      	bcs.n	3f5e <chk_mounted+0x3ea>
		return FR_NO_FILESYSTEM;
    3f5a:	230d      	movs	r3, #13
    3f5c:	e0a3      	b.n	40a6 <chk_mounted+0x532>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    3f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f60:	f04f 32ff 	mov.w	r2, #4294967295
    3f64:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    3f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f68:	2200      	movs	r2, #0
    3f6a:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    3f6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    3f70:	2b03      	cmp	r3, #3
    3f72:	f040 8083 	bne.w	407c <chk_mounted+0x508>
	 	fs->fsi_flag = 0;
    3f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f78:	2200      	movs	r2, #0
    3f7a:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f7e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    3f82:	021b      	lsls	r3, r3, #8
    3f84:	b29a      	uxth	r2, r3
    3f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f88:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    3f8c:	4313      	orrs	r3, r2
    3f8e:	b29b      	uxth	r3, r3
    3f90:	b29b      	uxth	r3, r3
    3f92:	461a      	mov	r2, r3
    3f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f96:	441a      	add	r2, r3
    3f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f9a:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f9e:	7859      	ldrb	r1, [r3, #1]
    3fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fa2:	f103 0230 	add.w	r2, r3, #48	; 0x30
    3fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fa8:	695b      	ldr	r3, [r3, #20]
    3faa:	4608      	mov	r0, r1
    3fac:	4611      	mov	r1, r2
    3fae:	461a      	mov	r2, r3
    3fb0:	2301      	movs	r3, #1
    3fb2:	4c3f      	ldr	r4, [pc, #252]	; (40b0 <chk_mounted+0x53c>)
    3fb4:	47a0      	blx	r4
    3fb6:	4603      	mov	r3, r0
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d15f      	bne.n	407c <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fbe:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
    3fc2:	021b      	lsls	r3, r3, #8
    3fc4:	b29a      	uxth	r2, r3
    3fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fc8:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
    3fcc:	4313      	orrs	r3, r2
    3fce:	b29b      	uxth	r3, r3

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3fd0:	b21a      	sxth	r2, r3
    3fd2:	4b38      	ldr	r3, [pc, #224]	; (40b4 <chk_mounted+0x540>)
    3fd4:	429a      	cmp	r2, r3
    3fd6:	d151      	bne.n	407c <chk_mounted+0x508>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    3fde:	061a      	lsls	r2, r3, #24
    3fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fe2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    3fe6:	041b      	lsls	r3, r3, #16
    3fe8:	431a      	orrs	r2, r3
    3fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    3ff0:	021b      	lsls	r3, r3, #8
    3ff2:	431a      	orrs	r2, r3
    3ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    3ffa:	431a      	orrs	r2, r3
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3ffc:	4b2e      	ldr	r3, [pc, #184]	; (40b8 <chk_mounted+0x544>)
    3ffe:	429a      	cmp	r2, r3
    4000:	d13c      	bne.n	407c <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    4002:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4004:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
    4008:	061a      	lsls	r2, r3, #24
    400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    400c:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
    4010:	041b      	lsls	r3, r3, #16
    4012:	431a      	orrs	r2, r3
    4014:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4016:	f893 3215 	ldrb.w	r3, [r3, #533]	; 0x215
    401a:	021b      	lsls	r3, r3, #8
    401c:	431a      	orrs	r2, r3
    401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4020:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    4024:	431a      	orrs	r2, r3
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4026:	4b25      	ldr	r3, [pc, #148]	; (40bc <chk_mounted+0x548>)
    4028:	429a      	cmp	r2, r3
    402a:	d127      	bne.n	407c <chk_mounted+0x508>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    402e:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
    4032:	061a      	lsls	r2, r3, #24
    4034:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4036:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
    403a:	041b      	lsls	r3, r3, #16
    403c:	431a      	orrs	r2, r3
    403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4040:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
    4044:	021b      	lsls	r3, r3, #8
    4046:	431a      	orrs	r2, r3
    4048:	6abb      	ldr	r3, [r7, #40]	; 0x28
    404a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    404e:	431a      	orrs	r2, r3
    4050:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4052:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    4054:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4056:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
    405a:	061a      	lsls	r2, r3, #24
    405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    405e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
    4062:	041b      	lsls	r3, r3, #16
    4064:	431a      	orrs	r2, r3
    4066:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4068:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
    406c:	021b      	lsls	r3, r3, #8
    406e:	431a      	orrs	r2, r3
    4070:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4072:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
    4076:	431a      	orrs	r2, r3
    4078:	6abb      	ldr	r3, [r7, #40]	; 0x28
    407a:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    407e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    4082:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    4084:	4b0e      	ldr	r3, [pc, #56]	; (40c0 <chk_mounted+0x54c>)
    4086:	881b      	ldrh	r3, [r3, #0]
    4088:	3301      	adds	r3, #1
    408a:	b29a      	uxth	r2, r3
    408c:	4b0c      	ldr	r3, [pc, #48]	; (40c0 <chk_mounted+0x54c>)
    408e:	801a      	strh	r2, [r3, #0]
    4090:	4b0b      	ldr	r3, [pc, #44]	; (40c0 <chk_mounted+0x54c>)
    4092:	881a      	ldrh	r2, [r3, #0]
    4094:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4096:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    4098:	6abb      	ldr	r3, [r7, #40]	; 0x28
    409a:	2200      	movs	r2, #0
    409c:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    40a0:	2200      	movs	r2, #0
    40a2:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    40a4:	2300      	movs	r3, #0
}
    40a6:	4618      	mov	r0, r3
    40a8:	374c      	adds	r7, #76	; 0x4c
    40aa:	46bd      	mov	sp, r7
    40ac:	bd90      	pop	{r4, r7, pc}
    40ae:	bf00      	nop
    40b0:	000020e1 	.word	0x000020e1
    40b4:	ffffaa55 	.word	0xffffaa55
    40b8:	41615252 	.word	0x41615252
    40bc:	61417272 	.word	0x61417272
    40c0:	20000e04 	.word	0x20000e04

000040c4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    40c4:	b580      	push	{r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	460b      	mov	r3, r1
    40ce:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
    40d0:	687b      	ldr	r3, [r7, #4]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d008      	beq.n	40e8 <validate+0x24>
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	781b      	ldrb	r3, [r3, #0]
    40da:	2b00      	cmp	r3, #0
    40dc:	d004      	beq.n	40e8 <validate+0x24>
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	88db      	ldrh	r3, [r3, #6]
    40e2:	887a      	ldrh	r2, [r7, #2]
    40e4:	429a      	cmp	r2, r3
    40e6:	d001      	beq.n	40ec <validate+0x28>
		return FR_INVALID_OBJECT;
    40e8:	2309      	movs	r3, #9
    40ea:	e00c      	b.n	4106 <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	785b      	ldrb	r3, [r3, #1]
    40f0:	4618      	mov	r0, r3
    40f2:	4b07      	ldr	r3, [pc, #28]	; (4110 <validate+0x4c>)
    40f4:	4798      	blx	r3
    40f6:	4603      	mov	r3, r0
    40f8:	f003 0301 	and.w	r3, r3, #1
    40fc:	2b00      	cmp	r3, #0
    40fe:	d001      	beq.n	4104 <validate+0x40>
		return FR_NOT_READY;
    4100:	2303      	movs	r3, #3
    4102:	e000      	b.n	4106 <validate+0x42>

	return FR_OK;
    4104:	2300      	movs	r3, #0
}
    4106:	4618      	mov	r0, r3
    4108:	3708      	adds	r7, #8
    410a:	46bd      	mov	sp, r7
    410c:	bd80      	pop	{r7, pc}
    410e:	bf00      	nop
    4110:	000020ad 	.word	0x000020ad

00004114 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    4114:	b480      	push	{r7}
    4116:	b085      	sub	sp, #20
    4118:	af00      	add	r7, sp, #0
    411a:	4603      	mov	r3, r0
    411c:	6039      	str	r1, [r7, #0]
    411e:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4120:	79fb      	ldrb	r3, [r7, #7]
    4122:	2b07      	cmp	r3, #7
    4124:	d901      	bls.n	412a <f_mount+0x16>
		return FR_INVALID_DRIVE;
    4126:	230b      	movs	r3, #11
    4128:	e016      	b.n	4158 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
    412a:	79fa      	ldrb	r2, [r7, #7]
    412c:	4b0d      	ldr	r3, [pc, #52]	; (4164 <f_mount+0x50>)
    412e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4132:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    4134:	68fb      	ldr	r3, [r7, #12]
    4136:	2b00      	cmp	r3, #0
    4138:	d002      	beq.n	4140 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    413a:	68fb      	ldr	r3, [r7, #12]
    413c:	2200      	movs	r2, #0
    413e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    4140:	683b      	ldr	r3, [r7, #0]
    4142:	2b00      	cmp	r3, #0
    4144:	d002      	beq.n	414c <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
    4146:	683b      	ldr	r3, [r7, #0]
    4148:	2200      	movs	r2, #0
    414a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    414c:	79fa      	ldrb	r2, [r7, #7]
    414e:	4b05      	ldr	r3, [pc, #20]	; (4164 <f_mount+0x50>)
    4150:	6839      	ldr	r1, [r7, #0]
    4152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return FR_OK;
    4156:	2300      	movs	r3, #0
}
    4158:	4618      	mov	r0, r3
    415a:	3714      	adds	r7, #20
    415c:	46bd      	mov	sp, r7
    415e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4162:	4770      	bx	lr
    4164:	20000de4 	.word	0x20000de4

00004168 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4168:	b580      	push	{r7, lr}
    416a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    416e:	af00      	add	r7, sp, #0
    4170:	f107 030c 	add.w	r3, r7, #12
    4174:	6018      	str	r0, [r3, #0]
    4176:	f107 0308 	add.w	r3, r7, #8
    417a:	6019      	str	r1, [r3, #0]
    417c:	1dfb      	adds	r3, r7, #7
    417e:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4180:	f107 030c 	add.w	r3, r7, #12
    4184:	681b      	ldr	r3, [r3, #0]
    4186:	2200      	movs	r2, #0
    4188:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    418a:	1dfb      	adds	r3, r7, #7
    418c:	1dfa      	adds	r2, r7, #7
    418e:	7812      	ldrb	r2, [r2, #0]
    4190:	f002 021f 	and.w	r2, r2, #31
    4194:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4196:	1dfb      	adds	r3, r7, #7
    4198:	781b      	ldrb	r3, [r3, #0]
    419a:	f023 0301 	bic.w	r3, r3, #1
    419e:	b2db      	uxtb	r3, r3
    41a0:	f107 0108 	add.w	r1, r7, #8
    41a4:	f507 7207 	add.w	r2, r7, #540	; 0x21c
    41a8:	4608      	mov	r0, r1
    41aa:	4611      	mov	r1, r2
    41ac:	461a      	mov	r2, r3
    41ae:	4b8e      	ldr	r3, [pc, #568]	; (43e8 <f_open+0x280>)
    41b0:	4798      	blx	r3
    41b2:	4603      	mov	r3, r0
    41b4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    41b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
    41bc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    41c0:	f107 0310 	add.w	r3, r7, #16
    41c4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
    41c8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    41cc:	2b00      	cmp	r3, #0
    41ce:	d10b      	bne.n	41e8 <f_open+0x80>
		res = follow_path(&dj, path);	/* Follow the file path */
    41d0:	f107 0308 	add.w	r3, r7, #8
    41d4:	681b      	ldr	r3, [r3, #0]
    41d6:	f507 7207 	add.w	r2, r7, #540	; 0x21c
    41da:	4610      	mov	r0, r2
    41dc:	4619      	mov	r1, r3
    41de:	4b83      	ldr	r3, [pc, #524]	; (43ec <f_open+0x284>)
    41e0:	4798      	blx	r3
    41e2:	4603      	mov	r3, r0
    41e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
    41e8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
    41ec:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    41f0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    41f4:	2b00      	cmp	r3, #0
    41f6:	d106      	bne.n	4206 <f_open+0x9e>
		if (!dir)	/* Current dir itself */
    41f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    41fc:	2b00      	cmp	r3, #0
    41fe:	d102      	bne.n	4206 <f_open+0x9e>
			res = FR_INVALID_NAME;
    4200:	2306      	movs	r3, #6
    4202:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4206:	1dfb      	adds	r3, r7, #7
    4208:	781b      	ldrb	r3, [r3, #0]
    420a:	f003 031c 	and.w	r3, r3, #28
    420e:	2b00      	cmp	r3, #0
    4210:	f000 80d9 	beq.w	43c6 <f_open+0x25e>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    4214:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    4218:	2b00      	cmp	r3, #0
    421a:	d016      	beq.n	424a <f_open+0xe2>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    421c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    4220:	2b04      	cmp	r3, #4
    4222:	d107      	bne.n	4234 <f_open+0xcc>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    4224:	f507 7307 	add.w	r3, r7, #540	; 0x21c
    4228:	4618      	mov	r0, r3
    422a:	4b71      	ldr	r3, [pc, #452]	; (43f0 <f_open+0x288>)
    422c:	4798      	blx	r3
    422e:	4603      	mov	r3, r0
    4230:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4234:	1dfb      	adds	r3, r7, #7
    4236:	1dfa      	adds	r2, r7, #7
    4238:	7812      	ldrb	r2, [r2, #0]
    423a:	f042 0208 	orr.w	r2, r2, #8
    423e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    4240:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
    4244:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    4248:	e014      	b.n	4274 <f_open+0x10c>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    424a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    424e:	330b      	adds	r3, #11
    4250:	781b      	ldrb	r3, [r3, #0]
    4252:	f003 0311 	and.w	r3, r3, #17
    4256:	2b00      	cmp	r3, #0
    4258:	d003      	beq.n	4262 <f_open+0xfa>
				res = FR_DENIED;
    425a:	2307      	movs	r3, #7
    425c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    4260:	e008      	b.n	4274 <f_open+0x10c>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4262:	1dfb      	adds	r3, r7, #7
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	f003 0304 	and.w	r3, r3, #4
    426a:	2b00      	cmp	r3, #0
    426c:	d002      	beq.n	4274 <f_open+0x10c>
					res = FR_EXIST;
    426e:	2308      	movs	r3, #8
    4270:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4274:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    4278:	2b00      	cmp	r3, #0
    427a:	f040 80a3 	bne.w	43c4 <f_open+0x25c>
    427e:	1dfb      	adds	r3, r7, #7
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	f003 0308 	and.w	r3, r3, #8
    4286:	2b00      	cmp	r3, #0
    4288:	f000 809c 	beq.w	43c4 <f_open+0x25c>
			dw = get_fattime();					/* Created time */
    428c:	4b59      	ldr	r3, [pc, #356]	; (43f4 <f_open+0x28c>)
    428e:	4798      	blx	r3
    4290:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
    4294:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4298:	330e      	adds	r3, #14
    429a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
    429e:	b2d2      	uxtb	r2, r2
    42a0:	701a      	strb	r2, [r3, #0]
    42a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42a6:	330f      	adds	r3, #15
    42a8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
    42ac:	b292      	uxth	r2, r2
    42ae:	0a12      	lsrs	r2, r2, #8
    42b0:	b292      	uxth	r2, r2
    42b2:	b2d2      	uxtb	r2, r2
    42b4:	701a      	strb	r2, [r3, #0]
    42b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42ba:	3310      	adds	r3, #16
    42bc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
    42c0:	0c12      	lsrs	r2, r2, #16
    42c2:	b2d2      	uxtb	r2, r2
    42c4:	701a      	strb	r2, [r3, #0]
    42c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42ca:	3311      	adds	r3, #17
    42cc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
    42d0:	0e12      	lsrs	r2, r2, #24
    42d2:	b2d2      	uxtb	r2, r2
    42d4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    42d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42da:	330b      	adds	r3, #11
    42dc:	2200      	movs	r2, #0
    42de:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    42e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42e4:	331c      	adds	r3, #28
    42e6:	2200      	movs	r2, #0
    42e8:	701a      	strb	r2, [r3, #0]
    42ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42ee:	331d      	adds	r3, #29
    42f0:	2200      	movs	r2, #0
    42f2:	701a      	strb	r2, [r3, #0]
    42f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    42f8:	331e      	adds	r3, #30
    42fa:	2200      	movs	r2, #0
    42fc:	701a      	strb	r2, [r3, #0]
    42fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4302:	331f      	adds	r3, #31
    4304:	2200      	movs	r2, #0
    4306:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4308:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    430c:	3315      	adds	r3, #21
    430e:	781b      	ldrb	r3, [r3, #0]
    4310:	021b      	lsls	r3, r3, #8
    4312:	b29a      	uxth	r2, r3
    4314:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4318:	3314      	adds	r3, #20
    431a:	781b      	ldrb	r3, [r3, #0]
    431c:	4313      	orrs	r3, r2
    431e:	b29b      	uxth	r3, r3
    4320:	b29b      	uxth	r3, r3
    4322:	041a      	lsls	r2, r3, #16
    4324:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4328:	331b      	adds	r3, #27
    432a:	781b      	ldrb	r3, [r3, #0]
    432c:	021b      	lsls	r3, r3, #8
    432e:	b299      	uxth	r1, r3
    4330:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4334:	331a      	adds	r3, #26
    4336:	781b      	ldrb	r3, [r3, #0]
    4338:	430b      	orrs	r3, r1
    433a:	b29b      	uxth	r3, r3
    433c:	b29b      	uxth	r3, r3
    433e:	4313      	orrs	r3, r2
    4340:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4344:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4348:	331a      	adds	r3, #26
    434a:	2200      	movs	r2, #0
    434c:	701a      	strb	r2, [r3, #0]
    434e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4352:	331b      	adds	r3, #27
    4354:	2200      	movs	r2, #0
    4356:	701a      	strb	r2, [r3, #0]
    4358:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    435c:	3314      	adds	r3, #20
    435e:	2200      	movs	r2, #0
    4360:	701a      	strb	r2, [r3, #0]
    4362:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4366:	3315      	adds	r3, #21
    4368:	2200      	movs	r2, #0
    436a:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    436c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    4370:	2201      	movs	r2, #1
    4372:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4374:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
    4378:	2b00      	cmp	r3, #0
    437a:	d023      	beq.n	43c4 <f_open+0x25c>
				dw = dj.fs->winsect;
    437c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    4380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4382:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
    4386:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    438a:	4618      	mov	r0, r3
    438c:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
    4390:	4b19      	ldr	r3, [pc, #100]	; (43f8 <f_open+0x290>)
    4392:	4798      	blx	r3
    4394:	4603      	mov	r3, r0
    4396:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
    439a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    439e:	2b00      	cmp	r3, #0
    43a0:	d110      	bne.n	43c4 <f_open+0x25c>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    43a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    43a6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
    43aa:	3a01      	subs	r2, #1
    43ac:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    43ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    43b2:	4618      	mov	r0, r3
    43b4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
    43b8:	4b10      	ldr	r3, [pc, #64]	; (43fc <f_open+0x294>)
    43ba:	4798      	blx	r3
    43bc:	4603      	mov	r3, r0
    43be:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    43c2:	e02e      	b.n	4422 <f_open+0x2ba>
    43c4:	e02d      	b.n	4422 <f_open+0x2ba>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    43c6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    43ca:	2b00      	cmp	r3, #0
    43cc:	d129      	bne.n	4422 <f_open+0x2ba>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    43ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    43d2:	330b      	adds	r3, #11
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	f003 0310 	and.w	r3, r3, #16
    43da:	2b00      	cmp	r3, #0
    43dc:	d010      	beq.n	4400 <f_open+0x298>
				res = FR_NO_FILE;
    43de:	2304      	movs	r3, #4
    43e0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    43e4:	e01d      	b.n	4422 <f_open+0x2ba>
    43e6:	bf00      	nop
    43e8:	00003b75 	.word	0x00003b75
    43ec:	000039b5 	.word	0x000039b5
    43f0:	000033b9 	.word	0x000033b9
    43f4:	00002301 	.word	0x00002301
    43f8:	00002ae5 	.word	0x00002ae5
    43fc:	00002539 	.word	0x00002539
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4400:	1dfb      	adds	r3, r7, #7
    4402:	781b      	ldrb	r3, [r3, #0]
    4404:	f003 0302 	and.w	r3, r3, #2
    4408:	2b00      	cmp	r3, #0
    440a:	d00a      	beq.n	4422 <f_open+0x2ba>
    440c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4410:	330b      	adds	r3, #11
    4412:	781b      	ldrb	r3, [r3, #0]
    4414:	f003 0301 	and.w	r3, r3, #1
    4418:	2b00      	cmp	r3, #0
    441a:	d002      	beq.n	4422 <f_open+0x2ba>
					res = FR_DENIED;
    441c:	2307      	movs	r3, #7
    441e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
    4422:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    4426:	2b00      	cmp	r3, #0
    4428:	d118      	bne.n	445c <f_open+0x2f4>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    442a:	1dfb      	adds	r3, r7, #7
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	f003 0308 	and.w	r3, r3, #8
    4432:	2b00      	cmp	r3, #0
    4434:	d005      	beq.n	4442 <f_open+0x2da>
			mode |= FA__WRITTEN;
    4436:	1dfb      	adds	r3, r7, #7
    4438:	1dfa      	adds	r2, r7, #7
    443a:	7812      	ldrb	r2, [r2, #0]
    443c:	f042 0220 	orr.w	r2, r2, #32
    4440:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4442:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    4446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4448:	f107 030c 	add.w	r3, r7, #12
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    4450:	f107 030c 	add.w	r3, r7, #12
    4454:	681b      	ldr	r3, [r3, #0]
    4456:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
    445a:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    445c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    4460:	2b00      	cmp	r3, #0
    4462:	d156      	bne.n	4512 <f_open+0x3aa>
		fp->flag = mode;					/* File access mode */
    4464:	f107 030c 	add.w	r3, r7, #12
    4468:	681b      	ldr	r3, [r3, #0]
    446a:	1dfa      	adds	r2, r7, #7
    446c:	7812      	ldrb	r2, [r2, #0]
    446e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4470:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4474:	3315      	adds	r3, #21
    4476:	781b      	ldrb	r3, [r3, #0]
    4478:	021b      	lsls	r3, r3, #8
    447a:	b29a      	uxth	r2, r3
    447c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4480:	3314      	adds	r3, #20
    4482:	781b      	ldrb	r3, [r3, #0]
    4484:	4313      	orrs	r3, r2
    4486:	b29b      	uxth	r3, r3
    4488:	b29b      	uxth	r3, r3
    448a:	041a      	lsls	r2, r3, #16
    448c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    4490:	331b      	adds	r3, #27
    4492:	781b      	ldrb	r3, [r3, #0]
    4494:	021b      	lsls	r3, r3, #8
    4496:	b299      	uxth	r1, r3
    4498:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    449c:	331a      	adds	r3, #26
    449e:	781b      	ldrb	r3, [r3, #0]
    44a0:	430b      	orrs	r3, r1
    44a2:	b29b      	uxth	r3, r3
    44a4:	b29b      	uxth	r3, r3
    44a6:	431a      	orrs	r2, r3
    44a8:	f107 030c 	add.w	r3, r7, #12
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    44b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    44b4:	331f      	adds	r3, #31
    44b6:	781b      	ldrb	r3, [r3, #0]
    44b8:	061a      	lsls	r2, r3, #24
    44ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    44be:	331e      	adds	r3, #30
    44c0:	781b      	ldrb	r3, [r3, #0]
    44c2:	041b      	lsls	r3, r3, #16
    44c4:	431a      	orrs	r2, r3
    44c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    44ca:	331d      	adds	r3, #29
    44cc:	781b      	ldrb	r3, [r3, #0]
    44ce:	021b      	lsls	r3, r3, #8
    44d0:	431a      	orrs	r2, r3
    44d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
    44d6:	331c      	adds	r3, #28
    44d8:	781b      	ldrb	r3, [r3, #0]
    44da:	431a      	orrs	r2, r3
    44dc:	f107 030c 	add.w	r3, r7, #12
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    44e4:	f107 030c 	add.w	r3, r7, #12
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	2200      	movs	r2, #0
    44ec:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    44ee:	f107 030c 	add.w	r3, r7, #12
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	2200      	movs	r2, #0
    44f6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    44f8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
    44fc:	f107 030c 	add.w	r3, r7, #12
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	601a      	str	r2, [r3, #0]
    4504:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
    4508:	88da      	ldrh	r2, [r3, #6]
    450a:	f107 030c 	add.w	r3, r7, #12
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    4512:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
    4516:	4618      	mov	r0, r3
    4518:	f507 7714 	add.w	r7, r7, #592	; 0x250
    451c:	46bd      	mov	sp, r7
    451e:	bd80      	pop	{r7, pc}

00004520 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    4520:	b590      	push	{r4, r7, lr}
    4522:	b08b      	sub	sp, #44	; 0x2c
    4524:	af00      	add	r7, sp, #0
    4526:	60f8      	str	r0, [r7, #12]
    4528:	60b9      	str	r1, [r7, #8]
    452a:	607a      	str	r2, [r7, #4]
    452c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    452e:	68bb      	ldr	r3, [r7, #8]
    4530:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    4532:	683b      	ldr	r3, [r7, #0]
    4534:	2200      	movs	r2, #0
    4536:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    4538:	68fb      	ldr	r3, [r7, #12]
    453a:	681a      	ldr	r2, [r3, #0]
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	889b      	ldrh	r3, [r3, #4]
    4540:	4610      	mov	r0, r2
    4542:	4619      	mov	r1, r3
    4544:	4b87      	ldr	r3, [pc, #540]	; (4764 <f_write+0x244>)
    4546:	4798      	blx	r3
    4548:	4603      	mov	r3, r0
    454a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    454c:	7dfb      	ldrb	r3, [r7, #23]
    454e:	2b00      	cmp	r3, #0
    4550:	d001      	beq.n	4556 <f_write+0x36>
    4552:	7dfb      	ldrb	r3, [r7, #23]
    4554:	e175      	b.n	4842 <f_write+0x322>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    4556:	68fb      	ldr	r3, [r7, #12]
    4558:	799b      	ldrb	r3, [r3, #6]
    455a:	b2db      	uxtb	r3, r3
    455c:	b25b      	sxtb	r3, r3
    455e:	2b00      	cmp	r3, #0
    4560:	da01      	bge.n	4566 <f_write+0x46>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    4562:	2302      	movs	r3, #2
    4564:	e16d      	b.n	4842 <f_write+0x322>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	799b      	ldrb	r3, [r3, #6]
    456a:	f003 0302 	and.w	r3, r3, #2
    456e:	2b00      	cmp	r3, #0
    4570:	d101      	bne.n	4576 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
    4572:	2307      	movs	r3, #7
    4574:	e165      	b.n	4842 <f_write+0x322>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	68da      	ldr	r2, [r3, #12]
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	441a      	add	r2, r3
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	68db      	ldr	r3, [r3, #12]
    4582:	429a      	cmp	r2, r3
    4584:	d202      	bcs.n	458c <f_write+0x6c>
    4586:	2300      	movs	r3, #0
    4588:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    458a:	e144      	b.n	4816 <f_write+0x2f6>
    458c:	e143      	b.n	4816 <f_write+0x2f6>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	689b      	ldr	r3, [r3, #8]
    4592:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4596:	2b00      	cmp	r3, #0
    4598:	f040 80f7 	bne.w	478a <f_write+0x26a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    459c:	68fb      	ldr	r3, [r7, #12]
    459e:	689b      	ldr	r3, [r3, #8]
    45a0:	0a5b      	lsrs	r3, r3, #9
    45a2:	b2da      	uxtb	r2, r3
    45a4:	68fb      	ldr	r3, [r7, #12]
    45a6:	681b      	ldr	r3, [r3, #0]
    45a8:	789b      	ldrb	r3, [r3, #2]
    45aa:	3b01      	subs	r3, #1
    45ac:	b2db      	uxtb	r3, r3
    45ae:	4013      	ands	r3, r2
    45b0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
    45b2:	7dbb      	ldrb	r3, [r7, #22]
    45b4:	2b00      	cmp	r3, #0
    45b6:	d13d      	bne.n	4634 <f_write+0x114>
				if (fp->fptr == 0) {		/* On the top of the file? */
    45b8:	68fb      	ldr	r3, [r7, #12]
    45ba:	689b      	ldr	r3, [r3, #8]
    45bc:	2b00      	cmp	r3, #0
    45be:	d110      	bne.n	45e2 <f_write+0xc2>
					clst = fp->sclust;		/* Follow from the origin */
    45c0:	68fb      	ldr	r3, [r7, #12]
    45c2:	691b      	ldr	r3, [r3, #16]
    45c4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    45c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45c8:	2b00      	cmp	r3, #0
    45ca:	d113      	bne.n	45f4 <f_write+0xd4>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	4618      	mov	r0, r3
    45d2:	2100      	movs	r1, #0
    45d4:	4b64      	ldr	r3, [pc, #400]	; (4768 <f_write+0x248>)
    45d6:	4798      	blx	r3
    45d8:	6278      	str	r0, [r7, #36]	; 0x24
    45da:	68fb      	ldr	r3, [r7, #12]
    45dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    45de:	611a      	str	r2, [r3, #16]
    45e0:	e008      	b.n	45f4 <f_write+0xd4>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    45e2:	68fb      	ldr	r3, [r7, #12]
    45e4:	681a      	ldr	r2, [r3, #0]
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	695b      	ldr	r3, [r3, #20]
    45ea:	4610      	mov	r0, r2
    45ec:	4619      	mov	r1, r3
    45ee:	4b5e      	ldr	r3, [pc, #376]	; (4768 <f_write+0x248>)
    45f0:	4798      	blx	r3
    45f2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    45f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45f6:	2b00      	cmp	r3, #0
    45f8:	d100      	bne.n	45fc <f_write+0xdc>
    45fa:	e110      	b.n	481e <f_write+0x2fe>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    45fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45fe:	2b01      	cmp	r3, #1
    4600:	d108      	bne.n	4614 <f_write+0xf4>
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	799b      	ldrb	r3, [r3, #6]
    4606:	f063 037f 	orn	r3, r3, #127	; 0x7f
    460a:	b2da      	uxtb	r2, r3
    460c:	68fb      	ldr	r3, [r7, #12]
    460e:	719a      	strb	r2, [r3, #6]
    4610:	2302      	movs	r3, #2
    4612:	e116      	b.n	4842 <f_write+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4616:	f1b3 3fff 	cmp.w	r3, #4294967295
    461a:	d108      	bne.n	462e <f_write+0x10e>
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	799b      	ldrb	r3, [r3, #6]
    4620:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4624:	b2da      	uxtb	r2, r3
    4626:	68fb      	ldr	r3, [r7, #12]
    4628:	719a      	strb	r2, [r3, #6]
    462a:	2301      	movs	r3, #1
    462c:	e109      	b.n	4842 <f_write+0x322>
				fp->clust = clst;			/* Update current cluster */
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4632:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    4634:	68fb      	ldr	r3, [r7, #12]
    4636:	681b      	ldr	r3, [r3, #0]
    4638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	699b      	ldr	r3, [r3, #24]
    463e:	429a      	cmp	r2, r3
    4640:	d111      	bne.n	4666 <f_write+0x146>
    4642:	68fb      	ldr	r3, [r7, #12]
    4644:	681b      	ldr	r3, [r3, #0]
    4646:	4618      	mov	r0, r3
    4648:	2100      	movs	r1, #0
    464a:	4b48      	ldr	r3, [pc, #288]	; (476c <f_write+0x24c>)
    464c:	4798      	blx	r3
    464e:	4603      	mov	r3, r0
    4650:	2b00      	cmp	r3, #0
    4652:	d008      	beq.n	4666 <f_write+0x146>
				ABORT(fp->fs, FR_DISK_ERR);
    4654:	68fb      	ldr	r3, [r7, #12]
    4656:	799b      	ldrb	r3, [r3, #6]
    4658:	f063 037f 	orn	r3, r3, #127	; 0x7f
    465c:	b2da      	uxtb	r2, r3
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	719a      	strb	r2, [r3, #6]
    4662:	2301      	movs	r3, #1
    4664:	e0ed      	b.n	4842 <f_write+0x322>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4666:	68fb      	ldr	r3, [r7, #12]
    4668:	681a      	ldr	r2, [r3, #0]
    466a:	68fb      	ldr	r3, [r7, #12]
    466c:	695b      	ldr	r3, [r3, #20]
    466e:	4610      	mov	r0, r2
    4670:	4619      	mov	r1, r3
    4672:	4b3f      	ldr	r3, [pc, #252]	; (4770 <f_write+0x250>)
    4674:	4798      	blx	r3
    4676:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4678:	693b      	ldr	r3, [r7, #16]
    467a:	2b00      	cmp	r3, #0
    467c:	d108      	bne.n	4690 <f_write+0x170>
    467e:	68fb      	ldr	r3, [r7, #12]
    4680:	799b      	ldrb	r3, [r3, #6]
    4682:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4686:	b2da      	uxtb	r2, r3
    4688:	68fb      	ldr	r3, [r7, #12]
    468a:	719a      	strb	r2, [r3, #6]
    468c:	2302      	movs	r3, #2
    468e:	e0d8      	b.n	4842 <f_write+0x322>
			sect += csect;
    4690:	7dbb      	ldrb	r3, [r7, #22]
    4692:	693a      	ldr	r2, [r7, #16]
    4694:	4413      	add	r3, r2
    4696:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	0a5b      	lsrs	r3, r3, #9
    469c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    469e:	69fb      	ldr	r3, [r7, #28]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d046      	beq.n	4732 <f_write+0x212>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    46a4:	7dba      	ldrb	r2, [r7, #22]
    46a6:	69fb      	ldr	r3, [r7, #28]
    46a8:	441a      	add	r2, r3
    46aa:	68fb      	ldr	r3, [r7, #12]
    46ac:	681b      	ldr	r3, [r3, #0]
    46ae:	789b      	ldrb	r3, [r3, #2]
    46b0:	429a      	cmp	r2, r3
    46b2:	d906      	bls.n	46c2 <f_write+0x1a2>
					cc = fp->fs->csize - csect;
    46b4:	68fb      	ldr	r3, [r7, #12]
    46b6:	681b      	ldr	r3, [r3, #0]
    46b8:	789b      	ldrb	r3, [r3, #2]
    46ba:	461a      	mov	r2, r3
    46bc:	7dbb      	ldrb	r3, [r7, #22]
    46be:	1ad3      	subs	r3, r2, r3
    46c0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    46c2:	68fb      	ldr	r3, [r7, #12]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	785a      	ldrb	r2, [r3, #1]
    46c8:	69fb      	ldr	r3, [r7, #28]
    46ca:	b2db      	uxtb	r3, r3
    46cc:	4610      	mov	r0, r2
    46ce:	69b9      	ldr	r1, [r7, #24]
    46d0:	693a      	ldr	r2, [r7, #16]
    46d2:	4c28      	ldr	r4, [pc, #160]	; (4774 <f_write+0x254>)
    46d4:	47a0      	blx	r4
    46d6:	4603      	mov	r3, r0
    46d8:	2b00      	cmp	r3, #0
    46da:	d008      	beq.n	46ee <f_write+0x1ce>
					ABORT(fp->fs, FR_DISK_ERR);
    46dc:	68fb      	ldr	r3, [r7, #12]
    46de:	799b      	ldrb	r3, [r3, #6]
    46e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    46e4:	b2da      	uxtb	r2, r3
    46e6:	68fb      	ldr	r3, [r7, #12]
    46e8:	719a      	strb	r2, [r3, #6]
    46ea:	2301      	movs	r3, #1
    46ec:	e0a9      	b.n	4842 <f_write+0x322>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    46ee:	68fb      	ldr	r3, [r7, #12]
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46f4:	693b      	ldr	r3, [r7, #16]
    46f6:	1ad2      	subs	r2, r2, r3
    46f8:	69fb      	ldr	r3, [r7, #28]
    46fa:	429a      	cmp	r2, r3
    46fc:	d215      	bcs.n	472a <f_write+0x20a>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	f103 0230 	add.w	r2, r3, #48	; 0x30
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    470c:	693b      	ldr	r3, [r7, #16]
    470e:	1acb      	subs	r3, r1, r3
    4710:	025b      	lsls	r3, r3, #9
    4712:	69b9      	ldr	r1, [r7, #24]
    4714:	440b      	add	r3, r1
    4716:	4610      	mov	r0, r2
    4718:	4619      	mov	r1, r3
    471a:	f44f 7200 	mov.w	r2, #512	; 0x200
    471e:	4b16      	ldr	r3, [pc, #88]	; (4778 <f_write+0x258>)
    4720:	4798      	blx	r3
					fp->fs->wflag = 0;
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	681b      	ldr	r3, [r3, #0]
    4726:	2200      	movs	r2, #0
    4728:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    472a:	69fb      	ldr	r3, [r7, #28]
    472c:	025b      	lsls	r3, r3, #9
    472e:	623b      	str	r3, [r7, #32]
				continue;
    4730:	e05d      	b.n	47ee <f_write+0x2ce>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    4732:	68fb      	ldr	r3, [r7, #12]
    4734:	689a      	ldr	r2, [r3, #8]
    4736:	68fb      	ldr	r3, [r7, #12]
    4738:	68db      	ldr	r3, [r3, #12]
    473a:	429a      	cmp	r2, r3
    473c:	d322      	bcc.n	4784 <f_write+0x264>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	4618      	mov	r0, r3
    4744:	2100      	movs	r1, #0
    4746:	4b09      	ldr	r3, [pc, #36]	; (476c <f_write+0x24c>)
    4748:	4798      	blx	r3
    474a:	4603      	mov	r3, r0
    474c:	2b00      	cmp	r3, #0
    474e:	d015      	beq.n	477c <f_write+0x25c>
    4750:	68fb      	ldr	r3, [r7, #12]
    4752:	799b      	ldrb	r3, [r3, #6]
    4754:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4758:	b2da      	uxtb	r2, r3
    475a:	68fb      	ldr	r3, [r7, #12]
    475c:	719a      	strb	r2, [r3, #6]
    475e:	2301      	movs	r3, #1
    4760:	e06f      	b.n	4842 <f_write+0x322>
    4762:	bf00      	nop
    4764:	000040c5 	.word	0x000040c5
    4768:	00002b89 	.word	0x00002b89
    476c:	00002539 	.word	0x00002539
    4770:	00002759 	.word	0x00002759
    4774:	00002191 	.word	0x00002191
    4778:	00002441 	.word	0x00002441
				fp->fs->winsect = sect;
    477c:	68fb      	ldr	r3, [r7, #12]
    477e:	681b      	ldr	r3, [r3, #0]
    4780:	693a      	ldr	r2, [r7, #16]
    4782:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    4784:	68fb      	ldr	r3, [r7, #12]
    4786:	693a      	ldr	r2, [r7, #16]
    4788:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    478a:	68fb      	ldr	r3, [r7, #12]
    478c:	689b      	ldr	r3, [r3, #8]
    478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4792:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
    4796:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    4798:	6a3a      	ldr	r2, [r7, #32]
    479a:	687b      	ldr	r3, [r7, #4]
    479c:	429a      	cmp	r2, r3
    479e:	d901      	bls.n	47a4 <f_write+0x284>
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	681a      	ldr	r2, [r3, #0]
    47a8:	68fb      	ldr	r3, [r7, #12]
    47aa:	699b      	ldr	r3, [r3, #24]
    47ac:	4610      	mov	r0, r2
    47ae:	4619      	mov	r1, r3
    47b0:	4b26      	ldr	r3, [pc, #152]	; (484c <f_write+0x32c>)
    47b2:	4798      	blx	r3
    47b4:	4603      	mov	r3, r0
    47b6:	2b00      	cmp	r3, #0
    47b8:	d008      	beq.n	47cc <f_write+0x2ac>
			ABORT(fp->fs, FR_DISK_ERR);
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	799b      	ldrb	r3, [r3, #6]
    47be:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47c2:	b2da      	uxtb	r2, r3
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	719a      	strb	r2, [r3, #6]
    47c8:	2301      	movs	r3, #1
    47ca:	e03a      	b.n	4842 <f_write+0x322>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    47cc:	68fb      	ldr	r3, [r7, #12]
    47ce:	681a      	ldr	r2, [r3, #0]
    47d0:	68fb      	ldr	r3, [r7, #12]
    47d2:	689b      	ldr	r3, [r3, #8]
    47d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    47d8:	3330      	adds	r3, #48	; 0x30
    47da:	4413      	add	r3, r2
    47dc:	4618      	mov	r0, r3
    47de:	69b9      	ldr	r1, [r7, #24]
    47e0:	6a3a      	ldr	r2, [r7, #32]
    47e2:	4b1b      	ldr	r3, [pc, #108]	; (4850 <f_write+0x330>)
    47e4:	4798      	blx	r3
		fp->fs->wflag = 1;
    47e6:	68fb      	ldr	r3, [r7, #12]
    47e8:	681b      	ldr	r3, [r3, #0]
    47ea:	2201      	movs	r2, #1
    47ec:	711a      	strb	r2, [r3, #4]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    47ee:	69ba      	ldr	r2, [r7, #24]
    47f0:	6a3b      	ldr	r3, [r7, #32]
    47f2:	4413      	add	r3, r2
    47f4:	61bb      	str	r3, [r7, #24]
    47f6:	68fb      	ldr	r3, [r7, #12]
    47f8:	689a      	ldr	r2, [r3, #8]
    47fa:	6a3b      	ldr	r3, [r7, #32]
    47fc:	441a      	add	r2, r3
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	609a      	str	r2, [r3, #8]
    4802:	683b      	ldr	r3, [r7, #0]
    4804:	681a      	ldr	r2, [r3, #0]
    4806:	6a3b      	ldr	r3, [r7, #32]
    4808:	441a      	add	r2, r3
    480a:	683b      	ldr	r3, [r7, #0]
    480c:	601a      	str	r2, [r3, #0]
    480e:	687a      	ldr	r2, [r7, #4]
    4810:	6a3b      	ldr	r3, [r7, #32]
    4812:	1ad3      	subs	r3, r2, r3
    4814:	607b      	str	r3, [r7, #4]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	2b00      	cmp	r3, #0
    481a:	f47f aeb8 	bne.w	458e <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    481e:	68fb      	ldr	r3, [r7, #12]
    4820:	689a      	ldr	r2, [r3, #8]
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	68db      	ldr	r3, [r3, #12]
    4826:	429a      	cmp	r2, r3
    4828:	d903      	bls.n	4832 <f_write+0x312>
    482a:	68fb      	ldr	r3, [r7, #12]
    482c:	689a      	ldr	r2, [r3, #8]
    482e:	68fb      	ldr	r3, [r7, #12]
    4830:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    4832:	68fb      	ldr	r3, [r7, #12]
    4834:	799b      	ldrb	r3, [r3, #6]
    4836:	f043 0320 	orr.w	r3, r3, #32
    483a:	b2da      	uxtb	r2, r3
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    4840:	2300      	movs	r3, #0
}
    4842:	4618      	mov	r0, r3
    4844:	372c      	adds	r7, #44	; 0x2c
    4846:	46bd      	mov	sp, r7
    4848:	bd90      	pop	{r4, r7, pc}
    484a:	bf00      	nop
    484c:	00002539 	.word	0x00002539
    4850:	00002441 	.word	0x00002441

00004854 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    4854:	b580      	push	{r7, lr}
    4856:	b086      	sub	sp, #24
    4858:	af00      	add	r7, sp, #0
    485a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	681a      	ldr	r2, [r3, #0]
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	889b      	ldrh	r3, [r3, #4]
    4864:	4610      	mov	r0, r2
    4866:	4619      	mov	r1, r3
    4868:	4b4b      	ldr	r3, [pc, #300]	; (4998 <f_sync+0x144>)
    486a:	4798      	blx	r3
    486c:	4603      	mov	r3, r0
    486e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
    4870:	7dfb      	ldrb	r3, [r7, #23]
    4872:	2b00      	cmp	r3, #0
    4874:	f040 808b 	bne.w	498e <f_sync+0x13a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	799b      	ldrb	r3, [r3, #6]
    487c:	f003 0320 	and.w	r3, r3, #32
    4880:	2b00      	cmp	r3, #0
    4882:	f000 8084 	beq.w	498e <f_sync+0x13a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    4886:	687b      	ldr	r3, [r7, #4]
    4888:	681a      	ldr	r2, [r3, #0]
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	69db      	ldr	r3, [r3, #28]
    488e:	4610      	mov	r0, r2
    4890:	4619      	mov	r1, r3
    4892:	4b42      	ldr	r3, [pc, #264]	; (499c <f_sync+0x148>)
    4894:	4798      	blx	r3
    4896:	4603      	mov	r3, r0
    4898:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
    489a:	7dfb      	ldrb	r3, [r7, #23]
    489c:	2b00      	cmp	r3, #0
    489e:	d176      	bne.n	498e <f_sync+0x13a>
				dir = fp->dir_ptr;
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	6a1b      	ldr	r3, [r3, #32]
    48a4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    48a6:	693b      	ldr	r3, [r7, #16]
    48a8:	330b      	adds	r3, #11
    48aa:	693a      	ldr	r2, [r7, #16]
    48ac:	320b      	adds	r2, #11
    48ae:	7812      	ldrb	r2, [r2, #0]
    48b0:	f042 0220 	orr.w	r2, r2, #32
    48b4:	b2d2      	uxtb	r2, r2
    48b6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    48b8:	693b      	ldr	r3, [r7, #16]
    48ba:	331c      	adds	r3, #28
    48bc:	687a      	ldr	r2, [r7, #4]
    48be:	68d2      	ldr	r2, [r2, #12]
    48c0:	b2d2      	uxtb	r2, r2
    48c2:	701a      	strb	r2, [r3, #0]
    48c4:	693b      	ldr	r3, [r7, #16]
    48c6:	331d      	adds	r3, #29
    48c8:	687a      	ldr	r2, [r7, #4]
    48ca:	68d2      	ldr	r2, [r2, #12]
    48cc:	b292      	uxth	r2, r2
    48ce:	0a12      	lsrs	r2, r2, #8
    48d0:	b292      	uxth	r2, r2
    48d2:	b2d2      	uxtb	r2, r2
    48d4:	701a      	strb	r2, [r3, #0]
    48d6:	693b      	ldr	r3, [r7, #16]
    48d8:	331e      	adds	r3, #30
    48da:	687a      	ldr	r2, [r7, #4]
    48dc:	68d2      	ldr	r2, [r2, #12]
    48de:	0c12      	lsrs	r2, r2, #16
    48e0:	b2d2      	uxtb	r2, r2
    48e2:	701a      	strb	r2, [r3, #0]
    48e4:	693b      	ldr	r3, [r7, #16]
    48e6:	331f      	adds	r3, #31
    48e8:	687a      	ldr	r2, [r7, #4]
    48ea:	68d2      	ldr	r2, [r2, #12]
    48ec:	0e12      	lsrs	r2, r2, #24
    48ee:	b2d2      	uxtb	r2, r2
    48f0:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    48f2:	693b      	ldr	r3, [r7, #16]
    48f4:	331a      	adds	r3, #26
    48f6:	687a      	ldr	r2, [r7, #4]
    48f8:	6912      	ldr	r2, [r2, #16]
    48fa:	b2d2      	uxtb	r2, r2
    48fc:	701a      	strb	r2, [r3, #0]
    48fe:	693b      	ldr	r3, [r7, #16]
    4900:	331b      	adds	r3, #27
    4902:	687a      	ldr	r2, [r7, #4]
    4904:	6912      	ldr	r2, [r2, #16]
    4906:	b292      	uxth	r2, r2
    4908:	0a12      	lsrs	r2, r2, #8
    490a:	b292      	uxth	r2, r2
    490c:	b2d2      	uxtb	r2, r2
    490e:	701a      	strb	r2, [r3, #0]
    4910:	693b      	ldr	r3, [r7, #16]
    4912:	3314      	adds	r3, #20
    4914:	687a      	ldr	r2, [r7, #4]
    4916:	6912      	ldr	r2, [r2, #16]
    4918:	0c12      	lsrs	r2, r2, #16
    491a:	b2d2      	uxtb	r2, r2
    491c:	701a      	strb	r2, [r3, #0]
    491e:	693b      	ldr	r3, [r7, #16]
    4920:	3315      	adds	r3, #21
    4922:	687a      	ldr	r2, [r7, #4]
    4924:	6912      	ldr	r2, [r2, #16]
    4926:	0c12      	lsrs	r2, r2, #16
    4928:	b292      	uxth	r2, r2
    492a:	0a12      	lsrs	r2, r2, #8
    492c:	b292      	uxth	r2, r2
    492e:	b2d2      	uxtb	r2, r2
    4930:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
    4932:	4b1b      	ldr	r3, [pc, #108]	; (49a0 <f_sync+0x14c>)
    4934:	4798      	blx	r3
    4936:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    4938:	693b      	ldr	r3, [r7, #16]
    493a:	3316      	adds	r3, #22
    493c:	68fa      	ldr	r2, [r7, #12]
    493e:	b2d2      	uxtb	r2, r2
    4940:	701a      	strb	r2, [r3, #0]
    4942:	693b      	ldr	r3, [r7, #16]
    4944:	3317      	adds	r3, #23
    4946:	68fa      	ldr	r2, [r7, #12]
    4948:	b292      	uxth	r2, r2
    494a:	0a12      	lsrs	r2, r2, #8
    494c:	b292      	uxth	r2, r2
    494e:	b2d2      	uxtb	r2, r2
    4950:	701a      	strb	r2, [r3, #0]
    4952:	693b      	ldr	r3, [r7, #16]
    4954:	3318      	adds	r3, #24
    4956:	68fa      	ldr	r2, [r7, #12]
    4958:	0c12      	lsrs	r2, r2, #16
    495a:	b2d2      	uxtb	r2, r2
    495c:	701a      	strb	r2, [r3, #0]
    495e:	693b      	ldr	r3, [r7, #16]
    4960:	3319      	adds	r3, #25
    4962:	68fa      	ldr	r2, [r7, #12]
    4964:	0e12      	lsrs	r2, r2, #24
    4966:	b2d2      	uxtb	r2, r2
    4968:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	799b      	ldrb	r3, [r3, #6]
    496e:	f023 0320 	bic.w	r3, r3, #32
    4972:	b2da      	uxtb	r2, r3
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	681b      	ldr	r3, [r3, #0]
    497c:	2201      	movs	r2, #1
    497e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	4618      	mov	r0, r3
    4986:	4b07      	ldr	r3, [pc, #28]	; (49a4 <f_sync+0x150>)
    4988:	4798      	blx	r3
    498a:	4603      	mov	r3, r0
    498c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    498e:	7dfb      	ldrb	r3, [r7, #23]
}
    4990:	4618      	mov	r0, r3
    4992:	3718      	adds	r7, #24
    4994:	46bd      	mov	sp, r7
    4996:	bd80      	pop	{r7, pc}
    4998:	000040c5 	.word	0x000040c5
    499c:	00002539 	.word	0x00002539
    49a0:	00002301 	.word	0x00002301
    49a4:	000025fd 	.word	0x000025fd

000049a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b084      	sub	sp, #16
    49ac:	af00      	add	r7, sp, #0
    49ae:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    49b0:	6878      	ldr	r0, [r7, #4]
    49b2:	4b07      	ldr	r3, [pc, #28]	; (49d0 <f_close+0x28>)
    49b4:	4798      	blx	r3
    49b6:	4603      	mov	r3, r0
    49b8:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    49ba:	7bfb      	ldrb	r3, [r7, #15]
    49bc:	2b00      	cmp	r3, #0
    49be:	d102      	bne.n	49c6 <f_close+0x1e>
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	2200      	movs	r2, #0
    49c4:	601a      	str	r2, [r3, #0]
	return res;
    49c6:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
    49c8:	4618      	mov	r0, r3
    49ca:	3710      	adds	r7, #16
    49cc:	46bd      	mov	sp, r7
    49ce:	bd80      	pop	{r7, pc}
    49d0:	00004855 	.word	0x00004855

000049d4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    49d4:	b590      	push	{r4, r7, lr}
    49d6:	b087      	sub	sp, #28
    49d8:	af00      	add	r7, sp, #0
    49da:	4603      	mov	r3, r0
    49dc:	6039      	str	r1, [r7, #0]
    49de:	71fb      	strb	r3, [r7, #7]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    49e0:	79fb      	ldrb	r3, [r7, #7]
    49e2:	733b      	strb	r3, [r7, #12]
	btw = 1;
    49e4:	2301      	movs	r3, #1
    49e6:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    49e8:	f107 020c 	add.w	r2, r7, #12
    49ec:	f107 0310 	add.w	r3, r7, #16
    49f0:	6838      	ldr	r0, [r7, #0]
    49f2:	4611      	mov	r1, r2
    49f4:	697a      	ldr	r2, [r7, #20]
    49f6:	4c07      	ldr	r4, [pc, #28]	; (4a14 <f_putc+0x40>)
    49f8:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    49fa:	693a      	ldr	r2, [r7, #16]
    49fc:	697b      	ldr	r3, [r7, #20]
    49fe:	429a      	cmp	r2, r3
    4a00:	d101      	bne.n	4a06 <f_putc+0x32>
    4a02:	2301      	movs	r3, #1
    4a04:	e001      	b.n	4a0a <f_putc+0x36>
    4a06:	f04f 33ff 	mov.w	r3, #4294967295
}
    4a0a:	4618      	mov	r0, r3
    4a0c:	371c      	adds	r7, #28
    4a0e:	46bd      	mov	sp, r7
    4a10:	bd90      	pop	{r4, r7, pc}
    4a12:	bf00      	nop
    4a14:	00004521 	.word	0x00004521

00004a18 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    4a18:	b580      	push	{r7, lr}
    4a1a:	b084      	sub	sp, #16
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	6078      	str	r0, [r7, #4]
    4a20:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    4a22:	2300      	movs	r3, #0
    4a24:	60fb      	str	r3, [r7, #12]
    4a26:	e012      	b.n	4a4e <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	4618      	mov	r0, r3
    4a2e:	6839      	ldr	r1, [r7, #0]
    4a30:	4b0b      	ldr	r3, [pc, #44]	; (4a60 <f_puts+0x48>)
    4a32:	4798      	blx	r3
    4a34:	4603      	mov	r3, r0
    4a36:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a3a:	d102      	bne.n	4a42 <f_puts+0x2a>
    4a3c:	f04f 33ff 	mov.w	r3, #4294967295
    4a40:	e00a      	b.n	4a58 <f_puts+0x40>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	3301      	adds	r3, #1
    4a46:	607b      	str	r3, [r7, #4]
    4a48:	68fb      	ldr	r3, [r7, #12]
    4a4a:	3301      	adds	r3, #1
    4a4c:	60fb      	str	r3, [r7, #12]
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d1e8      	bne.n	4a28 <f_puts+0x10>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
    4a56:	68fb      	ldr	r3, [r7, #12]
}
    4a58:	4618      	mov	r0, r3
    4a5a:	3710      	adds	r7, #16
    4a5c:	46bd      	mov	sp, r7
    4a5e:	bd80      	pop	{r7, pc}
    4a60:	000049d5 	.word	0x000049d5

00004a64 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    4a64:	b580      	push	{r7, lr}
    4a66:	b084      	sub	sp, #16
    4a68:	af00      	add	r7, sp, #0
    4a6a:	4603      	mov	r3, r0
    4a6c:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    4a6e:	79fb      	ldrb	r3, [r7, #7]
    4a70:	2b00      	cmp	r3, #0
    4a72:	d107      	bne.n	4a84 <mem_test_unit_ready+0x20>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4a74:	79fb      	ldrb	r3, [r7, #7]
    4a76:	4a07      	ldr	r2, [pc, #28]	; (4a94 <mem_test_unit_ready+0x30>)
    4a78:	015b      	lsls	r3, r3, #5
    4a7a:	4413      	add	r3, r2
    4a7c:	681b      	ldr	r3, [r3, #0]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    4a7e:	4798      	blx	r3
    4a80:	4603      	mov	r3, r0
    4a82:	e000      	b.n	4a86 <mem_test_unit_ready+0x22>
    4a84:	2301      	movs	r3, #1
    4a86:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    4a88:	7bfb      	ldrb	r3, [r7, #15]
}
    4a8a:	4618      	mov	r0, r3
    4a8c:	3710      	adds	r7, #16
    4a8e:	46bd      	mov	sp, r7
    4a90:	bd80      	pop	{r7, pc}
    4a92:	bf00      	nop
    4a94:	00012c84 	.word	0x00012c84

00004a98 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b084      	sub	sp, #16
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	4603      	mov	r3, r0
    4aa0:	6039      	str	r1, [r7, #0]
    4aa2:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    4aa4:	79fb      	ldrb	r3, [r7, #7]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d109      	bne.n	4abe <mem_read_capacity+0x26>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4aaa:	79fb      	ldrb	r3, [r7, #7]
    4aac:	4a07      	ldr	r2, [pc, #28]	; (4acc <mem_read_capacity+0x34>)
    4aae:	015b      	lsls	r3, r3, #5
    4ab0:	4413      	add	r3, r2
    4ab2:	3304      	adds	r3, #4
    4ab4:	681b      	ldr	r3, [r3, #0]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    4ab6:	6838      	ldr	r0, [r7, #0]
    4ab8:	4798      	blx	r3
    4aba:	4603      	mov	r3, r0
    4abc:	e000      	b.n	4ac0 <mem_read_capacity+0x28>
    4abe:	2301      	movs	r3, #1
    4ac0:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    4ac2:	7bfb      	ldrb	r3, [r7, #15]
}
    4ac4:	4618      	mov	r0, r3
    4ac6:	3710      	adds	r7, #16
    4ac8:	46bd      	mov	sp, r7
    4aca:	bd80      	pop	{r7, pc}
    4acc:	00012c84 	.word	0x00012c84

00004ad0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    4ad0:	b480      	push	{r7}
    4ad2:	b085      	sub	sp, #20
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	4603      	mov	r3, r0
    4ad8:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    4ada:	79fb      	ldrb	r3, [r7, #7]
    4adc:	2b00      	cmp	r3, #0
    4ade:	bf14      	ite	ne
    4ae0:	2300      	movne	r3, #0
    4ae2:	2301      	moveq	r3, #1
    4ae4:	b2db      	uxtb	r3, r3
{
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
    4ae6:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    4ae8:	7bfb      	ldrb	r3, [r7, #15]
}
    4aea:	4618      	mov	r0, r3
    4aec:	3714      	adds	r7, #20
    4aee:	46bd      	mov	sp, r7
    4af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af4:	4770      	bx	lr
    4af6:	bf00      	nop

00004af8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b084      	sub	sp, #16
    4afc:	af00      	add	r7, sp, #0
    4afe:	4603      	mov	r3, r0
    4b00:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    4b02:	79fb      	ldrb	r3, [r7, #7]
    4b04:	2b00      	cmp	r3, #0
    4b06:	d109      	bne.n	4b1c <mem_wr_protect+0x24>
    4b08:	79fb      	ldrb	r3, [r7, #7]
    4b0a:	4a09      	ldr	r2, [pc, #36]	; (4b30 <mem_wr_protect+0x38>)
    4b0c:	015b      	lsls	r3, r3, #5
    4b0e:	4413      	add	r3, r2
    4b10:	330c      	adds	r3, #12
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	4798      	blx	r3
    4b16:	4603      	mov	r3, r0
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d001      	beq.n	4b20 <mem_wr_protect+0x28>
    4b1c:	2301      	movs	r3, #1
    4b1e:	e000      	b.n	4b22 <mem_wr_protect+0x2a>
    4b20:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
    4b22:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    4b24:	7bfb      	ldrb	r3, [r7, #15]
}
    4b26:	4618      	mov	r0, r3
    4b28:	3710      	adds	r7, #16
    4b2a:	46bd      	mov	sp, r7
    4b2c:	bd80      	pop	{r7, pc}
    4b2e:	bf00      	nop
    4b30:	00012c84 	.word	0x00012c84

00004b34 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    4b34:	b580      	push	{r7, lr}
    4b36:	b086      	sub	sp, #24
    4b38:	af00      	add	r7, sp, #0
    4b3a:	4603      	mov	r3, r0
    4b3c:	60b9      	str	r1, [r7, #8]
    4b3e:	607a      	str	r2, [r7, #4]
    4b40:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    4b42:	7bfb      	ldrb	r3, [r7, #15]
    4b44:	2b00      	cmp	r3, #0
    4b46:	d10a      	bne.n	4b5e <memory_2_ram+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    4b48:	7bfb      	ldrb	r3, [r7, #15]
    4b4a:	4a08      	ldr	r2, [pc, #32]	; (4b6c <memory_2_ram+0x38>)
    4b4c:	015b      	lsls	r3, r3, #5
    4b4e:	4413      	add	r3, r2
    4b50:	3314      	adds	r3, #20
    4b52:	681b      	ldr	r3, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    4b54:	68b8      	ldr	r0, [r7, #8]
    4b56:	6879      	ldr	r1, [r7, #4]
    4b58:	4798      	blx	r3
    4b5a:	4603      	mov	r3, r0
    4b5c:	e000      	b.n	4b60 <memory_2_ram+0x2c>
    4b5e:	2301      	movs	r3, #1
    4b60:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    4b62:	7dfb      	ldrb	r3, [r7, #23]
}
    4b64:	4618      	mov	r0, r3
    4b66:	3718      	adds	r7, #24
    4b68:	46bd      	mov	sp, r7
    4b6a:	bd80      	pop	{r7, pc}
    4b6c:	00012c84 	.word	0x00012c84

00004b70 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b086      	sub	sp, #24
    4b74:	af00      	add	r7, sp, #0
    4b76:	4603      	mov	r3, r0
    4b78:	60b9      	str	r1, [r7, #8]
    4b7a:	607a      	str	r2, [r7, #4]
    4b7c:	73fb      	strb	r3, [r7, #15]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    4b7e:	7bfb      	ldrb	r3, [r7, #15]
    4b80:	2b00      	cmp	r3, #0
    4b82:	d10a      	bne.n	4b9a <ram_2_memory+0x2a>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    4b84:	7bfb      	ldrb	r3, [r7, #15]
    4b86:	4a08      	ldr	r2, [pc, #32]	; (4ba8 <ram_2_memory+0x38>)
    4b88:	015b      	lsls	r3, r3, #5
    4b8a:	4413      	add	r3, r2
    4b8c:	3318      	adds	r3, #24
    4b8e:	681b      	ldr	r3, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    4b90:	68b8      	ldr	r0, [r7, #8]
    4b92:	6879      	ldr	r1, [r7, #4]
    4b94:	4798      	blx	r3
    4b96:	4603      	mov	r3, r0
    4b98:	e000      	b.n	4b9c <ram_2_memory+0x2c>
    4b9a:	2301      	movs	r3, #1
    4b9c:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    4b9e:	7dfb      	ldrb	r3, [r7, #23]
}
    4ba0:	4618      	mov	r0, r3
    4ba2:	3718      	adds	r7, #24
    4ba4:	46bd      	mov	sp, r7
    4ba6:	bd80      	pop	{r7, pc}
    4ba8:	00012c84 	.word	0x00012c84

00004bac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4bac:	b480      	push	{r7}
    4bae:	b083      	sub	sp, #12
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	4603      	mov	r3, r0
    4bb4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    4bb6:	4b08      	ldr	r3, [pc, #32]	; (4bd8 <NVIC_EnableIRQ+0x2c>)
    4bb8:	f997 2007 	ldrsb.w	r2, [r7, #7]
    4bbc:	0952      	lsrs	r2, r2, #5
    4bbe:	79f9      	ldrb	r1, [r7, #7]
    4bc0:	f001 011f 	and.w	r1, r1, #31
    4bc4:	2001      	movs	r0, #1
    4bc6:	fa00 f101 	lsl.w	r1, r0, r1
    4bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4bce:	370c      	adds	r7, #12
    4bd0:	46bd      	mov	sp, r7
    4bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bd6:	4770      	bx	lr
    4bd8:	e000e100 	.word	0xe000e100

00004bdc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4bdc:	b480      	push	{r7}
    4bde:	b083      	sub	sp, #12
    4be0:	af00      	add	r7, sp, #0
    4be2:	4603      	mov	r3, r0
    4be4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    4be6:	4b09      	ldr	r3, [pc, #36]	; (4c0c <NVIC_ClearPendingIRQ+0x30>)
    4be8:	f997 2007 	ldrsb.w	r2, [r7, #7]
    4bec:	0952      	lsrs	r2, r2, #5
    4bee:	79f9      	ldrb	r1, [r7, #7]
    4bf0:	f001 011f 	and.w	r1, r1, #31
    4bf4:	2001      	movs	r0, #1
    4bf6:	fa00 f101 	lsl.w	r1, r0, r1
    4bfa:	3260      	adds	r2, #96	; 0x60
    4bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4c00:	370c      	adds	r7, #12
    4c02:	46bd      	mov	sp, r7
    4c04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c08:	4770      	bx	lr
    4c0a:	bf00      	nop
    4c0c:	e000e100 	.word	0xe000e100

00004c10 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    4c10:	b480      	push	{r7}
    4c12:	b083      	sub	sp, #12
    4c14:	af00      	add	r7, sp, #0
    4c16:	4603      	mov	r3, r0
    4c18:	6039      	str	r1, [r7, #0]
    4c1a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    4c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4c20:	2b00      	cmp	r3, #0
    4c22:	da0b      	bge.n	4c3c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    4c24:	490d      	ldr	r1, [pc, #52]	; (4c5c <NVIC_SetPriority+0x4c>)
    4c26:	79fb      	ldrb	r3, [r7, #7]
    4c28:	f003 030f 	and.w	r3, r3, #15
    4c2c:	3b04      	subs	r3, #4
    4c2e:	683a      	ldr	r2, [r7, #0]
    4c30:	b2d2      	uxtb	r2, r2
    4c32:	0112      	lsls	r2, r2, #4
    4c34:	b2d2      	uxtb	r2, r2
    4c36:	440b      	add	r3, r1
    4c38:	761a      	strb	r2, [r3, #24]
    4c3a:	e009      	b.n	4c50 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    4c3c:	4908      	ldr	r1, [pc, #32]	; (4c60 <NVIC_SetPriority+0x50>)
    4c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4c42:	683a      	ldr	r2, [r7, #0]
    4c44:	b2d2      	uxtb	r2, r2
    4c46:	0112      	lsls	r2, r2, #4
    4c48:	b2d2      	uxtb	r2, r2
    4c4a:	440b      	add	r3, r1
    4c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    4c50:	370c      	adds	r7, #12
    4c52:	46bd      	mov	sp, r7
    4c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c58:	4770      	bx	lr
    4c5a:	bf00      	nop
    4c5c:	e000ed00 	.word	0xe000ed00
    4c60:	e000e100 	.word	0xe000e100

00004c64 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    4c64:	b480      	push	{r7}
    4c66:	b083      	sub	sp, #12
    4c68:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4c6a:	f3ef 8310 	mrs	r3, PRIMASK
    4c6e:	603b      	str	r3, [r7, #0]
  return(result);
    4c70:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    4c72:	2b00      	cmp	r3, #0
    4c74:	bf14      	ite	ne
    4c76:	2300      	movne	r3, #0
    4c78:	2301      	moveq	r3, #1
    4c7a:	b2db      	uxtb	r3, r3
    4c7c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4c7e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4c80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4c84:	4b04      	ldr	r3, [pc, #16]	; (4c98 <cpu_irq_save+0x34>)
    4c86:	2200      	movs	r2, #0
    4c88:	701a      	strb	r2, [r3, #0]
	return flags;
    4c8a:	687b      	ldr	r3, [r7, #4]
}
    4c8c:	4618      	mov	r0, r3
    4c8e:	370c      	adds	r7, #12
    4c90:	46bd      	mov	sp, r7
    4c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c96:	4770      	bx	lr
    4c98:	200004b0 	.word	0x200004b0

00004c9c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    4c9c:	b480      	push	{r7}
    4c9e:	b083      	sub	sp, #12
    4ca0:	af00      	add	r7, sp, #0
    4ca2:	6078      	str	r0, [r7, #4]
	return (flags);
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	bf0c      	ite	eq
    4caa:	2300      	moveq	r3, #0
    4cac:	2301      	movne	r3, #1
    4cae:	b2db      	uxtb	r3, r3
}
    4cb0:	4618      	mov	r0, r3
    4cb2:	370c      	adds	r7, #12
    4cb4:	46bd      	mov	sp, r7
    4cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cba:	4770      	bx	lr

00004cbc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    4cbc:	b580      	push	{r7, lr}
    4cbe:	b082      	sub	sp, #8
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    4cc4:	6878      	ldr	r0, [r7, #4]
    4cc6:	4b07      	ldr	r3, [pc, #28]	; (4ce4 <cpu_irq_restore+0x28>)
    4cc8:	4798      	blx	r3
    4cca:	4603      	mov	r3, r0
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d005      	beq.n	4cdc <cpu_irq_restore+0x20>
		cpu_irq_enable();
    4cd0:	4b05      	ldr	r3, [pc, #20]	; (4ce8 <cpu_irq_restore+0x2c>)
    4cd2:	2201      	movs	r2, #1
    4cd4:	701a      	strb	r2, [r3, #0]
    4cd6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4cda:	b662      	cpsie	i
}
    4cdc:	3708      	adds	r7, #8
    4cde:	46bd      	mov	sp, r7
    4ce0:	bd80      	pop	{r7, pc}
    4ce2:	bf00      	nop
    4ce4:	00004c9d 	.word	0x00004c9d
    4ce8:	200004b0 	.word	0x200004b0

00004cec <ast_is_clkbusy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST clock is busy, else it will return 0.
 */
static inline bool ast_is_clkbusy(Ast *ast)
{
    4cec:	b480      	push	{r7}
    4cee:	b083      	sub	sp, #12
    4cf0:	af00      	add	r7, sp, #0
    4cf2:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_CLKBUSY) != 0;
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	689b      	ldr	r3, [r3, #8]
    4cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	bf0c      	ite	eq
    4d00:	2300      	moveq	r3, #0
    4d02:	2301      	movne	r3, #1
    4d04:	b2db      	uxtb	r3, r3
}
    4d06:	4618      	mov	r0, r3
    4d08:	370c      	adds	r7, #12
    4d0a:	46bd      	mov	sp, r7
    4d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d10:	4770      	bx	lr
    4d12:	bf00      	nop

00004d14 <ast_is_busy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST is busy, else it will return 0.
 */
static inline bool ast_is_busy(Ast *ast)
{
    4d14:	b480      	push	{r7}
    4d16:	b083      	sub	sp, #12
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	689b      	ldr	r3, [r3, #8]
    4d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4d24:	2b00      	cmp	r3, #0
    4d26:	bf0c      	ite	eq
    4d28:	2300      	moveq	r3, #0
    4d2a:	2301      	movne	r3, #1
    4d2c:	b2db      	uxtb	r3, r3
}
    4d2e:	4618      	mov	r0, r3
    4d30:	370c      	adds	r7, #12
    4d32:	46bd      	mov	sp, r7
    4d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d38:	4770      	bx	lr
    4d3a:	bf00      	nop

00004d3c <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    4d3c:	b580      	push	{r7, lr}
    4d3e:	b084      	sub	sp, #16
    4d40:	af00      	add	r7, sp, #0
    4d42:	4603      	mov	r3, r0
    4d44:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
    4d46:	4b08      	ldr	r3, [pc, #32]	; (4d68 <sleepmgr_lock_mode+0x2c>)
    4d48:	4798      	blx	r3
    4d4a:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
    4d4c:	79fb      	ldrb	r3, [r7, #7]
    4d4e:	4a07      	ldr	r2, [pc, #28]	; (4d6c <sleepmgr_lock_mode+0x30>)
    4d50:	5cd2      	ldrb	r2, [r2, r3]
    4d52:	3201      	adds	r2, #1
    4d54:	b2d1      	uxtb	r1, r2
    4d56:	4a05      	ldr	r2, [pc, #20]	; (4d6c <sleepmgr_lock_mode+0x30>)
    4d58:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    4d5a:	68f8      	ldr	r0, [r7, #12]
    4d5c:	4b04      	ldr	r3, [pc, #16]	; (4d70 <sleepmgr_lock_mode+0x34>)
    4d5e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    4d60:	3710      	adds	r7, #16
    4d62:	46bd      	mov	sp, r7
    4d64:	bd80      	pop	{r7, pc}
    4d66:	bf00      	nop
    4d68:	00004c65 	.word	0x00004c65
    4d6c:	20001014 	.word	0x20001014
    4d70:	00004cbd 	.word	0x00004cbd

00004d74 <ast_enable>:
 * \brief Enable the AST.
 *
 * \param ast Base address of the AST.
 */
void ast_enable(Ast *ast)
{
    4d74:	b580      	push	{r7, lr}
    4d76:	b082      	sub	sp, #8
    4d78:	af00      	add	r7, sp, #0
    4d7a:	6078      	str	r0, [r7, #4]
	sysclk_enable_peripheral_clock(ast);
    4d7c:	6878      	ldr	r0, [r7, #4]
    4d7e:	4b04      	ldr	r3, [pc, #16]	; (4d90 <ast_enable+0x1c>)
    4d80:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
    4d82:	2007      	movs	r0, #7
    4d84:	4b03      	ldr	r3, [pc, #12]	; (4d94 <ast_enable+0x20>)
    4d86:	4798      	blx	r3
}
    4d88:	3708      	adds	r7, #8
    4d8a:	46bd      	mov	sp, r7
    4d8c:	bd80      	pop	{r7, pc}
    4d8e:	bf00      	nop
    4d90:	000098ed 	.word	0x000098ed
    4d94:	00004d3d 	.word	0x00004d3d

00004d98 <ast_set_config>:
 * \param ast_conf The AST configuration
 *
 * \return 1 if the initialization succeeds otherwise it will return 0.
 */
uint32_t ast_set_config(Ast *ast, struct ast_config *ast_conf)
{
    4d98:	b580      	push	{r7, lr}
    4d9a:	b084      	sub	sp, #16
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
    4da0:	6039      	str	r1, [r7, #0]
	uint32_t time_out = AST_POLL_TIMEOUT;
    4da2:	f242 7310 	movw	r3, #10000	; 0x2710
    4da6:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
    4da8:	e007      	b.n	4dba <ast_set_config+0x22>
		if (--time_out == 0) {
    4daa:	68fb      	ldr	r3, [r7, #12]
    4dac:	3b01      	subs	r3, #1
    4dae:	60fb      	str	r3, [r7, #12]
    4db0:	68fb      	ldr	r3, [r7, #12]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d101      	bne.n	4dba <ast_set_config+0x22>
			return 0;
    4db6:	2300      	movs	r3, #0
    4db8:	e07b      	b.n	4eb2 <ast_set_config+0x11a>
 * \return 1 if the initialization succeeds otherwise it will return 0.
 */
uint32_t ast_set_config(Ast *ast, struct ast_config *ast_conf)
{
	uint32_t time_out = AST_POLL_TIMEOUT;
	while (ast_is_clkbusy(ast)) {
    4dba:	6878      	ldr	r0, [r7, #4]
    4dbc:	4b3f      	ldr	r3, [pc, #252]	; (4ebc <ast_set_config+0x124>)
    4dbe:	4798      	blx	r3
    4dc0:	4603      	mov	r3, r0
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d1f1      	bne.n	4daa <ast_set_config+0x12>
		if (--time_out == 0) {
			return 0;
		}
	}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
    4dc6:	683b      	ldr	r3, [r7, #0]
    4dc8:	785b      	ldrb	r3, [r3, #1]
    4dca:	021b      	lsls	r3, r3, #8
    4dcc:	461a      	mov	r2, r3
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	641a      	str	r2, [r3, #64]	; 0x40
	time_out = AST_POLL_TIMEOUT;
    4dd2:	f242 7310 	movw	r3, #10000	; 0x2710
    4dd6:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
    4dd8:	e007      	b.n	4dea <ast_set_config+0x52>
		if (--time_out == 0) {
    4dda:	68fb      	ldr	r3, [r7, #12]
    4ddc:	3b01      	subs	r3, #1
    4dde:	60fb      	str	r3, [r7, #12]
    4de0:	68fb      	ldr	r3, [r7, #12]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d101      	bne.n	4dea <ast_set_config+0x52>
			return 0;
    4de6:	2300      	movs	r3, #0
    4de8:	e063      	b.n	4eb2 <ast_set_config+0x11a>
			return 0;
		}
	}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
	time_out = AST_POLL_TIMEOUT;
	while (ast_is_clkbusy(ast)) {
    4dea:	6878      	ldr	r0, [r7, #4]
    4dec:	4b33      	ldr	r3, [pc, #204]	; (4ebc <ast_set_config+0x124>)
    4dee:	4798      	blx	r3
    4df0:	4603      	mov	r3, r0
    4df2:	2b00      	cmp	r3, #0
    4df4:	d1f1      	bne.n	4dda <ast_set_config+0x42>
		if (--time_out == 0) {
			return 0;
		}
	}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4dfa:	f043 0201 	orr.w	r2, r3, #1
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	641a      	str	r2, [r3, #64]	; 0x40
	time_out = AST_POLL_TIMEOUT;
    4e02:	f242 7310 	movw	r3, #10000	; 0x2710
    4e06:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
    4e08:	e007      	b.n	4e1a <ast_set_config+0x82>
		if (--time_out == 0) {
    4e0a:	68fb      	ldr	r3, [r7, #12]
    4e0c:	3b01      	subs	r3, #1
    4e0e:	60fb      	str	r3, [r7, #12]
    4e10:	68fb      	ldr	r3, [r7, #12]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d101      	bne.n	4e1a <ast_set_config+0x82>
			return 0;
    4e16:	2300      	movs	r3, #0
    4e18:	e04b      	b.n	4eb2 <ast_set_config+0x11a>
			return 0;
		}
	}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
	time_out = AST_POLL_TIMEOUT;
	while (ast_is_clkbusy(ast)) {
    4e1a:	6878      	ldr	r0, [r7, #4]
    4e1c:	4b27      	ldr	r3, [pc, #156]	; (4ebc <ast_set_config+0x124>)
    4e1e:	4798      	blx	r3
    4e20:	4603      	mov	r3, r0
    4e22:	2b00      	cmp	r3, #0
    4e24:	d1f1      	bne.n	4e0a <ast_set_config+0x72>
		if (--time_out == 0) {
			return 0;
		}
	}
	/* Set the new AST configuration */
	if (ast_conf->mode == AST_CALENDAR_MODE) {
    4e26:	683b      	ldr	r3, [r7, #0]
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	2b01      	cmp	r3, #1
    4e2c:	d106      	bne.n	4e3c <ast_set_config+0xa4>
		ast->AST_CR = AST_CR_CAL | ast_conf->psel << AST_CR_PSEL_Pos;
    4e2e:	683b      	ldr	r3, [r7, #0]
    4e30:	789b      	ldrb	r3, [r3, #2]
    4e32:	041b      	lsls	r3, r3, #16
    4e34:	f043 0204 	orr.w	r2, r3, #4
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	601a      	str	r2, [r3, #0]
	}

	if (ast_conf->mode == AST_COUNTER_MODE) {
    4e3c:	683b      	ldr	r3, [r7, #0]
    4e3e:	781b      	ldrb	r3, [r3, #0]
    4e40:	2b00      	cmp	r3, #0
    4e42:	d106      	bne.n	4e52 <ast_set_config+0xba>
		ast->AST_CR = ast_conf->psel << AST_CR_PSEL_Pos;
    4e44:	683b      	ldr	r3, [r7, #0]
    4e46:	789b      	ldrb	r3, [r3, #2]
    4e48:	041b      	lsls	r3, r3, #16
    4e4a:	461a      	mov	r2, r3
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	601a      	str	r2, [r3, #0]
	}

	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    4e50:	e7ff      	b.n	4e52 <ast_set_config+0xba>
    4e52:	bf00      	nop
    4e54:	6878      	ldr	r0, [r7, #4]
    4e56:	4b1a      	ldr	r3, [pc, #104]	; (4ec0 <ast_set_config+0x128>)
    4e58:	4798      	blx	r3
    4e5a:	4603      	mov	r3, r0
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d1f9      	bne.n	4e54 <ast_set_config+0xbc>
	}

	/* Set the calendar */
	if (ast_conf->mode == AST_CALENDAR_MODE) {
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	781b      	ldrb	r3, [r3, #0]
    4e64:	2b01      	cmp	r3, #1
    4e66:	d104      	bne.n	4e72 <ast_set_config+0xda>
		ast_write_calendar_value(ast, ast_conf->calendar);
    4e68:	683b      	ldr	r3, [r7, #0]
    4e6a:	6878      	ldr	r0, [r7, #4]
    4e6c:	6899      	ldr	r1, [r3, #8]
    4e6e:	4b15      	ldr	r3, [pc, #84]	; (4ec4 <ast_set_config+0x12c>)
    4e70:	4798      	blx	r3
	}

	if (ast_conf->mode == AST_COUNTER_MODE) {
    4e72:	683b      	ldr	r3, [r7, #0]
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d106      	bne.n	4e88 <ast_set_config+0xf0>
		ast_write_counter_value(ast, ast_conf->counter);
    4e7a:	683b      	ldr	r3, [r7, #0]
    4e7c:	685b      	ldr	r3, [r3, #4]
    4e7e:	6878      	ldr	r0, [r7, #4]
    4e80:	4619      	mov	r1, r3
    4e82:	4b11      	ldr	r3, [pc, #68]	; (4ec8 <ast_set_config+0x130>)
    4e84:	4798      	blx	r3
	}

	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    4e86:	e7ff      	b.n	4e88 <ast_set_config+0xf0>
    4e88:	bf00      	nop
    4e8a:	6878      	ldr	r0, [r7, #4]
    4e8c:	4b0c      	ldr	r3, [pc, #48]	; (4ec0 <ast_set_config+0x128>)
    4e8e:	4798      	blx	r3
    4e90:	4603      	mov	r3, r0
    4e92:	2b00      	cmp	r3, #0
    4e94:	d1f9      	bne.n	4e8a <ast_set_config+0xf2>
	}
	/* Enable the AST */
	ast->AST_CR |= AST_CR_EN;
    4e96:	687b      	ldr	r3, [r7, #4]
    4e98:	681b      	ldr	r3, [r3, #0]
    4e9a:	f043 0201 	orr.w	r2, r3, #1
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	601a      	str	r2, [r3, #0]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    4ea2:	bf00      	nop
    4ea4:	6878      	ldr	r0, [r7, #4]
    4ea6:	4b06      	ldr	r3, [pc, #24]	; (4ec0 <ast_set_config+0x128>)
    4ea8:	4798      	blx	r3
    4eaa:	4603      	mov	r3, r0
    4eac:	2b00      	cmp	r3, #0
    4eae:	d1f9      	bne.n	4ea4 <ast_set_config+0x10c>
	}

	return 1;
    4eb0:	2301      	movs	r3, #1
}
    4eb2:	4618      	mov	r0, r3
    4eb4:	3710      	adds	r7, #16
    4eb6:	46bd      	mov	sp, r7
    4eb8:	bd80      	pop	{r7, pc}
    4eba:	bf00      	nop
    4ebc:	00004ced 	.word	0x00004ced
    4ec0:	00004d15 	.word	0x00004d15
    4ec4:	00004ecd 	.word	0x00004ecd
    4ec8:	00004f05 	.word	0x00004f05

00004ecc <ast_write_calendar_value>:
 * \param ast          Base address of the AST.
 * \param ast_calendar Startup date
 */
void ast_write_calendar_value(Ast *ast,
		struct ast_calendar calendar)
{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b082      	sub	sp, #8
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
    4ed4:	6039      	str	r1, [r7, #0]
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
    4ed6:	bf00      	nop
    4ed8:	6878      	ldr	r0, [r7, #4]
    4eda:	4b09      	ldr	r3, [pc, #36]	; (4f00 <ast_write_calendar_value+0x34>)
    4edc:	4798      	blx	r3
    4ede:	4603      	mov	r3, r0
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d1f9      	bne.n	4ed8 <ast_write_calendar_value+0xc>
	}
	/* Set the new val value */
	ast->AST_CALV = calendar.field;
    4ee4:	683a      	ldr	r2, [r7, #0]
    4ee6:	687b      	ldr	r3, [r7, #4]
    4ee8:	655a      	str	r2, [r3, #84]	; 0x54
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    4eea:	bf00      	nop
    4eec:	6878      	ldr	r0, [r7, #4]
    4eee:	4b04      	ldr	r3, [pc, #16]	; (4f00 <ast_write_calendar_value+0x34>)
    4ef0:	4798      	blx	r3
    4ef2:	4603      	mov	r3, r0
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d1f9      	bne.n	4eec <ast_write_calendar_value+0x20>
	}
}
    4ef8:	3708      	adds	r7, #8
    4efa:	46bd      	mov	sp, r7
    4efc:	bd80      	pop	{r7, pc}
    4efe:	bf00      	nop
    4f00:	00004d15 	.word	0x00004d15

00004f04 <ast_write_counter_value>:
 * \param ast         Base address of the AST.
 * \param ast_counter Startup counter value
 */
void ast_write_counter_value(Ast *ast,
		uint32_t ast_counter)
{
    4f04:	b580      	push	{r7, lr}
    4f06:	b082      	sub	sp, #8
    4f08:	af00      	add	r7, sp, #0
    4f0a:	6078      	str	r0, [r7, #4]
    4f0c:	6039      	str	r1, [r7, #0]
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
    4f0e:	bf00      	nop
    4f10:	6878      	ldr	r0, [r7, #4]
    4f12:	4b09      	ldr	r3, [pc, #36]	; (4f38 <ast_write_counter_value+0x34>)
    4f14:	4798      	blx	r3
    4f16:	4603      	mov	r3, r0
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d1f9      	bne.n	4f10 <ast_write_counter_value+0xc>
	}
	/* Set the new val value */
	ast->AST_CV = ast_counter;
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	683a      	ldr	r2, [r7, #0]
    4f20:	605a      	str	r2, [r3, #4]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    4f22:	bf00      	nop
    4f24:	6878      	ldr	r0, [r7, #4]
    4f26:	4b04      	ldr	r3, [pc, #16]	; (4f38 <ast_write_counter_value+0x34>)
    4f28:	4798      	blx	r3
    4f2a:	4603      	mov	r3, r0
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d1f9      	bne.n	4f24 <ast_write_counter_value+0x20>
	}
}
    4f30:	3708      	adds	r7, #8
    4f32:	46bd      	mov	sp, r7
    4f34:	bd80      	pop	{r7, pc}
    4f36:	bf00      	nop
    4f38:	00004d15 	.word	0x00004d15

00004f3c <ast_read_calendar_value>:
 * \param ast Base address of the AST.
 *
 * \return The AST current calendar value.
 */
struct ast_calendar ast_read_calendar_value(Ast *ast)
{
    4f3c:	b480      	push	{r7}
    4f3e:	b085      	sub	sp, #20
    4f40:	af00      	add	r7, sp, #0
    4f42:	6078      	str	r0, [r7, #4]
	struct ast_calendar calendar;
	calendar.field = ast->AST_CALV;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    4f48:	60fb      	str	r3, [r7, #12]
	return calendar;
    4f4a:	68fb      	ldr	r3, [r7, #12]
}
    4f4c:	4618      	mov	r0, r3
    4f4e:	3714      	adds	r7, #20
    4f50:	46bd      	mov	sp, r7
    4f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f56:	4770      	bx	lr

00004f58 <ast_write_periodic0_value>:
 *
 * \param ast Base address of the AST.
 * \param pir AST periodic0.
 */
void ast_write_periodic0_value(Ast *ast, uint32_t pir)
{
    4f58:	b580      	push	{r7, lr}
    4f5a:	b082      	sub	sp, #8
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	6078      	str	r0, [r7, #4]
    4f60:	6039      	str	r1, [r7, #0]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    4f62:	bf00      	nop
    4f64:	6878      	ldr	r0, [r7, #4]
    4f66:	4b09      	ldr	r3, [pc, #36]	; (4f8c <ast_write_periodic0_value+0x34>)
    4f68:	4798      	blx	r3
    4f6a:	4603      	mov	r3, r0
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d1f9      	bne.n	4f64 <ast_write_periodic0_value+0xc>
	}
	/* Set the periodic prescaler value */
	ast->AST_PIR0 = pir;
    4f70:	687b      	ldr	r3, [r7, #4]
    4f72:	683a      	ldr	r2, [r7, #0]
    4f74:	631a      	str	r2, [r3, #48]	; 0x30
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    4f76:	bf00      	nop
    4f78:	6878      	ldr	r0, [r7, #4]
    4f7a:	4b04      	ldr	r3, [pc, #16]	; (4f8c <ast_write_periodic0_value+0x34>)
    4f7c:	4798      	blx	r3
    4f7e:	4603      	mov	r3, r0
    4f80:	2b00      	cmp	r3, #0
    4f82:	d1f9      	bne.n	4f78 <ast_write_periodic0_value+0x20>
	}
}
    4f84:	3708      	adds	r7, #8
    4f86:	46bd      	mov	sp, r7
    4f88:	bd80      	pop	{r7, pc}
    4f8a:	bf00      	nop
    4f8c:	00004d15 	.word	0x00004d15

00004f90 <ast_enable_interrupt>:
 *
 * \param ast             Base address of the AST.
 * \param source  AST Interrupts to be enabled
 */
void ast_enable_interrupt(Ast *ast, ast_interrupt_source_t source)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b082      	sub	sp, #8
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
    4f98:	460b      	mov	r3, r1
    4f9a:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    4f9c:	bf00      	nop
    4f9e:	6878      	ldr	r0, [r7, #4]
    4fa0:	4b1c      	ldr	r3, [pc, #112]	; (5014 <ast_enable_interrupt+0x84>)
    4fa2:	4798      	blx	r3
    4fa4:	4603      	mov	r3, r0
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	d1f9      	bne.n	4f9e <ast_enable_interrupt+0xe>
	}

	switch (source) {
    4faa:	78fb      	ldrb	r3, [r7, #3]
    4fac:	2b04      	cmp	r3, #4
    4fae:	d825      	bhi.n	4ffc <ast_enable_interrupt+0x6c>
    4fb0:	a201      	add	r2, pc, #4	; (adr r2, 4fb8 <ast_enable_interrupt+0x28>)
    4fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4fb6:	bf00      	nop
    4fb8:	00004fcd 	.word	0x00004fcd
    4fbc:	00004fd7 	.word	0x00004fd7
    4fc0:	00004fe1 	.word	0x00004fe1
    4fc4:	00004fe9 	.word	0x00004fe9
    4fc8:	00004ff3 	.word	0x00004ff3
	case AST_INTERRUPT_ALARM:
		ast->AST_IER = AST_IER_ALARM0_1;
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	f44f 7280 	mov.w	r2, #256	; 0x100
    4fd2:	611a      	str	r2, [r3, #16]
		break;
    4fd4:	e013      	b.n	4ffe <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_IER = AST_IER_PER0_1;
    4fd6:	687b      	ldr	r3, [r7, #4]
    4fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4fdc:	611a      	str	r2, [r3, #16]
		break;
    4fde:	e00e      	b.n	4ffe <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_IER = AST_IER_OVF_1;
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	2201      	movs	r2, #1
    4fe4:	611a      	str	r2, [r3, #16]
		break;
    4fe6:	e00a      	b.n	4ffe <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_IER = AST_IER_READY_1;
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    4fee:	611a      	str	r2, [r3, #16]
		break;
    4ff0:	e005      	b.n	4ffe <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_IER = AST_IER_CLKRDY_1;
    4ff2:	687b      	ldr	r3, [r7, #4]
    4ff4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4ff8:	611a      	str	r2, [r3, #16]
		break;
    4ffa:	e000      	b.n	4ffe <ast_enable_interrupt+0x6e>

	default:
		break;
    4ffc:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    4ffe:	bf00      	nop
    5000:	6878      	ldr	r0, [r7, #4]
    5002:	4b04      	ldr	r3, [pc, #16]	; (5014 <ast_enable_interrupt+0x84>)
    5004:	4798      	blx	r3
    5006:	4603      	mov	r3, r0
    5008:	2b00      	cmp	r3, #0
    500a:	d1f9      	bne.n	5000 <ast_enable_interrupt+0x70>
	}
}
    500c:	3708      	adds	r7, #8
    500e:	46bd      	mov	sp, r7
    5010:	bd80      	pop	{r7, pc}
    5012:	bf00      	nop
    5014:	00004d15 	.word	0x00004d15

00005018 <ast_disable_interrupt>:
 *
 * \param ast              Base address of the AST.
 * \param source   AST Interrupts to be disabled
 */
void ast_disable_interrupt(Ast *ast, ast_interrupt_source_t source)
{
    5018:	b580      	push	{r7, lr}
    501a:	b082      	sub	sp, #8
    501c:	af00      	add	r7, sp, #0
    501e:	6078      	str	r0, [r7, #4]
    5020:	460b      	mov	r3, r1
    5022:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    5024:	bf00      	nop
    5026:	6878      	ldr	r0, [r7, #4]
    5028:	4b1c      	ldr	r3, [pc, #112]	; (509c <ast_disable_interrupt+0x84>)
    502a:	4798      	blx	r3
    502c:	4603      	mov	r3, r0
    502e:	2b00      	cmp	r3, #0
    5030:	d1f9      	bne.n	5026 <ast_disable_interrupt+0xe>
	}

	switch (source) {
    5032:	78fb      	ldrb	r3, [r7, #3]
    5034:	2b04      	cmp	r3, #4
    5036:	d825      	bhi.n	5084 <ast_disable_interrupt+0x6c>
    5038:	a201      	add	r2, pc, #4	; (adr r2, 5040 <ast_disable_interrupt+0x28>)
    503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    503e:	bf00      	nop
    5040:	00005055 	.word	0x00005055
    5044:	0000505f 	.word	0x0000505f
    5048:	00005069 	.word	0x00005069
    504c:	00005071 	.word	0x00005071
    5050:	0000507b 	.word	0x0000507b
	case AST_INTERRUPT_ALARM:
		ast->AST_IDR = AST_IDR_ALARM0_1;
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	f44f 7280 	mov.w	r2, #256	; 0x100
    505a:	615a      	str	r2, [r3, #20]
		break;
    505c:	e013      	b.n	5086 <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_IDR = AST_IDR_PER0_1;
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5064:	615a      	str	r2, [r3, #20]
		break;
    5066:	e00e      	b.n	5086 <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_IDR = AST_IDR_OVF_1;
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	2201      	movs	r2, #1
    506c:	615a      	str	r2, [r3, #20]
		break;
    506e:	e00a      	b.n	5086 <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_IDR = AST_IDR_READY_1;
    5070:	687b      	ldr	r3, [r7, #4]
    5072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    5076:	615a      	str	r2, [r3, #20]
		break;
    5078:	e005      	b.n	5086 <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_IDR = AST_IDR_CLKRDY_1;
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5080:	615a      	str	r2, [r3, #20]
		break;
    5082:	e000      	b.n	5086 <ast_disable_interrupt+0x6e>

	default:
		break;
    5084:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    5086:	bf00      	nop
    5088:	6878      	ldr	r0, [r7, #4]
    508a:	4b04      	ldr	r3, [pc, #16]	; (509c <ast_disable_interrupt+0x84>)
    508c:	4798      	blx	r3
    508e:	4603      	mov	r3, r0
    5090:	2b00      	cmp	r3, #0
    5092:	d1f9      	bne.n	5088 <ast_disable_interrupt+0x70>
	}
}
    5094:	3708      	adds	r7, #8
    5096:	46bd      	mov	sp, r7
    5098:	bd80      	pop	{r7, pc}
    509a:	bf00      	nop
    509c:	00004d15 	.word	0x00004d15

000050a0 <ast_clear_interrupt_flag>:
 *
 * \param ast          Base address of the AST.
 * \param source  AST status flag to be cleared
 */
void ast_clear_interrupt_flag(Ast *ast, ast_interrupt_source_t source)
{
    50a0:	b580      	push	{r7, lr}
    50a2:	b082      	sub	sp, #8
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
    50a8:	460b      	mov	r3, r1
    50aa:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    50ac:	bf00      	nop
    50ae:	6878      	ldr	r0, [r7, #4]
    50b0:	4b1c      	ldr	r3, [pc, #112]	; (5124 <ast_clear_interrupt_flag+0x84>)
    50b2:	4798      	blx	r3
    50b4:	4603      	mov	r3, r0
    50b6:	2b00      	cmp	r3, #0
    50b8:	d1f9      	bne.n	50ae <ast_clear_interrupt_flag+0xe>
	}

	switch (source) {
    50ba:	78fb      	ldrb	r3, [r7, #3]
    50bc:	2b04      	cmp	r3, #4
    50be:	d825      	bhi.n	510c <ast_clear_interrupt_flag+0x6c>
    50c0:	a201      	add	r2, pc, #4	; (adr r2, 50c8 <ast_clear_interrupt_flag+0x28>)
    50c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    50c6:	bf00      	nop
    50c8:	000050dd 	.word	0x000050dd
    50cc:	000050e7 	.word	0x000050e7
    50d0:	000050f1 	.word	0x000050f1
    50d4:	000050f9 	.word	0x000050f9
    50d8:	00005103 	.word	0x00005103
	case AST_INTERRUPT_ALARM:
		ast->AST_SCR = AST_SCR_ALARM0;
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	f44f 7280 	mov.w	r2, #256	; 0x100
    50e2:	60da      	str	r2, [r3, #12]
		break;
    50e4:	e013      	b.n	510e <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_SCR = AST_SCR_PER0;
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    50ec:	60da      	str	r2, [r3, #12]
		break;
    50ee:	e00e      	b.n	510e <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_SCR = AST_SCR_OVF;
    50f0:	687b      	ldr	r3, [r7, #4]
    50f2:	2201      	movs	r2, #1
    50f4:	60da      	str	r2, [r3, #12]
		break;
    50f6:	e00a      	b.n	510e <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_SCR = AST_SCR_READY;
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    50fe:	60da      	str	r2, [r3, #12]
		break;
    5100:	e005      	b.n	510e <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_SCR = AST_SCR_CLKRDY;
    5102:	687b      	ldr	r3, [r7, #4]
    5104:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5108:	60da      	str	r2, [r3, #12]
		break;
    510a:	e000      	b.n	510e <ast_clear_interrupt_flag+0x6e>

	default:
		break;
    510c:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    510e:	bf00      	nop
    5110:	6878      	ldr	r0, [r7, #4]
    5112:	4b04      	ldr	r3, [pc, #16]	; (5124 <ast_clear_interrupt_flag+0x84>)
    5114:	4798      	blx	r3
    5116:	4603      	mov	r3, r0
    5118:	2b00      	cmp	r3, #0
    511a:	d1f9      	bne.n	5110 <ast_clear_interrupt_flag+0x70>
	}
}
    511c:	3708      	adds	r7, #8
    511e:	46bd      	mov	sp, r7
    5120:	bd80      	pop	{r7, pc}
    5122:	bf00      	nop
    5124:	00004d15 	.word	0x00004d15

00005128 <ast_set_callback>:
 * \param irq_line  interrupt line.
 * \param irq_level interrupt level.
 */
void ast_set_callback(Ast *ast, ast_interrupt_source_t source,
		ast_callback_t callback, uint8_t irq_line, uint8_t irq_level)
{
    5128:	b580      	push	{r7, lr}
    512a:	b084      	sub	sp, #16
    512c:	af00      	add	r7, sp, #0
    512e:	60f8      	str	r0, [r7, #12]
    5130:	607a      	str	r2, [r7, #4]
    5132:	460a      	mov	r2, r1
    5134:	72fa      	strb	r2, [r7, #11]
    5136:	72bb      	strb	r3, [r7, #10]
	ast_callback_pointer[source] = callback;
    5138:	7afa      	ldrb	r2, [r7, #11]
    513a:	4b0e      	ldr	r3, [pc, #56]	; (5174 <ast_set_callback+0x4c>)
    513c:	6879      	ldr	r1, [r7, #4]
    513e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    5142:	7abb      	ldrb	r3, [r7, #10]
    5144:	b25b      	sxtb	r3, r3
    5146:	4618      	mov	r0, r3
    5148:	4b0b      	ldr	r3, [pc, #44]	; (5178 <ast_set_callback+0x50>)
    514a:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    514c:	7aba      	ldrb	r2, [r7, #10]
    514e:	7e3b      	ldrb	r3, [r7, #24]
    5150:	b252      	sxtb	r2, r2
    5152:	4610      	mov	r0, r2
    5154:	4619      	mov	r1, r3
    5156:	4b09      	ldr	r3, [pc, #36]	; (517c <ast_set_callback+0x54>)
    5158:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    515a:	7abb      	ldrb	r3, [r7, #10]
    515c:	b25b      	sxtb	r3, r3
    515e:	4618      	mov	r0, r3
    5160:	4b07      	ldr	r3, [pc, #28]	; (5180 <ast_set_callback+0x58>)
    5162:	4798      	blx	r3
	ast_enable_interrupt(ast, source);
    5164:	7afb      	ldrb	r3, [r7, #11]
    5166:	68f8      	ldr	r0, [r7, #12]
    5168:	4619      	mov	r1, r3
    516a:	4b06      	ldr	r3, [pc, #24]	; (5184 <ast_set_callback+0x5c>)
    516c:	4798      	blx	r3
}
    516e:	3710      	adds	r7, #16
    5170:	46bd      	mov	sp, r7
    5172:	bd80      	pop	{r7, pc}
    5174:	2000101c 	.word	0x2000101c
    5178:	00004bdd 	.word	0x00004bdd
    517c:	00004c11 	.word	0x00004c11
    5180:	00004bad 	.word	0x00004bad
    5184:	00004f91 	.word	0x00004f91

00005188 <AST_PER_Handler>:
/**
 * \brief Interrupt handler for AST periodic.
 */
#ifdef AST_PER_ENABLE
void AST_PER_Handler(void)
{
    5188:	b580      	push	{r7, lr}
    518a:	af00      	add	r7, sp, #0
	ast_callback_pointer[AST_INTERRUPT_PER]();
    518c:	4b01      	ldr	r3, [pc, #4]	; (5194 <AST_PER_Handler+0xc>)
    518e:	685b      	ldr	r3, [r3, #4]
    5190:	4798      	blx	r3
}
    5192:	bd80      	pop	{r7, pc}
    5194:	2000101c 	.word	0x2000101c

00005198 <ast_enable_wakeup>:
 *
 * \param ast          Base address of the AST.
 * \param source  AST wake-up flag to be enabled.
 */
void ast_enable_wakeup(Ast *ast, ast_wakeup_source_t source)
{
    5198:	b580      	push	{r7, lr}
    519a:	b082      	sub	sp, #8
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
    51a0:	460b      	mov	r3, r1
    51a2:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    51a4:	bf00      	nop
    51a6:	6878      	ldr	r0, [r7, #4]
    51a8:	4b15      	ldr	r3, [pc, #84]	; (5200 <ast_enable_wakeup+0x68>)
    51aa:	4798      	blx	r3
    51ac:	4603      	mov	r3, r0
    51ae:	2b00      	cmp	r3, #0
    51b0:	d1f9      	bne.n	51a6 <ast_enable_wakeup+0xe>
	}

	switch (source) {
    51b2:	78fb      	ldrb	r3, [r7, #3]
    51b4:	2b01      	cmp	r3, #1
    51b6:	d00b      	beq.n	51d0 <ast_enable_wakeup+0x38>
    51b8:	2b02      	cmp	r3, #2
    51ba:	d010      	beq.n	51de <ast_enable_wakeup+0x46>
    51bc:	2b00      	cmp	r3, #0
    51be:	d000      	beq.n	51c2 <ast_enable_wakeup+0x2a>
	case AST_WAKEUP_OVF:
		ast->AST_WER |= AST_WER_OVF_1;
		break;

	default:
		break;
    51c0:	e014      	b.n	51ec <ast_enable_wakeup+0x54>
	while (ast_is_busy(ast)) {
	}

	switch (source) {
	case AST_WAKEUP_ALARM:
		ast->AST_WER |= AST_WER_ALARM0_1;
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	69db      	ldr	r3, [r3, #28]
    51c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    51ca:	687b      	ldr	r3, [r7, #4]
    51cc:	61da      	str	r2, [r3, #28]
		break;
    51ce:	e00d      	b.n	51ec <ast_enable_wakeup+0x54>

	case AST_WAKEUP_PER:
		ast->AST_WER |= AST_WER_PER0_1;
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	69db      	ldr	r3, [r3, #28]
    51d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	61da      	str	r2, [r3, #28]
		break;
    51dc:	e006      	b.n	51ec <ast_enable_wakeup+0x54>

	case AST_WAKEUP_OVF:
		ast->AST_WER |= AST_WER_OVF_1;
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	69db      	ldr	r3, [r3, #28]
    51e2:	f043 0201 	orr.w	r2, r3, #1
    51e6:	687b      	ldr	r3, [r7, #4]
    51e8:	61da      	str	r2, [r3, #28]
		break;
    51ea:	bf00      	nop
	default:
		break;
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    51ec:	bf00      	nop
    51ee:	6878      	ldr	r0, [r7, #4]
    51f0:	4b03      	ldr	r3, [pc, #12]	; (5200 <ast_enable_wakeup+0x68>)
    51f2:	4798      	blx	r3
    51f4:	4603      	mov	r3, r0
    51f6:	2b00      	cmp	r3, #0
    51f8:	d1f9      	bne.n	51ee <ast_enable_wakeup+0x56>
	}
}
    51fa:	3708      	adds	r7, #8
    51fc:	46bd      	mov	sp, r7
    51fe:	bd80      	pop	{r7, pc}
    5200:	00004d15 	.word	0x00004d15

00005204 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    5204:	b480      	push	{r7}
    5206:	b083      	sub	sp, #12
    5208:	af00      	add	r7, sp, #0
    520a:	4603      	mov	r3, r0
    520c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    520e:	79fb      	ldrb	r3, [r7, #7]
    5210:	2b0d      	cmp	r3, #13
    5212:	d82b      	bhi.n	526c <dfll_priv_get_source_hz+0x68>
    5214:	a201      	add	r2, pc, #4	; (adr r2, 521c <dfll_priv_get_source_hz+0x18>)
    5216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    521a:	bf00      	nop
    521c:	00005255 	.word	0x00005255
    5220:	00005259 	.word	0x00005259
    5224:	0000526d 	.word	0x0000526d
    5228:	0000525f 	.word	0x0000525f
    522c:	00005263 	.word	0x00005263
    5230:	0000526d 	.word	0x0000526d
    5234:	0000526d 	.word	0x0000526d
    5238:	0000526d 	.word	0x0000526d
    523c:	0000526d 	.word	0x0000526d
    5240:	0000526d 	.word	0x0000526d
    5244:	0000526d 	.word	0x0000526d
    5248:	0000526d 	.word	0x0000526d
    524c:	0000526d 	.word	0x0000526d
    5250:	00005267 	.word	0x00005267
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    5254:	4b09      	ldr	r3, [pc, #36]	; (527c <dfll_priv_get_source_hz+0x78>)
    5256:	e00a      	b.n	526e <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    5258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    525c:	e007      	b.n	526e <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    525e:	4b08      	ldr	r3, [pc, #32]	; (5280 <dfll_priv_get_source_hz+0x7c>)
    5260:	e005      	b.n	526e <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    5262:	4b08      	ldr	r3, [pc, #32]	; (5284 <dfll_priv_get_source_hz+0x80>)
    5264:	e003      	b.n	526e <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    5266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    526a:	e000      	b.n	526e <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    526c:	2300      	movs	r3, #0
	}
}
    526e:	4618      	mov	r0, r3
    5270:	370c      	adds	r7, #12
    5272:	46bd      	mov	sp, r7
    5274:	f85d 7b04 	ldr.w	r7, [sp], #4
    5278:	4770      	bx	lr
    527a:	bf00      	nop
    527c:	0001c138 	.word	0x0001c138
    5280:	00b71b00 	.word	0x00b71b00
    5284:	04c4b400 	.word	0x04c4b400

00005288 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    5288:	b580      	push	{r7, lr}
    528a:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    528c:	2001      	movs	r0, #1
    528e:	4b04      	ldr	r3, [pc, #16]	; (52a0 <sysclk_get_main_hz+0x18>)
    5290:	4798      	blx	r3
    5292:	4603      	mov	r3, r0
    5294:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    5298:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    529c:	4618      	mov	r0, r3
    529e:	bd80      	pop	{r7, pc}
    52a0:	00005205 	.word	0x00005205

000052a4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    52a4:	b580      	push	{r7, lr}
    52a6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    52a8:	4b02      	ldr	r3, [pc, #8]	; (52b4 <sysclk_get_cpu_hz+0x10>)
    52aa:	4798      	blx	r3
    52ac:	4603      	mov	r3, r0
}
    52ae:	4618      	mov	r0, r3
    52b0:	bd80      	pop	{r7, pc}
    52b2:	bf00      	nop
    52b4:	00005289 	.word	0x00005289

000052b8 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
    52b8:	b480      	push	{r7}
    52ba:	b083      	sub	sp, #12
    52bc:	af00      	add	r7, sp, #0
    52be:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
    52c0:	687b      	ldr	r3, [r7, #4]
    52c2:	2280      	movs	r2, #128	; 0x80
    52c4:	601a      	str	r2, [r3, #0]
}
    52c6:	370c      	adds	r7, #12
    52c8:	46bd      	mov	sp, r7
    52ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ce:	4770      	bx	lr

000052d0 <spi_set_lastxfer>:
 *  The next transfer is the last transfer and after that CS is de-asserted.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
    52d0:	b480      	push	{r7}
    52d2:	b083      	sub	sp, #12
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    52de:	601a      	str	r2, [r3, #0]
}
    52e0:	370c      	adds	r7, #12
    52e2:	46bd      	mov	sp, r7
    52e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e8:	4770      	bx	lr
    52ea:	bf00      	nop

000052ec <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
    52ec:	b480      	push	{r7}
    52ee:	b083      	sub	sp, #12
    52f0:	af00      	add	r7, sp, #0
    52f2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
    52f4:	687b      	ldr	r3, [r7, #4]
    52f6:	685b      	ldr	r3, [r3, #4]
    52f8:	f043 0201 	orr.w	r2, r3, #1
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	605a      	str	r2, [r3, #4]
}
    5300:	370c      	adds	r7, #12
    5302:	46bd      	mov	sp, r7
    5304:	f85d 7b04 	ldr.w	r7, [sp], #4
    5308:	4770      	bx	lr
    530a:	bf00      	nop

0000530c <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
    530c:	b480      	push	{r7}
    530e:	b083      	sub	sp, #12
    5310:	af00      	add	r7, sp, #0
    5312:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
    5314:	687b      	ldr	r3, [r7, #4]
    5316:	685b      	ldr	r3, [r3, #4]
    5318:	f023 0202 	bic.w	r2, r3, #2
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	605a      	str	r2, [r3, #4]
}
    5320:	370c      	adds	r7, #12
    5322:	46bd      	mov	sp, r7
    5324:	f85d 7b04 	ldr.w	r7, [sp], #4
    5328:	4770      	bx	lr
    532a:	bf00      	nop

0000532c <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
    532c:	b480      	push	{r7}
    532e:	b083      	sub	sp, #12
    5330:	af00      	add	r7, sp, #0
    5332:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	685b      	ldr	r3, [r3, #4]
    5338:	f023 0204 	bic.w	r2, r3, #4
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	605a      	str	r2, [r3, #4]
}
    5340:	370c      	adds	r7, #12
    5342:	46bd      	mov	sp, r7
    5344:	f85d 7b04 	ldr.w	r7, [sp], #4
    5348:	4770      	bx	lr
    534a:	bf00      	nop

0000534c <spi_get_peripheral_select_decode_setting>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
    534c:	b480      	push	{r7}
    534e:	b083      	sub	sp, #12
    5350:	af00      	add	r7, sp, #0
    5352:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	685b      	ldr	r3, [r3, #4]
    5358:	f003 0304 	and.w	r3, r3, #4
    535c:	2b00      	cmp	r3, #0
    535e:	d001      	beq.n	5364 <spi_get_peripheral_select_decode_setting+0x18>
		return 1;
    5360:	2301      	movs	r3, #1
    5362:	e000      	b.n	5366 <spi_get_peripheral_select_decode_setting+0x1a>
	} else {
		return 0;
    5364:	2300      	movs	r3, #0
	}
}
    5366:	4618      	mov	r0, r3
    5368:	370c      	adds	r7, #12
    536a:	46bd      	mov	sp, r7
    536c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5370:	4770      	bx	lr
    5372:	bf00      	nop

00005374 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
    5374:	b480      	push	{r7}
    5376:	b083      	sub	sp, #12
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
    537c:	687b      	ldr	r3, [r7, #4]
    537e:	685b      	ldr	r3, [r3, #4]
    5380:	f043 0210 	orr.w	r2, r3, #16
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	605a      	str	r2, [r3, #4]
}
    5388:	370c      	adds	r7, #12
    538a:	46bd      	mov	sp, r7
    538c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5390:	4770      	bx	lr
    5392:	bf00      	nop

00005394 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
    5394:	b480      	push	{r7}
    5396:	b083      	sub	sp, #12
    5398:	af00      	add	r7, sp, #0
    539a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	685b      	ldr	r3, [r3, #4]
    53a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	605a      	str	r2, [r3, #4]
}
    53a8:	370c      	adds	r7, #12
    53aa:	46bd      	mov	sp, r7
    53ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    53b0:	4770      	bx	lr
    53b2:	bf00      	nop

000053b4 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
    53b4:	b480      	push	{r7}
    53b6:	b083      	sub	sp, #12
    53b8:	af00      	add	r7, sp, #0
    53ba:	6078      	str	r0, [r7, #4]
    53bc:	460b      	mov	r3, r1
    53be:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
    53c0:	887a      	ldrh	r2, [r7, #2]
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	60da      	str	r2, [r3, #12]
}
    53c6:	370c      	adds	r7, #12
    53c8:	46bd      	mov	sp, r7
    53ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ce:	4770      	bx	lr

000053d0 <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
    53d0:	b480      	push	{r7}
    53d2:	b083      	sub	sp, #12
    53d4:	af00      	add	r7, sp, #0
    53d6:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	689b      	ldr	r3, [r3, #8]
    53dc:	b29b      	uxth	r3, r3
}
    53de:	4618      	mov	r0, r3
    53e0:	370c      	adds	r7, #12
    53e2:	46bd      	mov	sp, r7
    53e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop

000053ec <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
    53ec:	b480      	push	{r7}
    53ee:	b083      	sub	sp, #12
    53f0:	af00      	add	r7, sp, #0
    53f2:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
    53f4:	687b      	ldr	r3, [r7, #4]
    53f6:	691b      	ldr	r3, [r3, #16]
    53f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    53fc:	2b00      	cmp	r3, #0
    53fe:	d001      	beq.n	5404 <spi_is_tx_empty+0x18>
		return 1;
    5400:	2301      	movs	r3, #1
    5402:	e000      	b.n	5406 <spi_is_tx_empty+0x1a>
	} else {
		return 0;
    5404:	2300      	movs	r3, #0
	}
}
    5406:	4618      	mov	r0, r3
    5408:	370c      	adds	r7, #12
    540a:	46bd      	mov	sp, r7
    540c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5410:	4770      	bx	lr
    5412:	bf00      	nop

00005414 <spi_is_tx_ready>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
    5414:	b480      	push	{r7}
    5416:	b083      	sub	sp, #12
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
    541c:	687b      	ldr	r3, [r7, #4]
    541e:	691b      	ldr	r3, [r3, #16]
    5420:	f003 0302 	and.w	r3, r3, #2
    5424:	2b00      	cmp	r3, #0
    5426:	d001      	beq.n	542c <spi_is_tx_ready+0x18>
		return 1;
    5428:	2301      	movs	r3, #1
    542a:	e000      	b.n	542e <spi_is_tx_ready+0x1a>
	} else {
		return 0;
    542c:	2300      	movs	r3, #0
	}
}
    542e:	4618      	mov	r0, r3
    5430:	370c      	adds	r7, #12
    5432:	46bd      	mov	sp, r7
    5434:	f85d 7b04 	ldr.w	r7, [sp], #4
    5438:	4770      	bx	lr
    543a:	bf00      	nop

0000543c <spi_is_rx_ready>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
    543c:	b480      	push	{r7}
    543e:	b083      	sub	sp, #12
    5440:	af00      	add	r7, sp, #0
    5442:	6078      	str	r0, [r7, #4]
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	691a      	ldr	r2, [r3, #16]
    5448:	f240 2301 	movw	r3, #513	; 0x201
    544c:	4013      	ands	r3, r2
    544e:	f240 2201 	movw	r2, #513	; 0x201
    5452:	4293      	cmp	r3, r2
    5454:	d101      	bne.n	545a <spi_is_rx_ready+0x1e>
			== (SPI_SR_RDRF | SPI_SR_TXEMPTY)) {
		return 1;
    5456:	2301      	movs	r3, #1
    5458:	e000      	b.n	545c <spi_is_rx_ready+0x20>
	} else {
		return 0;
    545a:	2300      	movs	r3, #0
	}
}
    545c:	4618      	mov	r0, r3
    545e:	370c      	adds	r7, #12
    5460:	46bd      	mov	sp, r7
    5462:	f85d 7b04 	ldr.w	r7, [sp], #4
    5466:	4770      	bx	lr

00005468 <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
    5468:	b580      	push	{r7, lr}
    546a:	b082      	sub	sp, #8
    546c:	af00      	add	r7, sp, #0
    546e:	6078      	str	r0, [r7, #4]
    5470:	460b      	mov	r3, r1
    5472:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
    5474:	78fb      	ldrb	r3, [r7, #3]
    5476:	b29b      	uxth	r3, r3
    5478:	6878      	ldr	r0, [r7, #4]
    547a:	4619      	mov	r1, r3
    547c:	4b02      	ldr	r3, [pc, #8]	; (5488 <spi_write_single+0x20>)
    547e:	4798      	blx	r3
}
    5480:	3708      	adds	r7, #8
    5482:	46bd      	mov	sp, r7
    5484:	bd80      	pop	{r7, pc}
    5486:	bf00      	nop
    5488:	000053b5 	.word	0x000053b5

0000548c <spi_read_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
    548c:	b580      	push	{r7, lr}
    548e:	b082      	sub	sp, #8
    5490:	af00      	add	r7, sp, #0
    5492:	6078      	str	r0, [r7, #4]
    5494:	6039      	str	r1, [r7, #0]
	*data = (uint8_t)spi_get(p_spi);
    5496:	6878      	ldr	r0, [r7, #4]
    5498:	4b04      	ldr	r3, [pc, #16]	; (54ac <spi_read_single+0x20>)
    549a:	4798      	blx	r3
    549c:	4603      	mov	r3, r0
    549e:	b2da      	uxtb	r2, r3
    54a0:	683b      	ldr	r3, [r7, #0]
    54a2:	701a      	strb	r2, [r3, #0]
}
    54a4:	3708      	adds	r7, #8
    54a6:	46bd      	mov	sp, r7
    54a8:	bd80      	pop	{r7, pc}
    54aa:	bf00      	nop
    54ac:	000053d1 	.word	0x000053d1

000054b0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b082      	sub	sp, #8
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
	spi_enable_clock(p_spi);
    54b8:	6878      	ldr	r0, [r7, #4]
    54ba:	4b0f      	ldr	r3, [pc, #60]	; (54f8 <spi_master_init+0x48>)
    54bc:	4798      	blx	r3
	spi_reset(p_spi);
    54be:	6878      	ldr	r0, [r7, #4]
    54c0:	4b0e      	ldr	r3, [pc, #56]	; (54fc <spi_master_init+0x4c>)
    54c2:	4798      	blx	r3
	spi_set_master_mode(p_spi);
    54c4:	6878      	ldr	r0, [r7, #4]
    54c6:	4b0e      	ldr	r3, [pc, #56]	; (5500 <spi_master_init+0x50>)
    54c8:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
    54ca:	6878      	ldr	r0, [r7, #4]
    54cc:	4b0d      	ldr	r3, [pc, #52]	; (5504 <spi_master_init+0x54>)
    54ce:	4798      	blx	r3
	spi_disable_loopback(p_spi);
    54d0:	6878      	ldr	r0, [r7, #4]
    54d2:	4b0d      	ldr	r3, [pc, #52]	; (5508 <spi_master_init+0x58>)
    54d4:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
    54d6:	6878      	ldr	r0, [r7, #4]
    54d8:	2100      	movs	r1, #0
    54da:	4b0c      	ldr	r3, [pc, #48]	; (550c <spi_master_init+0x5c>)
    54dc:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
    54de:	6878      	ldr	r0, [r7, #4]
    54e0:	4b0b      	ldr	r3, [pc, #44]	; (5510 <spi_master_init+0x60>)
    54e2:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
    54e4:	6878      	ldr	r0, [r7, #4]
    54e6:	4b0b      	ldr	r3, [pc, #44]	; (5514 <spi_master_init+0x64>)
    54e8:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
    54ea:	6878      	ldr	r0, [r7, #4]
    54ec:	2100      	movs	r1, #0
    54ee:	4b0a      	ldr	r3, [pc, #40]	; (5518 <spi_master_init+0x68>)
    54f0:	4798      	blx	r3
}
    54f2:	3708      	adds	r7, #8
    54f4:	46bd      	mov	sp, r7
    54f6:	bd80      	pop	{r7, pc}
    54f8:	00007b5d 	.word	0x00007b5d
    54fc:	000052b9 	.word	0x000052b9
    5500:	000052ed 	.word	0x000052ed
    5504:	00005375 	.word	0x00005375
    5508:	00005395 	.word	0x00005395
    550c:	00007b75 	.word	0x00007b75
    5510:	0000530d 	.word	0x0000530d
    5514:	0000532d 	.word	0x0000532d
    5518:	00007ba9 	.word	0x00007ba9

0000551c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
    551c:	b590      	push	{r4, r7, lr}
    551e:	b087      	sub	sp, #28
    5520:	af00      	add	r7, sp, #0
    5522:	60f8      	str	r0, [r7, #12]
    5524:	60b9      	str	r1, [r7, #8]
    5526:	603b      	str	r3, [r7, #0]
    5528:	4613      	mov	r3, r2
    552a:	71fb      	strb	r3, [r7, #7]
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
    552c:	4b21      	ldr	r3, [pc, #132]	; (55b4 <spi_master_setup_device+0x98>)
    552e:	4798      	blx	r3
    5530:	4603      	mov	r3, r0
    5532:	6838      	ldr	r0, [r7, #0]
    5534:	4619      	mov	r1, r3
    5536:	4b20      	ldr	r3, [pc, #128]	; (55b8 <spi_master_setup_device+0x9c>)
    5538:	4798      	blx	r3
    553a:	4603      	mov	r3, r0
    553c:	82fb      	strh	r3, [r7, #22]
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	68f8      	ldr	r0, [r7, #12]
    5544:	4619      	mov	r1, r3
    5546:	2200      	movs	r2, #0
    5548:	2300      	movs	r3, #0
    554a:	4c1c      	ldr	r4, [pc, #112]	; (55bc <spi_master_setup_device+0xa0>)
    554c:	47a0      	blx	r4
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	681b      	ldr	r3, [r3, #0]
    5552:	68f8      	ldr	r0, [r7, #12]
    5554:	4619      	mov	r1, r3
    5556:	2208      	movs	r2, #8
    5558:	4b19      	ldr	r3, [pc, #100]	; (55c0 <spi_master_setup_device+0xa4>)
    555a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
    555c:	68bb      	ldr	r3, [r7, #8]
    555e:	681a      	ldr	r2, [r3, #0]
    5560:	8afb      	ldrh	r3, [r7, #22]
    5562:	b2db      	uxtb	r3, r3
    5564:	68f8      	ldr	r0, [r7, #12]
    5566:	4611      	mov	r1, r2
    5568:	461a      	mov	r2, r3
    556a:	4b16      	ldr	r3, [pc, #88]	; (55c4 <spi_master_setup_device+0xa8>)
    556c:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	68f8      	ldr	r0, [r7, #12]
    5574:	4619      	mov	r1, r3
    5576:	2208      	movs	r2, #8
    5578:	4b13      	ldr	r3, [pc, #76]	; (55c8 <spi_master_setup_device+0xac>)
    557a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
    557c:	68bb      	ldr	r3, [r7, #8]
    557e:	681a      	ldr	r2, [r3, #0]
    5580:	79fb      	ldrb	r3, [r7, #7]
    5582:	085b      	lsrs	r3, r3, #1
    5584:	b2db      	uxtb	r3, r3
    5586:	68f8      	ldr	r0, [r7, #12]
    5588:	4611      	mov	r1, r2
    558a:	461a      	mov	r2, r3
    558c:	4b0f      	ldr	r3, [pc, #60]	; (55cc <spi_master_setup_device+0xb0>)
    558e:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
    5590:	68bb      	ldr	r3, [r7, #8]
    5592:	681a      	ldr	r2, [r3, #0]
    5594:	79fb      	ldrb	r3, [r7, #7]
    5596:	f003 0301 	and.w	r3, r3, #1
    559a:	2b00      	cmp	r3, #0
    559c:	bf14      	ite	ne
    559e:	2300      	movne	r3, #0
    55a0:	2301      	moveq	r3, #1
    55a2:	b2db      	uxtb	r3, r3
    55a4:	68f8      	ldr	r0, [r7, #12]
    55a6:	4611      	mov	r1, r2
    55a8:	461a      	mov	r2, r3
    55aa:	4b09      	ldr	r3, [pc, #36]	; (55d0 <spi_master_setup_device+0xb4>)
    55ac:	4798      	blx	r3
}
    55ae:	371c      	adds	r7, #28
    55b0:	46bd      	mov	sp, r7
    55b2:	bd90      	pop	{r4, r7, pc}
    55b4:	000052a5 	.word	0x000052a5
    55b8:	00007d65 	.word	0x00007d65
    55bc:	00007df5 	.word	0x00007df5
    55c0:	00007d1d 	.word	0x00007d1d
    55c4:	00007da5 	.word	0x00007da5
    55c8:	00007c79 	.word	0x00007c79
    55cc:	00007bd9 	.word	0x00007bd9
    55d0:	00007c29 	.word	0x00007c29

000055d4 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b082      	sub	sp, #8
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
    55dc:	6039      	str	r1, [r7, #0]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
    55de:	6878      	ldr	r0, [r7, #4]
    55e0:	4b10      	ldr	r3, [pc, #64]	; (5624 <spi_select_device+0x50>)
    55e2:	4798      	blx	r3
    55e4:	4603      	mov	r3, r0
    55e6:	2b00      	cmp	r3, #0
    55e8:	d00a      	beq.n	5600 <spi_select_device+0x2c>
		if (device->id < MAX_NUM_WITH_DECODER) {
    55ea:	683b      	ldr	r3, [r7, #0]
    55ec:	681b      	ldr	r3, [r3, #0]
    55ee:	2b0f      	cmp	r3, #15
    55f0:	d814      	bhi.n	561c <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
    55f2:	683b      	ldr	r3, [r7, #0]
    55f4:	681b      	ldr	r3, [r3, #0]
    55f6:	6878      	ldr	r0, [r7, #4]
    55f8:	4619      	mov	r1, r3
    55fa:	4b0b      	ldr	r3, [pc, #44]	; (5628 <spi_select_device+0x54>)
    55fc:	4798      	blx	r3
    55fe:	e00d      	b.n	561c <spi_select_device+0x48>
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
    5600:	683b      	ldr	r3, [r7, #0]
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	2b03      	cmp	r3, #3
    5606:	d809      	bhi.n	561c <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
    5608:	683b      	ldr	r3, [r7, #0]
    560a:	681b      	ldr	r3, [r3, #0]
    560c:	2201      	movs	r2, #1
    560e:	fa02 f303 	lsl.w	r3, r2, r3
    5612:	43db      	mvns	r3, r3
    5614:	6878      	ldr	r0, [r7, #4]
    5616:	4619      	mov	r1, r3
    5618:	4b03      	ldr	r3, [pc, #12]	; (5628 <spi_select_device+0x54>)
    561a:	4798      	blx	r3
		}
	}
}
    561c:	3708      	adds	r7, #8
    561e:	46bd      	mov	sp, r7
    5620:	bd80      	pop	{r7, pc}
    5622:	bf00      	nop
    5624:	0000534d 	.word	0x0000534d
    5628:	00007b75 	.word	0x00007b75

0000562c <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
    5634:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
    5636:	bf00      	nop
    5638:	6878      	ldr	r0, [r7, #4]
    563a:	4b07      	ldr	r3, [pc, #28]	; (5658 <spi_deselect_device+0x2c>)
    563c:	4798      	blx	r3
    563e:	4603      	mov	r3, r0
    5640:	2b00      	cmp	r3, #0
    5642:	d0f9      	beq.n	5638 <spi_deselect_device+0xc>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
    5644:	6878      	ldr	r0, [r7, #4]
    5646:	210f      	movs	r1, #15
    5648:	4b04      	ldr	r3, [pc, #16]	; (565c <spi_deselect_device+0x30>)
    564a:	4798      	blx	r3

	// Last transfer, so de-assert the current NPCS if CSAAT is set.
	spi_set_lastxfer(p_spi);
    564c:	6878      	ldr	r0, [r7, #4]
    564e:	4b04      	ldr	r3, [pc, #16]	; (5660 <spi_deselect_device+0x34>)
    5650:	4798      	blx	r3

}
    5652:	3708      	adds	r7, #8
    5654:	46bd      	mov	sp, r7
    5656:	bd80      	pop	{r7, pc}
    5658:	000053ed 	.word	0x000053ed
    565c:	00007b75 	.word	0x00007b75
    5660:	000052d1 	.word	0x000052d1

00005664 <spi_write_packet>:
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
    5664:	b580      	push	{r7, lr}
    5666:	b088      	sub	sp, #32
    5668:	af00      	add	r7, sp, #0
    566a:	60f8      	str	r0, [r7, #12]
    566c:	60b9      	str	r1, [r7, #8]
    566e:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
    5670:	f643 2398 	movw	r3, #15000	; 0x3a98
    5674:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
    5676:	2300      	movs	r3, #0
    5678:	61bb      	str	r3, [r7, #24]
	uint8_t val;

	while (len) {
    567a:	e020      	b.n	56be <spi_write_packet+0x5a>
		timeout = SPI_TIMEOUT;
    567c:	f643 2398 	movw	r3, #15000	; 0x3a98
    5680:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
    5682:	e006      	b.n	5692 <spi_write_packet+0x2e>
			if (!timeout--) {
    5684:	69fb      	ldr	r3, [r7, #28]
    5686:	1e5a      	subs	r2, r3, #1
    5688:	61fa      	str	r2, [r7, #28]
    568a:	2b00      	cmp	r3, #0
    568c:	d101      	bne.n	5692 <spi_write_packet+0x2e>
				return ERR_TIMEOUT;
    568e:	23fd      	movs	r3, #253	; 0xfd
    5690:	e019      	b.n	56c6 <spi_write_packet+0x62>
	uint32_t i = 0;
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
    5692:	68f8      	ldr	r0, [r7, #12]
    5694:	4b0e      	ldr	r3, [pc, #56]	; (56d0 <spi_write_packet+0x6c>)
    5696:	4798      	blx	r3
    5698:	4603      	mov	r3, r0
    569a:	2b00      	cmp	r3, #0
    569c:	d0f2      	beq.n	5684 <spi_write_packet+0x20>
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		val = data[i];
    569e:	68ba      	ldr	r2, [r7, #8]
    56a0:	69bb      	ldr	r3, [r7, #24]
    56a2:	4413      	add	r3, r2
    56a4:	781b      	ldrb	r3, [r3, #0]
    56a6:	75fb      	strb	r3, [r7, #23]
		spi_write_single(p_spi, val);
    56a8:	7dfb      	ldrb	r3, [r7, #23]
    56aa:	68f8      	ldr	r0, [r7, #12]
    56ac:	4619      	mov	r1, r3
    56ae:	4b09      	ldr	r3, [pc, #36]	; (56d4 <spi_write_packet+0x70>)
    56b0:	4798      	blx	r3
		i++;
    56b2:	69bb      	ldr	r3, [r7, #24]
    56b4:	3301      	adds	r3, #1
    56b6:	61bb      	str	r3, [r7, #24]
		len--;
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	3b01      	subs	r3, #1
    56bc:	607b      	str	r3, [r7, #4]
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	2b00      	cmp	r3, #0
    56c2:	d1db      	bne.n	567c <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
    56c4:	2300      	movs	r3, #0
    56c6:	b25b      	sxtb	r3, r3
}
    56c8:	4618      	mov	r0, r3
    56ca:	3720      	adds	r7, #32
    56cc:	46bd      	mov	sp, r7
    56ce:	bd80      	pop	{r7, pc}
    56d0:	00005415 	.word	0x00005415
    56d4:	00005469 	.word	0x00005469

000056d8 <spi_read_packet>:
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
    56d8:	b580      	push	{r7, lr}
    56da:	b088      	sub	sp, #32
    56dc:	af00      	add	r7, sp, #0
    56de:	60f8      	str	r0, [r7, #12]
    56e0:	60b9      	str	r1, [r7, #8]
    56e2:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
    56e4:	f643 2398 	movw	r3, #15000	; 0x3a98
    56e8:	61fb      	str	r3, [r7, #28]
	uint8_t val;
	uint32_t i = 0;
    56ea:	2300      	movs	r3, #0
    56ec:	61bb      	str	r3, [r7, #24]

	while (len) {
    56ee:	e036      	b.n	575e <spi_read_packet+0x86>
		timeout = SPI_TIMEOUT;
    56f0:	f643 2398 	movw	r3, #15000	; 0x3a98
    56f4:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
    56f6:	e006      	b.n	5706 <spi_read_packet+0x2e>
			if (!timeout--) {
    56f8:	69fb      	ldr	r3, [r7, #28]
    56fa:	1e5a      	subs	r2, r3, #1
    56fc:	61fa      	str	r2, [r7, #28]
    56fe:	2b00      	cmp	r3, #0
    5700:	d101      	bne.n	5706 <spi_read_packet+0x2e>
				return ERR_TIMEOUT;
    5702:	23fd      	movs	r3, #253	; 0xfd
    5704:	e02f      	b.n	5766 <spi_read_packet+0x8e>
	uint8_t val;
	uint32_t i = 0;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
    5706:	68f8      	ldr	r0, [r7, #12]
    5708:	4b19      	ldr	r3, [pc, #100]	; (5770 <spi_read_packet+0x98>)
    570a:	4798      	blx	r3
    570c:	4603      	mov	r3, r0
    570e:	2b00      	cmp	r3, #0
    5710:	d0f2      	beq.n	56f8 <spi_read_packet+0x20>
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
    5712:	68f8      	ldr	r0, [r7, #12]
    5714:	21ff      	movs	r1, #255	; 0xff
    5716:	4b17      	ldr	r3, [pc, #92]	; (5774 <spi_read_packet+0x9c>)
    5718:	4798      	blx	r3

		timeout = SPI_TIMEOUT;
    571a:	f643 2398 	movw	r3, #15000	; 0x3a98
    571e:	61fb      	str	r3, [r7, #28]
		while (!spi_is_rx_ready(p_spi)) {
    5720:	e006      	b.n	5730 <spi_read_packet+0x58>
			if (!timeout--) {
    5722:	69fb      	ldr	r3, [r7, #28]
    5724:	1e5a      	subs	r2, r3, #1
    5726:	61fa      	str	r2, [r7, #28]
    5728:	2b00      	cmp	r3, #0
    572a:	d101      	bne.n	5730 <spi_read_packet+0x58>
				return ERR_TIMEOUT;
    572c:	23fd      	movs	r3, #253	; 0xfd
    572e:	e01a      	b.n	5766 <spi_read_packet+0x8e>
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);

		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
    5730:	68f8      	ldr	r0, [r7, #12]
    5732:	4b11      	ldr	r3, [pc, #68]	; (5778 <spi_read_packet+0xa0>)
    5734:	4798      	blx	r3
    5736:	4603      	mov	r3, r0
    5738:	2b00      	cmp	r3, #0
    573a:	d0f2      	beq.n	5722 <spi_read_packet+0x4a>
			if (!timeout--) {
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(p_spi, &val);
    573c:	f107 0317 	add.w	r3, r7, #23
    5740:	68f8      	ldr	r0, [r7, #12]
    5742:	4619      	mov	r1, r3
    5744:	4b0d      	ldr	r3, [pc, #52]	; (577c <spi_read_packet+0xa4>)
    5746:	4798      	blx	r3

		data[i] = val;
    5748:	68ba      	ldr	r2, [r7, #8]
    574a:	69bb      	ldr	r3, [r7, #24]
    574c:	4413      	add	r3, r2
    574e:	7dfa      	ldrb	r2, [r7, #23]
    5750:	701a      	strb	r2, [r3, #0]
		i++;
    5752:	69bb      	ldr	r3, [r7, #24]
    5754:	3301      	adds	r3, #1
    5756:	61bb      	str	r3, [r7, #24]
		len--;
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	3b01      	subs	r3, #1
    575c:	607b      	str	r3, [r7, #4]
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
    575e:	687b      	ldr	r3, [r7, #4]
    5760:	2b00      	cmp	r3, #0
    5762:	d1c5      	bne.n	56f0 <spi_read_packet+0x18>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
    5764:	2300      	movs	r3, #0
    5766:	b25b      	sxtb	r3, r3
}
    5768:	4618      	mov	r0, r3
    576a:	3720      	adds	r7, #32
    576c:	46bd      	mov	sp, r7
    576e:	bd80      	pop	{r7, pc}
    5770:	00005415 	.word	0x00005415
    5774:	00005469 	.word	0x00005469
    5778:	0000543d 	.word	0x0000543d
    577c:	0000548d 	.word	0x0000548d

00005780 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    5780:	b480      	push	{r7}
    5782:	b083      	sub	sp, #12
    5784:	af00      	add	r7, sp, #0
    5786:	4603      	mov	r3, r0
    5788:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    578a:	79fb      	ldrb	r3, [r7, #7]
    578c:	2b0d      	cmp	r3, #13
    578e:	d82b      	bhi.n	57e8 <dfll_priv_get_source_hz+0x68>
    5790:	a201      	add	r2, pc, #4	; (adr r2, 5798 <dfll_priv_get_source_hz+0x18>)
    5792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5796:	bf00      	nop
    5798:	000057d1 	.word	0x000057d1
    579c:	000057d5 	.word	0x000057d5
    57a0:	000057e9 	.word	0x000057e9
    57a4:	000057db 	.word	0x000057db
    57a8:	000057df 	.word	0x000057df
    57ac:	000057e9 	.word	0x000057e9
    57b0:	000057e9 	.word	0x000057e9
    57b4:	000057e9 	.word	0x000057e9
    57b8:	000057e9 	.word	0x000057e9
    57bc:	000057e9 	.word	0x000057e9
    57c0:	000057e9 	.word	0x000057e9
    57c4:	000057e9 	.word	0x000057e9
    57c8:	000057e9 	.word	0x000057e9
    57cc:	000057e3 	.word	0x000057e3
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    57d0:	4b09      	ldr	r3, [pc, #36]	; (57f8 <dfll_priv_get_source_hz+0x78>)
    57d2:	e00a      	b.n	57ea <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    57d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    57d8:	e007      	b.n	57ea <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    57da:	4b08      	ldr	r3, [pc, #32]	; (57fc <dfll_priv_get_source_hz+0x7c>)
    57dc:	e005      	b.n	57ea <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    57de:	4b08      	ldr	r3, [pc, #32]	; (5800 <dfll_priv_get_source_hz+0x80>)
    57e0:	e003      	b.n	57ea <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    57e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    57e6:	e000      	b.n	57ea <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    57e8:	2300      	movs	r3, #0
	}
}
    57ea:	4618      	mov	r0, r3
    57ec:	370c      	adds	r7, #12
    57ee:	46bd      	mov	sp, r7
    57f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f4:	4770      	bx	lr
    57f6:	bf00      	nop
    57f8:	0001c138 	.word	0x0001c138
    57fc:	00b71b00 	.word	0x00b71b00
    5800:	04c4b400 	.word	0x04c4b400

00005804 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    5804:	b580      	push	{r7, lr}
    5806:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    5808:	2001      	movs	r0, #1
    580a:	4b04      	ldr	r3, [pc, #16]	; (581c <sysclk_get_main_hz+0x18>)
    580c:	4798      	blx	r3
    580e:	4603      	mov	r3, r0
    5810:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    5814:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    5818:	4618      	mov	r0, r3
    581a:	bd80      	pop	{r7, pc}
    581c:	00005781 	.word	0x00005781

00005820 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    5820:	b580      	push	{r7, lr}
    5822:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    5824:	4b02      	ldr	r3, [pc, #8]	; (5830 <sysclk_get_cpu_hz+0x10>)
    5826:	4798      	blx	r3
    5828:	4603      	mov	r3, r0
}
    582a:	4618      	mov	r0, r3
    582c:	bd80      	pop	{r7, pc}
    582e:	bf00      	nop
    5830:	00005805 	.word	0x00005805

00005834 <usart_spi_init>:
 *
 * \param p_usart Pointer to Base address of the USART instance.
 *
 */
void usart_spi_init(Usart *p_usart)
{
    5834:	b580      	push	{r7, lr}
    5836:	b084      	sub	sp, #16
    5838:	af00      	add	r7, sp, #0
    583a:	6078      	str	r0, [r7, #4]
	uint8_t uc_id;

#ifdef USART0
	if (p_usart == USART0) {
    583c:	687a      	ldr	r2, [r7, #4]
    583e:	4b10      	ldr	r3, [pc, #64]	; (5880 <usart_spi_init+0x4c>)
    5840:	429a      	cmp	r2, r3
    5842:	d102      	bne.n	584a <usart_spi_init+0x16>
		uc_id = ID_USART0;
    5844:	2308      	movs	r3, #8
    5846:	73fb      	strb	r3, [r7, #15]
    5848:	e013      	b.n	5872 <usart_spi_init+0x3e>
	}
#endif

#ifdef USART1
	else if(p_usart == USART1) {
    584a:	687a      	ldr	r2, [r7, #4]
    584c:	4b0d      	ldr	r3, [pc, #52]	; (5884 <usart_spi_init+0x50>)
    584e:	429a      	cmp	r2, r3
    5850:	d102      	bne.n	5858 <usart_spi_init+0x24>
		uc_id = ID_USART1;
    5852:	2309      	movs	r3, #9
    5854:	73fb      	strb	r3, [r7, #15]
    5856:	e00c      	b.n	5872 <usart_spi_init+0x3e>
	}
#endif

#ifdef USART2
	else if(p_usart == USART2) {
    5858:	687a      	ldr	r2, [r7, #4]
    585a:	4b0b      	ldr	r3, [pc, #44]	; (5888 <usart_spi_init+0x54>)
    585c:	429a      	cmp	r2, r3
    585e:	d102      	bne.n	5866 <usart_spi_init+0x32>
		uc_id = ID_USART2;
    5860:	230a      	movs	r3, #10
    5862:	73fb      	strb	r3, [r7, #15]
    5864:	e005      	b.n	5872 <usart_spi_init+0x3e>
	}
#endif

#ifdef USART3
	else if(p_usart == USART3) {
    5866:	687a      	ldr	r2, [r7, #4]
    5868:	4b08      	ldr	r3, [pc, #32]	; (588c <usart_spi_init+0x58>)
    586a:	429a      	cmp	r2, r3
    586c:	d101      	bne.n	5872 <usart_spi_init+0x3e>
		uc_id = ID_USART3;
    586e:	230b      	movs	r3, #11
    5870:	73fb      	strb	r3, [r7, #15]
	}
#endif

#if SAM4L
	sysclk_enable_peripheral_clock(p_usart);
    5872:	6878      	ldr	r0, [r7, #4]
    5874:	4b06      	ldr	r3, [pc, #24]	; (5890 <usart_spi_init+0x5c>)
    5876:	4798      	blx	r3
#else
	sysclk_enable_peripheral_clock(uc_id);
#endif
}
    5878:	3710      	adds	r7, #16
    587a:	46bd      	mov	sp, r7
    587c:	bd80      	pop	{r7, pc}
    587e:	bf00      	nop
    5880:	40024000 	.word	0x40024000
    5884:	40028000 	.word	0x40028000
    5888:	4002c000 	.word	0x4002c000
    588c:	40030000 	.word	0x40030000
    5890:	000098ed 	.word	0x000098ed

00005894 <usart_spi_setup_device>:
 * \param sel_id    Board specific select id.
 */
void usart_spi_setup_device(Usart *p_usart, struct usart_spi_device *device, 
     spi_flags_t flags, unsigned long baud_rate,
     board_spi_select_id_t sel_id)
{
    5894:	b580      	push	{r7, lr}
    5896:	b088      	sub	sp, #32
    5898:	af00      	add	r7, sp, #0
    589a:	60f8      	str	r0, [r7, #12]
    589c:	60b9      	str	r1, [r7, #8]
    589e:	603b      	str	r3, [r7, #0]
    58a0:	4613      	mov	r3, r2
    58a2:	71fb      	strb	r3, [r7, #7]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	UNUSED(sel_id);

	/* Basic usart SPI configuration. */
	opt.baudrate = baud_rate;
    58a4:	683b      	ldr	r3, [r7, #0]
    58a6:	613b      	str	r3, [r7, #16]
	opt.char_length = US_MR_CHRL_8_BIT;
    58a8:	23c0      	movs	r3, #192	; 0xc0
    58aa:	617b      	str	r3, [r7, #20]
	opt.spi_mode = flags;
    58ac:	79fb      	ldrb	r3, [r7, #7]
    58ae:	61bb      	str	r3, [r7, #24]
	opt.channel_mode = US_MR_CHMODE_NORMAL;
    58b0:	2300      	movs	r3, #0
    58b2:	61fb      	str	r3, [r7, #28]
	
	/* Initialize the USART module as SPI master. */
	usart_init_spi_master(p_usart, &opt, sysclk_get_cpu_hz());
    58b4:	4b09      	ldr	r3, [pc, #36]	; (58dc <usart_spi_setup_device+0x48>)
    58b6:	4798      	blx	r3
    58b8:	4603      	mov	r3, r0
    58ba:	f107 0210 	add.w	r2, r7, #16
    58be:	68f8      	ldr	r0, [r7, #12]
    58c0:	4611      	mov	r1, r2
    58c2:	461a      	mov	r2, r3
    58c4:	4b06      	ldr	r3, [pc, #24]	; (58e0 <usart_spi_setup_device+0x4c>)
    58c6:	4798      	blx	r3

	usart_enable_rx(p_usart);
    58c8:	68f8      	ldr	r0, [r7, #12]
    58ca:	4b06      	ldr	r3, [pc, #24]	; (58e4 <usart_spi_setup_device+0x50>)
    58cc:	4798      	blx	r3
	usart_enable_tx(p_usart);
    58ce:	68f8      	ldr	r0, [r7, #12]
    58d0:	4b05      	ldr	r3, [pc, #20]	; (58e8 <usart_spi_setup_device+0x54>)
    58d2:	4798      	blx	r3
}
    58d4:	3720      	adds	r7, #32
    58d6:	46bd      	mov	sp, r7
    58d8:	bd80      	pop	{r7, pc}
    58da:	bf00      	nop
    58dc:	00005821 	.word	0x00005821
    58e0:	00007ff9 	.word	0x00007ff9
    58e4:	00008139 	.word	0x00008139
    58e8:	00008109 	.word	0x00008109

000058ec <usart_spi_write_single>:
 * \param p_usart Base address of the USART instance.
 * \param data    The data to be sent out. 
 *
 */
void usart_spi_write_single(Usart *p_usart, uint8_t data)
{
    58ec:	b580      	push	{r7, lr}
    58ee:	b082      	sub	sp, #8
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
    58f4:	460b      	mov	r3, r1
    58f6:	70fb      	strb	r3, [r7, #3]
	usart_putchar(p_usart, data);
    58f8:	78fb      	ldrb	r3, [r7, #3]
    58fa:	6878      	ldr	r0, [r7, #4]
    58fc:	4619      	mov	r1, r3
    58fe:	4b02      	ldr	r3, [pc, #8]	; (5908 <usart_spi_write_single+0x1c>)
    5900:	4798      	blx	r3
}
    5902:	3708      	adds	r7, #8
    5904:	46bd      	mov	sp, r7
    5906:	bd80      	pop	{r7, pc}
    5908:	00008229 	.word	0x00008229

0000590c <usart_spi_select_device>:
 * \param p_usart  Base address of the USART instance.
 * \param device   SPI device.
 *
 */
void usart_spi_select_device(Usart *p_usart, struct usart_spi_device *device)
{
    590c:	b580      	push	{r7, lr}
    590e:	b082      	sub	sp, #8
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
    5914:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	
	usart_spi_force_chip_select(p_usart);
    5916:	6878      	ldr	r0, [r7, #4]
    5918:	4b02      	ldr	r3, [pc, #8]	; (5924 <usart_spi_select_device+0x18>)
    591a:	4798      	blx	r3
}
    591c:	3708      	adds	r7, #8
    591e:	46bd      	mov	sp, r7
    5920:	bd80      	pop	{r7, pc}
    5922:	bf00      	nop
    5924:	000081bd 	.word	0x000081bd

00005928 <usart_spi_deselect_device>:
 *
 * \param p_usart Base address of the USART instance.
 * \param device  SPI device.
 */
void usart_spi_deselect_device(Usart *p_usart, struct usart_spi_device *device)
{
    5928:	b580      	push	{r7, lr}
    592a:	b082      	sub	sp, #8
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
    5930:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	
	usart_spi_release_chip_select(p_usart);
    5932:	6878      	ldr	r0, [r7, #4]
    5934:	4b02      	ldr	r3, [pc, #8]	; (5940 <usart_spi_deselect_device+0x18>)
    5936:	4798      	blx	r3
}
    5938:	3708      	adds	r7, #8
    593a:	46bd      	mov	sp, r7
    593c:	bd80      	pop	{r7, pc}
    593e:	bf00      	nop
    5940:	000081d9 	.word	0x000081d9

00005944 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    5944:	b480      	push	{r7}
    5946:	b083      	sub	sp, #12
    5948:	af00      	add	r7, sp, #0
    594a:	4603      	mov	r3, r0
    594c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    594e:	4b08      	ldr	r3, [pc, #32]	; (5970 <NVIC_EnableIRQ+0x2c>)
    5950:	f997 2007 	ldrsb.w	r2, [r7, #7]
    5954:	0952      	lsrs	r2, r2, #5
    5956:	79f9      	ldrb	r1, [r7, #7]
    5958:	f001 011f 	and.w	r1, r1, #31
    595c:	2001      	movs	r0, #1
    595e:	fa00 f101 	lsl.w	r1, r0, r1
    5962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5966:	370c      	adds	r7, #12
    5968:	46bd      	mov	sp, r7
    596a:	f85d 7b04 	ldr.w	r7, [sp], #4
    596e:	4770      	bx	lr
    5970:	e000e100 	.word	0xe000e100

00005974 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    5974:	b480      	push	{r7}
    5976:	b083      	sub	sp, #12
    5978:	af00      	add	r7, sp, #0
    597a:	4603      	mov	r3, r0
    597c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    597e:	4b09      	ldr	r3, [pc, #36]	; (59a4 <NVIC_ClearPendingIRQ+0x30>)
    5980:	f997 2007 	ldrsb.w	r2, [r7, #7]
    5984:	0952      	lsrs	r2, r2, #5
    5986:	79f9      	ldrb	r1, [r7, #7]
    5988:	f001 011f 	and.w	r1, r1, #31
    598c:	2001      	movs	r0, #1
    598e:	fa00 f101 	lsl.w	r1, r0, r1
    5992:	3260      	adds	r2, #96	; 0x60
    5994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5998:	370c      	adds	r7, #12
    599a:	46bd      	mov	sp, r7
    599c:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a0:	4770      	bx	lr
    59a2:	bf00      	nop
    59a4:	e000e100 	.word	0xe000e100

000059a8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    59a8:	b480      	push	{r7}
    59aa:	b083      	sub	sp, #12
    59ac:	af00      	add	r7, sp, #0
    59ae:	4603      	mov	r3, r0
    59b0:	6039      	str	r1, [r7, #0]
    59b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    59b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    59b8:	2b00      	cmp	r3, #0
    59ba:	da0b      	bge.n	59d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    59bc:	490d      	ldr	r1, [pc, #52]	; (59f4 <NVIC_SetPriority+0x4c>)
    59be:	79fb      	ldrb	r3, [r7, #7]
    59c0:	f003 030f 	and.w	r3, r3, #15
    59c4:	3b04      	subs	r3, #4
    59c6:	683a      	ldr	r2, [r7, #0]
    59c8:	b2d2      	uxtb	r2, r2
    59ca:	0112      	lsls	r2, r2, #4
    59cc:	b2d2      	uxtb	r2, r2
    59ce:	440b      	add	r3, r1
    59d0:	761a      	strb	r2, [r3, #24]
    59d2:	e009      	b.n	59e8 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    59d4:	4908      	ldr	r1, [pc, #32]	; (59f8 <NVIC_SetPriority+0x50>)
    59d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    59da:	683a      	ldr	r2, [r7, #0]
    59dc:	b2d2      	uxtb	r2, r2
    59de:	0112      	lsls	r2, r2, #4
    59e0:	b2d2      	uxtb	r2, r2
    59e2:	440b      	add	r3, r1
    59e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    59e8:	370c      	adds	r7, #12
    59ea:	46bd      	mov	sp, r7
    59ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f0:	4770      	bx	lr
    59f2:	bf00      	nop
    59f4:	e000ed00 	.word	0xe000ed00
    59f8:	e000e100 	.word	0xe000e100

000059fc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    59fc:	b480      	push	{r7}
    59fe:	b083      	sub	sp, #12
    5a00:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5a02:	f3ef 8310 	mrs	r3, PRIMASK
    5a06:	603b      	str	r3, [r7, #0]
  return(result);
    5a08:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	bf14      	ite	ne
    5a0e:	2300      	movne	r3, #0
    5a10:	2301      	moveq	r3, #1
    5a12:	b2db      	uxtb	r3, r3
    5a14:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    5a16:	b672      	cpsid	i
    5a18:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5a1c:	4b04      	ldr	r3, [pc, #16]	; (5a30 <cpu_irq_save+0x34>)
    5a1e:	2200      	movs	r2, #0
    5a20:	701a      	strb	r2, [r3, #0]
	return flags;
    5a22:	687b      	ldr	r3, [r7, #4]
}
    5a24:	4618      	mov	r0, r3
    5a26:	370c      	adds	r7, #12
    5a28:	46bd      	mov	sp, r7
    5a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a2e:	4770      	bx	lr
    5a30:	200004b0 	.word	0x200004b0

00005a34 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    5a34:	b480      	push	{r7}
    5a36:	b083      	sub	sp, #12
    5a38:	af00      	add	r7, sp, #0
    5a3a:	6078      	str	r0, [r7, #4]
	return (flags);
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	bf0c      	ite	eq
    5a42:	2300      	moveq	r3, #0
    5a44:	2301      	movne	r3, #1
    5a46:	b2db      	uxtb	r3, r3
}
    5a48:	4618      	mov	r0, r3
    5a4a:	370c      	adds	r7, #12
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr

00005a54 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b082      	sub	sp, #8
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    5a5c:	6878      	ldr	r0, [r7, #4]
    5a5e:	4b07      	ldr	r3, [pc, #28]	; (5a7c <cpu_irq_restore+0x28>)
    5a60:	4798      	blx	r3
    5a62:	4603      	mov	r3, r0
    5a64:	2b00      	cmp	r3, #0
    5a66:	d005      	beq.n	5a74 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    5a68:	4b05      	ldr	r3, [pc, #20]	; (5a80 <cpu_irq_restore+0x2c>)
    5a6a:	2201      	movs	r2, #1
    5a6c:	701a      	strb	r2, [r3, #0]
    5a6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    5a72:	b662      	cpsie	i
}
    5a74:	3708      	adds	r7, #8
    5a76:	46bd      	mov	sp, r7
    5a78:	bd80      	pop	{r7, pc}
    5a7a:	bf00      	nop
    5a7c:	00005a35 	.word	0x00005a35
    5a80:	200004b0 	.word	0x200004b0

00005a84 <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    5a84:	b580      	push	{r7, lr}
    5a86:	b082      	sub	sp, #8
    5a88:	af00      	add	r7, sp, #0
    5a8a:	4603      	mov	r3, r0
    5a8c:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    5a8e:	79fb      	ldrb	r3, [r7, #7]
    5a90:	2b06      	cmp	r3, #6
    5a92:	d823      	bhi.n	5adc <osc_enable+0x58>
    5a94:	a201      	add	r2, pc, #4	; (adr r2, 5a9c <osc_enable+0x18>)
    5a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5a9a:	bf00      	nop
    5a9c:	00005ab9 	.word	0x00005ab9
    5aa0:	00005abf 	.word	0x00005abf
    5aa4:	00005ac5 	.word	0x00005ac5
    5aa8:	00005acb 	.word	0x00005acb
    5aac:	00005ad1 	.word	0x00005ad1
    5ab0:	00005ad7 	.word	0x00005ad7
    5ab4:	00005add 	.word	0x00005add
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    5ab8:	4b0a      	ldr	r3, [pc, #40]	; (5ae4 <osc_enable+0x60>)
    5aba:	4798      	blx	r3
		break;
    5abc:	e00f      	b.n	5ade <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    5abe:	4b0a      	ldr	r3, [pc, #40]	; (5ae8 <osc_enable+0x64>)
    5ac0:	4798      	blx	r3
		break;
    5ac2:	e00c      	b.n	5ade <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    5ac4:	4b09      	ldr	r3, [pc, #36]	; (5aec <osc_enable+0x68>)
    5ac6:	4798      	blx	r3
		break;
    5ac8:	e009      	b.n	5ade <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    5aca:	4b09      	ldr	r3, [pc, #36]	; (5af0 <osc_enable+0x6c>)
    5acc:	4798      	blx	r3
		break;
    5ace:	e006      	b.n	5ade <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    5ad0:	4b08      	ldr	r3, [pc, #32]	; (5af4 <osc_enable+0x70>)
    5ad2:	4798      	blx	r3
		break;
    5ad4:	e003      	b.n	5ade <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    5ad6:	4b08      	ldr	r3, [pc, #32]	; (5af8 <osc_enable+0x74>)
    5ad8:	4798      	blx	r3
		break;
    5ada:	e000      	b.n	5ade <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    5adc:	bf00      	nop
	}
}
    5ade:	3708      	adds	r7, #8
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	0000908d 	.word	0x0000908d
    5ae8:	000090c5 	.word	0x000090c5
    5aec:	000090fd 	.word	0x000090fd
    5af0:	0000917d 	.word	0x0000917d
    5af4:	000091bd 	.word	0x000091bd
    5af8:	0000913d 	.word	0x0000913d

00005afc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    5afc:	b480      	push	{r7}
    5afe:	b083      	sub	sp, #12
    5b00:	af00      	add	r7, sp, #0
    5b02:	4603      	mov	r3, r0
    5b04:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    5b06:	79fb      	ldrb	r3, [r7, #7]
    5b08:	2b06      	cmp	r3, #6
    5b0a:	d84f      	bhi.n	5bac <osc_is_ready+0xb0>
    5b0c:	a201      	add	r2, pc, #4	; (adr r2, 5b14 <osc_is_ready+0x18>)
    5b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5b12:	bf00      	nop
    5b14:	00005b31 	.word	0x00005b31
    5b18:	00005b45 	.word	0x00005b45
    5b1c:	00005b59 	.word	0x00005b59
    5b20:	00005b6d 	.word	0x00005b6d
    5b24:	00005b81 	.word	0x00005b81
    5b28:	00005b95 	.word	0x00005b95
    5b2c:	00005ba9 	.word	0x00005ba9
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    5b30:	4b22      	ldr	r3, [pc, #136]	; (5bbc <osc_is_ready+0xc0>)
    5b32:	695b      	ldr	r3, [r3, #20]
    5b34:	f003 0301 	and.w	r3, r3, #1
    5b38:	2b00      	cmp	r3, #0
    5b3a:	bf0c      	ite	eq
    5b3c:	2300      	moveq	r3, #0
    5b3e:	2301      	movne	r3, #1
    5b40:	b2db      	uxtb	r3, r3
    5b42:	e034      	b.n	5bae <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    5b44:	4b1e      	ldr	r3, [pc, #120]	; (5bc0 <osc_is_ready+0xc4>)
    5b46:	695b      	ldr	r3, [r3, #20]
    5b48:	f003 0301 	and.w	r3, r3, #1
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	bf0c      	ite	eq
    5b50:	2300      	moveq	r3, #0
    5b52:	2301      	movne	r3, #1
    5b54:	b2db      	uxtb	r3, r3
    5b56:	e02a      	b.n	5bae <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    5b58:	4b19      	ldr	r3, [pc, #100]	; (5bc0 <osc_is_ready+0xc4>)
    5b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5b5c:	f003 0301 	and.w	r3, r3, #1
    5b60:	2b00      	cmp	r3, #0
    5b62:	bf0c      	ite	eq
    5b64:	2300      	moveq	r3, #0
    5b66:	2301      	movne	r3, #1
    5b68:	b2db      	uxtb	r3, r3
    5b6a:	e020      	b.n	5bae <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    5b6c:	4b13      	ldr	r3, [pc, #76]	; (5bbc <osc_is_ready+0xc0>)
    5b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5b70:	f003 0301 	and.w	r3, r3, #1
    5b74:	2b00      	cmp	r3, #0
    5b76:	bf0c      	ite	eq
    5b78:	2300      	moveq	r3, #0
    5b7a:	2301      	movne	r3, #1
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	e016      	b.n	5bae <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    5b80:	4b0e      	ldr	r3, [pc, #56]	; (5bbc <osc_is_ready+0xc0>)
    5b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5b84:	f003 0301 	and.w	r3, r3, #1
    5b88:	2b00      	cmp	r3, #0
    5b8a:	bf0c      	ite	eq
    5b8c:	2300      	moveq	r3, #0
    5b8e:	2301      	movne	r3, #1
    5b90:	b2db      	uxtb	r3, r3
    5b92:	e00c      	b.n	5bae <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    5b94:	4b0a      	ldr	r3, [pc, #40]	; (5bc0 <osc_is_ready+0xc4>)
    5b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5b98:	f003 0301 	and.w	r3, r3, #1
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	bf0c      	ite	eq
    5ba0:	2300      	moveq	r3, #0
    5ba2:	2301      	movne	r3, #1
    5ba4:	b2db      	uxtb	r3, r3
    5ba6:	e002      	b.n	5bae <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    5ba8:	2301      	movs	r3, #1
    5baa:	e000      	b.n	5bae <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    5bac:	2300      	movs	r3, #0
	}
}
    5bae:	4618      	mov	r0, r3
    5bb0:	370c      	adds	r7, #12
    5bb2:	46bd      	mov	sp, r7
    5bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb8:	4770      	bx	lr
    5bba:	bf00      	nop
    5bbc:	400e0800 	.word	0x400e0800
    5bc0:	400f0400 	.word	0x400f0400

00005bc4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    5bc4:	b580      	push	{r7, lr}
    5bc6:	b082      	sub	sp, #8
    5bc8:	af00      	add	r7, sp, #0
    5bca:	4603      	mov	r3, r0
    5bcc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    5bce:	bf00      	nop
    5bd0:	79fb      	ldrb	r3, [r7, #7]
    5bd2:	4618      	mov	r0, r3
    5bd4:	4b05      	ldr	r3, [pc, #20]	; (5bec <osc_wait_ready+0x28>)
    5bd6:	4798      	blx	r3
    5bd8:	4603      	mov	r3, r0
    5bda:	f083 0301 	eor.w	r3, r3, #1
    5bde:	b2db      	uxtb	r3, r3
    5be0:	2b00      	cmp	r3, #0
    5be2:	d1f5      	bne.n	5bd0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    5be4:	3708      	adds	r7, #8
    5be6:	46bd      	mov	sp, r7
    5be8:	bd80      	pop	{r7, pc}
    5bea:	bf00      	nop
    5bec:	00005afd 	.word	0x00005afd

00005bf0 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		uint32_t id)
{
    5bf0:	b480      	push	{r7}
    5bf2:	b083      	sub	sp, #12
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
    5bf8:	6039      	str	r1, [r7, #0]
	UNUSED(id);
	cfg->ctrl = 0;
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	2200      	movs	r2, #0
    5bfe:	601a      	str	r2, [r3, #0]
}
    5c00:	370c      	adds	r7, #12
    5c02:	46bd      	mov	sp, r7
    5c04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c08:	4770      	bx	lr
    5c0a:	bf00      	nop

00005c0c <genclk_config_set_source>:
	SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
    5c0c:	b480      	push	{r7}
    5c0e:	b083      	sub	sp, #12
    5c10:	af00      	add	r7, sp, #0
    5c12:	6078      	str	r0, [r7, #4]
    5c14:	460b      	mov	r3, r1
    5c16:	70fb      	strb	r3, [r7, #3]
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	681b      	ldr	r3, [r3, #0]
    5c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
			| SCIF_GCCTRL_OSCSEL(src);
    5c20:	78fb      	ldrb	r3, [r7, #3]
    5c22:	021b      	lsls	r3, r3, #8
    5c24:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    5c28:	431a      	orrs	r2, r3
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	601a      	str	r2, [r3, #0]
			| SCIF_GCCTRL_OSCSEL(src);
}
    5c2e:	370c      	adds	r7, #12
    5c30:	46bd      	mov	sp, r7
    5c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c36:	4770      	bx	lr

00005c38 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		uint32_t divider)
{
    5c38:	b480      	push	{r7}
    5c3a:	b083      	sub	sp, #12
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
    5c40:	6039      	str	r1, [r7, #0]
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(SCIF_GCCTRL_DIVEN
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	681a      	ldr	r2, [r3, #0]
    5c46:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    5c4a:	4013      	ands	r3, r2
    5c4c:	687a      	ldr	r2, [r7, #4]
    5c4e:	6013      	str	r3, [r2, #0]
			| SCIF_GCCTRL_DIV_Msk);

	if (divider > 1) {
    5c50:	683b      	ldr	r3, [r7, #0]
    5c52:	2b01      	cmp	r3, #1
    5c54:	d90f      	bls.n	5c76 <genclk_config_set_divider+0x3e>
		cfg->ctrl |= SCIF_GCCTRL_DIVEN;
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	f043 0202 	orr.w	r2, r3, #2
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	601a      	str	r2, [r3, #0]
		cfg->ctrl |= SCIF_GCCTRL_DIV(((divider + 1) / 2) - 1);
    5c62:	687b      	ldr	r3, [r7, #4]
    5c64:	681a      	ldr	r2, [r3, #0]
    5c66:	683b      	ldr	r3, [r7, #0]
    5c68:	3301      	adds	r3, #1
    5c6a:	085b      	lsrs	r3, r3, #1
    5c6c:	3b01      	subs	r3, #1
    5c6e:	041b      	lsls	r3, r3, #16
    5c70:	431a      	orrs	r2, r3
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	601a      	str	r2, [r3, #0]
	}
}
    5c76:	370c      	adds	r7, #12
    5c78:	46bd      	mov	sp, r7
    5c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c7e:	4770      	bx	lr

00005c80 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
    5c80:	b480      	push	{r7}
    5c82:	b083      	sub	sp, #12
    5c84:	af00      	add	r7, sp, #0
    5c86:	6078      	str	r0, [r7, #4]
    5c88:	6039      	str	r1, [r7, #0]
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    5c8a:	4907      	ldr	r1, [pc, #28]	; (5ca8 <genclk_enable+0x28>)
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	f043 0201 	orr.w	r2, r3, #1
    5c94:	683b      	ldr	r3, [r7, #0]
    5c96:	331c      	adds	r3, #28
    5c98:	009b      	lsls	r3, r3, #2
    5c9a:	440b      	add	r3, r1
    5c9c:	605a      	str	r2, [r3, #4]
}
    5c9e:	370c      	adds	r7, #12
    5ca0:	46bd      	mov	sp, r7
    5ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca6:	4770      	bx	lr
    5ca8:	400e0800 	.word	0x400e0800

00005cac <genclk_enable_source>:
{
	SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	4603      	mov	r3, r0
    5cb4:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    5cb6:	79fb      	ldrb	r3, [r7, #7]
    5cb8:	2b0f      	cmp	r3, #15
    5cba:	f200 808d 	bhi.w	5dd8 <genclk_enable_source+0x12c>
    5cbe:	a201      	add	r2, pc, #4	; (adr r2, 5cc4 <genclk_enable_source+0x18>)
    5cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5cc4:	00005dd9 	.word	0x00005dd9
    5cc8:	00005d05 	.word	0x00005d05
    5ccc:	00005daf 	.word	0x00005daf
    5cd0:	00005db7 	.word	0x00005db7
    5cd4:	00005d27 	.word	0x00005d27
    5cd8:	00005d49 	.word	0x00005d49
    5cdc:	00005d6b 	.word	0x00005d6b
    5ce0:	00005dd9 	.word	0x00005dd9
    5ce4:	00005dd9 	.word	0x00005dd9
    5ce8:	00005dd9 	.word	0x00005dd9
    5cec:	00005dd9 	.word	0x00005dd9
    5cf0:	00005dd9 	.word	0x00005dd9
    5cf4:	00005dd9 	.word	0x00005dd9
    5cf8:	00005d8d 	.word	0x00005d8d
    5cfc:	00005dd9 	.word	0x00005dd9
    5d00:	00005d05 	.word	0x00005d05
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
	case GENCLK_SRC_CLK_1K: // The 1K linked on OSC32K
		if (!osc_is_ready(OSC_ID_OSC32)) {
    5d04:	2001      	movs	r0, #1
    5d06:	4b36      	ldr	r3, [pc, #216]	; (5de0 <genclk_enable_source+0x134>)
    5d08:	4798      	blx	r3
    5d0a:	4603      	mov	r3, r0
    5d0c:	f083 0301 	eor.w	r3, r3, #1
    5d10:	b2db      	uxtb	r3, r3
    5d12:	2b00      	cmp	r3, #0
    5d14:	d006      	beq.n	5d24 <genclk_enable_source+0x78>
			osc_enable(OSC_ID_OSC32);
    5d16:	2001      	movs	r0, #1
    5d18:	4b32      	ldr	r3, [pc, #200]	; (5de4 <genclk_enable_source+0x138>)
    5d1a:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC32);
    5d1c:	2001      	movs	r0, #1
    5d1e:	4b32      	ldr	r3, [pc, #200]	; (5de8 <genclk_enable_source+0x13c>)
    5d20:	4798      	blx	r3
		}
		break;
    5d22:	e05a      	b.n	5dda <genclk_enable_source+0x12e>
    5d24:	e059      	b.n	5dda <genclk_enable_source+0x12e>
#endif

	case GENCLK_SRC_RC80M:
		if (!osc_is_ready(OSC_ID_RC80M)) {
    5d26:	2003      	movs	r0, #3
    5d28:	4b2d      	ldr	r3, [pc, #180]	; (5de0 <genclk_enable_source+0x134>)
    5d2a:	4798      	blx	r3
    5d2c:	4603      	mov	r3, r0
    5d2e:	f083 0301 	eor.w	r3, r3, #1
    5d32:	b2db      	uxtb	r3, r3
    5d34:	2b00      	cmp	r3, #0
    5d36:	d006      	beq.n	5d46 <genclk_enable_source+0x9a>
			osc_enable(OSC_ID_RC80M);
    5d38:	2003      	movs	r0, #3
    5d3a:	4b2a      	ldr	r3, [pc, #168]	; (5de4 <genclk_enable_source+0x138>)
    5d3c:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC80M);
    5d3e:	2003      	movs	r0, #3
    5d40:	4b29      	ldr	r3, [pc, #164]	; (5de8 <genclk_enable_source+0x13c>)
    5d42:	4798      	blx	r3
		}
		break;
    5d44:	e049      	b.n	5dda <genclk_enable_source+0x12e>
    5d46:	e048      	b.n	5dda <genclk_enable_source+0x12e>

	case GENCLK_SRC_RCFAST:
		if (!osc_is_ready(OSC_ID_RCFAST)) {
    5d48:	2004      	movs	r0, #4
    5d4a:	4b25      	ldr	r3, [pc, #148]	; (5de0 <genclk_enable_source+0x134>)
    5d4c:	4798      	blx	r3
    5d4e:	4603      	mov	r3, r0
    5d50:	f083 0301 	eor.w	r3, r3, #1
    5d54:	b2db      	uxtb	r3, r3
    5d56:	2b00      	cmp	r3, #0
    5d58:	d006      	beq.n	5d68 <genclk_enable_source+0xbc>
			osc_enable(OSC_ID_RCFAST);
    5d5a:	2004      	movs	r0, #4
    5d5c:	4b21      	ldr	r3, [pc, #132]	; (5de4 <genclk_enable_source+0x138>)
    5d5e:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RCFAST);
    5d60:	2004      	movs	r0, #4
    5d62:	4b21      	ldr	r3, [pc, #132]	; (5de8 <genclk_enable_source+0x13c>)
    5d64:	4798      	blx	r3
		}
		break;
    5d66:	e038      	b.n	5dda <genclk_enable_source+0x12e>
    5d68:	e037      	b.n	5dda <genclk_enable_source+0x12e>

	case GENCLK_SRC_RC1M:
		if (!osc_is_ready(OSC_ID_RC1M)) {
    5d6a:	2005      	movs	r0, #5
    5d6c:	4b1c      	ldr	r3, [pc, #112]	; (5de0 <genclk_enable_source+0x134>)
    5d6e:	4798      	blx	r3
    5d70:	4603      	mov	r3, r0
    5d72:	f083 0301 	eor.w	r3, r3, #1
    5d76:	b2db      	uxtb	r3, r3
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d006      	beq.n	5d8a <genclk_enable_source+0xde>
			osc_enable(OSC_ID_RC1M);
    5d7c:	2005      	movs	r0, #5
    5d7e:	4b19      	ldr	r3, [pc, #100]	; (5de4 <genclk_enable_source+0x138>)
    5d80:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC1M);
    5d82:	2005      	movs	r0, #5
    5d84:	4b18      	ldr	r3, [pc, #96]	; (5de8 <genclk_enable_source+0x13c>)
    5d86:	4798      	blx	r3
		}
		break;
    5d88:	e027      	b.n	5dda <genclk_enable_source+0x12e>
    5d8a:	e026      	b.n	5dda <genclk_enable_source+0x12e>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
    5d8c:	2002      	movs	r0, #2
    5d8e:	4b14      	ldr	r3, [pc, #80]	; (5de0 <genclk_enable_source+0x134>)
    5d90:	4798      	blx	r3
    5d92:	4603      	mov	r3, r0
    5d94:	f083 0301 	eor.w	r3, r3, #1
    5d98:	b2db      	uxtb	r3, r3
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d006      	beq.n	5dac <genclk_enable_source+0x100>
			osc_enable(OSC_ID_RC32K);
    5d9e:	2002      	movs	r0, #2
    5da0:	4b10      	ldr	r3, [pc, #64]	; (5de4 <genclk_enable_source+0x138>)
    5da2:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC32K);
    5da4:	2002      	movs	r0, #2
    5da6:	4b10      	ldr	r3, [pc, #64]	; (5de8 <genclk_enable_source+0x13c>)
    5da8:	4798      	blx	r3
		}
		break;
    5daa:	e016      	b.n	5dda <genclk_enable_source+0x12e>
    5dac:	e015      	b.n	5dda <genclk_enable_source+0x12e>

#ifdef CONFIG_DFLL0_SOURCE
	case GENCLK_SRC_DFLL:
		dfll_enable_config_defaults(0);
    5dae:	2000      	movs	r0, #0
    5db0:	4b0e      	ldr	r3, [pc, #56]	; (5dec <genclk_enable_source+0x140>)
    5db2:	4798      	blx	r3
		break;
    5db4:	e011      	b.n	5dda <genclk_enable_source+0x12e>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
    5db6:	2000      	movs	r0, #0
    5db8:	4b09      	ldr	r3, [pc, #36]	; (5de0 <genclk_enable_source+0x134>)
    5dba:	4798      	blx	r3
    5dbc:	4603      	mov	r3, r0
    5dbe:	f083 0301 	eor.w	r3, r3, #1
    5dc2:	b2db      	uxtb	r3, r3
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d006      	beq.n	5dd6 <genclk_enable_source+0x12a>
			osc_enable(OSC_ID_OSC0);
    5dc8:	2000      	movs	r0, #0
    5dca:	4b06      	ldr	r3, [pc, #24]	; (5de4 <genclk_enable_source+0x138>)
    5dcc:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC0);
    5dce:	2000      	movs	r0, #0
    5dd0:	4b05      	ldr	r3, [pc, #20]	; (5de8 <genclk_enable_source+0x13c>)
    5dd2:	4798      	blx	r3
		}
		break;
    5dd4:	e001      	b.n	5dda <genclk_enable_source+0x12e>
    5dd6:	e000      	b.n	5dda <genclk_enable_source+0x12e>
	}
# endif

	default:
		Assert(false);
		break;
    5dd8:	bf00      	nop
	}
}
    5dda:	3708      	adds	r7, #8
    5ddc:	46bd      	mov	sp, r7
    5dde:	bd80      	pop	{r7, pc}
    5de0:	00005afd 	.word	0x00005afd
    5de4:	00005a85 	.word	0x00005a85
    5de8:	00005bc5 	.word	0x00005bc5
    5dec:	00008f79 	.word	0x00008f79

00005df0 <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b086      	sub	sp, #24
    5df4:	af00      	add	r7, sp, #0
    5df6:	60f8      	str	r0, [r7, #12]
    5df8:	460b      	mov	r3, r1
    5dfa:	607a      	str	r2, [r7, #4]
    5dfc:	72fb      	strb	r3, [r7, #11]
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
    5dfe:	f107 0314 	add.w	r3, r7, #20
    5e02:	4618      	mov	r0, r3
    5e04:	68f9      	ldr	r1, [r7, #12]
    5e06:	4b0e      	ldr	r3, [pc, #56]	; (5e40 <genclk_enable_config+0x50>)
    5e08:	4798      	blx	r3
	genclk_enable_source(src);
    5e0a:	7afb      	ldrb	r3, [r7, #11]
    5e0c:	4618      	mov	r0, r3
    5e0e:	4b0d      	ldr	r3, [pc, #52]	; (5e44 <genclk_enable_config+0x54>)
    5e10:	4798      	blx	r3
	genclk_config_set_source(&gcfg, src);
    5e12:	f107 0214 	add.w	r2, r7, #20
    5e16:	7afb      	ldrb	r3, [r7, #11]
    5e18:	4610      	mov	r0, r2
    5e1a:	4619      	mov	r1, r3
    5e1c:	4b0a      	ldr	r3, [pc, #40]	; (5e48 <genclk_enable_config+0x58>)
    5e1e:	4798      	blx	r3
	genclk_config_set_divider(&gcfg, divider);
    5e20:	f107 0314 	add.w	r3, r7, #20
    5e24:	4618      	mov	r0, r3
    5e26:	6879      	ldr	r1, [r7, #4]
    5e28:	4b08      	ldr	r3, [pc, #32]	; (5e4c <genclk_enable_config+0x5c>)
    5e2a:	4798      	blx	r3
	genclk_enable(&gcfg, id);
    5e2c:	f107 0314 	add.w	r3, r7, #20
    5e30:	4618      	mov	r0, r3
    5e32:	68f9      	ldr	r1, [r7, #12]
    5e34:	4b06      	ldr	r3, [pc, #24]	; (5e50 <genclk_enable_config+0x60>)
    5e36:	4798      	blx	r3
}
    5e38:	3718      	adds	r7, #24
    5e3a:	46bd      	mov	sp, r7
    5e3c:	bd80      	pop	{r7, pc}
    5e3e:	bf00      	nop
    5e40:	00005bf1 	.word	0x00005bf1
    5e44:	00005cad 	.word	0x00005cad
    5e48:	00005c0d 	.word	0x00005c0d
    5e4c:	00005c39 	.word	0x00005c39
    5e50:	00005c81 	.word	0x00005c81

00005e54 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    5e54:	b580      	push	{r7, lr}
    5e56:	b084      	sub	sp, #16
    5e58:	af00      	add	r7, sp, #0
    5e5a:	4603      	mov	r3, r0
    5e5c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
    5e5e:	4b08      	ldr	r3, [pc, #32]	; (5e80 <sleepmgr_lock_mode+0x2c>)
    5e60:	4798      	blx	r3
    5e62:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
    5e64:	79fb      	ldrb	r3, [r7, #7]
    5e66:	4a07      	ldr	r2, [pc, #28]	; (5e84 <sleepmgr_lock_mode+0x30>)
    5e68:	5cd2      	ldrb	r2, [r2, r3]
    5e6a:	3201      	adds	r2, #1
    5e6c:	b2d1      	uxtb	r1, r2
    5e6e:	4a05      	ldr	r2, [pc, #20]	; (5e84 <sleepmgr_lock_mode+0x30>)
    5e70:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    5e72:	68f8      	ldr	r0, [r7, #12]
    5e74:	4b04      	ldr	r3, [pc, #16]	; (5e88 <sleepmgr_lock_mode+0x34>)
    5e76:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    5e78:	3710      	adds	r7, #16
    5e7a:	46bd      	mov	sp, r7
    5e7c:	bd80      	pop	{r7, pc}
    5e7e:	bf00      	nop
    5e80:	000059fd 	.word	0x000059fd
    5e84:	20001014 	.word	0x20001014
    5e88:	00005a55 	.word	0x00005a55

00005e8c <adc_configure_wm_mode>:
 * \param mode Window Monitor Mode.
 *
 */
static inline void adc_configure_wm_mode(struct adc_dev_inst *const dev_inst,
		const uint8_t mode)
{
    5e8c:	b480      	push	{r7}
    5e8e:	b083      	sub	sp, #12
    5e90:	af00      	add	r7, sp, #0
    5e92:	6078      	str	r0, [r7, #4]
    5e94:	460b      	mov	r3, r1
    5e96:	70fb      	strb	r3, [r7, #3]
	dev_inst->hw_dev->ADCIFE_WCFG = ADCIFE_WCFG_WM(mode);
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	681b      	ldr	r3, [r3, #0]
    5e9c:	78fa      	ldrb	r2, [r7, #3]
    5e9e:	0312      	lsls	r2, r2, #12
    5ea0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    5ea4:	625a      	str	r2, [r3, #36]	; 0x24
}
    5ea6:	370c      	adds	r7, #12
    5ea8:	46bd      	mov	sp, r7
    5eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eae:	4770      	bx	lr

00005eb0 <adc_configure_wm_threshold>:
 * \param high_threshold HighThreshold value.
 *
 */
static inline void adc_configure_wm_threshold(struct adc_dev_inst *const dev_inst,
		const uint16_t low_threshold, const uint16_t high_threshold)
{
    5eb0:	b480      	push	{r7}
    5eb2:	b083      	sub	sp, #12
    5eb4:	af00      	add	r7, sp, #0
    5eb6:	6078      	str	r0, [r7, #4]
    5eb8:	4613      	mov	r3, r2
    5eba:	460a      	mov	r2, r1
    5ebc:	807a      	strh	r2, [r7, #2]
    5ebe:	803b      	strh	r3, [r7, #0]
	dev_inst->hw_dev->ADCIFE_WTH = ADCIFE_WTH_LT(low_threshold) |
    5ec0:	687b      	ldr	r3, [r7, #4]
    5ec2:	681a      	ldr	r2, [r3, #0]
    5ec4:	887b      	ldrh	r3, [r7, #2]
    5ec6:	f3c3 010b 	ubfx	r1, r3, #0, #12
			ADCIFE_WTH_HT(high_threshold);
    5eca:	883b      	ldrh	r3, [r7, #0]
    5ecc:	041b      	lsls	r3, r3, #16
    5ece:	4618      	mov	r0, r3
    5ed0:	4b04      	ldr	r3, [pc, #16]	; (5ee4 <adc_configure_wm_threshold+0x34>)
    5ed2:	4003      	ands	r3, r0
 *
 */
static inline void adc_configure_wm_threshold(struct adc_dev_inst *const dev_inst,
		const uint16_t low_threshold, const uint16_t high_threshold)
{
	dev_inst->hw_dev->ADCIFE_WTH = ADCIFE_WTH_LT(low_threshold) |
    5ed4:	430b      	orrs	r3, r1
    5ed6:	6293      	str	r3, [r2, #40]	; 0x28
			ADCIFE_WTH_HT(high_threshold);
}
    5ed8:	370c      	adds	r7, #12
    5eda:	46bd      	mov	sp, r7
    5edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee0:	4770      	bx	lr
    5ee2:	bf00      	nop
    5ee4:	0fff0000 	.word	0x0fff0000

00005ee8 <adc_enable_interrupt>:
 * \param interrupt_source interrupt source.
 *
 */
static inline void adc_enable_interrupt(struct adc_dev_inst *const dev_inst,
		const adc_interrupt_source_t interrupt_source)
{
    5ee8:	b480      	push	{r7}
    5eea:	b083      	sub	sp, #12
    5eec:	af00      	add	r7, sp, #0
    5eee:	6078      	str	r0, [r7, #4]
    5ef0:	460b      	mov	r3, r1
    5ef2:	70fb      	strb	r3, [r7, #3]
	dev_inst->hw_dev->ADCIFE_IER = interrupt_source;
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	681b      	ldr	r3, [r3, #0]
    5ef8:	78fa      	ldrb	r2, [r7, #3]
    5efa:	631a      	str	r2, [r3, #48]	; 0x30
}
    5efc:	370c      	adds	r7, #12
    5efe:	46bd      	mov	sp, r7
    5f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f04:	4770      	bx	lr
    5f06:	bf00      	nop

00005f08 <adc_init>:
 * \retval true if the initialization was successful.
 * \retval false if initialization failed.
 */
status_code_t adc_init(struct adc_dev_inst *const dev_inst, Adcife *const adc,
		struct adc_config *const cfg)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b084      	sub	sp, #16
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	60f8      	str	r0, [r7, #12]
    5f10:	60b9      	str	r1, [r7, #8]
    5f12:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(adc);
	Assert(cfg);

	dev_inst->hw_dev = adc;
    5f14:	68fb      	ldr	r3, [r7, #12]
    5f16:	68ba      	ldr	r2, [r7, #8]
    5f18:	601a      	str	r2, [r3, #0]
	dev_inst->adc_cfg = cfg;
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	687a      	ldr	r2, [r7, #4]
    5f1e:	605a      	str	r2, [r3, #4]

	/* Enable APB clock for ADC */
	sysclk_enable_peripheral_clock(adc);
    5f20:	68b8      	ldr	r0, [r7, #8]
    5f22:	4b07      	ldr	r3, [pc, #28]	; (5f40 <adc_init+0x38>)
    5f24:	4798      	blx	r3

	/* Initialize the ADC with new configurations */
	adc_set_config(dev_inst, cfg);
    5f26:	68f8      	ldr	r0, [r7, #12]
    5f28:	6879      	ldr	r1, [r7, #4]
    5f2a:	4b06      	ldr	r3, [pc, #24]	; (5f44 <adc_init+0x3c>)
    5f2c:	4798      	blx	r3

	/* Disable APB clock for ADC */
	sysclk_disable_peripheral_clock(adc);
    5f2e:	68b8      	ldr	r0, [r7, #8]
    5f30:	4b05      	ldr	r3, [pc, #20]	; (5f48 <adc_init+0x40>)
    5f32:	4798      	blx	r3

	return STATUS_OK;
    5f34:	2300      	movs	r3, #0
    5f36:	b25b      	sxtb	r3, r3
}
    5f38:	4618      	mov	r0, r3
    5f3a:	3710      	adds	r7, #16
    5f3c:	46bd      	mov	sp, r7
    5f3e:	bd80      	pop	{r7, pc}
    5f40:	000098ed 	.word	0x000098ed
    5f44:	00005f4d 	.word	0x00005f4d
    5f48:	00009d1d 	.word	0x00009d1d

00005f4c <adc_set_config>:
 * \param cfg         Pointer to ADC configuration.
 *
 */
void adc_set_config(struct adc_dev_inst *const dev_inst,
		struct adc_config *cfg)
{
    5f4c:	b580      	push	{r7, lr}
    5f4e:	b082      	sub	sp, #8
    5f50:	af00      	add	r7, sp, #0
    5f52:	6078      	str	r0, [r7, #4]
    5f54:	6039      	str	r1, [r7, #0]
	/*  Reset the controller. */
	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_SWRST;
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	681b      	ldr	r3, [r3, #0]
    5f5a:	2201      	movs	r2, #1
    5f5c:	601a      	str	r2, [r3, #0]

	dev_inst->hw_dev->ADCIFE_CFG = ADCIFE_CFG_REFSEL(cfg->refsel) |
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	681b      	ldr	r3, [r3, #0]
    5f62:	683a      	ldr	r2, [r7, #0]
    5f64:	78d2      	ldrb	r2, [r2, #3]
    5f66:	0052      	lsls	r2, r2, #1
    5f68:	f002 010e 	and.w	r1, r2, #14
			ADCIFE_CFG_SPEED(cfg->speed) |
    5f6c:	683a      	ldr	r2, [r7, #0]
    5f6e:	7892      	ldrb	r2, [r2, #2]
    5f70:	0112      	lsls	r2, r2, #4
    5f72:	f002 0230 	and.w	r2, r2, #48	; 0x30
		struct adc_config *cfg)
{
	/*  Reset the controller. */
	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_SWRST;

	dev_inst->hw_dev->ADCIFE_CFG = ADCIFE_CFG_REFSEL(cfg->refsel) |
    5f76:	4311      	orrs	r1, r2
			ADCIFE_CFG_SPEED(cfg->speed) |
			ADCIFE_CFG_PRESCAL(cfg->prescal);
    5f78:	683a      	ldr	r2, [r7, #0]
    5f7a:	7812      	ldrb	r2, [r2, #0]
    5f7c:	0212      	lsls	r2, r2, #8
    5f7e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
{
	/*  Reset the controller. */
	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_SWRST;

	dev_inst->hw_dev->ADCIFE_CFG = ADCIFE_CFG_REFSEL(cfg->refsel) |
			ADCIFE_CFG_SPEED(cfg->speed) |
    5f82:	430a      	orrs	r2, r1
		struct adc_config *cfg)
{
	/*  Reset the controller. */
	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_SWRST;

	dev_inst->hw_dev->ADCIFE_CFG = ADCIFE_CFG_REFSEL(cfg->refsel) |
    5f84:	605a      	str	r2, [r3, #4]
			ADCIFE_CFG_SPEED(cfg->speed) |
			ADCIFE_CFG_PRESCAL(cfg->prescal);
	if (cfg->clksel) {
    5f86:	683b      	ldr	r3, [r7, #0]
    5f88:	785b      	ldrb	r3, [r3, #1]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d008      	beq.n	5fa0 <adc_set_config+0x54>
		dev_inst->hw_dev->ADCIFE_CFG |= ADCIFE_CFG_CLKSEL;
    5f8e:	687b      	ldr	r3, [r7, #4]
    5f90:	681b      	ldr	r3, [r3, #0]
    5f92:	687a      	ldr	r2, [r7, #4]
    5f94:	6812      	ldr	r2, [r2, #0]
    5f96:	6852      	ldr	r2, [r2, #4]
    5f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5f9c:	605a      	str	r2, [r3, #4]
    5f9e:	e004      	b.n	5faa <adc_set_config+0x5e>
	} else {
		genclk_enable_config(ADCIFE_GCLK_NUM, CONFIG_ADC_GENERIC_SRC,
    5fa0:	200a      	movs	r0, #10
    5fa2:	2107      	movs	r1, #7
    5fa4:	2201      	movs	r2, #1
    5fa6:	4b07      	ldr	r3, [pc, #28]	; (5fc4 <adc_set_config+0x78>)
    5fa8:	4798      	blx	r3
			CONFIG_ADC_GENERIC_DIV);
	}
	dev_inst->hw_dev->ADCIFE_TIM = ADCIFE_TIM_ENSTUP |
    5faa:	687b      	ldr	r3, [r7, #4]
    5fac:	681b      	ldr	r3, [r3, #0]
			ADCIFE_TIM_STARTUP(cfg->start_up);
    5fae:	683a      	ldr	r2, [r7, #0]
    5fb0:	7912      	ldrb	r2, [r2, #4]
    5fb2:	f002 021f 	and.w	r2, r2, #31
		dev_inst->hw_dev->ADCIFE_CFG |= ADCIFE_CFG_CLKSEL;
	} else {
		genclk_enable_config(ADCIFE_GCLK_NUM, CONFIG_ADC_GENERIC_SRC,
			CONFIG_ADC_GENERIC_DIV);
	}
	dev_inst->hw_dev->ADCIFE_TIM = ADCIFE_TIM_ENSTUP |
    5fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5fba:	61da      	str	r2, [r3, #28]
			ADCIFE_TIM_STARTUP(cfg->start_up);
}
    5fbc:	3708      	adds	r7, #8
    5fbe:	46bd      	mov	sp, r7
    5fc0:	bd80      	pop	{r7, pc}
    5fc2:	bf00      	nop
    5fc4:	00005df1 	.word	0x00005df1

00005fc8 <adc_ch_set_config>:
 * \param cfg         Pointer to ADC Channel configuration.
 *
 */
void adc_ch_set_config(struct adc_dev_inst *const dev_inst,
		struct adc_ch_config *cfg)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
    5fd0:	6039      	str	r1, [r7, #0]
	dev_inst->hw_dev->ADCIFE_SEQCFG =
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	681b      	ldr	r3, [r3, #0]
		(*(uint32_t *)(cfg->seq_cfg));
    5fd6:	683a      	ldr	r2, [r7, #0]
    5fd8:	6812      	ldr	r2, [r2, #0]
    5fda:	6812      	ldr	r2, [r2, #0]
 *
 */
void adc_ch_set_config(struct adc_dev_inst *const dev_inst,
		struct adc_ch_config *cfg)
{
	dev_inst->hw_dev->ADCIFE_SEQCFG =
    5fdc:	615a      	str	r2, [r3, #20]
		(*(uint32_t *)(cfg->seq_cfg));

	adc_configure_wm_mode(dev_inst, cfg->window_mode);
    5fde:	683b      	ldr	r3, [r7, #0]
    5fe0:	799b      	ldrb	r3, [r3, #6]
    5fe2:	6878      	ldr	r0, [r7, #4]
    5fe4:	4619      	mov	r1, r3
    5fe6:	4b07      	ldr	r3, [pc, #28]	; (6004 <adc_ch_set_config+0x3c>)
    5fe8:	4798      	blx	r3
	adc_configure_wm_threshold(dev_inst, cfg->low_threshold,
    5fea:	683b      	ldr	r3, [r7, #0]
    5fec:	891a      	ldrh	r2, [r3, #8]
    5fee:	683b      	ldr	r3, [r7, #0]
    5ff0:	895b      	ldrh	r3, [r3, #10]
    5ff2:	6878      	ldr	r0, [r7, #4]
    5ff4:	4611      	mov	r1, r2
    5ff6:	461a      	mov	r2, r3
    5ff8:	4b03      	ldr	r3, [pc, #12]	; (6008 <adc_ch_set_config+0x40>)
    5ffa:	4798      	blx	r3
			cfg->high_threshold);
}
    5ffc:	3708      	adds	r7, #8
    5ffe:	46bd      	mov	sp, r7
    6000:	bd80      	pop	{r7, pc}
    6002:	bf00      	nop
    6004:	00005e8d 	.word	0x00005e8d
    6008:	00005eb1 	.word	0x00005eb1

0000600c <adc_enable>:
 *
 * \param dev_inst    Device structure pointer.
 *
 */
status_code_t adc_enable(struct adc_dev_inst *const dev_inst)
{
    600c:	b580      	push	{r7, lr}
    600e:	b084      	sub	sp, #16
    6010:	af00      	add	r7, sp, #0
    6012:	6078      	str	r0, [r7, #4]
	uint32_t timeout = ADC_NUM_OF_ATTEMPTS;
    6014:	f242 7310 	movw	r3, #10000	; 0x2710
    6018:	60fb      	str	r3, [r7, #12]
	sysclk_enable_peripheral_clock(dev_inst->hw_dev);
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	681b      	ldr	r3, [r3, #0]
    601e:	4618      	mov	r0, r3
    6020:	4b11      	ldr	r3, [pc, #68]	; (6068 <adc_enable+0x5c>)
    6022:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
    6024:	2002      	movs	r0, #2
    6026:	4b11      	ldr	r3, [pc, #68]	; (606c <adc_enable+0x60>)
    6028:	4798      	blx	r3

	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_EN;
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6032:	601a      	str	r2, [r3, #0]
	while (!(dev_inst->hw_dev->ADCIFE_SR & ADCIFE_SR_EN)) {
    6034:	e006      	b.n	6044 <adc_enable+0x38>
		if (!timeout--) {
    6036:	68fb      	ldr	r3, [r7, #12]
    6038:	1e5a      	subs	r2, r3, #1
    603a:	60fa      	str	r2, [r7, #12]
    603c:	2b00      	cmp	r3, #0
    603e:	d101      	bne.n	6044 <adc_enable+0x38>
			return ERR_TIMEOUT;
    6040:	23fd      	movs	r3, #253	; 0xfd
    6042:	e00c      	b.n	605e <adc_enable+0x52>
	uint32_t timeout = ADC_NUM_OF_ATTEMPTS;
	sysclk_enable_peripheral_clock(dev_inst->hw_dev);
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);

	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_EN;
	while (!(dev_inst->hw_dev->ADCIFE_SR & ADCIFE_SR_EN)) {
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	681b      	ldr	r3, [r3, #0]
    6048:	689b      	ldr	r3, [r3, #8]
    604a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    604e:	2b00      	cmp	r3, #0
    6050:	d0f1      	beq.n	6036 <adc_enable+0x2a>
		if (!timeout--) {
			return ERR_TIMEOUT;
		}
	}

	dev_inst->hw_dev->ADCIFE_CR = ADCIFE_CR_REFBUFEN | ADCIFE_CR_BGREQEN;
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	681b      	ldr	r3, [r3, #0]
    6056:	f44f 6282 	mov.w	r2, #1040	; 0x410
    605a:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    605c:	2300      	movs	r3, #0
    605e:	b25b      	sxtb	r3, r3
}
    6060:	4618      	mov	r0, r3
    6062:	3710      	adds	r7, #16
    6064:	46bd      	mov	sp, r7
    6066:	bd80      	pop	{r7, pc}
    6068:	000098ed 	.word	0x000098ed
    606c:	00005e55 	.word	0x00005e55

00006070 <adc_set_callback>:
 * \param irq_level interrupt level.
 */
void adc_set_callback(struct adc_dev_inst *const dev_inst,
		adc_interrupt_source_t source, adc_callback_t callback,
		uint8_t irq_line, uint8_t irq_level)
{
    6070:	b580      	push	{r7, lr}
    6072:	b084      	sub	sp, #16
    6074:	af00      	add	r7, sp, #0
    6076:	60f8      	str	r0, [r7, #12]
    6078:	607a      	str	r2, [r7, #4]
    607a:	460a      	mov	r2, r1
    607c:	72fa      	strb	r2, [r7, #11]
    607e:	72bb      	strb	r3, [r7, #10]
	adc_callback_pointer = callback;
    6080:	4b0d      	ldr	r3, [pc, #52]	; (60b8 <adc_set_callback+0x48>)
    6082:	687a      	ldr	r2, [r7, #4]
    6084:	601a      	str	r2, [r3, #0]
	irq_register_handler((IRQn_Type) irq_line, irq_level);
    6086:	7abb      	ldrb	r3, [r7, #10]
    6088:	b25b      	sxtb	r3, r3
    608a:	4618      	mov	r0, r3
    608c:	4b0b      	ldr	r3, [pc, #44]	; (60bc <adc_set_callback+0x4c>)
    608e:	4798      	blx	r3
    6090:	7aba      	ldrb	r2, [r7, #10]
    6092:	7e3b      	ldrb	r3, [r7, #24]
    6094:	b252      	sxtb	r2, r2
    6096:	4610      	mov	r0, r2
    6098:	4619      	mov	r1, r3
    609a:	4b09      	ldr	r3, [pc, #36]	; (60c0 <adc_set_callback+0x50>)
    609c:	4798      	blx	r3
    609e:	7abb      	ldrb	r3, [r7, #10]
    60a0:	b25b      	sxtb	r3, r3
    60a2:	4618      	mov	r0, r3
    60a4:	4b07      	ldr	r3, [pc, #28]	; (60c4 <adc_set_callback+0x54>)
    60a6:	4798      	blx	r3
	adc_enable_interrupt(dev_inst, source);
    60a8:	7afb      	ldrb	r3, [r7, #11]
    60aa:	68f8      	ldr	r0, [r7, #12]
    60ac:	4619      	mov	r1, r3
    60ae:	4b06      	ldr	r3, [pc, #24]	; (60c8 <adc_set_callback+0x58>)
    60b0:	4798      	blx	r3
}
    60b2:	3710      	adds	r7, #16
    60b4:	46bd      	mov	sp, r7
    60b6:	bd80      	pop	{r7, pc}
    60b8:	20001030 	.word	0x20001030
    60bc:	00005975 	.word	0x00005975
    60c0:	000059a9 	.word	0x000059a9
    60c4:	00005945 	.word	0x00005945
    60c8:	00005ee9 	.word	0x00005ee9

000060cc <adc_interrupt>:
 *
 * The optional callback used by the interrupt handler is set by the
 * adcife_set_callback() function.
 */
static void adc_interrupt(void)
{
    60cc:	b580      	push	{r7, lr}
    60ce:	af00      	add	r7, sp, #0
	if (adc_callback_pointer) {
    60d0:	4b03      	ldr	r3, [pc, #12]	; (60e0 <adc_interrupt+0x14>)
    60d2:	681b      	ldr	r3, [r3, #0]
    60d4:	2b00      	cmp	r3, #0
    60d6:	d002      	beq.n	60de <adc_interrupt+0x12>
		adc_callback_pointer();
    60d8:	4b01      	ldr	r3, [pc, #4]	; (60e0 <adc_interrupt+0x14>)
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	4798      	blx	r3
	}
}
    60de:	bd80      	pop	{r7, pc}
    60e0:	20001030 	.word	0x20001030

000060e4 <ADCIFE_Handler>:

/**
 * \brief Interrupt handler for ADCIFE interrupt.
 */
void ADCIFE_Handler(void)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	af00      	add	r7, sp, #0
	adc_interrupt();
    60e8:	4b01      	ldr	r3, [pc, #4]	; (60f0 <ADCIFE_Handler+0xc>)
    60ea:	4798      	blx	r3
}
    60ec:	bd80      	pop	{r7, pc}
    60ee:	bf00      	nop
    60f0:	000060cd 	.word	0x000060cd

000060f4 <pdca_channel_get_handler>:
 *
 * \return channel handled or PDCA_INVALID_ARGUMENT
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
    60f4:	b480      	push	{r7}
    60f6:	b085      	sub	sp, #20
    60f8:	af00      	add	r7, sp, #0
    60fa:	4603      	mov	r3, r0
    60fc:	71fb      	strb	r3, [r7, #7]
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
    60fe:	79fb      	ldrb	r3, [r7, #7]
    6100:	2b0f      	cmp	r3, #15
    6102:	d901      	bls.n	6108 <pdca_channel_get_handler+0x14>
		pdca_ch_number = 0;
    6104:	2300      	movs	r3, #0
    6106:	71fb      	strb	r3, [r7, #7]

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    6108:	79fb      	ldrb	r3, [r7, #7]
    610a:	019b      	lsls	r3, r3, #6
    610c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6110:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
    6114:	60fb      	str	r3, [r7, #12]
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
    6116:	68fb      	ldr	r3, [r7, #12]
}
    6118:	4618      	mov	r0, r3
    611a:	3714      	adds	r7, #20
    611c:	46bd      	mov	sp, r7
    611e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6122:	4770      	bx	lr

00006124 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    6124:	b580      	push	{r7, lr}
    6126:	b086      	sub	sp, #24
    6128:	af00      	add	r7, sp, #0
    612a:	4603      	mov	r3, r0
    612c:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    612e:	79fb      	ldrb	r3, [r7, #7]
    6130:	4618      	mov	r0, r3
    6132:	4b15      	ldr	r3, [pc, #84]	; (6188 <pdca_get_channel_status+0x64>)
    6134:	4798      	blx	r3
    6136:	6178      	str	r0, [r7, #20]
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    6138:	697b      	ldr	r3, [r7, #20]
    613a:	69db      	ldr	r3, [r3, #28]
    613c:	613b      	str	r3, [r7, #16]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    613e:	697b      	ldr	r3, [r7, #20]
    6140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6142:	60fb      	str	r3, [r7, #12]

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    6144:	693b      	ldr	r3, [r7, #16]
    6146:	f003 0301 	and.w	r3, r3, #1
    614a:	2b00      	cmp	r3, #0
    614c:	d016      	beq.n	617c <pdca_get_channel_status+0x58>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    614e:	68fb      	ldr	r3, [r7, #12]
    6150:	f003 0304 	and.w	r3, r3, #4
    6154:	2b00      	cmp	r3, #0
    6156:	d001      	beq.n	615c <pdca_get_channel_status+0x38>
			return PDCA_CH_TRANSFER_ERROR;
    6158:	2304      	movs	r3, #4
    615a:	e010      	b.n	617e <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    615c:	68fb      	ldr	r3, [r7, #12]
    615e:	f003 0302 	and.w	r3, r3, #2
    6162:	2b00      	cmp	r3, #0
    6164:	d001      	beq.n	616a <pdca_get_channel_status+0x46>
			return PDCA_CH_TRANSFER_COMPLETED;
    6166:	2303      	movs	r3, #3
    6168:	e009      	b.n	617e <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    616a:	68fb      	ldr	r3, [r7, #12]
    616c:	f003 0301 	and.w	r3, r3, #1
    6170:	2b00      	cmp	r3, #0
    6172:	d001      	beq.n	6178 <pdca_get_channel_status+0x54>
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
    6174:	2302      	movs	r3, #2
    6176:	e002      	b.n	617e <pdca_get_channel_status+0x5a>
		}
		return PDCA_CH_BUSY;
    6178:	2301      	movs	r3, #1
    617a:	e000      	b.n	617e <pdca_get_channel_status+0x5a>
	} else {
		return PDCA_CH_FREE;
    617c:	2300      	movs	r3, #0
	}
}
    617e:	4618      	mov	r0, r3
    6180:	3718      	adds	r7, #24
    6182:	46bd      	mov	sp, r7
    6184:	bd80      	pop	{r7, pc}
    6186:	bf00      	nop
    6188:	000060f5 	.word	0x000060f5

0000618c <pdca_channel_disable_interrupt>:
 * \param pdca_ch_number PDCA channel
 * \param pdca_channel_interrupt_mask Interrupts to be disabled.
 */
void pdca_channel_disable_interrupt(pdca_channel_num_t pdca_ch_number,
		const pdca_channel_interrupt_mask_t pdca_channel_interrupt_mask)
{
    618c:	b580      	push	{r7, lr}
    618e:	b084      	sub	sp, #16
    6190:	af00      	add	r7, sp, #0
    6192:	4603      	mov	r3, r0
    6194:	6039      	str	r1, [r7, #0]
    6196:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    6198:	79fb      	ldrb	r3, [r7, #7]
    619a:	4618      	mov	r0, r3
    619c:	4b04      	ldr	r3, [pc, #16]	; (61b0 <pdca_channel_disable_interrupt+0x24>)
    619e:	4798      	blx	r3
    61a0:	60f8      	str	r0, [r7, #12]
			pdca_channel_get_handler(pdca_ch_number);

	pdca_channel->PDCA_IDR = pdca_channel_interrupt_mask;
    61a2:	68fb      	ldr	r3, [r7, #12]
    61a4:	683a      	ldr	r2, [r7, #0]
    61a6:	625a      	str	r2, [r3, #36]	; 0x24
}
    61a8:	3710      	adds	r7, #16
    61aa:	46bd      	mov	sp, r7
    61ac:	bd80      	pop	{r7, pc}
    61ae:	bf00      	nop
    61b0:	000060f5 	.word	0x000060f5

000061b4 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b084      	sub	sp, #16
    61b8:	af00      	add	r7, sp, #0
    61ba:	4603      	mov	r3, r0
    61bc:	71fb      	strb	r3, [r7, #7]
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    61be:	79fb      	ldrb	r3, [r7, #7]
    61c0:	4618      	mov	r0, r3
    61c2:	4b0a      	ldr	r3, [pc, #40]	; (61ec <pdca_channel_interrupt+0x38>)
    61c4:	4798      	blx	r3
    61c6:	4603      	mov	r3, r0
    61c8:	73fb      	strb	r3, [r7, #15]

	if (pdca_callback_pointer[pdca_ch_number]) {
    61ca:	79fa      	ldrb	r2, [r7, #7]
    61cc:	4b08      	ldr	r3, [pc, #32]	; (61f0 <pdca_channel_interrupt+0x3c>)
    61ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61d2:	2b00      	cmp	r3, #0
    61d4:	d006      	beq.n	61e4 <pdca_channel_interrupt+0x30>
		pdca_callback_pointer[pdca_ch_number] (status);
    61d6:	79fa      	ldrb	r2, [r7, #7]
    61d8:	4b05      	ldr	r3, [pc, #20]	; (61f0 <pdca_channel_interrupt+0x3c>)
    61da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61de:	7bfa      	ldrb	r2, [r7, #15]
    61e0:	4610      	mov	r0, r2
    61e2:	4798      	blx	r3
	} else {
		Assert(false); /* Catch unexpected interrupt */
	}
}
    61e4:	3710      	adds	r7, #16
    61e6:	46bd      	mov	sp, r7
    61e8:	bd80      	pop	{r7, pc}
    61ea:	bf00      	nop
    61ec:	00006125 	.word	0x00006125
    61f0:	20001034 	.word	0x20001034

000061f4 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(0);
    61f8:	2000      	movs	r0, #0
    61fa:	4b01      	ldr	r3, [pc, #4]	; (6200 <PDCA_0_Handler+0xc>)
    61fc:	4798      	blx	r3
}
    61fe:	bd80      	pop	{r7, pc}
    6200:	000061b5 	.word	0x000061b5

00006204 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    6204:	b580      	push	{r7, lr}
    6206:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(1);
    6208:	2001      	movs	r0, #1
    620a:	4b01      	ldr	r3, [pc, #4]	; (6210 <PDCA_1_Handler+0xc>)
    620c:	4798      	blx	r3
}
    620e:	bd80      	pop	{r7, pc}
    6210:	000061b5 	.word	0x000061b5

00006214 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    6214:	b580      	push	{r7, lr}
    6216:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(2);
    6218:	2002      	movs	r0, #2
    621a:	4b01      	ldr	r3, [pc, #4]	; (6220 <PDCA_2_Handler+0xc>)
    621c:	4798      	blx	r3
}
    621e:	bd80      	pop	{r7, pc}
    6220:	000061b5 	.word	0x000061b5

00006224 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    6224:	b580      	push	{r7, lr}
    6226:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(3);
    6228:	2003      	movs	r0, #3
    622a:	4b01      	ldr	r3, [pc, #4]	; (6230 <PDCA_3_Handler+0xc>)
    622c:	4798      	blx	r3
}
    622e:	bd80      	pop	{r7, pc}
    6230:	000061b5 	.word	0x000061b5

00006234 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    6234:	b580      	push	{r7, lr}
    6236:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(4);
    6238:	2004      	movs	r0, #4
    623a:	4b01      	ldr	r3, [pc, #4]	; (6240 <PDCA_4_Handler+0xc>)
    623c:	4798      	blx	r3
}
    623e:	bd80      	pop	{r7, pc}
    6240:	000061b5 	.word	0x000061b5

00006244 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    6244:	b580      	push	{r7, lr}
    6246:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(5);
    6248:	2005      	movs	r0, #5
    624a:	4b01      	ldr	r3, [pc, #4]	; (6250 <PDCA_5_Handler+0xc>)
    624c:	4798      	blx	r3
}
    624e:	bd80      	pop	{r7, pc}
    6250:	000061b5 	.word	0x000061b5

00006254 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    6254:	b580      	push	{r7, lr}
    6256:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(6);
    6258:	2006      	movs	r0, #6
    625a:	4b01      	ldr	r3, [pc, #4]	; (6260 <PDCA_6_Handler+0xc>)
    625c:	4798      	blx	r3
}
    625e:	bd80      	pop	{r7, pc}
    6260:	000061b5 	.word	0x000061b5

00006264 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    6264:	b580      	push	{r7, lr}
    6266:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(7);
    6268:	2007      	movs	r0, #7
    626a:	4b01      	ldr	r3, [pc, #4]	; (6270 <PDCA_7_Handler+0xc>)
    626c:	4798      	blx	r3
}
    626e:	bd80      	pop	{r7, pc}
    6270:	000061b5 	.word	0x000061b5

00006274 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    6274:	b580      	push	{r7, lr}
    6276:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(8);
    6278:	2008      	movs	r0, #8
    627a:	4b01      	ldr	r3, [pc, #4]	; (6280 <PDCA_8_Handler+0xc>)
    627c:	4798      	blx	r3
}
    627e:	bd80      	pop	{r7, pc}
    6280:	000061b5 	.word	0x000061b5

00006284 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    6284:	b580      	push	{r7, lr}
    6286:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(9);
    6288:	2009      	movs	r0, #9
    628a:	4b01      	ldr	r3, [pc, #4]	; (6290 <PDCA_9_Handler+0xc>)
    628c:	4798      	blx	r3
}
    628e:	bd80      	pop	{r7, pc}
    6290:	000061b5 	.word	0x000061b5

00006294 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    6294:	b580      	push	{r7, lr}
    6296:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(10);
    6298:	200a      	movs	r0, #10
    629a:	4b01      	ldr	r3, [pc, #4]	; (62a0 <PDCA_10_Handler+0xc>)
    629c:	4798      	blx	r3
}
    629e:	bd80      	pop	{r7, pc}
    62a0:	000061b5 	.word	0x000061b5

000062a4 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    62a4:	b580      	push	{r7, lr}
    62a6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(11);
    62a8:	200b      	movs	r0, #11
    62aa:	4b01      	ldr	r3, [pc, #4]	; (62b0 <PDCA_11_Handler+0xc>)
    62ac:	4798      	blx	r3
}
    62ae:	bd80      	pop	{r7, pc}
    62b0:	000061b5 	.word	0x000061b5

000062b4 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(12);
    62b8:	200c      	movs	r0, #12
    62ba:	4b01      	ldr	r3, [pc, #4]	; (62c0 <PDCA_12_Handler+0xc>)
    62bc:	4798      	blx	r3
}
    62be:	bd80      	pop	{r7, pc}
    62c0:	000061b5 	.word	0x000061b5

000062c4 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(13);
    62c8:	200d      	movs	r0, #13
    62ca:	4b01      	ldr	r3, [pc, #4]	; (62d0 <PDCA_13_Handler+0xc>)
    62cc:	4798      	blx	r3
}
    62ce:	bd80      	pop	{r7, pc}
    62d0:	000061b5 	.word	0x000061b5

000062d4 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    62d4:	b580      	push	{r7, lr}
    62d6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(14);
    62d8:	200e      	movs	r0, #14
    62da:	4b01      	ldr	r3, [pc, #4]	; (62e0 <PDCA_14_Handler+0xc>)
    62dc:	4798      	blx	r3
}
    62de:	bd80      	pop	{r7, pc}
    62e0:	000061b5 	.word	0x000061b5

000062e4 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    62e4:	b580      	push	{r7, lr}
    62e6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(15);
    62e8:	200f      	movs	r0, #15
    62ea:	4b01      	ldr	r3, [pc, #4]	; (62f0 <PDCA_15_Handler+0xc>)
    62ec:	4798      	blx	r3
}
    62ee:	bd80      	pop	{r7, pc}
    62f0:	000061b5 	.word	0x000061b5

000062f4 <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b082      	sub	sp, #8
    62f8:	af00      	add	r7, sp, #0
    62fa:	4603      	mov	r3, r0
    62fc:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    62fe:	79fb      	ldrb	r3, [r7, #7]
    6300:	2b06      	cmp	r3, #6
    6302:	d823      	bhi.n	634c <osc_enable+0x58>
    6304:	a201      	add	r2, pc, #4	; (adr r2, 630c <osc_enable+0x18>)
    6306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    630a:	bf00      	nop
    630c:	00006329 	.word	0x00006329
    6310:	0000632f 	.word	0x0000632f
    6314:	00006335 	.word	0x00006335
    6318:	0000633b 	.word	0x0000633b
    631c:	00006341 	.word	0x00006341
    6320:	00006347 	.word	0x00006347
    6324:	0000634d 	.word	0x0000634d
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    6328:	4b0a      	ldr	r3, [pc, #40]	; (6354 <osc_enable+0x60>)
    632a:	4798      	blx	r3
		break;
    632c:	e00f      	b.n	634e <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    632e:	4b0a      	ldr	r3, [pc, #40]	; (6358 <osc_enable+0x64>)
    6330:	4798      	blx	r3
		break;
    6332:	e00c      	b.n	634e <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    6334:	4b09      	ldr	r3, [pc, #36]	; (635c <osc_enable+0x68>)
    6336:	4798      	blx	r3
		break;
    6338:	e009      	b.n	634e <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    633a:	4b09      	ldr	r3, [pc, #36]	; (6360 <osc_enable+0x6c>)
    633c:	4798      	blx	r3
		break;
    633e:	e006      	b.n	634e <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    6340:	4b08      	ldr	r3, [pc, #32]	; (6364 <osc_enable+0x70>)
    6342:	4798      	blx	r3
		break;
    6344:	e003      	b.n	634e <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    6346:	4b08      	ldr	r3, [pc, #32]	; (6368 <osc_enable+0x74>)
    6348:	4798      	blx	r3
		break;
    634a:	e000      	b.n	634e <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    634c:	bf00      	nop
	}
}
    634e:	3708      	adds	r7, #8
    6350:	46bd      	mov	sp, r7
    6352:	bd80      	pop	{r7, pc}
    6354:	0000908d 	.word	0x0000908d
    6358:	000090c5 	.word	0x000090c5
    635c:	000090fd 	.word	0x000090fd
    6360:	0000917d 	.word	0x0000917d
    6364:	000091bd 	.word	0x000091bd
    6368:	0000913d 	.word	0x0000913d

0000636c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    636c:	b480      	push	{r7}
    636e:	b083      	sub	sp, #12
    6370:	af00      	add	r7, sp, #0
    6372:	4603      	mov	r3, r0
    6374:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    6376:	79fb      	ldrb	r3, [r7, #7]
    6378:	2b06      	cmp	r3, #6
    637a:	d84f      	bhi.n	641c <osc_is_ready+0xb0>
    637c:	a201      	add	r2, pc, #4	; (adr r2, 6384 <osc_is_ready+0x18>)
    637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6382:	bf00      	nop
    6384:	000063a1 	.word	0x000063a1
    6388:	000063b5 	.word	0x000063b5
    638c:	000063c9 	.word	0x000063c9
    6390:	000063dd 	.word	0x000063dd
    6394:	000063f1 	.word	0x000063f1
    6398:	00006405 	.word	0x00006405
    639c:	00006419 	.word	0x00006419
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    63a0:	4b22      	ldr	r3, [pc, #136]	; (642c <osc_is_ready+0xc0>)
    63a2:	695b      	ldr	r3, [r3, #20]
    63a4:	f003 0301 	and.w	r3, r3, #1
    63a8:	2b00      	cmp	r3, #0
    63aa:	bf0c      	ite	eq
    63ac:	2300      	moveq	r3, #0
    63ae:	2301      	movne	r3, #1
    63b0:	b2db      	uxtb	r3, r3
    63b2:	e034      	b.n	641e <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    63b4:	4b1e      	ldr	r3, [pc, #120]	; (6430 <osc_is_ready+0xc4>)
    63b6:	695b      	ldr	r3, [r3, #20]
    63b8:	f003 0301 	and.w	r3, r3, #1
    63bc:	2b00      	cmp	r3, #0
    63be:	bf0c      	ite	eq
    63c0:	2300      	moveq	r3, #0
    63c2:	2301      	movne	r3, #1
    63c4:	b2db      	uxtb	r3, r3
    63c6:	e02a      	b.n	641e <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    63c8:	4b19      	ldr	r3, [pc, #100]	; (6430 <osc_is_ready+0xc4>)
    63ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    63cc:	f003 0301 	and.w	r3, r3, #1
    63d0:	2b00      	cmp	r3, #0
    63d2:	bf0c      	ite	eq
    63d4:	2300      	moveq	r3, #0
    63d6:	2301      	movne	r3, #1
    63d8:	b2db      	uxtb	r3, r3
    63da:	e020      	b.n	641e <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    63dc:	4b13      	ldr	r3, [pc, #76]	; (642c <osc_is_ready+0xc0>)
    63de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    63e0:	f003 0301 	and.w	r3, r3, #1
    63e4:	2b00      	cmp	r3, #0
    63e6:	bf0c      	ite	eq
    63e8:	2300      	moveq	r3, #0
    63ea:	2301      	movne	r3, #1
    63ec:	b2db      	uxtb	r3, r3
    63ee:	e016      	b.n	641e <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    63f0:	4b0e      	ldr	r3, [pc, #56]	; (642c <osc_is_ready+0xc0>)
    63f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    63f4:	f003 0301 	and.w	r3, r3, #1
    63f8:	2b00      	cmp	r3, #0
    63fa:	bf0c      	ite	eq
    63fc:	2300      	moveq	r3, #0
    63fe:	2301      	movne	r3, #1
    6400:	b2db      	uxtb	r3, r3
    6402:	e00c      	b.n	641e <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    6404:	4b0a      	ldr	r3, [pc, #40]	; (6430 <osc_is_ready+0xc4>)
    6406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    6408:	f003 0301 	and.w	r3, r3, #1
    640c:	2b00      	cmp	r3, #0
    640e:	bf0c      	ite	eq
    6410:	2300      	moveq	r3, #0
    6412:	2301      	movne	r3, #1
    6414:	b2db      	uxtb	r3, r3
    6416:	e002      	b.n	641e <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    6418:	2301      	movs	r3, #1
    641a:	e000      	b.n	641e <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    641c:	2300      	movs	r3, #0
	}
}
    641e:	4618      	mov	r0, r3
    6420:	370c      	adds	r7, #12
    6422:	46bd      	mov	sp, r7
    6424:	f85d 7b04 	ldr.w	r7, [sp], #4
    6428:	4770      	bx	lr
    642a:	bf00      	nop
    642c:	400e0800 	.word	0x400e0800
    6430:	400f0400 	.word	0x400f0400

00006434 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    6434:	b580      	push	{r7, lr}
    6436:	b082      	sub	sp, #8
    6438:	af00      	add	r7, sp, #0
    643a:	4603      	mov	r3, r0
    643c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    643e:	bf00      	nop
    6440:	79fb      	ldrb	r3, [r7, #7]
    6442:	4618      	mov	r0, r3
    6444:	4b05      	ldr	r3, [pc, #20]	; (645c <osc_wait_ready+0x28>)
    6446:	4798      	blx	r3
    6448:	4603      	mov	r3, r0
    644a:	f083 0301 	eor.w	r3, r3, #1
    644e:	b2db      	uxtb	r3, r3
    6450:	2b00      	cmp	r3, #0
    6452:	d1f5      	bne.n	6440 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    6454:	3708      	adds	r7, #8
    6456:	46bd      	mov	sp, r7
    6458:	bd80      	pop	{r7, pc}
    645a:	bf00      	nop
    645c:	0000636d 	.word	0x0000636d

00006460 <ast_is_busy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST is busy, else it will return 0.
 */
static inline bool ast_is_busy(Ast *ast)
{
    6460:	b480      	push	{r7}
    6462:	b083      	sub	sp, #12
    6464:	af00      	add	r7, sp, #0
    6466:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	689b      	ldr	r3, [r3, #8]
    646c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6470:	2b00      	cmp	r3, #0
    6472:	bf0c      	ite	eq
    6474:	2300      	moveq	r3, #0
    6476:	2301      	movne	r3, #1
    6478:	b2db      	uxtb	r3, r3
}
    647a:	4618      	mov	r0, r3
    647c:	370c      	adds	r7, #12
    647e:	46bd      	mov	sp, r7
    6480:	f85d 7b04 	ldr.w	r7, [sp], #4
    6484:	4770      	bx	lr
    6486:	bf00      	nop

00006488 <ast_stop>:
 * \brief Stop AST counter.
 *
 * \param ast  Base address of the AST.
 */
static inline void ast_stop(Ast *ast)
{
    6488:	b580      	push	{r7, lr}
    648a:	b082      	sub	sp, #8
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    6490:	bf00      	nop
    6492:	6878      	ldr	r0, [r7, #4]
    6494:	4b06      	ldr	r3, [pc, #24]	; (64b0 <ast_stop+0x28>)
    6496:	4798      	blx	r3
    6498:	4603      	mov	r3, r0
    649a:	2b00      	cmp	r3, #0
    649c:	d1f9      	bne.n	6492 <ast_stop+0xa>
	}
	ast->AST_CR &= ~(AST_CR_EN);
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	681b      	ldr	r3, [r3, #0]
    64a2:	f023 0201 	bic.w	r2, r3, #1
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	601a      	str	r2, [r3, #0]
}
    64aa:	3708      	adds	r7, #8
    64ac:	46bd      	mov	sp, r7
    64ae:	bd80      	pop	{r7, pc}
    64b0:	00006461 	.word	0x00006461

000064b4 <config_ast>:
 */ 

#include <ast_timer.h>

int config_ast(void)
{
    64b4:	b590      	push	{r4, r7, lr}
    64b6:	b087      	sub	sp, #28
    64b8:	af02      	add	r7, sp, #8
	struct ast_config ast_conf;

	/* Enable osc32 oscillator */
	if (!osc_is_ready(OSC_ID_OSC32)) {
    64ba:	2001      	movs	r0, #1
    64bc:	4b1c      	ldr	r3, [pc, #112]	; (6530 <config_ast+0x7c>)
    64be:	4798      	blx	r3
    64c0:	4603      	mov	r3, r0
    64c2:	f083 0301 	eor.w	r3, r3, #1
    64c6:	b2db      	uxtb	r3, r3
    64c8:	2b00      	cmp	r3, #0
    64ca:	d005      	beq.n	64d8 <config_ast+0x24>
		osc_enable(OSC_ID_OSC32);
    64cc:	2001      	movs	r0, #1
    64ce:	4b19      	ldr	r3, [pc, #100]	; (6534 <config_ast+0x80>)
    64d0:	4798      	blx	r3
		osc_wait_ready(OSC_ID_OSC32);
    64d2:	2001      	movs	r0, #1
    64d4:	4b18      	ldr	r3, [pc, #96]	; (6538 <config_ast+0x84>)
    64d6:	4798      	blx	r3
	}

	/* Enable the AST. */
	ast_enable(AST);
    64d8:	4818      	ldr	r0, [pc, #96]	; (653c <config_ast+0x88>)
    64da:	4b19      	ldr	r3, [pc, #100]	; (6540 <config_ast+0x8c>)
    64dc:	4798      	blx	r3

	ast_conf.mode = AST_COUNTER_MODE;
    64de:	2300      	movs	r3, #0
    64e0:	713b      	strb	r3, [r7, #4]
	ast_conf.osc_type = AST_OSC_1KHZ;
    64e2:	2304      	movs	r3, #4
    64e4:	717b      	strb	r3, [r7, #5]
	ast_conf.psel = AST_PSEL_32KHZ_1HZ;
    64e6:	230e      	movs	r3, #14
    64e8:	71bb      	strb	r3, [r7, #6]
	ast_conf.counter = 0;
    64ea:	2300      	movs	r3, #0
    64ec:	60bb      	str	r3, [r7, #8]
	ast_set_config(AST, &ast_conf);
    64ee:	1d3b      	adds	r3, r7, #4
    64f0:	4812      	ldr	r0, [pc, #72]	; (653c <config_ast+0x88>)
    64f2:	4619      	mov	r1, r3
    64f4:	4b13      	ldr	r3, [pc, #76]	; (6544 <config_ast+0x90>)
    64f6:	4798      	blx	r3
	ast_stop(AST);
    64f8:	4810      	ldr	r0, [pc, #64]	; (653c <config_ast+0x88>)
    64fa:	4b13      	ldr	r3, [pc, #76]	; (6548 <config_ast+0x94>)
    64fc:	4798      	blx	r3

	/* Set periodic 0 to interrupt after 8 second in counter mode. */
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_PER);
    64fe:	480f      	ldr	r0, [pc, #60]	; (653c <config_ast+0x88>)
    6500:	2101      	movs	r1, #1
    6502:	4b12      	ldr	r3, [pc, #72]	; (654c <config_ast+0x98>)
    6504:	4798      	blx	r3
	ast_write_periodic0_value(AST, AST_PSEL_32KHZ_1HZ - 5);
    6506:	480d      	ldr	r0, [pc, #52]	; (653c <config_ast+0x88>)
    6508:	2109      	movs	r1, #9
    650a:	4b11      	ldr	r3, [pc, #68]	; (6550 <config_ast+0x9c>)
    650c:	4798      	blx	r3
	ast_enable_wakeup(AST, AST_WAKEUP_PER);
    650e:	480b      	ldr	r0, [pc, #44]	; (653c <config_ast+0x88>)
    6510:	2101      	movs	r1, #1
    6512:	4b10      	ldr	r3, [pc, #64]	; (6554 <config_ast+0xa0>)
    6514:	4798      	blx	r3
	/* Set callback for periodic0. */
	ast_set_callback(AST, AST_INTERRUPT_PER, ast_per_callback,
    6516:	2302      	movs	r3, #2
    6518:	9300      	str	r3, [sp, #0]
    651a:	4808      	ldr	r0, [pc, #32]	; (653c <config_ast+0x88>)
    651c:	2101      	movs	r1, #1
    651e:	4a0e      	ldr	r2, [pc, #56]	; (6558 <config_ast+0xa4>)
    6520:	2328      	movs	r3, #40	; 0x28
    6522:	4c0e      	ldr	r4, [pc, #56]	; (655c <config_ast+0xa8>)
    6524:	47a0      	blx	r4
	AST_PER_IRQn, 2);
	
	return 0;
    6526:	2300      	movs	r3, #0
    6528:	4618      	mov	r0, r3
    652a:	3714      	adds	r7, #20
    652c:	46bd      	mov	sp, r7
    652e:	bd90      	pop	{r4, r7, pc}
    6530:	0000636d 	.word	0x0000636d
    6534:	000062f5 	.word	0x000062f5
    6538:	00006435 	.word	0x00006435
    653c:	400f0800 	.word	0x400f0800
    6540:	00004d75 	.word	0x00004d75
    6544:	00004d99 	.word	0x00004d99
    6548:	00006489 	.word	0x00006489
    654c:	000050a1 	.word	0x000050a1
    6550:	00004f59 	.word	0x00004f59
    6554:	00005199 	.word	0x00005199
    6558:	0000b8c5 	.word	0x0000b8c5
    655c:	00005129 	.word	0x00005129

00006560 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    6560:	b480      	push	{r7}
    6562:	b08d      	sub	sp, #52	; 0x34
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
    6568:	6039      	str	r1, [r7, #0]
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	62fb      	str	r3, [r7, #44]	; 0x2c
    656e:	683b      	ldr	r3, [r7, #0]
    6570:	62bb      	str	r3, [r7, #40]	; 0x28
    6572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6574:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6578:	095a      	lsrs	r2, r3, #5
    657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    657c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    657e:	6a3b      	ldr	r3, [r7, #32]
    6580:	f003 031f 	and.w	r3, r3, #31
    6584:	2101      	movs	r1, #1
    6586:	fa01 f303 	lsl.w	r3, r1, r3
    658a:	61fa      	str	r2, [r7, #28]
    658c:	61bb      	str	r3, [r7, #24]
    658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6590:	617b      	str	r3, [r7, #20]
    6592:	69fb      	ldr	r3, [r7, #28]
    6594:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6596:	693b      	ldr	r3, [r7, #16]
    6598:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    659c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    65a0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    65a2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    65a4:	697b      	ldr	r3, [r7, #20]
    65a6:	f003 0308 	and.w	r3, r3, #8
    65aa:	2b00      	cmp	r3, #0
    65ac:	d003      	beq.n	65b6 <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    65ae:	68fb      	ldr	r3, [r7, #12]
    65b0:	69ba      	ldr	r2, [r7, #24]
    65b2:	675a      	str	r2, [r3, #116]	; 0x74
    65b4:	e002      	b.n	65bc <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    65b6:	68fb      	ldr	r3, [r7, #12]
    65b8:	69ba      	ldr	r2, [r7, #24]
    65ba:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    65bc:	697b      	ldr	r3, [r7, #20]
    65be:	f003 0310 	and.w	r3, r3, #16
    65c2:	2b00      	cmp	r3, #0
    65c4:	d004      	beq.n	65d0 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    65c6:	68fb      	ldr	r3, [r7, #12]
    65c8:	69ba      	ldr	r2, [r7, #24]
    65ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    65ce:	e003      	b.n	65d8 <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    65d0:	68fb      	ldr	r3, [r7, #12]
    65d2:	69ba      	ldr	r2, [r7, #24]
    65d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    65d8:	697b      	ldr	r3, [r7, #20]
    65da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    65de:	2b00      	cmp	r3, #0
    65e0:	d004      	beq.n	65ec <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    65e2:	68fb      	ldr	r3, [r7, #12]
    65e4:	69ba      	ldr	r2, [r7, #24]
    65e6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    65ea:	e003      	b.n	65f4 <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	69ba      	ldr	r2, [r7, #24]
    65f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    65f4:	697b      	ldr	r3, [r7, #20]
    65f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    65fa:	2b00      	cmp	r3, #0
    65fc:	d004      	beq.n	6608 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    65fe:	68fb      	ldr	r3, [r7, #12]
    6600:	69ba      	ldr	r2, [r7, #24]
    6602:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6606:	e003      	b.n	6610 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    6608:	68fb      	ldr	r3, [r7, #12]
    660a:	69ba      	ldr	r2, [r7, #24]
    660c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    6610:	697b      	ldr	r3, [r7, #20]
    6612:	f003 0301 	and.w	r3, r3, #1
    6616:	2b00      	cmp	r3, #0
    6618:	d003      	beq.n	6622 <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    661a:	68fb      	ldr	r3, [r7, #12]
    661c:	69ba      	ldr	r2, [r7, #24]
    661e:	615a      	str	r2, [r3, #20]
    6620:	e002      	b.n	6628 <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    6622:	68fb      	ldr	r3, [r7, #12]
    6624:	69ba      	ldr	r2, [r7, #24]
    6626:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    6628:	697b      	ldr	r3, [r7, #20]
    662a:	f003 0302 	and.w	r3, r3, #2
    662e:	2b00      	cmp	r3, #0
    6630:	d003      	beq.n	663a <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    6632:	68fb      	ldr	r3, [r7, #12]
    6634:	69ba      	ldr	r2, [r7, #24]
    6636:	625a      	str	r2, [r3, #36]	; 0x24
    6638:	e002      	b.n	6640 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    663a:	68fb      	ldr	r3, [r7, #12]
    663c:	69ba      	ldr	r2, [r7, #24]
    663e:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    6640:	697b      	ldr	r3, [r7, #20]
    6642:	f003 0304 	and.w	r3, r3, #4
    6646:	2b00      	cmp	r3, #0
    6648:	d003      	beq.n	6652 <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    664a:	68fb      	ldr	r3, [r7, #12]
    664c:	69ba      	ldr	r2, [r7, #24]
    664e:	635a      	str	r2, [r3, #52]	; 0x34
    6650:	e002      	b.n	6658 <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    6652:	68fb      	ldr	r3, [r7, #12]
    6654:	69ba      	ldr	r2, [r7, #24]
    6656:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_set_pin_mode(pin, mode);
}
    6658:	3734      	adds	r7, #52	; 0x34
    665a:	46bd      	mov	sp, r7
    665c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6660:	4770      	bx	lr
    6662:	bf00      	nop

00006664 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    6664:	b480      	push	{r7}
    6666:	b095      	sub	sp, #84	; 0x54
    6668:	af00      	add	r7, sp, #0
    666a:	6078      	str	r0, [r7, #4]
    666c:	460b      	mov	r3, r1
    666e:	70fb      	strb	r3, [r7, #3]
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	64fb      	str	r3, [r7, #76]	; 0x4c
    6674:	78fb      	ldrb	r3, [r7, #3]
    6676:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    667a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    667e:	2b01      	cmp	r3, #1
    6680:	d12d      	bne.n	66de <ioport_set_pin_dir+0x7a>
    6682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6684:	647b      	str	r3, [r7, #68]	; 0x44
    6686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6688:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    668a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    668c:	095b      	lsrs	r3, r3, #5
    668e:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6692:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6696:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    669a:	025b      	lsls	r3, r3, #9
    669c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    669e:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    66a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    66a2:	f002 021f 	and.w	r2, r2, #31
    66a6:	2101      	movs	r1, #1
    66a8:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    66ac:	645a      	str	r2, [r3, #68]	; 0x44
    66ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66b0:	637b      	str	r3, [r7, #52]	; 0x34
    66b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    66b4:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    66b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    66b8:	095b      	lsrs	r3, r3, #5
    66ba:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    66bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    66c2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    66c6:	025b      	lsls	r3, r3, #9
    66c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    66ca:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    66cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    66ce:	f002 021f 	and.w	r2, r2, #31
    66d2:	2101      	movs	r1, #1
    66d4:	fa01 f202 	lsl.w	r2, r1, r2
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    66d8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    66dc:	e030      	b.n	6740 <ioport_set_pin_dir+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
    66de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    66e2:	2b00      	cmp	r3, #0
    66e4:	d12c      	bne.n	6740 <ioport_set_pin_dir+0xdc>
    66e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66e8:	627b      	str	r3, [r7, #36]	; 0x24
    66ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    66ec:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    66ee:	6a3b      	ldr	r3, [r7, #32]
    66f0:	095b      	lsrs	r3, r3, #5
    66f2:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    66f4:	69fb      	ldr	r3, [r7, #28]
    66f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    66fa:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    66fe:	025b      	lsls	r3, r3, #9
    6700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6702:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6704:	69ba      	ldr	r2, [r7, #24]
    6706:	f002 021f 	and.w	r2, r2, #31
    670a:	2101      	movs	r1, #1
    670c:	fa01 f202 	lsl.w	r2, r1, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    6710:	649a      	str	r2, [r3, #72]	; 0x48
    6712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6714:	617b      	str	r3, [r7, #20]
    6716:	697b      	ldr	r3, [r7, #20]
    6718:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    671a:	693b      	ldr	r3, [r7, #16]
    671c:	095b      	lsrs	r3, r3, #5
    671e:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6720:	68fb      	ldr	r3, [r7, #12]
    6722:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6726:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    672a:	025b      	lsls	r3, r3, #9
    672c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    672e:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6730:	68ba      	ldr	r2, [r7, #8]
    6732:	f002 021f 	and.w	r2, r2, #31
    6736:	2101      	movs	r1, #1
    6738:	fa01 f202 	lsl.w	r2, r1, r2
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    673c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	arch_ioport_set_pin_dir(pin, dir);
}
    6740:	3754      	adds	r7, #84	; 0x54
    6742:	46bd      	mov	sp, r7
    6744:	f85d 7b04 	ldr.w	r7, [sp], #4
    6748:	4770      	bx	lr
    674a:	bf00      	nop

0000674c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    674c:	b480      	push	{r7}
    674e:	b08d      	sub	sp, #52	; 0x34
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    6754:	460b      	mov	r3, r1
    6756:	70fb      	strb	r3, [r7, #3]
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	62fb      	str	r3, [r7, #44]	; 0x2c
    675c:	78fb      	ldrb	r3, [r7, #3]
    675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    6762:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    6766:	2b00      	cmp	r3, #0
    6768:	d016      	beq.n	6798 <ioport_set_pin_level+0x4c>
    676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    676c:	627b      	str	r3, [r7, #36]	; 0x24
    676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6770:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6772:	6a3b      	ldr	r3, [r7, #32]
    6774:	095b      	lsrs	r3, r3, #5
    6776:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6778:	69fb      	ldr	r3, [r7, #28]
    677a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    677e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6782:	025b      	lsls	r3, r3, #9
    6784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6786:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6788:	69ba      	ldr	r2, [r7, #24]
    678a:	f002 021f 	and.w	r2, r2, #31
    678e:	2101      	movs	r1, #1
    6790:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    6794:	655a      	str	r2, [r3, #84]	; 0x54
    6796:	e015      	b.n	67c4 <ioport_set_pin_level+0x78>
    6798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    679a:	617b      	str	r3, [r7, #20]
    679c:	697b      	ldr	r3, [r7, #20]
    679e:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    67a0:	693b      	ldr	r3, [r7, #16]
    67a2:	095b      	lsrs	r3, r3, #5
    67a4:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    67a6:	68fb      	ldr	r3, [r7, #12]
    67a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    67ac:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    67b0:	025b      	lsls	r3, r3, #9
    67b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    67b4:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    67b6:	68ba      	ldr	r2, [r7, #8]
    67b8:	f002 021f 	and.w	r2, r2, #31
    67bc:	2101      	movs	r1, #1
    67be:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    67c2:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(pin, level);
}
    67c4:	3734      	adds	r7, #52	; 0x34
    67c6:	46bd      	mov	sp, r7
    67c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    67cc:	4770      	bx	lr
    67ce:	bf00      	nop

000067d0 <custom_init>:
 */ 

#include <custom_board_init.h>

void custom_init(void)
{
    67d0:	b580      	push	{r7, lr}
    67d2:	af00      	add	r7, sp, #0
	/* Initialize OLED board buttons */
	ioport_set_pin_dir(OLED_BUTTON1, IOPORT_DIR_INPUT);
    67d4:	2006      	movs	r0, #6
    67d6:	2100      	movs	r1, #0
    67d8:	4b17      	ldr	r3, [pc, #92]	; (6838 <custom_init+0x68>)
    67da:	4798      	blx	r3
	ioport_set_pin_mode(OLED_BUTTON1, IOPORT_MODE_PULLUP);
    67dc:	2006      	movs	r0, #6
    67de:	2108      	movs	r1, #8
    67e0:	4b16      	ldr	r3, [pc, #88]	; (683c <custom_init+0x6c>)
    67e2:	4798      	blx	r3
	ioport_set_pin_dir(OLED_BUTTON2, IOPORT_DIR_INPUT);
    67e4:	2023      	movs	r0, #35	; 0x23
    67e6:	2100      	movs	r1, #0
    67e8:	4b13      	ldr	r3, [pc, #76]	; (6838 <custom_init+0x68>)
    67ea:	4798      	blx	r3
	ioport_set_pin_mode(OLED_BUTTON2, IOPORT_MODE_PULLUP);
    67ec:	2023      	movs	r0, #35	; 0x23
    67ee:	2108      	movs	r1, #8
    67f0:	4b12      	ldr	r3, [pc, #72]	; (683c <custom_init+0x6c>)
    67f2:	4798      	blx	r3
	ioport_set_pin_dir(OLED_BUTTON3, IOPORT_DIR_INPUT);
    67f4:	2024      	movs	r0, #36	; 0x24
    67f6:	2100      	movs	r1, #0
    67f8:	4b0f      	ldr	r3, [pc, #60]	; (6838 <custom_init+0x68>)
    67fa:	4798      	blx	r3
	ioport_set_pin_mode(OLED_BUTTON3, IOPORT_MODE_PULLUP);
    67fc:	2024      	movs	r0, #36	; 0x24
    67fe:	2108      	movs	r1, #8
    6800:	4b0e      	ldr	r3, [pc, #56]	; (683c <custom_init+0x6c>)
    6802:	4798      	blx	r3

	ioport_set_pin_dir(OLED_LED1, IOPORT_DIR_OUTPUT);
    6804:	2008      	movs	r0, #8
    6806:	2101      	movs	r1, #1
    6808:	4b0b      	ldr	r3, [pc, #44]	; (6838 <custom_init+0x68>)
    680a:	4798      	blx	r3
	ioport_set_pin_dir(OLED_LED2, IOPORT_DIR_OUTPUT);
    680c:	2009      	movs	r0, #9
    680e:	2101      	movs	r1, #1
    6810:	4b09      	ldr	r3, [pc, #36]	; (6838 <custom_init+0x68>)
    6812:	4798      	blx	r3
	ioport_set_pin_dir(OLED_LED3, IOPORT_DIR_OUTPUT);
    6814:	2050      	movs	r0, #80	; 0x50
    6816:	2101      	movs	r1, #1
    6818:	4b07      	ldr	r3, [pc, #28]	; (6838 <custom_init+0x68>)
    681a:	4798      	blx	r3
	
	ioport_set_pin_level(OLED_LED1, true);
    681c:	2008      	movs	r0, #8
    681e:	2101      	movs	r1, #1
    6820:	4b07      	ldr	r3, [pc, #28]	; (6840 <custom_init+0x70>)
    6822:	4798      	blx	r3
	ioport_set_pin_level(OLED_LED2, true);
    6824:	2009      	movs	r0, #9
    6826:	2101      	movs	r1, #1
    6828:	4b05      	ldr	r3, [pc, #20]	; (6840 <custom_init+0x70>)
    682a:	4798      	blx	r3
	ioport_set_pin_level(OLED_LED3, true);
    682c:	2050      	movs	r0, #80	; 0x50
    682e:	2101      	movs	r1, #1
    6830:	4b03      	ldr	r3, [pc, #12]	; (6840 <custom_init+0x70>)
    6832:	4798      	blx	r3

    6834:	bd80      	pop	{r7, pc}
    6836:	bf00      	nop
    6838:	00006665 	.word	0x00006665
    683c:	00006561 	.word	0x00006561
    6840:	0000674d 	.word	0x0000674d

00006844 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    6844:	b480      	push	{r7}
    6846:	b083      	sub	sp, #12
    6848:	af00      	add	r7, sp, #0
    684a:	4603      	mov	r3, r0
    684c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    684e:	79fb      	ldrb	r3, [r7, #7]
    6850:	2b0d      	cmp	r3, #13
    6852:	d82b      	bhi.n	68ac <dfll_priv_get_source_hz+0x68>
    6854:	a201      	add	r2, pc, #4	; (adr r2, 685c <dfll_priv_get_source_hz+0x18>)
    6856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    685a:	bf00      	nop
    685c:	00006895 	.word	0x00006895
    6860:	00006899 	.word	0x00006899
    6864:	000068ad 	.word	0x000068ad
    6868:	0000689f 	.word	0x0000689f
    686c:	000068a3 	.word	0x000068a3
    6870:	000068ad 	.word	0x000068ad
    6874:	000068ad 	.word	0x000068ad
    6878:	000068ad 	.word	0x000068ad
    687c:	000068ad 	.word	0x000068ad
    6880:	000068ad 	.word	0x000068ad
    6884:	000068ad 	.word	0x000068ad
    6888:	000068ad 	.word	0x000068ad
    688c:	000068ad 	.word	0x000068ad
    6890:	000068a7 	.word	0x000068a7
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    6894:	4b09      	ldr	r3, [pc, #36]	; (68bc <dfll_priv_get_source_hz+0x78>)
    6896:	e00a      	b.n	68ae <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    6898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    689c:	e007      	b.n	68ae <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    689e:	4b08      	ldr	r3, [pc, #32]	; (68c0 <dfll_priv_get_source_hz+0x7c>)
    68a0:	e005      	b.n	68ae <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    68a2:	4b08      	ldr	r3, [pc, #32]	; (68c4 <dfll_priv_get_source_hz+0x80>)
    68a4:	e003      	b.n	68ae <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    68a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    68aa:	e000      	b.n	68ae <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    68ac:	2300      	movs	r3, #0
	}
}
    68ae:	4618      	mov	r0, r3
    68b0:	370c      	adds	r7, #12
    68b2:	46bd      	mov	sp, r7
    68b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    68b8:	4770      	bx	lr
    68ba:	bf00      	nop
    68bc:	0001c138 	.word	0x0001c138
    68c0:	00b71b00 	.word	0x00b71b00
    68c4:	04c4b400 	.word	0x04c4b400

000068c8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    68c8:	b580      	push	{r7, lr}
    68ca:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    68cc:	2001      	movs	r0, #1
    68ce:	4b04      	ldr	r3, [pc, #16]	; (68e0 <sysclk_get_main_hz+0x18>)
    68d0:	4798      	blx	r3
    68d2:	4603      	mov	r3, r0
    68d4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    68d8:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    68dc:	4618      	mov	r0, r3
    68de:	bd80      	pop	{r7, pc}
    68e0:	00006845 	.word	0x00006845

000068e4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    68e4:	b580      	push	{r7, lr}
    68e6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    68e8:	4b02      	ldr	r3, [pc, #8]	; (68f4 <sysclk_get_cpu_hz+0x10>)
    68ea:	4798      	blx	r3
    68ec:	4603      	mov	r3, r0
}
    68ee:	4618      	mov	r0, r3
    68f0:	bd80      	pop	{r7, pc}
    68f2:	bf00      	nop
    68f4:	000068c9 	.word	0x000068c9

000068f8 <write_log>:
extern FIL log_file_object;

// writes log files to SD card
// the log files are numbered 1,2,3,4....
int write_log(char* data, char* filename)
{
    68f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68fc:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    6900:	af00      	add	r7, sp, #0
    6902:	1d3b      	adds	r3, r7, #4
    6904:	6018      	str	r0, [r3, #0]
    6906:	463b      	mov	r3, r7
    6908:	6019      	str	r1, [r3, #0]
	char log_file_name[20] = "0:";
    690a:	f643 2330 	movw	r3, #14896	; 0x3a30
    690e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    6912:	f507 730f 	add.w	r3, r7, #572	; 0x23c
    6916:	2200      	movs	r2, #0
    6918:	601a      	str	r2, [r3, #0]
    691a:	3304      	adds	r3, #4
    691c:	2200      	movs	r2, #0
    691e:	601a      	str	r2, [r3, #0]
    6920:	3304      	adds	r3, #4
    6922:	2200      	movs	r2, #0
    6924:	601a      	str	r2, [r3, #0]
    6926:	3304      	adds	r3, #4
    6928:	2200      	movs	r2, #0
    692a:	601a      	str	r2, [r3, #0]
    692c:	3304      	adds	r3, #4
	FRESULT res;
	FATFS fs;
	
	/* Wait card present and ready */
	do {
		status = sd_mmc_test_unit_ready(0);
    692e:	2000      	movs	r0, #0
    6930:	4b50      	ldr	r3, [pc, #320]	; (6a74 <write_log+0x17c>)
    6932:	4798      	blx	r3
    6934:	4603      	mov	r3, r0
    6936:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
		
		if(status == CTRL_NO_PRESENT)
    693a:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
    693e:	2b02      	cmp	r3, #2
    6940:	d140      	bne.n	69c4 <write_log+0xcc>
		{
			delay_ms(500); // give it some more time
    6942:	4b4d      	ldr	r3, [pc, #308]	; (6a78 <write_log+0x180>)
    6944:	4798      	blx	r3
    6946:	4603      	mov	r3, r0
    6948:	4618      	mov	r0, r3
    694a:	f04f 0100 	mov.w	r1, #0
    694e:	4602      	mov	r2, r0
    6950:	460b      	mov	r3, r1
    6952:	ea4f 0983 	mov.w	r9, r3, lsl #2
    6956:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    695a:	ea4f 0882 	mov.w	r8, r2, lsl #2
    695e:	4642      	mov	r2, r8
    6960:	464b      	mov	r3, r9
    6962:	015d      	lsls	r5, r3, #5
    6964:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    6968:	0154      	lsls	r4, r2, #5
    696a:	1aa4      	subs	r4, r4, r2
    696c:	eb65 0503 	sbc.w	r5, r5, r3
    6970:	1824      	adds	r4, r4, r0
    6972:	eb45 0501 	adc.w	r5, r5, r1
    6976:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    697a:	ea4b 7b94 	orr.w	fp, fp, r4, lsr #30
    697e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    6982:	4654      	mov	r4, sl
    6984:	465d      	mov	r5, fp
    6986:	4620      	mov	r0, r4
    6988:	4629      	mov	r1, r5
    698a:	f243 62af 	movw	r2, #13999	; 0x36af
    698e:	f04f 0300 	mov.w	r3, #0
    6992:	1812      	adds	r2, r2, r0
    6994:	eb43 0301 	adc.w	r3, r3, r1
    6998:	4e38      	ldr	r6, [pc, #224]	; (6a7c <write_log+0x184>)
    699a:	4610      	mov	r0, r2
    699c:	4619      	mov	r1, r3
    699e:	f243 62b0 	movw	r2, #14000	; 0x36b0
    69a2:	f04f 0300 	mov.w	r3, #0
    69a6:	47b0      	blx	r6
    69a8:	4602      	mov	r2, r0
    69aa:	460b      	mov	r3, r1
    69ac:	4613      	mov	r3, r2
    69ae:	4618      	mov	r0, r3
    69b0:	4b33      	ldr	r3, [pc, #204]	; (6a80 <write_log+0x188>)
    69b2:	4798      	blx	r3
			
			if(sd_mmc_test_unit_ready(0) == CTRL_NO_PRESENT)
    69b4:	2000      	movs	r0, #0
    69b6:	4b2f      	ldr	r3, [pc, #188]	; (6a74 <write_log+0x17c>)
    69b8:	4798      	blx	r3
    69ba:	4603      	mov	r3, r0
    69bc:	2b02      	cmp	r3, #2
    69be:	d101      	bne.n	69c4 <write_log+0xcc>
				return 1;
    69c0:	2301      	movs	r3, #1
    69c2:	e050      	b.n	6a66 <write_log+0x16e>
		}
		
	} while (CTRL_GOOD != status);
    69c4:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
    69c8:	2b00      	cmp	r3, #0
    69ca:	d1b0      	bne.n	692e <write_log+0x36>
	
	memset(&fs, 0, sizeof(FATFS));
    69cc:	f107 0308 	add.w	r3, r7, #8
    69d0:	4618      	mov	r0, r3
    69d2:	2100      	movs	r1, #0
    69d4:	f44f 720c 	mov.w	r2, #560	; 0x230
    69d8:	4b2a      	ldr	r3, [pc, #168]	; (6a84 <write_log+0x18c>)
    69da:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    69dc:	f107 0308 	add.w	r3, r7, #8
    69e0:	2000      	movs	r0, #0
    69e2:	4619      	mov	r1, r3
    69e4:	4b28      	ldr	r3, [pc, #160]	; (6a88 <write_log+0x190>)
    69e6:	4798      	blx	r3
    69e8:	4603      	mov	r3, r0
    69ea:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d
	if (FR_INVALID_DRIVE == res) {
    69ee:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
    69f2:	2b0b      	cmp	r3, #11
    69f4:	d101      	bne.n	69fa <write_log+0x102>
		
		return 1; // fail
    69f6:	2301      	movs	r3, #1
    69f8:	e035      	b.n	6a66 <write_log+0x16e>
	}
	
	log_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    69fa:	2330      	movs	r3, #48	; 0x30
    69fc:	f887 3238 	strb.w	r3, [r7, #568]	; 0x238
	
	uint8_t filenumber = 0;
    6a00:	2300      	movs	r3, #0
    6a02:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	
	do
	{
		sprintf(log_file_name, "%s%d.txt\0", filename, filenumber++);
    6a06:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
    6a0a:	1c5a      	adds	r2, r3, #1
    6a0c:	f887 224f 	strb.w	r2, [r7, #591]	; 0x24f
    6a10:	f507 710e 	add.w	r1, r7, #568	; 0x238
    6a14:	463a      	mov	r2, r7
    6a16:	4608      	mov	r0, r1
    6a18:	491c      	ldr	r1, [pc, #112]	; (6a8c <write_log+0x194>)
    6a1a:	6812      	ldr	r2, [r2, #0]
    6a1c:	4c1c      	ldr	r4, [pc, #112]	; (6a90 <write_log+0x198>)
    6a1e:	47a0      	blx	r4
		
		res = f_open(&log_file_object,
    6a20:	f507 730e 	add.w	r3, r7, #568	; 0x238
    6a24:	481b      	ldr	r0, [pc, #108]	; (6a94 <write_log+0x19c>)
    6a26:	4619      	mov	r1, r3
    6a28:	2206      	movs	r2, #6
    6a2a:	4b1b      	ldr	r3, [pc, #108]	; (6a98 <write_log+0x1a0>)
    6a2c:	4798      	blx	r3
    6a2e:	4603      	mov	r3, r0
    6a30:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d
				(char const *)log_file_name,
				FA_WRITE | FA_CREATE_NEW);
	}while(res == FR_EXIST);
    6a34:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
    6a38:	2b08      	cmp	r3, #8
    6a3a:	d0e4      	beq.n	6a06 <write_log+0x10e>
	
	
	if (res != FR_OK) {
    6a3c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
    6a40:	2b00      	cmp	r3, #0
    6a42:	d001      	beq.n	6a48 <write_log+0x150>
		return 1; // fail
    6a44:	2301      	movs	r3, #1
    6a46:	e00e      	b.n	6a66 <write_log+0x16e>
	}
	 
	if (0 == f_puts(data, &log_file_object)) {
    6a48:	1d3b      	adds	r3, r7, #4
    6a4a:	6818      	ldr	r0, [r3, #0]
    6a4c:	4911      	ldr	r1, [pc, #68]	; (6a94 <write_log+0x19c>)
    6a4e:	4b13      	ldr	r3, [pc, #76]	; (6a9c <write_log+0x1a4>)
    6a50:	4798      	blx	r3
    6a52:	4603      	mov	r3, r0
    6a54:	2b00      	cmp	r3, #0
    6a56:	d102      	bne.n	6a5e <write_log+0x166>
			printf("fail");
    6a58:	4811      	ldr	r0, [pc, #68]	; (6aa0 <write_log+0x1a8>)
    6a5a:	4b12      	ldr	r3, [pc, #72]	; (6aa4 <write_log+0x1ac>)
    6a5c:	4798      	blx	r3
  	}
  
	f_close(&log_file_object);
    6a5e:	480d      	ldr	r0, [pc, #52]	; (6a94 <write_log+0x19c>)
    6a60:	4b11      	ldr	r3, [pc, #68]	; (6aa8 <write_log+0x1b0>)
    6a62:	4798      	blx	r3
	
	return 0;
    6a64:	2300      	movs	r3, #0
}
    6a66:	4618      	mov	r0, r3
    6a68:	f507 7715 	add.w	r7, r7, #596	; 0x254
    6a6c:	46bd      	mov	sp, r7
    6a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a72:	bf00      	nop
    6a74:	000019d5 	.word	0x000019d5
    6a78:	000068e5 	.word	0x000068e5
    6a7c:	0000d0c9 	.word	0x0000d0c9
    6a80:	20000001 	.word	0x20000001
    6a84:	0000db79 	.word	0x0000db79
    6a88:	00004115 	.word	0x00004115
    6a8c:	00012ca4 	.word	0x00012ca4
    6a90:	0000dce5 	.word	0x0000dce5
    6a94:	20001078 	.word	0x20001078
    6a98:	00004169 	.word	0x00004169
    6a9c:	00004a19 	.word	0x00004a19
    6aa0:	00012cb0 	.word	0x00012cb0
    6aa4:	0000d705 	.word	0x0000d705
    6aa8:	000049a9 	.word	0x000049a9

00006aac <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
    6aac:	b480      	push	{r7}
    6aae:	b089      	sub	sp, #36	; 0x24
    6ab0:	af00      	add	r7, sp, #0
    6ab2:	6078      	str	r0, [r7, #4]
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	61fb      	str	r3, [r7, #28]
    6ab8:	69fb      	ldr	r3, [r7, #28]
    6aba:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6abc:	69bb      	ldr	r3, [r7, #24]
    6abe:	095a      	lsrs	r2, r3, #5
    6ac0:	69fb      	ldr	r3, [r7, #28]
    6ac2:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6ac4:	697b      	ldr	r3, [r7, #20]
    6ac6:	f003 031f 	and.w	r3, r3, #31
    6aca:	2101      	movs	r1, #1
    6acc:	fa01 f303 	lsl.w	r3, r1, r3
    6ad0:	613a      	str	r2, [r7, #16]
    6ad2:	60fb      	str	r3, [r7, #12]
    6ad4:	693b      	ldr	r3, [r7, #16]
    6ad6:	60bb      	str	r3, [r7, #8]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6ad8:	68bb      	ldr	r3, [r7, #8]
    6ada:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6ade:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6ae2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    6ae4:	68fa      	ldr	r2, [r7, #12]
    6ae6:	609a      	str	r2, [r3, #8]
	arch_ioport_disable_pin(pin);
}
    6ae8:	3724      	adds	r7, #36	; 0x24
    6aea:	46bd      	mov	sp, r7
    6aec:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af0:	4770      	bx	lr
    6af2:	bf00      	nop

00006af4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    6af4:	b480      	push	{r7}
    6af6:	b08d      	sub	sp, #52	; 0x34
    6af8:	af00      	add	r7, sp, #0
    6afa:	6078      	str	r0, [r7, #4]
    6afc:	6039      	str	r1, [r7, #0]
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    6b02:	683b      	ldr	r3, [r7, #0]
    6b04:	62bb      	str	r3, [r7, #40]	; 0x28
    6b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b08:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b0c:	095a      	lsrs	r2, r3, #5
    6b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b10:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6b12:	6a3b      	ldr	r3, [r7, #32]
    6b14:	f003 031f 	and.w	r3, r3, #31
    6b18:	2101      	movs	r1, #1
    6b1a:	fa01 f303 	lsl.w	r3, r1, r3
    6b1e:	61fa      	str	r2, [r7, #28]
    6b20:	61bb      	str	r3, [r7, #24]
    6b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6b24:	617b      	str	r3, [r7, #20]
    6b26:	69fb      	ldr	r3, [r7, #28]
    6b28:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6b2a:	693b      	ldr	r3, [r7, #16]
    6b2c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6b30:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6b34:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    6b36:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    6b38:	697b      	ldr	r3, [r7, #20]
    6b3a:	f003 0308 	and.w	r3, r3, #8
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d003      	beq.n	6b4a <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    6b42:	68fb      	ldr	r3, [r7, #12]
    6b44:	69ba      	ldr	r2, [r7, #24]
    6b46:	675a      	str	r2, [r3, #116]	; 0x74
    6b48:	e002      	b.n	6b50 <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    6b4a:	68fb      	ldr	r3, [r7, #12]
    6b4c:	69ba      	ldr	r2, [r7, #24]
    6b4e:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    6b50:	697b      	ldr	r3, [r7, #20]
    6b52:	f003 0310 	and.w	r3, r3, #16
    6b56:	2b00      	cmp	r3, #0
    6b58:	d004      	beq.n	6b64 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    6b5a:	68fb      	ldr	r3, [r7, #12]
    6b5c:	69ba      	ldr	r2, [r7, #24]
    6b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    6b62:	e003      	b.n	6b6c <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	69ba      	ldr	r2, [r7, #24]
    6b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    6b6c:	697b      	ldr	r3, [r7, #20]
    6b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6b72:	2b00      	cmp	r3, #0
    6b74:	d004      	beq.n	6b80 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    6b76:	68fb      	ldr	r3, [r7, #12]
    6b78:	69ba      	ldr	r2, [r7, #24]
    6b7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    6b7e:	e003      	b.n	6b88 <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    6b80:	68fb      	ldr	r3, [r7, #12]
    6b82:	69ba      	ldr	r2, [r7, #24]
    6b84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    6b88:	697b      	ldr	r3, [r7, #20]
    6b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d004      	beq.n	6b9c <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    6b92:	68fb      	ldr	r3, [r7, #12]
    6b94:	69ba      	ldr	r2, [r7, #24]
    6b96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b9a:	e003      	b.n	6ba4 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    6b9c:	68fb      	ldr	r3, [r7, #12]
    6b9e:	69ba      	ldr	r2, [r7, #24]
    6ba0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    6ba4:	697b      	ldr	r3, [r7, #20]
    6ba6:	f003 0301 	and.w	r3, r3, #1
    6baa:	2b00      	cmp	r3, #0
    6bac:	d003      	beq.n	6bb6 <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    6bae:	68fb      	ldr	r3, [r7, #12]
    6bb0:	69ba      	ldr	r2, [r7, #24]
    6bb2:	615a      	str	r2, [r3, #20]
    6bb4:	e002      	b.n	6bbc <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    6bb6:	68fb      	ldr	r3, [r7, #12]
    6bb8:	69ba      	ldr	r2, [r7, #24]
    6bba:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    6bbc:	697b      	ldr	r3, [r7, #20]
    6bbe:	f003 0302 	and.w	r3, r3, #2
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	d003      	beq.n	6bce <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    6bc6:	68fb      	ldr	r3, [r7, #12]
    6bc8:	69ba      	ldr	r2, [r7, #24]
    6bca:	625a      	str	r2, [r3, #36]	; 0x24
    6bcc:	e002      	b.n	6bd4 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    6bce:	68fb      	ldr	r3, [r7, #12]
    6bd0:	69ba      	ldr	r2, [r7, #24]
    6bd2:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    6bd4:	697b      	ldr	r3, [r7, #20]
    6bd6:	f003 0304 	and.w	r3, r3, #4
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d003      	beq.n	6be6 <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    6bde:	68fb      	ldr	r3, [r7, #12]
    6be0:	69ba      	ldr	r2, [r7, #24]
    6be2:	635a      	str	r2, [r3, #52]	; 0x34
    6be4:	e002      	b.n	6bec <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    6be6:	68fb      	ldr	r3, [r7, #12]
    6be8:	69ba      	ldr	r2, [r7, #24]
    6bea:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_set_pin_mode(pin, mode);
}
    6bec:	3734      	adds	r7, #52	; 0x34
    6bee:	46bd      	mov	sp, r7
    6bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bf4:	4770      	bx	lr
    6bf6:	bf00      	nop

00006bf8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    6bf8:	b480      	push	{r7}
    6bfa:	b095      	sub	sp, #84	; 0x54
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
    6c00:	460b      	mov	r3, r1
    6c02:	70fb      	strb	r3, [r7, #3]
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    6c08:	78fb      	ldrb	r3, [r7, #3]
    6c0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    6c0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    6c12:	2b01      	cmp	r3, #1
    6c14:	d12d      	bne.n	6c72 <ioport_set_pin_dir+0x7a>
    6c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6c18:	647b      	str	r3, [r7, #68]	; 0x44
    6c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6c1c:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6c20:	095b      	lsrs	r3, r3, #5
    6c22:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6c2a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6c2e:	025b      	lsls	r3, r3, #9
    6c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6c32:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
    6c36:	f002 021f 	and.w	r2, r2, #31
    6c3a:	2101      	movs	r1, #1
    6c3c:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    6c40:	645a      	str	r2, [r3, #68]	; 0x44
    6c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6c44:	637b      	str	r3, [r7, #52]	; 0x34
    6c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6c48:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6c4c:	095b      	lsrs	r3, r3, #5
    6c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6c56:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6c5a:	025b      	lsls	r3, r3, #9
    6c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6c5e:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6c62:	f002 021f 	and.w	r2, r2, #31
    6c66:	2101      	movs	r1, #1
    6c68:	fa01 f202 	lsl.w	r2, r1, r2
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    6c6c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    6c70:	e030      	b.n	6cd4 <ioport_set_pin_dir+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
    6c72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    6c76:	2b00      	cmp	r3, #0
    6c78:	d12c      	bne.n	6cd4 <ioport_set_pin_dir+0xdc>
    6c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6c7c:	627b      	str	r3, [r7, #36]	; 0x24
    6c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c80:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6c82:	6a3b      	ldr	r3, [r7, #32]
    6c84:	095b      	lsrs	r3, r3, #5
    6c86:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6c88:	69fb      	ldr	r3, [r7, #28]
    6c8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6c8e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6c92:	025b      	lsls	r3, r3, #9
    6c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6c96:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6c98:	69ba      	ldr	r2, [r7, #24]
    6c9a:	f002 021f 	and.w	r2, r2, #31
    6c9e:	2101      	movs	r1, #1
    6ca0:	fa01 f202 	lsl.w	r2, r1, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    6ca4:	649a      	str	r2, [r3, #72]	; 0x48
    6ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6ca8:	617b      	str	r3, [r7, #20]
    6caa:	697b      	ldr	r3, [r7, #20]
    6cac:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6cae:	693b      	ldr	r3, [r7, #16]
    6cb0:	095b      	lsrs	r3, r3, #5
    6cb2:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6cb4:	68fb      	ldr	r3, [r7, #12]
    6cb6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6cba:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6cbe:	025b      	lsls	r3, r3, #9
    6cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6cc2:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6cc4:	68ba      	ldr	r2, [r7, #8]
    6cc6:	f002 021f 	and.w	r2, r2, #31
    6cca:	2101      	movs	r1, #1
    6ccc:	fa01 f202 	lsl.w	r2, r1, r2
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    6cd0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	arch_ioport_set_pin_dir(pin, dir);
}
    6cd4:	3754      	adds	r7, #84	; 0x54
    6cd6:	46bd      	mov	sp, r7
    6cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cdc:	4770      	bx	lr
    6cde:	bf00      	nop

00006ce0 <set_pins>:
	ioport_set_pin_mode(pin, mode);\
	ioport_disable_pin(pin);\
} while (0)

int set_pins(int module)
{
    6ce0:	b580      	push	{r7, lr}
    6ce2:	b082      	sub	sp, #8
    6ce4:	af00      	add	r7, sp, #0
    6ce6:	6078      	str	r0, [r7, #4]
	switch (module)
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	3b01      	subs	r3, #1
    6cec:	2b07      	cmp	r3, #7
    6cee:	f200 808d 	bhi.w	6e0c <set_pins+0x12c>
    6cf2:	a201      	add	r2, pc, #4	; (adr r2, 6cf8 <set_pins+0x18>)
    6cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6cf8:	00006daf 	.word	0x00006daf
    6cfc:	00006d19 	.word	0x00006d19
    6d00:	00006d37 	.word	0x00006d37
    6d04:	00006d55 	.word	0x00006d55
    6d08:	00006dcd 	.word	0x00006dcd
    6d0c:	00006ddd 	.word	0x00006ddd
    6d10:	00006ded 	.word	0x00006ded
    6d14:	00006dfd 	.word	0x00006dfd
	{
		case USART0_pins:
		ioport_set_pin_peripheral_mode(PIN_PB00B_USART0_RXD, MUX_PB00B_USART0_RXD);
    6d18:	2020      	movs	r0, #32
    6d1a:	2101      	movs	r1, #1
    6d1c:	4b3f      	ldr	r3, [pc, #252]	; (6e1c <set_pins+0x13c>)
    6d1e:	4798      	blx	r3
    6d20:	2020      	movs	r0, #32
    6d22:	4b3f      	ldr	r3, [pc, #252]	; (6e20 <set_pins+0x140>)
    6d24:	4798      	blx	r3
		ioport_set_pin_peripheral_mode(PIN_PB01B_USART0_TXD, MUX_PB01B_USART0_TXD);
    6d26:	2021      	movs	r0, #33	; 0x21
    6d28:	2101      	movs	r1, #1
    6d2a:	4b3c      	ldr	r3, [pc, #240]	; (6e1c <set_pins+0x13c>)
    6d2c:	4798      	blx	r3
    6d2e:	2021      	movs	r0, #33	; 0x21
    6d30:	4b3b      	ldr	r3, [pc, #236]	; (6e20 <set_pins+0x140>)
    6d32:	4798      	blx	r3
		break;
    6d34:	e06c      	b.n	6e10 <set_pins+0x130>
		
		case USART1_pins:
		ioport_set_pin_peripheral_mode(EXT1_PIN_UART_RX, EXT1_UART_RX_MUX);
    6d36:	2020      	movs	r0, #32
    6d38:	2101      	movs	r1, #1
    6d3a:	4b38      	ldr	r3, [pc, #224]	; (6e1c <set_pins+0x13c>)
    6d3c:	4798      	blx	r3
    6d3e:	2020      	movs	r0, #32
    6d40:	4b37      	ldr	r3, [pc, #220]	; (6e20 <set_pins+0x140>)
    6d42:	4798      	blx	r3
		ioport_set_pin_peripheral_mode(EXT1_PIN_UART_TX, EXT1_UART_TX_MUX);
    6d44:	2021      	movs	r0, #33	; 0x21
    6d46:	2101      	movs	r1, #1
    6d48:	4b34      	ldr	r3, [pc, #208]	; (6e1c <set_pins+0x13c>)
    6d4a:	4798      	blx	r3
    6d4c:	2021      	movs	r0, #33	; 0x21
    6d4e:	4b34      	ldr	r3, [pc, #208]	; (6e20 <set_pins+0x140>)
    6d50:	4798      	blx	r3
		break;
    6d52:	e05d      	b.n	6e10 <set_pins+0x130>
		
		case USART2_SPI_pins:
		ioport_set_pin_peripheral_mode(PIN_PA20A_USART2_TXD, MUX_PA20A_USART2_TXD); // MOSI
    6d54:	2014      	movs	r0, #20
    6d56:	2100      	movs	r1, #0
    6d58:	4b30      	ldr	r3, [pc, #192]	; (6e1c <set_pins+0x13c>)
    6d5a:	4798      	blx	r3
    6d5c:	2014      	movs	r0, #20
    6d5e:	4b30      	ldr	r3, [pc, #192]	; (6e20 <set_pins+0x140>)
    6d60:	4798      	blx	r3
		ioport_set_pin_peripheral_mode(PIN_PA19A_USART2_RXD, MUX_PA19A_USART2_RXD); // MISO
    6d62:	2013      	movs	r0, #19
    6d64:	2100      	movs	r1, #0
    6d66:	4b2d      	ldr	r3, [pc, #180]	; (6e1c <set_pins+0x13c>)
    6d68:	4798      	blx	r3
    6d6a:	2013      	movs	r0, #19
    6d6c:	4b2c      	ldr	r3, [pc, #176]	; (6e20 <set_pins+0x140>)
    6d6e:	4798      	blx	r3
		ioport_set_pin_peripheral_mode(PIN_PA18A_USART2_CLK, MUX_PA18A_USART2_CLK); // SCK
    6d70:	2012      	movs	r0, #18
    6d72:	2100      	movs	r1, #0
    6d74:	4b29      	ldr	r3, [pc, #164]	; (6e1c <set_pins+0x13c>)
    6d76:	4798      	blx	r3
    6d78:	2012      	movs	r0, #18
    6d7a:	4b29      	ldr	r3, [pc, #164]	; (6e20 <set_pins+0x140>)
    6d7c:	4798      	blx	r3
		ioport_set_pin_peripheral_mode(PIN_PA17A_USART2_RTS, MUX_PA17A_USART2_RTS); // SS
    6d7e:	2011      	movs	r0, #17
    6d80:	2100      	movs	r1, #0
    6d82:	4b26      	ldr	r3, [pc, #152]	; (6e1c <set_pins+0x13c>)
    6d84:	4798      	blx	r3
    6d86:	2011      	movs	r0, #17
    6d88:	4b25      	ldr	r3, [pc, #148]	; (6e20 <set_pins+0x140>)
    6d8a:	4798      	blx	r3
		
		ioport_set_pin_dir(PIN_PC15, IOPORT_DIR_OUTPUT); // Data/Command
    6d8c:	204f      	movs	r0, #79	; 0x4f
    6d8e:	2101      	movs	r1, #1
    6d90:	4b24      	ldr	r3, [pc, #144]	; (6e24 <set_pins+0x144>)
    6d92:	4798      	blx	r3
		ioport_set_pin_mode(PIN_PC15, IOPORT_MODE_PULLUP);
    6d94:	204f      	movs	r0, #79	; 0x4f
    6d96:	2108      	movs	r1, #8
    6d98:	4b20      	ldr	r3, [pc, #128]	; (6e1c <set_pins+0x13c>)
    6d9a:	4798      	blx	r3
		ioport_set_pin_dir(PIN_PA10, IOPORT_DIR_OUTPUT); // Reset
    6d9c:	200a      	movs	r0, #10
    6d9e:	2101      	movs	r1, #1
    6da0:	4b20      	ldr	r3, [pc, #128]	; (6e24 <set_pins+0x144>)
    6da2:	4798      	blx	r3
		ioport_set_pin_mode(PIN_PA10, IOPORT_MODE_PULLUP);
    6da4:	200a      	movs	r0, #10
    6da6:	2108      	movs	r1, #8
    6da8:	4b1c      	ldr	r3, [pc, #112]	; (6e1c <set_pins+0x13c>)
    6daa:	4798      	blx	r3
		break;
    6dac:	e030      	b.n	6e10 <set_pins+0x130>
		
		case TC10_pins:
		ioport_set_pin_peripheral_mode(PIN_PC00D_TC1_A0, MUX_PC00D_TC1_A0);
    6dae:	2040      	movs	r0, #64	; 0x40
    6db0:	2103      	movs	r1, #3
    6db2:	4b1a      	ldr	r3, [pc, #104]	; (6e1c <set_pins+0x13c>)
    6db4:	4798      	blx	r3
    6db6:	2040      	movs	r0, #64	; 0x40
    6db8:	4b19      	ldr	r3, [pc, #100]	; (6e20 <set_pins+0x140>)
    6dba:	4798      	blx	r3
		ioport_set_pin_peripheral_mode(PIN_PC01D_TC1_B0, MUX_PC01D_TC1_B0);
    6dbc:	2041      	movs	r0, #65	; 0x41
    6dbe:	2103      	movs	r1, #3
    6dc0:	4b16      	ldr	r3, [pc, #88]	; (6e1c <set_pins+0x13c>)
    6dc2:	4798      	blx	r3
    6dc4:	2041      	movs	r0, #65	; 0x41
    6dc6:	4b16      	ldr	r3, [pc, #88]	; (6e20 <set_pins+0x140>)
    6dc8:	4798      	blx	r3
		break;
    6dca:	e021      	b.n	6e10 <set_pins+0x130>
		
		case ADC0_pin:
		ioport_set_pin_peripheral_mode(PIN_PA04A_ADCIFE_AD0, MUX_PA04A_ADCIFE_AD0);
    6dcc:	2004      	movs	r0, #4
    6dce:	2100      	movs	r1, #0
    6dd0:	4b12      	ldr	r3, [pc, #72]	; (6e1c <set_pins+0x13c>)
    6dd2:	4798      	blx	r3
    6dd4:	2004      	movs	r0, #4
    6dd6:	4b12      	ldr	r3, [pc, #72]	; (6e20 <set_pins+0x140>)
    6dd8:	4798      	blx	r3
		break;
    6dda:	e019      	b.n	6e10 <set_pins+0x130>
		
		case ADC1_pin:
		ioport_set_pin_peripheral_mode(PIN_PA05A_ADCIFE_AD1, MUX_PA05A_ADCIFE_AD1);
    6ddc:	2005      	movs	r0, #5
    6dde:	2100      	movs	r1, #0
    6de0:	4b0e      	ldr	r3, [pc, #56]	; (6e1c <set_pins+0x13c>)
    6de2:	4798      	blx	r3
    6de4:	2005      	movs	r0, #5
    6de6:	4b0e      	ldr	r3, [pc, #56]	; (6e20 <set_pins+0x140>)
    6de8:	4798      	blx	r3
		break;
    6dea:	e011      	b.n	6e10 <set_pins+0x130>
		
		case ADC2_pin:
		ioport_set_pin_peripheral_mode(PIN_PA07A_ADCIFE_AD2, MUX_PA07A_ADCIFE_AD2);
    6dec:	2007      	movs	r0, #7
    6dee:	2100      	movs	r1, #0
    6df0:	4b0a      	ldr	r3, [pc, #40]	; (6e1c <set_pins+0x13c>)
    6df2:	4798      	blx	r3
    6df4:	2007      	movs	r0, #7
    6df6:	4b0a      	ldr	r3, [pc, #40]	; (6e20 <set_pins+0x140>)
    6df8:	4798      	blx	r3
		break;
    6dfa:	e009      	b.n	6e10 <set_pins+0x130>
		
		case ADC3_pin:
		ioport_set_pin_peripheral_mode(PIN_PB02A_ADCIFE_AD3, MUX_PB02A_ADCIFE_AD3);
    6dfc:	2022      	movs	r0, #34	; 0x22
    6dfe:	2100      	movs	r1, #0
    6e00:	4b06      	ldr	r3, [pc, #24]	; (6e1c <set_pins+0x13c>)
    6e02:	4798      	blx	r3
    6e04:	2022      	movs	r0, #34	; 0x22
    6e06:	4b06      	ldr	r3, [pc, #24]	; (6e20 <set_pins+0x140>)
    6e08:	4798      	blx	r3
		break;
    6e0a:	e001      	b.n	6e10 <set_pins+0x130>
		
		default:
			return 1;
    6e0c:	2301      	movs	r3, #1
    6e0e:	e000      	b.n	6e12 <set_pins+0x132>
	}
	
	return 0;
    6e10:	2300      	movs	r3, #0
}
    6e12:	4618      	mov	r0, r3
    6e14:	3708      	adds	r7, #8
    6e16:	46bd      	mov	sp, r7
    6e18:	bd80      	pop	{r7, pc}
    6e1a:	bf00      	nop
    6e1c:	00006af5 	.word	0x00006af5
    6e20:	00006aad 	.word	0x00006aad
    6e24:	00006bf9 	.word	0x00006bf9

00006e28 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    6e28:	b480      	push	{r7}
    6e2a:	b083      	sub	sp, #12
    6e2c:	af00      	add	r7, sp, #0
    6e2e:	4603      	mov	r3, r0
    6e30:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    6e32:	79fb      	ldrb	r3, [r7, #7]
    6e34:	2b0d      	cmp	r3, #13
    6e36:	d82b      	bhi.n	6e90 <dfll_priv_get_source_hz+0x68>
    6e38:	a201      	add	r2, pc, #4	; (adr r2, 6e40 <dfll_priv_get_source_hz+0x18>)
    6e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6e3e:	bf00      	nop
    6e40:	00006e79 	.word	0x00006e79
    6e44:	00006e7d 	.word	0x00006e7d
    6e48:	00006e91 	.word	0x00006e91
    6e4c:	00006e83 	.word	0x00006e83
    6e50:	00006e87 	.word	0x00006e87
    6e54:	00006e91 	.word	0x00006e91
    6e58:	00006e91 	.word	0x00006e91
    6e5c:	00006e91 	.word	0x00006e91
    6e60:	00006e91 	.word	0x00006e91
    6e64:	00006e91 	.word	0x00006e91
    6e68:	00006e91 	.word	0x00006e91
    6e6c:	00006e91 	.word	0x00006e91
    6e70:	00006e91 	.word	0x00006e91
    6e74:	00006e8b 	.word	0x00006e8b
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    6e78:	4b09      	ldr	r3, [pc, #36]	; (6ea0 <dfll_priv_get_source_hz+0x78>)
    6e7a:	e00a      	b.n	6e92 <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    6e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6e80:	e007      	b.n	6e92 <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    6e82:	4b08      	ldr	r3, [pc, #32]	; (6ea4 <dfll_priv_get_source_hz+0x7c>)
    6e84:	e005      	b.n	6e92 <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    6e86:	4b08      	ldr	r3, [pc, #32]	; (6ea8 <dfll_priv_get_source_hz+0x80>)
    6e88:	e003      	b.n	6e92 <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    6e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6e8e:	e000      	b.n	6e92 <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    6e90:	2300      	movs	r3, #0
	}
}
    6e92:	4618      	mov	r0, r3
    6e94:	370c      	adds	r7, #12
    6e96:	46bd      	mov	sp, r7
    6e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e9c:	4770      	bx	lr
    6e9e:	bf00      	nop
    6ea0:	0001c138 	.word	0x0001c138
    6ea4:	00b71b00 	.word	0x00b71b00
    6ea8:	04c4b400 	.word	0x04c4b400

00006eac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    6eac:	b580      	push	{r7, lr}
    6eae:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    6eb0:	2001      	movs	r0, #1
    6eb2:	4b04      	ldr	r3, [pc, #16]	; (6ec4 <sysclk_get_main_hz+0x18>)
    6eb4:	4798      	blx	r3
    6eb6:	4603      	mov	r3, r0
    6eb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    6ebc:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    6ec0:	4618      	mov	r0, r3
    6ec2:	bd80      	pop	{r7, pc}
    6ec4:	00006e29 	.word	0x00006e29

00006ec8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    6ec8:	b580      	push	{r7, lr}
    6eca:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    6ecc:	4b02      	ldr	r3, [pc, #8]	; (6ed8 <sysclk_get_cpu_hz+0x10>)
    6ece:	4798      	blx	r3
    6ed0:	4603      	mov	r3, r0
}
    6ed2:	4618      	mov	r0, r3
    6ed4:	bd80      	pop	{r7, pc}
    6ed6:	bf00      	nop
    6ed8:	00006ead 	.word	0x00006ead
    6edc:	00000000 	.word	0x00000000

00006ee0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    6ee0:	b5b0      	push	{r4, r5, r7, lr}
    6ee2:	b08e      	sub	sp, #56	; 0x38
    6ee4:	af00      	add	r7, sp, #0
    6ee6:	4603      	mov	r3, r0
    6ee8:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    6eea:	2311      	movs	r3, #17
    6eec:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    6eee:	f107 030c 	add.w	r3, r7, #12
    6ef2:	4839      	ldr	r0, [pc, #228]	; (6fd8 <ssd1306_write_command+0xf8>)
    6ef4:	4619      	mov	r1, r3
    6ef6:	4b39      	ldr	r3, [pc, #228]	; (6fdc <ssd1306_write_command+0xfc>)
    6ef8:	4798      	blx	r3
    6efa:	234f      	movs	r3, #79	; 0x4f
    6efc:	637b      	str	r3, [r7, #52]	; 0x34
    6efe:	2300      	movs	r3, #0
    6f00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    6f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d016      	beq.n	6f3a <ssd1306_write_command+0x5a>
    6f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f12:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f16:	095b      	lsrs	r3, r3, #5
    6f18:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6f20:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6f24:	025b      	lsls	r3, r3, #9
    6f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6f28:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6f2a:	6a3a      	ldr	r2, [r7, #32]
    6f2c:	f002 021f 	and.w	r2, r2, #31
    6f30:	2101      	movs	r1, #1
    6f32:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    6f36:	655a      	str	r2, [r3, #84]	; 0x54
    6f38:	e015      	b.n	6f66 <ssd1306_write_command+0x86>
    6f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f3c:	61fb      	str	r3, [r7, #28]
    6f3e:	69fb      	ldr	r3, [r7, #28]
    6f40:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    6f42:	69bb      	ldr	r3, [r7, #24]
    6f44:	095b      	lsrs	r3, r3, #5
    6f46:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    6f48:	697b      	ldr	r3, [r7, #20]
    6f4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    6f4e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    6f52:	025b      	lsls	r3, r3, #9
    6f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6f56:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    6f58:	693a      	ldr	r2, [r7, #16]
    6f5a:	f002 021f 	and.w	r2, r2, #31
    6f5e:	2101      	movs	r1, #1
    6f60:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    6f64:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
    6f66:	79fb      	ldrb	r3, [r7, #7]
    6f68:	481b      	ldr	r0, [pc, #108]	; (6fd8 <ssd1306_write_command+0xf8>)
    6f6a:	4619      	mov	r1, r3
    6f6c:	4b1c      	ldr	r3, [pc, #112]	; (6fe0 <ssd1306_write_command+0x100>)
    6f6e:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
    6f70:	4b1c      	ldr	r3, [pc, #112]	; (6fe4 <ssd1306_write_command+0x104>)
    6f72:	4798      	blx	r3
    6f74:	4603      	mov	r3, r0
    6f76:	4618      	mov	r0, r3
    6f78:	f04f 0100 	mov.w	r1, #0
    6f7c:	4602      	mov	r2, r0
    6f7e:	460b      	mov	r3, r1
    6f80:	009d      	lsls	r5, r3, #2
    6f82:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    6f86:	0094      	lsls	r4, r2, #2
    6f88:	4622      	mov	r2, r4
    6f8a:	462b      	mov	r3, r5
    6f8c:	1880      	adds	r0, r0, r2
    6f8e:	eb41 0103 	adc.w	r1, r1, r3
    6f92:	a30f      	add	r3, pc, #60	; (adr r3, 6fd0 <ssd1306_write_command+0xf0>)
    6f94:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f98:	1812      	adds	r2, r2, r0
    6f9a:	eb43 0301 	adc.w	r3, r3, r1
    6f9e:	4c12      	ldr	r4, [pc, #72]	; (6fe8 <ssd1306_write_command+0x108>)
    6fa0:	4610      	mov	r0, r2
    6fa2:	4619      	mov	r1, r3
    6fa4:	4a11      	ldr	r2, [pc, #68]	; (6fec <ssd1306_write_command+0x10c>)
    6fa6:	f04f 0300 	mov.w	r3, #0
    6faa:	47a0      	blx	r4
    6fac:	4602      	mov	r2, r0
    6fae:	460b      	mov	r3, r1
    6fb0:	4613      	mov	r3, r2
    6fb2:	4618      	mov	r0, r3
    6fb4:	4b0e      	ldr	r3, [pc, #56]	; (6ff0 <ssd1306_write_command+0x110>)
    6fb6:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    6fb8:	f107 030c 	add.w	r3, r7, #12
    6fbc:	4806      	ldr	r0, [pc, #24]	; (6fd8 <ssd1306_write_command+0xf8>)
    6fbe:	4619      	mov	r1, r3
    6fc0:	4b0c      	ldr	r3, [pc, #48]	; (6ff4 <ssd1306_write_command+0x114>)
    6fc2:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    6fc4:	3738      	adds	r7, #56	; 0x38
    6fc6:	46bd      	mov	sp, r7
    6fc8:	bdb0      	pop	{r4, r5, r7, pc}
    6fca:	bf00      	nop
    6fcc:	f3af 8000 	nop.w
    6fd0:	00d59f7f 	.word	0x00d59f7f
    6fd4:	00000000 	.word	0x00000000
    6fd8:	4002c000 	.word	0x4002c000
    6fdc:	0000590d 	.word	0x0000590d
    6fe0:	000058ed 	.word	0x000058ed
    6fe4:	00006ec9 	.word	0x00006ec9
    6fe8:	0000d0c9 	.word	0x0000d0c9
    6fec:	00d59f80 	.word	0x00d59f80
    6ff0:	20000001 	.word	0x20000001
    6ff4:	00005929 	.word	0x00005929

00006ff8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
    6ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ffc:	b099      	sub	sp, #100	; 0x64
    6ffe:	af00      	add	r7, sp, #0
    7000:	4603      	mov	r3, r0
    7002:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    7004:	2311      	movs	r3, #17
    7006:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    7008:	f107 030c 	add.w	r3, r7, #12
    700c:	4866      	ldr	r0, [pc, #408]	; (71a8 <ssd1306_write_data+0x1b0>)
    700e:	4619      	mov	r1, r3
    7010:	4b66      	ldr	r3, [pc, #408]	; (71ac <ssd1306_write_data+0x1b4>)
    7012:	4798      	blx	r3
    7014:	234f      	movs	r3, #79	; 0x4f
    7016:	65fb      	str	r3, [r7, #92]	; 0x5c
    7018:	2301      	movs	r3, #1
    701a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    701e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    7022:	2b00      	cmp	r3, #0
    7024:	d016      	beq.n	7054 <ssd1306_write_data+0x5c>
    7026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7028:	657b      	str	r3, [r7, #84]	; 0x54
    702a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    702c:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7030:	095b      	lsrs	r3, r3, #5
    7032:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    7034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7036:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    703a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    703e:	025b      	lsls	r3, r3, #9
    7040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    7042:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    7044:	6cba      	ldr	r2, [r7, #72]	; 0x48
    7046:	f002 021f 	and.w	r2, r2, #31
    704a:	2101      	movs	r1, #1
    704c:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    7050:	655a      	str	r2, [r3, #84]	; 0x54
    7052:	e015      	b.n	7080 <ssd1306_write_data+0x88>
    7054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7056:	647b      	str	r3, [r7, #68]	; 0x44
    7058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    705a:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    705c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    705e:	095b      	lsrs	r3, r3, #5
    7060:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    7062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7064:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    7068:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    706c:	025b      	lsls	r3, r3, #9
    706e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    7070:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    7072:	6bba      	ldr	r2, [r7, #56]	; 0x38
    7074:	f002 021f 	and.w	r2, r2, #31
    7078:	2101      	movs	r1, #1
    707a:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    707e:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    7080:	4b4b      	ldr	r3, [pc, #300]	; (71b0 <ssd1306_write_data+0x1b8>)
    7082:	4798      	blx	r3
    7084:	4603      	mov	r3, r0
    7086:	4618      	mov	r0, r3
    7088:	f04f 0100 	mov.w	r1, #0
    708c:	4602      	mov	r2, r0
    708e:	460b      	mov	r3, r1
    7090:	ea4f 0983 	mov.w	r9, r3, lsl #2
    7094:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    7098:	ea4f 0882 	mov.w	r8, r2, lsl #2
    709c:	4642      	mov	r2, r8
    709e:	464b      	mov	r3, r9
    70a0:	1880      	adds	r0, r0, r2
    70a2:	eb41 0103 	adc.w	r1, r1, r3
    70a6:	a33e      	add	r3, pc, #248	; (adr r3, 71a0 <ssd1306_write_data+0x1a8>)
    70a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    70ac:	1812      	adds	r2, r2, r0
    70ae:	eb43 0301 	adc.w	r3, r3, r1
    70b2:	4e40      	ldr	r6, [pc, #256]	; (71b4 <ssd1306_write_data+0x1bc>)
    70b4:	4610      	mov	r0, r2
    70b6:	4619      	mov	r1, r3
    70b8:	4a3f      	ldr	r2, [pc, #252]	; (71b8 <ssd1306_write_data+0x1c0>)
    70ba:	f04f 0300 	mov.w	r3, #0
    70be:	47b0      	blx	r6
    70c0:	4602      	mov	r2, r0
    70c2:	460b      	mov	r3, r1
    70c4:	4613      	mov	r3, r2
    70c6:	4618      	mov	r0, r3
    70c8:	4b3c      	ldr	r3, [pc, #240]	; (71bc <ssd1306_write_data+0x1c4>)
    70ca:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
    70cc:	79fb      	ldrb	r3, [r7, #7]
    70ce:	4836      	ldr	r0, [pc, #216]	; (71a8 <ssd1306_write_data+0x1b0>)
    70d0:	4619      	mov	r1, r3
    70d2:	4b3b      	ldr	r3, [pc, #236]	; (71c0 <ssd1306_write_data+0x1c8>)
    70d4:	4798      	blx	r3
    70d6:	234f      	movs	r3, #79	; 0x4f
    70d8:	637b      	str	r3, [r7, #52]	; 0x34
    70da:	2301      	movs	r3, #1
    70dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    70e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    70e4:	2b00      	cmp	r3, #0
    70e6:	d016      	beq.n	7116 <ssd1306_write_data+0x11e>
    70e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    70ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    70ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70ee:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    70f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    70f2:	095b      	lsrs	r3, r3, #5
    70f4:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    70f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    70fc:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    7100:	025b      	lsls	r3, r3, #9
    7102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7104:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    7106:	6a3a      	ldr	r2, [r7, #32]
    7108:	f002 021f 	and.w	r2, r2, #31
    710c:	2101      	movs	r1, #1
    710e:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    7112:	655a      	str	r2, [r3, #84]	; 0x54
    7114:	e015      	b.n	7142 <ssd1306_write_data+0x14a>
    7116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7118:	61fb      	str	r3, [r7, #28]
    711a:	69fb      	ldr	r3, [r7, #28]
    711c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    711e:	69bb      	ldr	r3, [r7, #24]
    7120:	095b      	lsrs	r3, r3, #5
    7122:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    7124:	697b      	ldr	r3, [r7, #20]
    7126:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    712a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    712e:	025b      	lsls	r3, r3, #9
    7130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7132:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    7134:	693a      	ldr	r2, [r7, #16]
    7136:	f002 021f 	and.w	r2, r2, #31
    713a:	2101      	movs	r1, #1
    713c:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    7140:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
    7142:	4b1b      	ldr	r3, [pc, #108]	; (71b0 <ssd1306_write_data+0x1b8>)
    7144:	4798      	blx	r3
    7146:	4603      	mov	r3, r0
    7148:	4618      	mov	r0, r3
    714a:	f04f 0100 	mov.w	r1, #0
    714e:	4602      	mov	r2, r0
    7150:	460b      	mov	r3, r1
    7152:	009d      	lsls	r5, r3, #2
    7154:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    7158:	0094      	lsls	r4, r2, #2
    715a:	4622      	mov	r2, r4
    715c:	462b      	mov	r3, r5
    715e:	1880      	adds	r0, r0, r2
    7160:	eb41 0103 	adc.w	r1, r1, r3
    7164:	a30e      	add	r3, pc, #56	; (adr r3, 71a0 <ssd1306_write_data+0x1a8>)
    7166:	e9d3 2300 	ldrd	r2, r3, [r3]
    716a:	1812      	adds	r2, r2, r0
    716c:	eb43 0301 	adc.w	r3, r3, r1
    7170:	4c10      	ldr	r4, [pc, #64]	; (71b4 <ssd1306_write_data+0x1bc>)
    7172:	4610      	mov	r0, r2
    7174:	4619      	mov	r1, r3
    7176:	4a10      	ldr	r2, [pc, #64]	; (71b8 <ssd1306_write_data+0x1c0>)
    7178:	f04f 0300 	mov.w	r3, #0
    717c:	47a0      	blx	r4
    717e:	4602      	mov	r2, r0
    7180:	460b      	mov	r3, r1
    7182:	4613      	mov	r3, r2
    7184:	4618      	mov	r0, r3
    7186:	4b0d      	ldr	r3, [pc, #52]	; (71bc <ssd1306_write_data+0x1c4>)
    7188:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    718a:	f107 030c 	add.w	r3, r7, #12
    718e:	4806      	ldr	r0, [pc, #24]	; (71a8 <ssd1306_write_data+0x1b0>)
    7190:	4619      	mov	r1, r3
    7192:	4b0c      	ldr	r3, [pc, #48]	; (71c4 <ssd1306_write_data+0x1cc>)
    7194:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    7196:	3764      	adds	r7, #100	; 0x64
    7198:	46bd      	mov	sp, r7
    719a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    719e:	bf00      	nop
    71a0:	00d59f7f 	.word	0x00d59f7f
    71a4:	00000000 	.word	0x00000000
    71a8:	4002c000 	.word	0x4002c000
    71ac:	0000590d 	.word	0x0000590d
    71b0:	00006ec9 	.word	0x00006ec9
    71b4:	0000d0c9 	.word	0x0000d0c9
    71b8:	00d59f80 	.word	0x00d59f80
    71bc:	20000001 	.word	0x20000001
    71c0:	000058ed 	.word	0x000058ed
    71c4:	00005929 	.word	0x00005929

000071c8 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
    71c8:	b580      	push	{r7, lr}
    71ca:	b082      	sub	sp, #8
    71cc:	af00      	add	r7, sp, #0
    71ce:	4603      	mov	r3, r0
    71d0:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
    71d2:	79fb      	ldrb	r3, [r7, #7]
    71d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    71d8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    71da:	79fb      	ldrb	r3, [r7, #7]
    71dc:	091b      	lsrs	r3, r3, #4
    71de:	b2db      	uxtb	r3, r3
    71e0:	f043 0310 	orr.w	r3, r3, #16
    71e4:	b2db      	uxtb	r3, r3
    71e6:	4618      	mov	r0, r3
    71e8:	4b05      	ldr	r3, [pc, #20]	; (7200 <ssd1306_set_column_address+0x38>)
    71ea:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    71ec:	79fb      	ldrb	r3, [r7, #7]
    71ee:	f003 030f 	and.w	r3, r3, #15
    71f2:	b2db      	uxtb	r3, r3
    71f4:	4618      	mov	r0, r3
    71f6:	4b02      	ldr	r3, [pc, #8]	; (7200 <ssd1306_set_column_address+0x38>)
    71f8:	4798      	blx	r3
}
    71fa:	3708      	adds	r7, #8
    71fc:	46bd      	mov	sp, r7
    71fe:	bd80      	pop	{r7, pc}
    7200:	00006ee1 	.word	0x00006ee1

00007204 <ssd1306_custom_init>:
#include "ssd1306_custom.h"
#include "pins.h"
#include <math.h>

int ssd1306_custom_init(void)
{
    7204:	b580      	push	{r7, lr}
    7206:	af00      	add	r7, sp, #0
	return set_pins(USART2_SPI_pins);
    7208:	2004      	movs	r0, #4
    720a:	4b02      	ldr	r3, [pc, #8]	; (7214 <ssd1306_custom_init+0x10>)
    720c:	4798      	blx	r3
    720e:	4603      	mov	r3, r0
}
    7210:	4618      	mov	r0, r3
    7212:	bd80      	pop	{r7, pc}
    7214:	00006ce1 	.word	0x00006ce1

00007218 <ssd1306_draw_graph>:
	for(int a = 0; a < num; a++)
	ssd1306_write_data(0x00);
}

void ssd1306_draw_graph(uint8_t col, uint8_t page, uint8_t width, uint8_t height, uint8_t *tab, uint32_t offset)
{
    7218:	b590      	push	{r4, r7, lr}
    721a:	b085      	sub	sp, #20
    721c:	af00      	add	r7, sp, #0
    721e:	71f8      	strb	r0, [r7, #7]
    7220:	71b9      	strb	r1, [r7, #6]
    7222:	717a      	strb	r2, [r7, #5]
    7224:	713b      	strb	r3, [r7, #4]
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
    7226:	79fb      	ldrb	r3, [r7, #7]
    7228:	73bb      	strb	r3, [r7, #14]
    722a:	e071      	b.n	7310 <ssd1306_draw_graph+0xf8>
		for (page_start = page; page_start <= height; ++page_start) {
    722c:	79bb      	ldrb	r3, [r7, #6]
    722e:	73fb      	strb	r3, [r7, #15]
    7230:	e067      	b.n	7302 <ssd1306_draw_graph+0xea>
			ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(page_start));
    7232:	7bfb      	ldrb	r3, [r7, #15]
    7234:	f003 0307 	and.w	r3, r3, #7
    7238:	b2db      	uxtb	r3, r3
    723a:	f063 034f 	orn	r3, r3, #79	; 0x4f
    723e:	b2db      	uxtb	r3, r3
    7240:	b2db      	uxtb	r3, r3
    7242:	4618      	mov	r0, r3
    7244:	4b36      	ldr	r3, [pc, #216]	; (7320 <ssd1306_draw_graph+0x108>)
    7246:	4798      	blx	r3
			ssd1306_set_column_address(i);
    7248:	7bbb      	ldrb	r3, [r7, #14]
    724a:	4618      	mov	r0, r3
    724c:	4b35      	ldr	r3, [pc, #212]	; (7324 <ssd1306_draw_graph+0x10c>)
    724e:	4798      	blx	r3
			j = log( tab[i+offset] ) * 5;
    7250:	7bba      	ldrb	r2, [r7, #14]
    7252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7254:	4413      	add	r3, r2
    7256:	6a3a      	ldr	r2, [r7, #32]
    7258:	4413      	add	r3, r2
    725a:	781a      	ldrb	r2, [r3, #0]
    725c:	4b32      	ldr	r3, [pc, #200]	; (7328 <ssd1306_draw_graph+0x110>)
    725e:	4610      	mov	r0, r2
    7260:	4798      	blx	r3
    7262:	4602      	mov	r2, r0
    7264:	460b      	mov	r3, r1
    7266:	4610      	mov	r0, r2
    7268:	4619      	mov	r1, r3
    726a:	4b30      	ldr	r3, [pc, #192]	; (732c <ssd1306_draw_graph+0x114>)
    726c:	4798      	blx	r3
    726e:	4602      	mov	r2, r0
    7270:	460b      	mov	r3, r1
    7272:	4c2f      	ldr	r4, [pc, #188]	; (7330 <ssd1306_draw_graph+0x118>)
    7274:	4610      	mov	r0, r2
    7276:	4619      	mov	r1, r3
    7278:	f04f 0200 	mov.w	r2, #0
    727c:	4b2d      	ldr	r3, [pc, #180]	; (7334 <ssd1306_draw_graph+0x11c>)
    727e:	47a0      	blx	r4
    7280:	4602      	mov	r2, r0
    7282:	460b      	mov	r3, r1
    7284:	4c2c      	ldr	r4, [pc, #176]	; (7338 <ssd1306_draw_graph+0x120>)
    7286:	4610      	mov	r0, r2
    7288:	4619      	mov	r1, r3
    728a:	47a0      	blx	r4
    728c:	4603      	mov	r3, r0
    728e:	737b      	strb	r3, [r7, #13]
			scale = 8 * (height - page_start + 1);
    7290:	793a      	ldrb	r2, [r7, #4]
    7292:	7bfb      	ldrb	r3, [r7, #15]
    7294:	1ad3      	subs	r3, r2, r3
    7296:	3301      	adds	r3, #1
    7298:	b2db      	uxtb	r3, r3
    729a:	00db      	lsls	r3, r3, #3
    729c:	72bb      	strb	r3, [r7, #10]
			if (j > scale)
    729e:	7b7a      	ldrb	r2, [r7, #13]
    72a0:	7abb      	ldrb	r3, [r7, #10]
    72a2:	429a      	cmp	r2, r3
    72a4:	d902      	bls.n	72ac <ssd1306_draw_graph+0x94>
			j = 8;
    72a6:	2308      	movs	r3, #8
    72a8:	737b      	strb	r3, [r7, #13]
    72aa:	e005      	b.n	72b8 <ssd1306_draw_graph+0xa0>
			else
			j -= (scale - 8);
    72ac:	7b7a      	ldrb	r2, [r7, #13]
    72ae:	7abb      	ldrb	r3, [r7, #10]
    72b0:	1ad3      	subs	r3, r2, r3
    72b2:	b2db      	uxtb	r3, r3
    72b4:	3308      	adds	r3, #8
    72b6:	737b      	strb	r3, [r7, #13]

			for (k = 0, s = j; j > 0; --j)
    72b8:	2300      	movs	r3, #0
    72ba:	733b      	strb	r3, [r7, #12]
    72bc:	7b7b      	ldrb	r3, [r7, #13]
    72be:	72fb      	strb	r3, [r7, #11]
    72c0:	e007      	b.n	72d2 <ssd1306_draw_graph+0xba>
			k = (k << 1) + 1;
    72c2:	7b3b      	ldrb	r3, [r7, #12]
    72c4:	005b      	lsls	r3, r3, #1
    72c6:	b2db      	uxtb	r3, r3
    72c8:	3301      	adds	r3, #1
    72ca:	733b      	strb	r3, [r7, #12]
			if (j > scale)
			j = 8;
			else
			j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
    72cc:	7b7b      	ldrb	r3, [r7, #13]
    72ce:	3b01      	subs	r3, #1
    72d0:	737b      	strb	r3, [r7, #13]
    72d2:	7b7b      	ldrb	r3, [r7, #13]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d1f4      	bne.n	72c2 <ssd1306_draw_graph+0xaa>
			k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
    72d8:	7afb      	ldrb	r3, [r7, #11]
    72da:	f1c3 0308 	rsb	r3, r3, #8
    72de:	72fb      	strb	r3, [r7, #11]
    72e0:	e005      	b.n	72ee <ssd1306_draw_graph+0xd6>
			k <<= 1;
    72e2:	7b3b      	ldrb	r3, [r7, #12]
    72e4:	005b      	lsls	r3, r3, #1
    72e6:	733b      	strb	r3, [r7, #12]
			else
			j -= (scale - 8);

			for (k = 0, s = j; j > 0; --j)
			k = (k << 1) + 1;
			for (s = 8 - s; s > 0; --s)
    72e8:	7afb      	ldrb	r3, [r7, #11]
    72ea:	3b01      	subs	r3, #1
    72ec:	72fb      	strb	r3, [r7, #11]
    72ee:	7afb      	ldrb	r3, [r7, #11]
    72f0:	2b00      	cmp	r3, #0
    72f2:	d1f6      	bne.n	72e2 <ssd1306_draw_graph+0xca>
			k <<= 1;
			ssd1306_write_data(k);
    72f4:	7b3b      	ldrb	r3, [r7, #12]
    72f6:	4618      	mov	r0, r3
    72f8:	4b10      	ldr	r3, [pc, #64]	; (733c <ssd1306_draw_graph+0x124>)
    72fa:	4798      	blx	r3
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
		for (page_start = page; page_start <= height; ++page_start) {
    72fc:	7bfb      	ldrb	r3, [r7, #15]
    72fe:	3301      	adds	r3, #1
    7300:	73fb      	strb	r3, [r7, #15]
    7302:	7bfa      	ldrb	r2, [r7, #15]
    7304:	793b      	ldrb	r3, [r7, #4]
    7306:	429a      	cmp	r2, r3
    7308:	d993      	bls.n	7232 <ssd1306_draw_graph+0x1a>
{
	uint8_t page_start;
	uint8_t i, j, k, s;
	uint8_t scale;

	for (i = col; i < width; ++i) {
    730a:	7bbb      	ldrb	r3, [r7, #14]
    730c:	3301      	adds	r3, #1
    730e:	73bb      	strb	r3, [r7, #14]
    7310:	7bba      	ldrb	r2, [r7, #14]
    7312:	797b      	ldrb	r3, [r7, #5]
    7314:	429a      	cmp	r2, r3
    7316:	d389      	bcc.n	722c <ssd1306_draw_graph+0x14>
			for (s = 8 - s; s > 0; --s)
			k <<= 1;
			ssd1306_write_data(k);
		}
	}
}
    7318:	3714      	adds	r7, #20
    731a:	46bd      	mov	sp, r7
    731c:	bd90      	pop	{r4, r7, pc}
    731e:	bf00      	nop
    7320:	00006ee1 	.word	0x00006ee1
    7324:	000071c9 	.word	0x000071c9
    7328:	0000ca69 	.word	0x0000ca69
    732c:	0000c2c9 	.word	0x0000c2c9
    7330:	0000cb55 	.word	0x0000cb55
    7334:	40140000 	.word	0x40140000
    7338:	0000d089 	.word	0x0000d089
    733c:	00006ff9 	.word	0x00006ff9

00007340 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
    7340:	b480      	push	{r7}
    7342:	b083      	sub	sp, #12
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	2201      	movs	r2, #1
    734c:	601a      	str	r2, [r3, #0]
}
    734e:	370c      	adds	r7, #12
    7350:	46bd      	mov	sp, r7
    7352:	f85d 7b04 	ldr.w	r7, [sp], #4
    7356:	4770      	bx	lr

00007358 <spi_is_enabled>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
    7358:	b480      	push	{r7}
    735a:	b083      	sub	sp, #12
    735c:	af00      	add	r7, sp, #0
    735e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	691b      	ldr	r3, [r3, #16]
    7364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    7368:	2b00      	cmp	r3, #0
    736a:	d001      	beq.n	7370 <spi_is_enabled+0x18>
		return 1;
    736c:	2301      	movs	r3, #1
    736e:	e000      	b.n	7372 <spi_is_enabled+0x1a>
	} else {
		return 0;
    7370:	2300      	movs	r3, #0
	}
}
    7372:	4618      	mov	r0, r3
    7374:	370c      	adds	r7, #12
    7376:	46bd      	mov	sp, r7
    7378:	f85d 7b04 	ldr.w	r7, [sp], #4
    737c:	4770      	bx	lr
    737e:	bf00      	nop

00007380 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    7380:	b480      	push	{r7}
    7382:	b085      	sub	sp, #20
    7384:	af00      	add	r7, sp, #0
    7386:	6078      	str	r0, [r7, #4]
    7388:	460b      	mov	r3, r1
    738a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc, value, i;

	crc = 0;
    738c:	2300      	movs	r3, #0
    738e:	73fb      	strb	r3, [r7, #15]
	while (size--) {
    7390:	e01e      	b.n	73d0 <sd_mmc_spi_crc7+0x50>
		value = *buf++;
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	1c5a      	adds	r2, r3, #1
    7396:	607a      	str	r2, [r7, #4]
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
    739c:	2300      	movs	r3, #0
    739e:	737b      	strb	r3, [r7, #13]
    73a0:	e013      	b.n	73ca <sd_mmc_spi_crc7+0x4a>
			crc <<= 1;
    73a2:	7bfb      	ldrb	r3, [r7, #15]
    73a4:	005b      	lsls	r3, r3, #1
    73a6:	73fb      	strb	r3, [r7, #15]
			if ((value & 0x80) ^ (crc & 0x80)) {
    73a8:	7bba      	ldrb	r2, [r7, #14]
    73aa:	7bfb      	ldrb	r3, [r7, #15]
    73ac:	4053      	eors	r3, r2
    73ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    73b2:	2b00      	cmp	r3, #0
    73b4:	d003      	beq.n	73be <sd_mmc_spi_crc7+0x3e>
				crc ^= 0x09;
    73b6:	7bfb      	ldrb	r3, [r7, #15]
    73b8:	f083 0309 	eor.w	r3, r3, #9
    73bc:	73fb      	strb	r3, [r7, #15]
			}
			value <<= 1;
    73be:	7bbb      	ldrb	r3, [r7, #14]
    73c0:	005b      	lsls	r3, r3, #1
    73c2:	73bb      	strb	r3, [r7, #14]
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
		value = *buf++;
		for (i = 0; i < 8; i++) {
    73c4:	7b7b      	ldrb	r3, [r7, #13]
    73c6:	3301      	adds	r3, #1
    73c8:	737b      	strb	r3, [r7, #13]
    73ca:	7b7b      	ldrb	r3, [r7, #13]
    73cc:	2b07      	cmp	r3, #7
    73ce:	d9e8      	bls.n	73a2 <sd_mmc_spi_crc7+0x22>
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
	uint8_t crc, value, i;

	crc = 0;
	while (size--) {
    73d0:	78fb      	ldrb	r3, [r7, #3]
    73d2:	1e5a      	subs	r2, r3, #1
    73d4:	70fa      	strb	r2, [r7, #3]
    73d6:	2b00      	cmp	r3, #0
    73d8:	d1db      	bne.n	7392 <sd_mmc_spi_crc7+0x12>
				crc ^= 0x09;
			}
			value <<= 1;
		}
	}
	crc = (crc << 1) | 1;
    73da:	7bfb      	ldrb	r3, [r7, #15]
    73dc:	005b      	lsls	r3, r3, #1
    73de:	b2db      	uxtb	r3, r3
    73e0:	f043 0301 	orr.w	r3, r3, #1
    73e4:	b2db      	uxtb	r3, r3
    73e6:	73fb      	strb	r3, [r7, #15]
	return crc;
    73e8:	7bfb      	ldrb	r3, [r7, #15]
}
    73ea:	4618      	mov	r0, r3
    73ec:	3714      	adds	r7, #20
    73ee:	46bd      	mov	sp, r7
    73f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f4:	4770      	bx	lr
    73f6:	bf00      	nop

000073f8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    73f8:	b580      	push	{r7, lr}
    73fa:	b082      	sub	sp, #8
    73fc:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    73fe:	23ff      	movs	r3, #255	; 0xff
    7400:	70fb      	strb	r3, [r7, #3]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    7402:	1cfb      	adds	r3, r7, #3
    7404:	4810      	ldr	r0, [pc, #64]	; (7448 <sd_mmc_spi_wait_busy+0x50>)
    7406:	4619      	mov	r1, r3
    7408:	2201      	movs	r2, #1
    740a:	4b10      	ldr	r3, [pc, #64]	; (744c <sd_mmc_spi_wait_busy+0x54>)
    740c:	4798      	blx	r3
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    740e:	4b10      	ldr	r3, [pc, #64]	; (7450 <sd_mmc_spi_wait_busy+0x58>)
    7410:	607b      	str	r3, [r7, #4]
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    7412:	1cfb      	adds	r3, r7, #3
    7414:	480c      	ldr	r0, [pc, #48]	; (7448 <sd_mmc_spi_wait_busy+0x50>)
    7416:	4619      	mov	r1, r3
    7418:	2201      	movs	r2, #1
    741a:	4b0c      	ldr	r3, [pc, #48]	; (744c <sd_mmc_spi_wait_busy+0x54>)
    741c:	4798      	blx	r3
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
    741e:	1cfb      	adds	r3, r7, #3
    7420:	4809      	ldr	r0, [pc, #36]	; (7448 <sd_mmc_spi_wait_busy+0x50>)
    7422:	4619      	mov	r1, r3
    7424:	2201      	movs	r2, #1
    7426:	4b09      	ldr	r3, [pc, #36]	; (744c <sd_mmc_spi_wait_busy+0x54>)
    7428:	4798      	blx	r3
		if (!(nec_timeout--)) {
    742a:	687b      	ldr	r3, [r7, #4]
    742c:	1e5a      	subs	r2, r3, #1
    742e:	607a      	str	r2, [r7, #4]
    7430:	2b00      	cmp	r3, #0
    7432:	d101      	bne.n	7438 <sd_mmc_spi_wait_busy+0x40>
			return false;
    7434:	2300      	movs	r3, #0
    7436:	e003      	b.n	7440 <sd_mmc_spi_wait_busy+0x48>
		}
	} while (line != 0xFF);
    7438:	78fb      	ldrb	r3, [r7, #3]
    743a:	2bff      	cmp	r3, #255	; 0xff
    743c:	d1ef      	bne.n	741e <sd_mmc_spi_wait_busy+0x26>
	return true;
    743e:	2301      	movs	r3, #1
}
    7440:	4618      	mov	r0, r3
    7442:	3708      	adds	r7, #8
    7444:	46bd      	mov	sp, r7
    7446:	bd80      	pop	{r7, pc}
    7448:	40008000 	.word	0x40008000
    744c:	000056d9 	.word	0x000056d9
    7450:	00030d40 	.word	0x00030d40

00007454 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    7454:	b580      	push	{r7, lr}
    7456:	b082      	sub	sp, #8
    7458:	af00      	add	r7, sp, #0
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
    745a:	2300      	movs	r3, #0
    745c:	70fb      	strb	r3, [r7, #3]
	i = 500000;
    745e:	4b16      	ldr	r3, [pc, #88]	; (74b8 <sd_mmc_spi_start_read_block+0x64>)
    7460:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    7462:	687b      	ldr	r3, [r7, #4]
    7464:	1e5a      	subs	r2, r3, #1
    7466:	607a      	str	r2, [r7, #4]
    7468:	2b00      	cmp	r3, #0
    746a:	d104      	bne.n	7476 <sd_mmc_spi_start_read_block+0x22>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    746c:	4b13      	ldr	r3, [pc, #76]	; (74bc <sd_mmc_spi_start_read_block+0x68>)
    746e:	2204      	movs	r2, #4
    7470:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    7472:	2300      	movs	r3, #0
    7474:	e01c      	b.n	74b0 <sd_mmc_spi_start_read_block+0x5c>
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
    7476:	1cfb      	adds	r3, r7, #3
    7478:	4811      	ldr	r0, [pc, #68]	; (74c0 <sd_mmc_spi_start_read_block+0x6c>)
    747a:	4619      	mov	r1, r3
    747c:	2201      	movs	r2, #1
    747e:	4b11      	ldr	r3, [pc, #68]	; (74c4 <sd_mmc_spi_start_read_block+0x70>)
    7480:	4798      	blx	r3
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    7482:	78fb      	ldrb	r3, [r7, #3]
    7484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    7488:	2b00      	cmp	r3, #0
    748a:	d10d      	bne.n	74a8 <sd_mmc_spi_start_read_block+0x54>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    748c:	78fb      	ldrb	r3, [r7, #3]
    748e:	f003 0307 	and.w	r3, r3, #7
    7492:	2b00      	cmp	r3, #0
    7494:	d003      	beq.n	749e <sd_mmc_spi_start_read_block+0x4a>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    7496:	4b09      	ldr	r3, [pc, #36]	; (74bc <sd_mmc_spi_start_read_block+0x68>)
    7498:	2207      	movs	r2, #7
    749a:	701a      	strb	r2, [r3, #0]
    749c:	e002      	b.n	74a4 <sd_mmc_spi_start_read_block+0x50>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    749e:	4b07      	ldr	r3, [pc, #28]	; (74bc <sd_mmc_spi_start_read_block+0x68>)
    74a0:	220b      	movs	r2, #11
    74a2:	701a      	strb	r2, [r3, #0]
			}
			return false;
    74a4:	2300      	movs	r3, #0
    74a6:	e003      	b.n	74b0 <sd_mmc_spi_start_read_block+0x5c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    74a8:	78fb      	ldrb	r3, [r7, #3]
    74aa:	2bfe      	cmp	r3, #254	; 0xfe
    74ac:	d1d9      	bne.n	7462 <sd_mmc_spi_start_read_block+0xe>

	return true;
    74ae:	2301      	movs	r3, #1
}
    74b0:	4618      	mov	r0, r3
    74b2:	3708      	adds	r7, #8
    74b4:	46bd      	mov	sp, r7
    74b6:	bd80      	pop	{r7, pc}
    74b8:	0007a120 	.word	0x0007a120
    74bc:	20000e06 	.word	0x20000e06
    74c0:	40008000 	.word	0x40008000
    74c4:	000056d9 	.word	0x000056d9

000074c8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    74c8:	b580      	push	{r7, lr}
    74ca:	b082      	sub	sp, #8
    74cc:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
    74ce:	1d3b      	adds	r3, r7, #4
    74d0:	4803      	ldr	r0, [pc, #12]	; (74e0 <sd_mmc_spi_stop_read_block+0x18>)
    74d2:	4619      	mov	r1, r3
    74d4:	2202      	movs	r2, #2
    74d6:	4b03      	ldr	r3, [pc, #12]	; (74e4 <sd_mmc_spi_stop_read_block+0x1c>)
    74d8:	4798      	blx	r3
}
    74da:	3708      	adds	r7, #8
    74dc:	46bd      	mov	sp, r7
    74de:	bd80      	pop	{r7, pc}
    74e0:	40008000 	.word	0x40008000
    74e4:	000056d9 	.word	0x000056d9

000074e8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    74e8:	b580      	push	{r7, lr}
    74ea:	b082      	sub	sp, #8
    74ec:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    74ee:	23ff      	movs	r3, #255	; 0xff
    74f0:	71fb      	strb	r3, [r7, #7]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
    74f2:	1dfb      	adds	r3, r7, #7
    74f4:	480b      	ldr	r0, [pc, #44]	; (7524 <sd_mmc_spi_start_write_block+0x3c>)
    74f6:	4619      	mov	r1, r3
    74f8:	2201      	movs	r2, #1
    74fa:	4b0b      	ldr	r3, [pc, #44]	; (7528 <sd_mmc_spi_start_write_block+0x40>)
    74fc:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    74fe:	4b0b      	ldr	r3, [pc, #44]	; (752c <sd_mmc_spi_start_write_block+0x44>)
    7500:	881b      	ldrh	r3, [r3, #0]
    7502:	2b01      	cmp	r3, #1
    7504:	d102      	bne.n	750c <sd_mmc_spi_start_write_block+0x24>
		token = SPI_TOKEN_SINGLE_WRITE;
    7506:	23fe      	movs	r3, #254	; 0xfe
    7508:	71bb      	strb	r3, [r7, #6]
    750a:	e001      	b.n	7510 <sd_mmc_spi_start_write_block+0x28>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    750c:	23fc      	movs	r3, #252	; 0xfc
    750e:	71bb      	strb	r3, [r7, #6]
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
    7510:	1dbb      	adds	r3, r7, #6
    7512:	4804      	ldr	r0, [pc, #16]	; (7524 <sd_mmc_spi_start_write_block+0x3c>)
    7514:	4619      	mov	r1, r3
    7516:	2201      	movs	r2, #1
    7518:	4b03      	ldr	r3, [pc, #12]	; (7528 <sd_mmc_spi_start_write_block+0x40>)
    751a:	4798      	blx	r3
}
    751c:	3708      	adds	r7, #8
    751e:	46bd      	mov	sp, r7
    7520:	bd80      	pop	{r7, pc}
    7522:	bf00      	nop
    7524:	40008000 	.word	0x40008000
    7528:	00005665 	.word	0x00005665
    752c:	20000e16 	.word	0x20000e16

00007530 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    7530:	b580      	push	{r7, lr}
    7532:	b082      	sub	sp, #8
    7534:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    7536:	f64f 73ff 	movw	r3, #65535	; 0xffff
    753a:	80bb      	strh	r3, [r7, #4]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
    753c:	1d3b      	adds	r3, r7, #4
    753e:	4818      	ldr	r0, [pc, #96]	; (75a0 <sd_mmc_spi_stop_write_block+0x70>)
    7540:	4619      	mov	r1, r3
    7542:	2202      	movs	r2, #2
    7544:	4b17      	ldr	r3, [pc, #92]	; (75a4 <sd_mmc_spi_stop_write_block+0x74>)
    7546:	4798      	blx	r3
	// Receiv data response token
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
    7548:	1dfb      	adds	r3, r7, #7
    754a:	4815      	ldr	r0, [pc, #84]	; (75a0 <sd_mmc_spi_stop_write_block+0x70>)
    754c:	4619      	mov	r1, r3
    754e:	2201      	movs	r2, #1
    7550:	4b15      	ldr	r3, [pc, #84]	; (75a8 <sd_mmc_spi_stop_write_block+0x78>)
    7552:	4798      	blx	r3
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    7554:	79fb      	ldrb	r3, [r7, #7]
    7556:	f003 0310 	and.w	r3, r3, #16
    755a:	2b00      	cmp	r3, #0
    755c:	d104      	bne.n	7568 <sd_mmc_spi_stop_write_block+0x38>
    755e:	79fb      	ldrb	r3, [r7, #7]
    7560:	f003 0301 	and.w	r3, r3, #1
    7564:	2b00      	cmp	r3, #0
    7566:	d104      	bne.n	7572 <sd_mmc_spi_stop_write_block+0x42>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    7568:	4b10      	ldr	r3, [pc, #64]	; (75ac <sd_mmc_spi_stop_write_block+0x7c>)
    756a:	2201      	movs	r2, #1
    756c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    756e:	2300      	movs	r3, #0
    7570:	e012      	b.n	7598 <sd_mmc_spi_stop_write_block+0x68>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    7572:	79fb      	ldrb	r3, [r7, #7]
    7574:	f003 031e 	and.w	r3, r3, #30
    7578:	2b04      	cmp	r3, #4
    757a:	d00b      	beq.n	7594 <sd_mmc_spi_stop_write_block+0x64>
    757c:	2b0a      	cmp	r3, #10
    757e:	d104      	bne.n	758a <sd_mmc_spi_stop_write_block+0x5a>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    7580:	4b0a      	ldr	r3, [pc, #40]	; (75ac <sd_mmc_spi_stop_write_block+0x7c>)
    7582:	2208      	movs	r2, #8
    7584:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    7586:	2300      	movs	r3, #0
    7588:	e006      	b.n	7598 <sd_mmc_spi_stop_write_block+0x68>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    758a:	4b08      	ldr	r3, [pc, #32]	; (75ac <sd_mmc_spi_stop_write_block+0x7c>)
    758c:	220a      	movs	r2, #10
    758e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    7590:	2300      	movs	r3, #0
    7592:	e001      	b.n	7598 <sd_mmc_spi_stop_write_block+0x68>
		return false;
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
    7594:	bf00      	nop
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
	}
	return true;
    7596:	2301      	movs	r3, #1
}
    7598:	4618      	mov	r0, r3
    759a:	3708      	adds	r7, #8
    759c:	46bd      	mov	sp, r7
    759e:	bd80      	pop	{r7, pc}
    75a0:	40008000 	.word	0x40008000
    75a4:	00005665 	.word	0x00005665
    75a8:	000056d9 	.word	0x000056d9
    75ac:	20000e06 	.word	0x20000e06

000075b0 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    75b0:	b580      	push	{r7, lr}
    75b2:	b082      	sub	sp, #8
    75b4:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    75b6:	4b1a      	ldr	r3, [pc, #104]	; (7620 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    75b8:	881b      	ldrh	r3, [r3, #0]
    75ba:	2b01      	cmp	r3, #1
    75bc:	d101      	bne.n	75c2 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    75be:	2301      	movs	r3, #1
    75c0:	e02a      	b.n	7618 <sd_mmc_spi_stop_multiwrite_block+0x68>
	}
	if (sd_mmc_spi_nb_block >
    75c2:	4b17      	ldr	r3, [pc, #92]	; (7620 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    75c4:	881b      	ldrh	r3, [r3, #0]
    75c6:	461a      	mov	r2, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    75c8:	4b16      	ldr	r3, [pc, #88]	; (7624 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    75ca:	6819      	ldr	r1, [r3, #0]
    75cc:	4b16      	ldr	r3, [pc, #88]	; (7628 <sd_mmc_spi_stop_multiwrite_block+0x78>)
    75ce:	881b      	ldrh	r3, [r3, #0]
    75d0:	fbb1 f3f3 	udiv	r3, r1, r3
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
    75d4:	429a      	cmp	r2, r3
    75d6:	d901      	bls.n	75dc <sd_mmc_spi_stop_multiwrite_block+0x2c>
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
		return true; // It is not the End of multi write
    75d8:	2301      	movs	r3, #1
    75da:	e01d      	b.n	7618 <sd_mmc_spi_stop_multiwrite_block+0x68>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    75dc:	23ff      	movs	r3, #255	; 0xff
    75de:	71fb      	strb	r3, [r7, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
    75e0:	1dfb      	adds	r3, r7, #7
    75e2:	4812      	ldr	r0, [pc, #72]	; (762c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    75e4:	4619      	mov	r1, r3
    75e6:	2201      	movs	r2, #1
    75e8:	4b11      	ldr	r3, [pc, #68]	; (7630 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    75ea:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    75ec:	23fd      	movs	r3, #253	; 0xfd
    75ee:	71fb      	strb	r3, [r7, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
    75f0:	1dfb      	adds	r3, r7, #7
    75f2:	480e      	ldr	r0, [pc, #56]	; (762c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    75f4:	4619      	mov	r1, r3
    75f6:	2201      	movs	r2, #1
    75f8:	4b0d      	ldr	r3, [pc, #52]	; (7630 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    75fa:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    75fc:	4b0d      	ldr	r3, [pc, #52]	; (7634 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    75fe:	4798      	blx	r3
    7600:	4603      	mov	r3, r0
    7602:	f083 0301 	eor.w	r3, r3, #1
    7606:	b2db      	uxtb	r3, r3
    7608:	2b00      	cmp	r3, #0
    760a:	d004      	beq.n	7616 <sd_mmc_spi_stop_multiwrite_block+0x66>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    760c:	4b0a      	ldr	r3, [pc, #40]	; (7638 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    760e:	2205      	movs	r2, #5
    7610:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    7612:	2300      	movs	r3, #0
    7614:	e000      	b.n	7618 <sd_mmc_spi_stop_multiwrite_block+0x68>
	}
	return true;
    7616:	2301      	movs	r3, #1
}
    7618:	4618      	mov	r0, r3
    761a:	3708      	adds	r7, #8
    761c:	46bd      	mov	sp, r7
    761e:	bd80      	pop	{r7, pc}
    7620:	20000e16 	.word	0x20000e16
    7624:	20000e10 	.word	0x20000e10
    7628:	20000e14 	.word	0x20000e14
    762c:	40008000 	.word	0x40008000
    7630:	00005665 	.word	0x00005665
    7634:	000073f9 	.word	0x000073f9
    7638:	20000e06 	.word	0x20000e06

0000763c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    763c:	b580      	push	{r7, lr}
    763e:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7640:	4b07      	ldr	r3, [pc, #28]	; (7660 <sd_mmc_spi_init+0x24>)
    7642:	2200      	movs	r2, #0
    7644:	701a      	strb	r2, [r3, #0]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
    7646:	4807      	ldr	r0, [pc, #28]	; (7664 <sd_mmc_spi_init+0x28>)
    7648:	4b07      	ldr	r3, [pc, #28]	; (7668 <sd_mmc_spi_init+0x2c>)
    764a:	4798      	blx	r3
    764c:	4603      	mov	r3, r0
    764e:	2b00      	cmp	r3, #0
    7650:	d105      	bne.n	765e <sd_mmc_spi_init+0x22>
		spi_master_init(SD_MMC_SPI);
    7652:	4804      	ldr	r0, [pc, #16]	; (7664 <sd_mmc_spi_init+0x28>)
    7654:	4b05      	ldr	r3, [pc, #20]	; (766c <sd_mmc_spi_init+0x30>)
    7656:	4798      	blx	r3
		spi_enable(SD_MMC_SPI);
    7658:	4802      	ldr	r0, [pc, #8]	; (7664 <sd_mmc_spi_init+0x28>)
    765a:	4b05      	ldr	r3, [pc, #20]	; (7670 <sd_mmc_spi_init+0x34>)
    765c:	4798      	blx	r3
	}
#endif
}
    765e:	bd80      	pop	{r7, pc}
    7660:	20000e06 	.word	0x20000e06
    7664:	40008000 	.word	0x40008000
    7668:	00007359 	.word	0x00007359
    766c:	000054b1 	.word	0x000054b1
    7670:	00007341 	.word	0x00007341

00007674 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    7674:	b590      	push	{r4, r7, lr}
    7676:	b085      	sub	sp, #20
    7678:	af02      	add	r7, sp, #8
    767a:	6039      	str	r1, [r7, #0]
    767c:	4601      	mov	r1, r0
    767e:	71f9      	strb	r1, [r7, #7]
    7680:	71ba      	strb	r2, [r7, #6]
    7682:	717b      	strb	r3, [r7, #5]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7684:	4b0f      	ldr	r3, [pc, #60]	; (76c4 <sd_mmc_spi_select_device+0x50>)
    7686:	2200      	movs	r2, #0
    7688:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    768a:	683a      	ldr	r2, [r7, #0]
    768c:	4b0e      	ldr	r3, [pc, #56]	; (76c8 <sd_mmc_spi_select_device+0x54>)
    768e:	429a      	cmp	r2, r3
    7690:	d901      	bls.n	7696 <sd_mmc_spi_select_device+0x22>
		clock = SD_MMC_SPI_MAX_CLOCK;
    7692:	4b0d      	ldr	r3, [pc, #52]	; (76c8 <sd_mmc_spi_select_device+0x54>)
    7694:	603b      	str	r3, [r7, #0]
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
    7696:	79fb      	ldrb	r3, [r7, #7]
    7698:	009a      	lsls	r2, r3, #2
    769a:	4b0c      	ldr	r3, [pc, #48]	; (76cc <sd_mmc_spi_select_device+0x58>)
    769c:	4413      	add	r3, r2
    769e:	2200      	movs	r2, #0
    76a0:	9200      	str	r2, [sp, #0]
    76a2:	480b      	ldr	r0, [pc, #44]	; (76d0 <sd_mmc_spi_select_device+0x5c>)
    76a4:	4619      	mov	r1, r3
    76a6:	2200      	movs	r2, #0
    76a8:	683b      	ldr	r3, [r7, #0]
    76aa:	4c0a      	ldr	r4, [pc, #40]	; (76d4 <sd_mmc_spi_select_device+0x60>)
    76ac:	47a0      	blx	r4
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
    76ae:	79fb      	ldrb	r3, [r7, #7]
    76b0:	009a      	lsls	r2, r3, #2
    76b2:	4b06      	ldr	r3, [pc, #24]	; (76cc <sd_mmc_spi_select_device+0x58>)
    76b4:	4413      	add	r3, r2
    76b6:	4806      	ldr	r0, [pc, #24]	; (76d0 <sd_mmc_spi_select_device+0x5c>)
    76b8:	4619      	mov	r1, r3
    76ba:	4b07      	ldr	r3, [pc, #28]	; (76d8 <sd_mmc_spi_select_device+0x64>)
    76bc:	4798      	blx	r3
}
    76be:	370c      	adds	r7, #12
    76c0:	46bd      	mov	sp, r7
    76c2:	bd90      	pop	{r4, r7, pc}
    76c4:	20000e06 	.word	0x20000e06
    76c8:	00989680 	.word	0x00989680
    76cc:	20000e08 	.word	0x20000e08
    76d0:	40008000 	.word	0x40008000
    76d4:	0000551d 	.word	0x0000551d
    76d8:	000055d5 	.word	0x000055d5

000076dc <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    76dc:	b580      	push	{r7, lr}
    76de:	b082      	sub	sp, #8
    76e0:	af00      	add	r7, sp, #0
    76e2:	4603      	mov	r3, r0
    76e4:	71fb      	strb	r3, [r7, #7]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    76e6:	4b07      	ldr	r3, [pc, #28]	; (7704 <sd_mmc_spi_deselect_device+0x28>)
    76e8:	2200      	movs	r2, #0
    76ea:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
    76ec:	79fb      	ldrb	r3, [r7, #7]
    76ee:	009a      	lsls	r2, r3, #2
    76f0:	4b05      	ldr	r3, [pc, #20]	; (7708 <sd_mmc_spi_deselect_device+0x2c>)
    76f2:	4413      	add	r3, r2
    76f4:	4805      	ldr	r0, [pc, #20]	; (770c <sd_mmc_spi_deselect_device+0x30>)
    76f6:	4619      	mov	r1, r3
    76f8:	4b05      	ldr	r3, [pc, #20]	; (7710 <sd_mmc_spi_deselect_device+0x34>)
    76fa:	4798      	blx	r3
}
    76fc:	3708      	adds	r7, #8
    76fe:	46bd      	mov	sp, r7
    7700:	bd80      	pop	{r7, pc}
    7702:	bf00      	nop
    7704:	20000e06 	.word	0x20000e06
    7708:	20000e08 	.word	0x20000e08
    770c:	40008000 	.word	0x40008000
    7710:	0000562d 	.word	0x0000562d

00007714 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    7714:	b580      	push	{r7, lr}
    7716:	b082      	sub	sp, #8
    7718:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    771a:	23ff      	movs	r3, #255	; 0xff
    771c:	71bb      	strb	r3, [r7, #6]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    771e:	4b0a      	ldr	r3, [pc, #40]	; (7748 <sd_mmc_spi_send_clock+0x34>)
    7720:	2200      	movs	r2, #0
    7722:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    7724:	2300      	movs	r3, #0
    7726:	71fb      	strb	r3, [r7, #7]
    7728:	e008      	b.n	773c <sd_mmc_spi_send_clock+0x28>
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
    772a:	1dbb      	adds	r3, r7, #6
    772c:	4807      	ldr	r0, [pc, #28]	; (774c <sd_mmc_spi_send_clock+0x38>)
    772e:	4619      	mov	r1, r3
    7730:	2201      	movs	r2, #1
    7732:	4b07      	ldr	r3, [pc, #28]	; (7750 <sd_mmc_spi_send_clock+0x3c>)
    7734:	4798      	blx	r3
	uint8_t i;
	uint8_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    7736:	79fb      	ldrb	r3, [r7, #7]
    7738:	3301      	adds	r3, #1
    773a:	71fb      	strb	r3, [r7, #7]
    773c:	79fb      	ldrb	r3, [r7, #7]
    773e:	2b09      	cmp	r3, #9
    7740:	d9f3      	bls.n	772a <sd_mmc_spi_send_clock+0x16>
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
	}
}
    7742:	3708      	adds	r7, #8
    7744:	46bd      	mov	sp, r7
    7746:	bd80      	pop	{r7, pc}
    7748:	20000e06 	.word	0x20000e06
    774c:	40008000 	.word	0x40008000
    7750:	00005665 	.word	0x00005665

00007754 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    7754:	b590      	push	{r4, r7, lr}
    7756:	b085      	sub	sp, #20
    7758:	af02      	add	r7, sp, #8
    775a:	6078      	str	r0, [r7, #4]
    775c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    775e:	2300      	movs	r3, #0
    7760:	9300      	str	r3, [sp, #0]
    7762:	6878      	ldr	r0, [r7, #4]
    7764:	6839      	ldr	r1, [r7, #0]
    7766:	2200      	movs	r2, #0
    7768:	2300      	movs	r3, #0
    776a:	4c03      	ldr	r4, [pc, #12]	; (7778 <sd_mmc_spi_send_cmd+0x24>)
    776c:	47a0      	blx	r4
    776e:	4603      	mov	r3, r0
}
    7770:	4618      	mov	r0, r3
    7772:	370c      	adds	r7, #12
    7774:	46bd      	mov	sp, r7
    7776:	bd90      	pop	{r4, r7, pc}
    7778:	0000777d 	.word	0x0000777d

0000777c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    777c:	b580      	push	{r7, lr}
    777e:	b088      	sub	sp, #32
    7780:	af00      	add	r7, sp, #0
    7782:	60f8      	str	r0, [r7, #12]
    7784:	60b9      	str	r1, [r7, #8]
    7786:	80fa      	strh	r2, [r7, #6]
    7788:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy = 0xFF;
    778a:	23ff      	movs	r3, #255	; 0xff
    778c:	77bb      	strb	r3, [r7, #30]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    778e:	4b5c      	ldr	r3, [pc, #368]	; (7900 <sd_mmc_spi_adtc_start+0x184>)
    7790:	2200      	movs	r2, #0
    7792:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    7794:	68fb      	ldr	r3, [r7, #12]
    7796:	b2db      	uxtb	r3, r3
    7798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    779c:	b2db      	uxtb	r3, r3
    779e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    77a2:	b2db      	uxtb	r3, r3
    77a4:	763b      	strb	r3, [r7, #24]
	cmd_token[1] = arg >> 24;
    77a6:	68bb      	ldr	r3, [r7, #8]
    77a8:	0e1b      	lsrs	r3, r3, #24
    77aa:	b2db      	uxtb	r3, r3
    77ac:	767b      	strb	r3, [r7, #25]
	cmd_token[2] = arg >> 16;
    77ae:	68bb      	ldr	r3, [r7, #8]
    77b0:	0c1b      	lsrs	r3, r3, #16
    77b2:	b2db      	uxtb	r3, r3
    77b4:	76bb      	strb	r3, [r7, #26]
	cmd_token[3] = arg >> 8;
    77b6:	68bb      	ldr	r3, [r7, #8]
    77b8:	0a1b      	lsrs	r3, r3, #8
    77ba:	b2db      	uxtb	r3, r3
    77bc:	76fb      	strb	r3, [r7, #27]
	cmd_token[4] = arg;
    77be:	68bb      	ldr	r3, [r7, #8]
    77c0:	b2db      	uxtb	r3, r3
    77c2:	773b      	strb	r3, [r7, #28]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    77c4:	f107 0318 	add.w	r3, r7, #24
    77c8:	4618      	mov	r0, r3
    77ca:	2105      	movs	r1, #5
    77cc:	4b4d      	ldr	r3, [pc, #308]	; (7904 <sd_mmc_spi_adtc_start+0x188>)
    77ce:	4798      	blx	r3
    77d0:	4603      	mov	r3, r0
    77d2:	777b      	strb	r3, [r7, #29]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
    77d4:	f107 031e 	add.w	r3, r7, #30
    77d8:	484b      	ldr	r0, [pc, #300]	; (7908 <sd_mmc_spi_adtc_start+0x18c>)
    77da:	4619      	mov	r1, r3
    77dc:	2201      	movs	r2, #1
    77de:	4b4b      	ldr	r3, [pc, #300]	; (790c <sd_mmc_spi_adtc_start+0x190>)
    77e0:	4798      	blx	r3
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
    77e2:	f107 0318 	add.w	r3, r7, #24
    77e6:	4848      	ldr	r0, [pc, #288]	; (7908 <sd_mmc_spi_adtc_start+0x18c>)
    77e8:	4619      	mov	r1, r3
    77ea:	2206      	movs	r2, #6
    77ec:	4b47      	ldr	r3, [pc, #284]	; (790c <sd_mmc_spi_adtc_start+0x190>)
    77ee:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    77f0:	23ff      	movs	r3, #255	; 0xff
    77f2:	75fb      	strb	r3, [r7, #23]
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
    77f4:	f107 0317 	add.w	r3, r7, #23
    77f8:	4843      	ldr	r0, [pc, #268]	; (7908 <sd_mmc_spi_adtc_start+0x18c>)
    77fa:	4619      	mov	r1, r3
    77fc:	2201      	movs	r2, #1
    77fe:	4b44      	ldr	r3, [pc, #272]	; (7910 <sd_mmc_spi_adtc_start+0x194>)
    7800:	4798      	blx	r3
	ncr_timeout = 7;
    7802:	2307      	movs	r3, #7
    7804:	77fb      	strb	r3, [r7, #31]
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
    7806:	f107 0317 	add.w	r3, r7, #23
    780a:	483f      	ldr	r0, [pc, #252]	; (7908 <sd_mmc_spi_adtc_start+0x18c>)
    780c:	4619      	mov	r1, r3
    780e:	2201      	movs	r2, #1
    7810:	4b3f      	ldr	r3, [pc, #252]	; (7910 <sd_mmc_spi_adtc_start+0x194>)
    7812:	4798      	blx	r3
		if ((r1 & R1_SPI_ERROR) == 0) {
    7814:	7dfb      	ldrb	r3, [r7, #23]
    7816:	b2db      	uxtb	r3, r3
    7818:	b25b      	sxtb	r3, r3
    781a:	2b00      	cmp	r3, #0
    781c:	db0a      	blt.n	7834 <sd_mmc_spi_adtc_start+0xb8>
			// Valid R1 response
			break;
    781e:	bf00      	nop
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    7820:	7dfb      	ldrb	r3, [r7, #23]
    7822:	461a      	mov	r2, r3
    7824:	4b3b      	ldr	r3, [pc, #236]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    7826:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    7828:	7dfb      	ldrb	r3, [r7, #23]
    782a:	f003 0308 	and.w	r3, r3, #8
    782e:	2b00      	cmp	r3, #0
    7830:	d011      	beq.n	7856 <sd_mmc_spi_adtc_start+0xda>
    7832:	e00b      	b.n	784c <sd_mmc_spi_adtc_start+0xd0>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    7834:	7ffb      	ldrb	r3, [r7, #31]
    7836:	3b01      	subs	r3, #1
    7838:	77fb      	strb	r3, [r7, #31]
    783a:	7ffb      	ldrb	r3, [r7, #31]
    783c:	2b00      	cmp	r3, #0
    783e:	d104      	bne.n	784a <sd_mmc_spi_adtc_start+0xce>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    7840:	4b2f      	ldr	r3, [pc, #188]	; (7900 <sd_mmc_spi_adtc_start+0x184>)
    7842:	2202      	movs	r2, #2
    7844:	701a      	strb	r2, [r3, #0]
			return false;
    7846:	2300      	movs	r3, #0
    7848:	e055      	b.n	78f6 <sd_mmc_spi_adtc_start+0x17a>
		}
	}
    784a:	e7dc      	b.n	7806 <sd_mmc_spi_adtc_start+0x8a>

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    784c:	4b2c      	ldr	r3, [pc, #176]	; (7900 <sd_mmc_spi_adtc_start+0x184>)
    784e:	2206      	movs	r2, #6
    7850:	701a      	strb	r2, [r3, #0]
		return false;
    7852:	2300      	movs	r3, #0
    7854:	e04f      	b.n	78f6 <sd_mmc_spi_adtc_start+0x17a>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    7856:	7dfb      	ldrb	r3, [r7, #23]
    7858:	f003 0304 	and.w	r3, r3, #4
    785c:	2b00      	cmp	r3, #0
    785e:	d004      	beq.n	786a <sd_mmc_spi_adtc_start+0xee>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    7860:	4b27      	ldr	r3, [pc, #156]	; (7900 <sd_mmc_spi_adtc_start+0x184>)
    7862:	2209      	movs	r2, #9
    7864:	701a      	strb	r2, [r3, #0]
		return false;
    7866:	2300      	movs	r3, #0
    7868:	e045      	b.n	78f6 <sd_mmc_spi_adtc_start+0x17a>
	}
	if (r1 & ~R1_SPI_IDLE) {
    786a:	7dfb      	ldrb	r3, [r7, #23]
    786c:	f023 0301 	bic.w	r3, r3, #1
    7870:	2b00      	cmp	r3, #0
    7872:	d004      	beq.n	787e <sd_mmc_spi_adtc_start+0x102>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    7874:	4b22      	ldr	r3, [pc, #136]	; (7900 <sd_mmc_spi_adtc_start+0x184>)
    7876:	2201      	movs	r2, #1
    7878:	701a      	strb	r2, [r3, #0]
		return false;
    787a:	2300      	movs	r3, #0
    787c:	e03b      	b.n	78f6 <sd_mmc_spi_adtc_start+0x17a>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    787e:	68fb      	ldr	r3, [r7, #12]
    7880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    7884:	2b00      	cmp	r3, #0
    7886:	d00c      	beq.n	78a2 <sd_mmc_spi_adtc_start+0x126>
		if (!sd_mmc_spi_wait_busy()) {
    7888:	4b23      	ldr	r3, [pc, #140]	; (7918 <sd_mmc_spi_adtc_start+0x19c>)
    788a:	4798      	blx	r3
    788c:	4603      	mov	r3, r0
    788e:	f083 0301 	eor.w	r3, r3, #1
    7892:	b2db      	uxtb	r3, r3
    7894:	2b00      	cmp	r3, #0
    7896:	d004      	beq.n	78a2 <sd_mmc_spi_adtc_start+0x126>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    7898:	4b19      	ldr	r3, [pc, #100]	; (7900 <sd_mmc_spi_adtc_start+0x184>)
    789a:	2203      	movs	r2, #3
    789c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    789e:	2300      	movs	r3, #0
    78a0:	e029      	b.n	78f6 <sd_mmc_spi_adtc_start+0x17a>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    78a2:	68fb      	ldr	r3, [r7, #12]
    78a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    78a8:	2b00      	cmp	r3, #0
    78aa:	d00b      	beq.n	78c4 <sd_mmc_spi_adtc_start+0x148>
		sd_mmc_spi_response_32 = 0;
    78ac:	4b19      	ldr	r3, [pc, #100]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78ae:	2200      	movs	r2, #0
    78b0:	601a      	str	r2, [r3, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
    78b2:	4815      	ldr	r0, [pc, #84]	; (7908 <sd_mmc_spi_adtc_start+0x18c>)
    78b4:	4917      	ldr	r1, [pc, #92]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78b6:	2201      	movs	r2, #1
    78b8:	4b15      	ldr	r3, [pc, #84]	; (7910 <sd_mmc_spi_adtc_start+0x194>)
    78ba:	4798      	blx	r3
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    78bc:	4b15      	ldr	r3, [pc, #84]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78be:	681a      	ldr	r2, [r3, #0]
    78c0:	4b14      	ldr	r3, [pc, #80]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78c2:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    78c4:	68fb      	ldr	r3, [r7, #12]
    78c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    78ca:	2b00      	cmp	r3, #0
    78cc:	d009      	beq.n	78e2 <sd_mmc_spi_adtc_start+0x166>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
    78ce:	480e      	ldr	r0, [pc, #56]	; (7908 <sd_mmc_spi_adtc_start+0x18c>)
    78d0:	4910      	ldr	r1, [pc, #64]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78d2:	2204      	movs	r2, #4
    78d4:	4b0e      	ldr	r3, [pc, #56]	; (7910 <sd_mmc_spi_adtc_start+0x194>)
    78d6:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    78d8:	4b0e      	ldr	r3, [pc, #56]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78da:	681b      	ldr	r3, [r3, #0]
    78dc:	ba1a      	rev	r2, r3
    78de:	4b0d      	ldr	r3, [pc, #52]	; (7914 <sd_mmc_spi_adtc_start+0x198>)
    78e0:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    78e2:	4b0e      	ldr	r3, [pc, #56]	; (791c <sd_mmc_spi_adtc_start+0x1a0>)
    78e4:	88fa      	ldrh	r2, [r7, #6]
    78e6:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    78e8:	4b0d      	ldr	r3, [pc, #52]	; (7920 <sd_mmc_spi_adtc_start+0x1a4>)
    78ea:	88ba      	ldrh	r2, [r7, #4]
    78ec:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    78ee:	4b0d      	ldr	r3, [pc, #52]	; (7924 <sd_mmc_spi_adtc_start+0x1a8>)
    78f0:	2200      	movs	r2, #0
    78f2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    78f4:	2301      	movs	r3, #1
}
    78f6:	4618      	mov	r0, r3
    78f8:	3720      	adds	r7, #32
    78fa:	46bd      	mov	sp, r7
    78fc:	bd80      	pop	{r7, pc}
    78fe:	bf00      	nop
    7900:	20000e06 	.word	0x20000e06
    7904:	00007381 	.word	0x00007381
    7908:	40008000 	.word	0x40008000
    790c:	00005665 	.word	0x00005665
    7910:	000056d9 	.word	0x000056d9
    7914:	20000e0c 	.word	0x20000e0c
    7918:	000073f9 	.word	0x000073f9
    791c:	20000e14 	.word	0x20000e14
    7920:	20000e16 	.word	0x20000e16
    7924:	20000e10 	.word	0x20000e10

00007928 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    7928:	b480      	push	{r7}
    792a:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    792c:	4b03      	ldr	r3, [pc, #12]	; (793c <sd_mmc_spi_get_response+0x14>)
    792e:	681b      	ldr	r3, [r3, #0]
}
    7930:	4618      	mov	r0, r3
    7932:	46bd      	mov	sp, r7
    7934:	f85d 7b04 	ldr.w	r7, [sp], #4
    7938:	4770      	bx	lr
    793a:	bf00      	nop
    793c:	20000e0c 	.word	0x20000e0c

00007940 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    7940:	b580      	push	{r7, lr}
    7942:	b082      	sub	sp, #8
    7944:	af00      	add	r7, sp, #0
    7946:	6078      	str	r0, [r7, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7948:	4b1b      	ldr	r3, [pc, #108]	; (79b8 <sd_mmc_spi_read_word+0x78>)
    794a:	2200      	movs	r2, #0
    794c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    794e:	4b1b      	ldr	r3, [pc, #108]	; (79bc <sd_mmc_spi_read_word+0x7c>)
    7950:	681b      	ldr	r3, [r3, #0]
    7952:	4a1b      	ldr	r2, [pc, #108]	; (79c0 <sd_mmc_spi_read_word+0x80>)
    7954:	8812      	ldrh	r2, [r2, #0]
    7956:	fbb3 f1f2 	udiv	r1, r3, r2
    795a:	fb02 f201 	mul.w	r2, r2, r1
    795e:	1a9b      	subs	r3, r3, r2
    7960:	2b00      	cmp	r3, #0
    7962:	d109      	bne.n	7978 <sd_mmc_spi_read_word+0x38>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    7964:	4b17      	ldr	r3, [pc, #92]	; (79c4 <sd_mmc_spi_read_word+0x84>)
    7966:	4798      	blx	r3
    7968:	4603      	mov	r3, r0
    796a:	f083 0301 	eor.w	r3, r3, #1
    796e:	b2db      	uxtb	r3, r3
    7970:	2b00      	cmp	r3, #0
    7972:	d001      	beq.n	7978 <sd_mmc_spi_read_word+0x38>
			return false;
    7974:	2300      	movs	r3, #0
    7976:	e01b      	b.n	79b0 <sd_mmc_spi_read_word+0x70>
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
    7978:	4813      	ldr	r0, [pc, #76]	; (79c8 <sd_mmc_spi_read_word+0x88>)
    797a:	6879      	ldr	r1, [r7, #4]
    797c:	2204      	movs	r2, #4
    797e:	4b13      	ldr	r3, [pc, #76]	; (79cc <sd_mmc_spi_read_word+0x8c>)
    7980:	4798      	blx	r3
	*value = le32_to_cpu(*value);
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	681a      	ldr	r2, [r3, #0]
    7986:	687b      	ldr	r3, [r7, #4]
    7988:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    798a:	4b0c      	ldr	r3, [pc, #48]	; (79bc <sd_mmc_spi_read_word+0x7c>)
    798c:	681b      	ldr	r3, [r3, #0]
    798e:	1d1a      	adds	r2, r3, #4
    7990:	4b0a      	ldr	r3, [pc, #40]	; (79bc <sd_mmc_spi_read_word+0x7c>)
    7992:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    7994:	4b09      	ldr	r3, [pc, #36]	; (79bc <sd_mmc_spi_read_word+0x7c>)
    7996:	681b      	ldr	r3, [r3, #0]
    7998:	4a09      	ldr	r2, [pc, #36]	; (79c0 <sd_mmc_spi_read_word+0x80>)
    799a:	8812      	ldrh	r2, [r2, #0]
    799c:	fbb3 f1f2 	udiv	r1, r3, r2
    79a0:	fb02 f201 	mul.w	r2, r2, r1
    79a4:	1a9b      	subs	r3, r3, r2
    79a6:	2b00      	cmp	r3, #0
    79a8:	d101      	bne.n	79ae <sd_mmc_spi_read_word+0x6e>
		// End of block
		sd_mmc_spi_stop_read_block();
    79aa:	4b09      	ldr	r3, [pc, #36]	; (79d0 <sd_mmc_spi_read_word+0x90>)
    79ac:	4798      	blx	r3
	}
	return true;
    79ae:	2301      	movs	r3, #1
}
    79b0:	4618      	mov	r0, r3
    79b2:	3708      	adds	r7, #8
    79b4:	46bd      	mov	sp, r7
    79b6:	bd80      	pop	{r7, pc}
    79b8:	20000e06 	.word	0x20000e06
    79bc:	20000e10 	.word	0x20000e10
    79c0:	20000e14 	.word	0x20000e14
    79c4:	00007455 	.word	0x00007455
    79c8:	40008000 	.word	0x40008000
    79cc:	000056d9 	.word	0x000056d9
    79d0:	000074c9 	.word	0x000074c9

000079d4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    79d4:	b580      	push	{r7, lr}
    79d6:	b084      	sub	sp, #16
    79d8:	af00      	add	r7, sp, #0
    79da:	6078      	str	r0, [r7, #4]
    79dc:	460b      	mov	r3, r1
    79de:	807b      	strh	r3, [r7, #2]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    79e0:	4b19      	ldr	r3, [pc, #100]	; (7a48 <sd_mmc_spi_start_read_blocks+0x74>)
    79e2:	2200      	movs	r2, #0
    79e4:	701a      	strb	r2, [r3, #0]
	pos = 0;
    79e6:	2300      	movs	r3, #0
    79e8:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    79ea:	e022      	b.n	7a32 <sd_mmc_spi_start_read_blocks+0x5e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    79ec:	4b17      	ldr	r3, [pc, #92]	; (7a4c <sd_mmc_spi_start_read_blocks+0x78>)
    79ee:	4798      	blx	r3
    79f0:	4603      	mov	r3, r0
    79f2:	f083 0301 	eor.w	r3, r3, #1
    79f6:	b2db      	uxtb	r3, r3
    79f8:	2b00      	cmp	r3, #0
    79fa:	d001      	beq.n	7a00 <sd_mmc_spi_start_read_blocks+0x2c>
			return false;
    79fc:	2300      	movs	r3, #0
    79fe:	e01e      	b.n	7a3e <sd_mmc_spi_start_read_blocks+0x6a>
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
    7a00:	687a      	ldr	r2, [r7, #4]
    7a02:	68fb      	ldr	r3, [r7, #12]
    7a04:	441a      	add	r2, r3
    7a06:	4b12      	ldr	r3, [pc, #72]	; (7a50 <sd_mmc_spi_start_read_blocks+0x7c>)
    7a08:	881b      	ldrh	r3, [r3, #0]
    7a0a:	4812      	ldr	r0, [pc, #72]	; (7a54 <sd_mmc_spi_start_read_blocks+0x80>)
    7a0c:	4611      	mov	r1, r2
    7a0e:	461a      	mov	r2, r3
    7a10:	4b11      	ldr	r3, [pc, #68]	; (7a58 <sd_mmc_spi_start_read_blocks+0x84>)
    7a12:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
    7a14:	4b0e      	ldr	r3, [pc, #56]	; (7a50 <sd_mmc_spi_start_read_blocks+0x7c>)
    7a16:	881b      	ldrh	r3, [r3, #0]
    7a18:	68fa      	ldr	r2, [r7, #12]
    7a1a:	4413      	add	r3, r2
    7a1c:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    7a1e:	4b0c      	ldr	r3, [pc, #48]	; (7a50 <sd_mmc_spi_start_read_blocks+0x7c>)
    7a20:	881b      	ldrh	r3, [r3, #0]
    7a22:	461a      	mov	r2, r3
    7a24:	4b0d      	ldr	r3, [pc, #52]	; (7a5c <sd_mmc_spi_start_read_blocks+0x88>)
    7a26:	681b      	ldr	r3, [r3, #0]
    7a28:	441a      	add	r2, r3
    7a2a:	4b0c      	ldr	r3, [pc, #48]	; (7a5c <sd_mmc_spi_start_read_blocks+0x88>)
    7a2c:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    7a2e:	4b0c      	ldr	r3, [pc, #48]	; (7a60 <sd_mmc_spi_start_read_blocks+0x8c>)
    7a30:	4798      	blx	r3
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
    7a32:	887b      	ldrh	r3, [r7, #2]
    7a34:	1e5a      	subs	r2, r3, #1
    7a36:	807a      	strh	r2, [r7, #2]
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d1d7      	bne.n	79ec <sd_mmc_spi_start_read_blocks+0x18>
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;

		sd_mmc_spi_stop_read_block();
	}
	return true;
    7a3c:	2301      	movs	r3, #1
}
    7a3e:	4618      	mov	r0, r3
    7a40:	3710      	adds	r7, #16
    7a42:	46bd      	mov	sp, r7
    7a44:	bd80      	pop	{r7, pc}
    7a46:	bf00      	nop
    7a48:	20000e06 	.word	0x20000e06
    7a4c:	00007455 	.word	0x00007455
    7a50:	20000e14 	.word	0x20000e14
    7a54:	40008000 	.word	0x40008000
    7a58:	000056d9 	.word	0x000056d9
    7a5c:	20000e10 	.word	0x20000e10
    7a60:	000074c9 	.word	0x000074c9

00007a64 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    7a64:	b480      	push	{r7}
    7a66:	af00      	add	r7, sp, #0
	return true;
    7a68:	2301      	movs	r3, #1
}
    7a6a:	4618      	mov	r0, r3
    7a6c:	46bd      	mov	sp, r7
    7a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a72:	4770      	bx	lr

00007a74 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b084      	sub	sp, #16
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	460b      	mov	r3, r1
    7a7e:	807b      	strh	r3, [r7, #2]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7a80:	4b21      	ldr	r3, [pc, #132]	; (7b08 <sd_mmc_spi_start_write_blocks+0x94>)
    7a82:	2200      	movs	r2, #0
    7a84:	701a      	strb	r2, [r3, #0]
	pos = 0;
    7a86:	2300      	movs	r3, #0
    7a88:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    7a8a:	e032      	b.n	7af2 <sd_mmc_spi_start_write_blocks+0x7e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    7a8c:	4b1f      	ldr	r3, [pc, #124]	; (7b0c <sd_mmc_spi_start_write_blocks+0x98>)
    7a8e:	4798      	blx	r3

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
    7a90:	687a      	ldr	r2, [r7, #4]
    7a92:	68fb      	ldr	r3, [r7, #12]
    7a94:	441a      	add	r2, r3
    7a96:	4b1e      	ldr	r3, [pc, #120]	; (7b10 <sd_mmc_spi_start_write_blocks+0x9c>)
    7a98:	881b      	ldrh	r3, [r3, #0]
    7a9a:	481e      	ldr	r0, [pc, #120]	; (7b14 <sd_mmc_spi_start_write_blocks+0xa0>)
    7a9c:	4611      	mov	r1, r2
    7a9e:	461a      	mov	r2, r3
    7aa0:	4b1d      	ldr	r3, [pc, #116]	; (7b18 <sd_mmc_spi_start_write_blocks+0xa4>)
    7aa2:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
    7aa4:	4b1a      	ldr	r3, [pc, #104]	; (7b10 <sd_mmc_spi_start_write_blocks+0x9c>)
    7aa6:	881b      	ldrh	r3, [r3, #0]
    7aa8:	68fa      	ldr	r2, [r7, #12]
    7aaa:	4413      	add	r3, r2
    7aac:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    7aae:	4b18      	ldr	r3, [pc, #96]	; (7b10 <sd_mmc_spi_start_write_blocks+0x9c>)
    7ab0:	881b      	ldrh	r3, [r3, #0]
    7ab2:	461a      	mov	r2, r3
    7ab4:	4b19      	ldr	r3, [pc, #100]	; (7b1c <sd_mmc_spi_start_write_blocks+0xa8>)
    7ab6:	681b      	ldr	r3, [r3, #0]
    7ab8:	441a      	add	r2, r3
    7aba:	4b18      	ldr	r3, [pc, #96]	; (7b1c <sd_mmc_spi_start_write_blocks+0xa8>)
    7abc:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    7abe:	4b18      	ldr	r3, [pc, #96]	; (7b20 <sd_mmc_spi_start_write_blocks+0xac>)
    7ac0:	4798      	blx	r3
    7ac2:	4603      	mov	r3, r0
    7ac4:	f083 0301 	eor.w	r3, r3, #1
    7ac8:	b2db      	uxtb	r3, r3
    7aca:	2b00      	cmp	r3, #0
    7acc:	d001      	beq.n	7ad2 <sd_mmc_spi_start_write_blocks+0x5e>
			return false;
    7ace:	2300      	movs	r3, #0
    7ad0:	e015      	b.n	7afe <sd_mmc_spi_start_write_blocks+0x8a>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    7ad2:	887b      	ldrh	r3, [r7, #2]
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d00c      	beq.n	7af2 <sd_mmc_spi_start_write_blocks+0x7e>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    7ad8:	4b12      	ldr	r3, [pc, #72]	; (7b24 <sd_mmc_spi_start_write_blocks+0xb0>)
    7ada:	4798      	blx	r3
    7adc:	4603      	mov	r3, r0
    7ade:	f083 0301 	eor.w	r3, r3, #1
    7ae2:	b2db      	uxtb	r3, r3
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d004      	beq.n	7af2 <sd_mmc_spi_start_write_blocks+0x7e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    7ae8:	4b07      	ldr	r3, [pc, #28]	; (7b08 <sd_mmc_spi_start_write_blocks+0x94>)
    7aea:	2205      	movs	r2, #5
    7aec:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    7aee:	2300      	movs	r3, #0
    7af0:	e005      	b.n	7afe <sd_mmc_spi_start_write_blocks+0x8a>
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	pos = 0;
	while (nb_block--) {
    7af2:	887b      	ldrh	r3, [r7, #2]
    7af4:	1e5a      	subs	r2, r3, #1
    7af6:	807a      	strh	r2, [r7, #2]
    7af8:	2b00      	cmp	r3, #0
    7afa:	d1c7      	bne.n	7a8c <sd_mmc_spi_start_write_blocks+0x18>
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
			}
		}
	}
	return true;
    7afc:	2301      	movs	r3, #1
}
    7afe:	4618      	mov	r0, r3
    7b00:	3710      	adds	r7, #16
    7b02:	46bd      	mov	sp, r7
    7b04:	bd80      	pop	{r7, pc}
    7b06:	bf00      	nop
    7b08:	20000e06 	.word	0x20000e06
    7b0c:	000074e9 	.word	0x000074e9
    7b10:	20000e14 	.word	0x20000e14
    7b14:	40008000 	.word	0x40008000
    7b18:	00005665 	.word	0x00005665
    7b1c:	20000e10 	.word	0x20000e10
    7b20:	00007531 	.word	0x00007531
    7b24:	000073f9 	.word	0x000073f9

00007b28 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    7b2c:	4b08      	ldr	r3, [pc, #32]	; (7b50 <sd_mmc_spi_wait_end_of_write_blocks+0x28>)
    7b2e:	4798      	blx	r3
    7b30:	4603      	mov	r3, r0
    7b32:	f083 0301 	eor.w	r3, r3, #1
    7b36:	b2db      	uxtb	r3, r3
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d004      	beq.n	7b46 <sd_mmc_spi_wait_end_of_write_blocks+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    7b3c:	4b05      	ldr	r3, [pc, #20]	; (7b54 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    7b3e:	2205      	movs	r2, #5
    7b40:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    7b42:	2300      	movs	r3, #0
    7b44:	e002      	b.n	7b4c <sd_mmc_spi_wait_end_of_write_blocks+0x24>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    7b46:	4b04      	ldr	r3, [pc, #16]	; (7b58 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    7b48:	4798      	blx	r3
    7b4a:	4603      	mov	r3, r0
}
    7b4c:	4618      	mov	r0, r3
    7b4e:	bd80      	pop	{r7, pc}
    7b50:	000073f9 	.word	0x000073f9
    7b54:	20000e06 	.word	0x20000e06
    7b58:	000075b1 	.word	0x000075b1

00007b5c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
    7b5c:	b580      	push	{r7, lr}
    7b5e:	b082      	sub	sp, #8
    7b60:	af00      	add	r7, sp, #0
    7b62:	6078      	str	r0, [r7, #4]
	else if (p_spi == SPI1) {
		sysclk_enable_peripheral_clock(ID_SPI1);
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
    7b64:	6878      	ldr	r0, [r7, #4]
    7b66:	4b02      	ldr	r3, [pc, #8]	; (7b70 <spi_enable_clock+0x14>)
    7b68:	4798      	blx	r3
#endif
}
    7b6a:	3708      	adds	r7, #8
    7b6c:	46bd      	mov	sp, r7
    7b6e:	bd80      	pop	{r7, pc}
    7b70:	000098ed 	.word	0x000098ed

00007b74 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
    7b74:	b480      	push	{r7}
    7b76:	b083      	sub	sp, #12
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
    7b7c:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	685b      	ldr	r3, [r3, #4]
    7b82:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
    7b8a:	687b      	ldr	r3, [r7, #4]
    7b8c:	685a      	ldr	r2, [r3, #4]
    7b8e:	683b      	ldr	r3, [r7, #0]
    7b90:	041b      	lsls	r3, r3, #16
    7b92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    7b96:	431a      	orrs	r2, r3
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	605a      	str	r2, [r3, #4]
}
    7b9c:	370c      	adds	r7, #12
    7b9e:	46bd      	mov	sp, r7
    7ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba4:	4770      	bx	lr
    7ba6:	bf00      	nop

00007ba8 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
    7ba8:	b480      	push	{r7}
    7baa:	b083      	sub	sp, #12
    7bac:	af00      	add	r7, sp, #0
    7bae:	6078      	str	r0, [r7, #4]
    7bb0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	685b      	ldr	r3, [r3, #4]
    7bb6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    7bba:	687b      	ldr	r3, [r7, #4]
    7bbc:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	685a      	ldr	r2, [r3, #4]
    7bc2:	683b      	ldr	r3, [r7, #0]
    7bc4:	061b      	lsls	r3, r3, #24
    7bc6:	431a      	orrs	r2, r3
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	605a      	str	r2, [r3, #4]
}
    7bcc:	370c      	adds	r7, #12
    7bce:	46bd      	mov	sp, r7
    7bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bd4:	4770      	bx	lr
    7bd6:	bf00      	nop

00007bd8 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
    7bd8:	b480      	push	{r7}
    7bda:	b085      	sub	sp, #20
    7bdc:	af00      	add	r7, sp, #0
    7bde:	60f8      	str	r0, [r7, #12]
    7be0:	60b9      	str	r1, [r7, #8]
    7be2:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	2b00      	cmp	r3, #0
    7be8:	d00c      	beq.n	7c04 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
    7bea:	68fb      	ldr	r3, [r7, #12]
    7bec:	68ba      	ldr	r2, [r7, #8]
    7bee:	320c      	adds	r2, #12
    7bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bf4:	f043 0101 	orr.w	r1, r3, #1
    7bf8:	68fb      	ldr	r3, [r7, #12]
    7bfa:	68ba      	ldr	r2, [r7, #8]
    7bfc:	320c      	adds	r2, #12
    7bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    7c02:	e00b      	b.n	7c1c <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
    7c04:	68fb      	ldr	r3, [r7, #12]
    7c06:	68ba      	ldr	r2, [r7, #8]
    7c08:	320c      	adds	r2, #12
    7c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c0e:	f023 0101 	bic.w	r1, r3, #1
    7c12:	68fb      	ldr	r3, [r7, #12]
    7c14:	68ba      	ldr	r2, [r7, #8]
    7c16:	320c      	adds	r2, #12
    7c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
    7c1c:	3714      	adds	r7, #20
    7c1e:	46bd      	mov	sp, r7
    7c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c24:	4770      	bx	lr
    7c26:	bf00      	nop

00007c28 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
    7c28:	b480      	push	{r7}
    7c2a:	b085      	sub	sp, #20
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	60f8      	str	r0, [r7, #12]
    7c30:	60b9      	str	r1, [r7, #8]
    7c32:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
    7c34:	687b      	ldr	r3, [r7, #4]
    7c36:	2b00      	cmp	r3, #0
    7c38:	d00c      	beq.n	7c54 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
    7c3a:	68fb      	ldr	r3, [r7, #12]
    7c3c:	68ba      	ldr	r2, [r7, #8]
    7c3e:	320c      	adds	r2, #12
    7c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c44:	f043 0102 	orr.w	r1, r3, #2
    7c48:	68fb      	ldr	r3, [r7, #12]
    7c4a:	68ba      	ldr	r2, [r7, #8]
    7c4c:	320c      	adds	r2, #12
    7c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    7c52:	e00b      	b.n	7c6c <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
    7c54:	68fb      	ldr	r3, [r7, #12]
    7c56:	68ba      	ldr	r2, [r7, #8]
    7c58:	320c      	adds	r2, #12
    7c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c5e:	f023 0102 	bic.w	r1, r3, #2
    7c62:	68fb      	ldr	r3, [r7, #12]
    7c64:	68ba      	ldr	r2, [r7, #8]
    7c66:	320c      	adds	r2, #12
    7c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
    7c6c:	3714      	adds	r7, #20
    7c6e:	46bd      	mov	sp, r7
    7c70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c74:	4770      	bx	lr
    7c76:	bf00      	nop

00007c78 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
    7c78:	b480      	push	{r7}
    7c7a:	b085      	sub	sp, #20
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	60f8      	str	r0, [r7, #12]
    7c80:	60b9      	str	r1, [r7, #8]
    7c82:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
    7c84:	687b      	ldr	r3, [r7, #4]
    7c86:	2b04      	cmp	r3, #4
    7c88:	d118      	bne.n	7cbc <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
    7c8a:	68fb      	ldr	r3, [r7, #12]
    7c8c:	68ba      	ldr	r2, [r7, #8]
    7c8e:	320c      	adds	r2, #12
    7c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c94:	f023 0108 	bic.w	r1, r3, #8
    7c98:	68fb      	ldr	r3, [r7, #12]
    7c9a:	68ba      	ldr	r2, [r7, #8]
    7c9c:	320c      	adds	r2, #12
    7c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
    7ca2:	68fb      	ldr	r3, [r7, #12]
    7ca4:	68ba      	ldr	r2, [r7, #8]
    7ca6:	320c      	adds	r2, #12
    7ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cac:	f043 0104 	orr.w	r1, r3, #4
    7cb0:	68fb      	ldr	r3, [r7, #12]
    7cb2:	68ba      	ldr	r2, [r7, #8]
    7cb4:	320c      	adds	r2, #12
    7cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    7cba:	e02a      	b.n	7d12 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d118      	bne.n	7cf4 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
    7cc2:	68fb      	ldr	r3, [r7, #12]
    7cc4:	68ba      	ldr	r2, [r7, #8]
    7cc6:	320c      	adds	r2, #12
    7cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ccc:	f023 0108 	bic.w	r1, r3, #8
    7cd0:	68fb      	ldr	r3, [r7, #12]
    7cd2:	68ba      	ldr	r2, [r7, #8]
    7cd4:	320c      	adds	r2, #12
    7cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
    7cda:	68fb      	ldr	r3, [r7, #12]
    7cdc:	68ba      	ldr	r2, [r7, #8]
    7cde:	320c      	adds	r2, #12
    7ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ce4:	f023 0104 	bic.w	r1, r3, #4
    7ce8:	68fb      	ldr	r3, [r7, #12]
    7cea:	68ba      	ldr	r2, [r7, #8]
    7cec:	320c      	adds	r2, #12
    7cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    7cf2:	e00e      	b.n	7d12 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	2b08      	cmp	r3, #8
    7cf8:	d10b      	bne.n	7d12 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
    7cfa:	68fb      	ldr	r3, [r7, #12]
    7cfc:	68ba      	ldr	r2, [r7, #8]
    7cfe:	320c      	adds	r2, #12
    7d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d04:	f043 0108 	orr.w	r1, r3, #8
    7d08:	68fb      	ldr	r3, [r7, #12]
    7d0a:	68ba      	ldr	r2, [r7, #8]
    7d0c:	320c      	adds	r2, #12
    7d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
    7d12:	3714      	adds	r7, #20
    7d14:	46bd      	mov	sp, r7
    7d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d1a:	4770      	bx	lr

00007d1c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
    7d1c:	b480      	push	{r7}
    7d1e:	b085      	sub	sp, #20
    7d20:	af00      	add	r7, sp, #0
    7d22:	60f8      	str	r0, [r7, #12]
    7d24:	60b9      	str	r1, [r7, #8]
    7d26:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
    7d28:	68fb      	ldr	r3, [r7, #12]
    7d2a:	68ba      	ldr	r2, [r7, #8]
    7d2c:	320c      	adds	r2, #12
    7d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d32:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
    7d36:	68fb      	ldr	r3, [r7, #12]
    7d38:	68ba      	ldr	r2, [r7, #8]
    7d3a:	320c      	adds	r2, #12
    7d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
    7d40:	68fb      	ldr	r3, [r7, #12]
    7d42:	68ba      	ldr	r2, [r7, #8]
    7d44:	320c      	adds	r2, #12
    7d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	ea42 0103 	orr.w	r1, r2, r3
    7d50:	68fb      	ldr	r3, [r7, #12]
    7d52:	68ba      	ldr	r2, [r7, #8]
    7d54:	320c      	adds	r2, #12
    7d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7d5a:	3714      	adds	r7, #20
    7d5c:	46bd      	mov	sp, r7
    7d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d62:	4770      	bx	lr

00007d64 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
    7d64:	b480      	push	{r7}
    7d66:	b085      	sub	sp, #20
    7d68:	af00      	add	r7, sp, #0
    7d6a:	6078      	str	r0, [r7, #4]
    7d6c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
    7d6e:	683a      	ldr	r2, [r7, #0]
    7d70:	687b      	ldr	r3, [r7, #4]
    7d72:	4413      	add	r3, r2
    7d74:	1e5a      	subs	r2, r3, #1
    7d76:	687b      	ldr	r3, [r7, #4]
    7d78:	fbb2 f3f3 	udiv	r3, r2, r3
    7d7c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
    7d7e:	68fb      	ldr	r3, [r7, #12]
    7d80:	2b00      	cmp	r3, #0
    7d82:	dd02      	ble.n	7d8a <spi_calc_baudrate_div+0x26>
    7d84:	68fb      	ldr	r3, [r7, #12]
    7d86:	2bff      	cmp	r3, #255	; 0xff
    7d88:	dd02      	ble.n	7d90 <spi_calc_baudrate_div+0x2c>
		return -1;
    7d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7d8e:	e001      	b.n	7d94 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
    7d90:	68fb      	ldr	r3, [r7, #12]
    7d92:	b29b      	uxth	r3, r3
    7d94:	b21b      	sxth	r3, r3
}
    7d96:	4618      	mov	r0, r3
    7d98:	3714      	adds	r7, #20
    7d9a:	46bd      	mov	sp, r7
    7d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7da0:	4770      	bx	lr
    7da2:	bf00      	nop

00007da4 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    7da4:	b480      	push	{r7}
    7da6:	b085      	sub	sp, #20
    7da8:	af00      	add	r7, sp, #0
    7daa:	60f8      	str	r0, [r7, #12]
    7dac:	60b9      	str	r1, [r7, #8]
    7dae:	4613      	mov	r3, r2
    7db0:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
    7db2:	68fb      	ldr	r3, [r7, #12]
    7db4:	68ba      	ldr	r2, [r7, #8]
    7db6:	320c      	adds	r2, #12
    7db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dbc:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
    7dc0:	68fb      	ldr	r3, [r7, #12]
    7dc2:	68ba      	ldr	r2, [r7, #8]
    7dc4:	320c      	adds	r2, #12
    7dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    7dca:	68fb      	ldr	r3, [r7, #12]
    7dcc:	68ba      	ldr	r2, [r7, #8]
    7dce:	320c      	adds	r2, #12
    7dd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7dd4:	79fb      	ldrb	r3, [r7, #7]
    7dd6:	021b      	lsls	r3, r3, #8
    7dd8:	b29b      	uxth	r3, r3
    7dda:	ea42 0103 	orr.w	r1, r2, r3
    7dde:	68fb      	ldr	r3, [r7, #12]
    7de0:	68ba      	ldr	r2, [r7, #8]
    7de2:	320c      	adds	r2, #12
    7de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7de8:	3714      	adds	r7, #20
    7dea:	46bd      	mov	sp, r7
    7dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7df0:	4770      	bx	lr
    7df2:	bf00      	nop

00007df4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
    7df4:	b480      	push	{r7}
    7df6:	b085      	sub	sp, #20
    7df8:	af00      	add	r7, sp, #0
    7dfa:	60f8      	str	r0, [r7, #12]
    7dfc:	60b9      	str	r1, [r7, #8]
    7dfe:	71fa      	strb	r2, [r7, #7]
    7e00:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
    7e02:	68fb      	ldr	r3, [r7, #12]
    7e04:	68ba      	ldr	r2, [r7, #8]
    7e06:	320c      	adds	r2, #12
    7e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e0c:	b299      	uxth	r1, r3
    7e0e:	68fb      	ldr	r3, [r7, #12]
    7e10:	68ba      	ldr	r2, [r7, #8]
    7e12:	320c      	adds	r2, #12
    7e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
    7e18:	68fb      	ldr	r3, [r7, #12]
    7e1a:	68ba      	ldr	r2, [r7, #8]
    7e1c:	320c      	adds	r2, #12
    7e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    7e22:	79fb      	ldrb	r3, [r7, #7]
    7e24:	041b      	lsls	r3, r3, #16
    7e26:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
    7e2a:	79bb      	ldrb	r3, [r7, #6]
    7e2c:	061b      	lsls	r3, r3, #24
    7e2e:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
    7e30:	ea42 0103 	orr.w	r1, r2, r3
    7e34:	68fb      	ldr	r3, [r7, #12]
    7e36:	68ba      	ldr	r2, [r7, #8]
    7e38:	320c      	adds	r2, #12
    7e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
    7e3e:	3714      	adds	r7, #20
    7e40:	46bd      	mov	sp, r7
    7e42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e46:	4770      	bx	lr

00007e48 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    7e48:	b480      	push	{r7}
    7e4a:	b089      	sub	sp, #36	; 0x24
    7e4c:	af00      	add	r7, sp, #0
    7e4e:	60f8      	str	r0, [r7, #12]
    7e50:	60b9      	str	r1, [r7, #8]
    7e52:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    7e54:	68bb      	ldr	r3, [r7, #8]
    7e56:	011a      	lsls	r2, r3, #4
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	429a      	cmp	r2, r3
    7e5c:	d802      	bhi.n	7e64 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
    7e5e:	2310      	movs	r3, #16
    7e60:	61fb      	str	r3, [r7, #28]
    7e62:	e001      	b.n	7e68 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
    7e64:	2308      	movs	r3, #8
    7e66:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	00da      	lsls	r2, r3, #3
    7e6c:	69fb      	ldr	r3, [r7, #28]
    7e6e:	68b9      	ldr	r1, [r7, #8]
    7e70:	fb01 f303 	mul.w	r3, r1, r3
    7e74:	085b      	lsrs	r3, r3, #1
    7e76:	441a      	add	r2, r3
    7e78:	69fb      	ldr	r3, [r7, #28]
    7e7a:	68b9      	ldr	r1, [r7, #8]
    7e7c:	fb01 f303 	mul.w	r3, r1, r3
    7e80:	fbb2 f3f3 	udiv	r3, r2, r3
    7e84:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
    7e86:	69bb      	ldr	r3, [r7, #24]
    7e88:	08db      	lsrs	r3, r3, #3
    7e8a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
    7e8c:	69bb      	ldr	r3, [r7, #24]
    7e8e:	f003 0307 	and.w	r3, r3, #7
    7e92:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    7e94:	697b      	ldr	r3, [r7, #20]
    7e96:	2b00      	cmp	r3, #0
    7e98:	d003      	beq.n	7ea2 <usart_set_async_baudrate+0x5a>
    7e9a:	697b      	ldr	r3, [r7, #20]
    7e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7ea0:	d301      	bcc.n	7ea6 <usart_set_async_baudrate+0x5e>
		return 1;
    7ea2:	2301      	movs	r3, #1
    7ea4:	e00f      	b.n	7ec6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
    7ea6:	69fb      	ldr	r3, [r7, #28]
    7ea8:	2b08      	cmp	r3, #8
    7eaa:	d105      	bne.n	7eb8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
    7eac:	68fb      	ldr	r3, [r7, #12]
    7eae:	685b      	ldr	r3, [r3, #4]
    7eb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    7eb4:	68fb      	ldr	r3, [r7, #12]
    7eb6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    7eb8:	693b      	ldr	r3, [r7, #16]
    7eba:	041a      	lsls	r2, r3, #16
    7ebc:	697b      	ldr	r3, [r7, #20]
    7ebe:	431a      	orrs	r2, r3
    7ec0:	68fb      	ldr	r3, [r7, #12]
    7ec2:	621a      	str	r2, [r3, #32]

	return 0;
    7ec4:	2300      	movs	r3, #0
}
    7ec6:	4618      	mov	r0, r3
    7ec8:	3724      	adds	r7, #36	; 0x24
    7eca:	46bd      	mov	sp, r7
    7ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed0:	4770      	bx	lr
    7ed2:	bf00      	nop

00007ed4 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    7ed4:	b480      	push	{r7}
    7ed6:	b087      	sub	sp, #28
    7ed8:	af00      	add	r7, sp, #0
    7eda:	60f8      	str	r0, [r7, #12]
    7edc:	60b9      	str	r1, [r7, #8]
    7ede:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
    7ee0:	68bb      	ldr	r3, [r7, #8]
    7ee2:	085a      	lsrs	r2, r3, #1
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	441a      	add	r2, r3
    7ee8:	68bb      	ldr	r3, [r7, #8]
    7eea:	fbb2 f3f3 	udiv	r3, r2, r3
    7eee:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
    7ef0:	697b      	ldr	r3, [r7, #20]
    7ef2:	2b03      	cmp	r3, #3
    7ef4:	d903      	bls.n	7efe <usart_set_spi_master_baudrate+0x2a>
    7ef6:	697b      	ldr	r3, [r7, #20]
    7ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7efc:	d301      	bcc.n	7f02 <usart_set_spi_master_baudrate+0x2e>
		return 1;
    7efe:	2301      	movs	r3, #1
    7f00:	e003      	b.n	7f0a <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
    7f02:	68fb      	ldr	r3, [r7, #12]
    7f04:	697a      	ldr	r2, [r7, #20]
    7f06:	621a      	str	r2, [r3, #32]

	return 0;
    7f08:	2300      	movs	r3, #0
}
    7f0a:	4618      	mov	r0, r3
    7f0c:	371c      	adds	r7, #28
    7f0e:	46bd      	mov	sp, r7
    7f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f14:	4770      	bx	lr
    7f16:	bf00      	nop

00007f18 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    7f18:	b580      	push	{r7, lr}
    7f1a:	b082      	sub	sp, #8
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    7f20:	6878      	ldr	r0, [r7, #4]
    7f22:	4b0e      	ldr	r3, [pc, #56]	; (7f5c <usart_reset+0x44>)
    7f24:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    7f26:	687b      	ldr	r3, [r7, #4]
    7f28:	2200      	movs	r2, #0
    7f2a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
    7f2c:	687b      	ldr	r3, [r7, #4]
    7f2e:	2200      	movs	r2, #0
    7f30:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
    7f32:	687b      	ldr	r3, [r7, #4]
    7f34:	2200      	movs	r2, #0
    7f36:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    7f38:	6878      	ldr	r0, [r7, #4]
    7f3a:	4b09      	ldr	r3, [pc, #36]	; (7f60 <usart_reset+0x48>)
    7f3c:	4798      	blx	r3
	usart_reset_rx(p_usart);
    7f3e:	6878      	ldr	r0, [r7, #4]
    7f40:	4b08      	ldr	r3, [pc, #32]	; (7f64 <usart_reset+0x4c>)
    7f42:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
    7f44:	6878      	ldr	r0, [r7, #4]
    7f46:	4b08      	ldr	r3, [pc, #32]	; (7f68 <usart_reset+0x50>)
    7f48:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    7f4a:	6878      	ldr	r0, [r7, #4]
    7f4c:	4b07      	ldr	r3, [pc, #28]	; (7f6c <usart_reset+0x54>)
    7f4e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    7f50:	6878      	ldr	r0, [r7, #4]
    7f52:	4b07      	ldr	r3, [pc, #28]	; (7f70 <usart_reset+0x58>)
    7f54:	4798      	blx	r3
#endif
}
    7f56:	3708      	adds	r7, #8
    7f58:	46bd      	mov	sp, r7
    7f5a:	bd80      	pop	{r7, pc}
    7f5c:	0000828d 	.word	0x0000828d
    7f60:	00008121 	.word	0x00008121
    7f64:	00008151 	.word	0x00008151
    7f68:	00008169 	.word	0x00008169
    7f6c:	000081a1 	.word	0x000081a1
    7f70:	00008185 	.word	0x00008185

00007f74 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    7f74:	b580      	push	{r7, lr}
    7f76:	b084      	sub	sp, #16
    7f78:	af00      	add	r7, sp, #0
    7f7a:	60f8      	str	r0, [r7, #12]
    7f7c:	60b9      	str	r1, [r7, #8]
    7f7e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    7f80:	68f8      	ldr	r0, [r7, #12]
    7f82:	4b1a      	ldr	r3, [pc, #104]	; (7fec <usart_init_rs232+0x78>)
    7f84:	4798      	blx	r3

	ul_reg_val = 0;
    7f86:	4b1a      	ldr	r3, [pc, #104]	; (7ff0 <usart_init_rs232+0x7c>)
    7f88:	2200      	movs	r2, #0
    7f8a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    7f8c:	68bb      	ldr	r3, [r7, #8]
    7f8e:	2b00      	cmp	r3, #0
    7f90:	d009      	beq.n	7fa6 <usart_init_rs232+0x32>
    7f92:	68bb      	ldr	r3, [r7, #8]
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	68f8      	ldr	r0, [r7, #12]
    7f98:	4619      	mov	r1, r3
    7f9a:	687a      	ldr	r2, [r7, #4]
    7f9c:	4b15      	ldr	r3, [pc, #84]	; (7ff4 <usart_init_rs232+0x80>)
    7f9e:	4798      	blx	r3
    7fa0:	4603      	mov	r3, r0
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	d001      	beq.n	7faa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    7fa6:	2301      	movs	r3, #1
    7fa8:	e01b      	b.n	7fe2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    7faa:	68bb      	ldr	r3, [r7, #8]
    7fac:	685a      	ldr	r2, [r3, #4]
    7fae:	68bb      	ldr	r3, [r7, #8]
    7fb0:	689b      	ldr	r3, [r3, #8]
    7fb2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    7fb4:	68bb      	ldr	r3, [r7, #8]
    7fb6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    7fb8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    7fba:	68bb      	ldr	r3, [r7, #8]
    7fbc:	68db      	ldr	r3, [r3, #12]
    7fbe:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    7fc0:	4b0b      	ldr	r3, [pc, #44]	; (7ff0 <usart_init_rs232+0x7c>)
    7fc2:	681b      	ldr	r3, [r3, #0]
    7fc4:	431a      	orrs	r2, r3
    7fc6:	4b0a      	ldr	r3, [pc, #40]	; (7ff0 <usart_init_rs232+0x7c>)
    7fc8:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
    7fca:	4b09      	ldr	r3, [pc, #36]	; (7ff0 <usart_init_rs232+0x7c>)
    7fcc:	681a      	ldr	r2, [r3, #0]
    7fce:	4b08      	ldr	r3, [pc, #32]	; (7ff0 <usart_init_rs232+0x7c>)
    7fd0:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
    7fd2:	68fb      	ldr	r3, [r7, #12]
    7fd4:	685a      	ldr	r2, [r3, #4]
    7fd6:	4b06      	ldr	r3, [pc, #24]	; (7ff0 <usart_init_rs232+0x7c>)
    7fd8:	681b      	ldr	r3, [r3, #0]
    7fda:	431a      	orrs	r2, r3
    7fdc:	68fb      	ldr	r3, [r7, #12]
    7fde:	605a      	str	r2, [r3, #4]

	return 0;
    7fe0:	2300      	movs	r3, #0
}
    7fe2:	4618      	mov	r0, r3
    7fe4:	3710      	adds	r7, #16
    7fe6:	46bd      	mov	sp, r7
    7fe8:	bd80      	pop	{r7, pc}
    7fea:	bf00      	nop
    7fec:	00007f19 	.word	0x00007f19
    7ff0:	20000e18 	.word	0x20000e18
    7ff4:	00007e49 	.word	0x00007e49

00007ff8 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b084      	sub	sp, #16
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	60f8      	str	r0, [r7, #12]
    8000:	60b9      	str	r1, [r7, #8]
    8002:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    8004:	68f8      	ldr	r0, [r7, #12]
    8006:	4b3d      	ldr	r3, [pc, #244]	; (80fc <usart_init_spi_master+0x104>)
    8008:	4798      	blx	r3

	ul_reg_val = 0;
    800a:	4b3d      	ldr	r3, [pc, #244]	; (8100 <usart_init_spi_master+0x108>)
    800c:	2200      	movs	r2, #0
    800e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
    8010:	68bb      	ldr	r3, [r7, #8]
    8012:	2b00      	cmp	r3, #0
    8014:	d00d      	beq.n	8032 <usart_init_spi_master+0x3a>
    8016:	68bb      	ldr	r3, [r7, #8]
    8018:	689b      	ldr	r3, [r3, #8]
    801a:	2b03      	cmp	r3, #3
    801c:	d809      	bhi.n	8032 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
    801e:	68bb      	ldr	r3, [r7, #8]
    8020:	681b      	ldr	r3, [r3, #0]
    8022:	68f8      	ldr	r0, [r7, #12]
    8024:	4619      	mov	r1, r3
    8026:	687a      	ldr	r2, [r7, #4]
    8028:	4b36      	ldr	r3, [pc, #216]	; (8104 <usart_init_spi_master+0x10c>)
    802a:	4798      	blx	r3
    802c:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
    802e:	2b00      	cmp	r3, #0
    8030:	d001      	beq.n	8036 <usart_init_spi_master+0x3e>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
			ul_mck)) {
		return 1;
    8032:	2301      	movs	r3, #1
    8034:	e05d      	b.n	80f2 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
    8036:	68bb      	ldr	r3, [r7, #8]
    8038:	685a      	ldr	r2, [r3, #4]
    803a:	4b31      	ldr	r3, [pc, #196]	; (8100 <usart_init_spi_master+0x108>)
    803c:	681b      	ldr	r3, [r3, #0]
    803e:	431a      	orrs	r2, r3
    8040:	4b2f      	ldr	r3, [pc, #188]	; (8100 <usart_init_spi_master+0x108>)
    8042:	601a      	str	r2, [r3, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
    8044:	68bb      	ldr	r3, [r7, #8]
    8046:	68da      	ldr	r2, [r3, #12]

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
    8048:	4b2d      	ldr	r3, [pc, #180]	; (8100 <usart_init_spi_master+0x108>)
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	4313      	orrs	r3, r2
    804e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8052:	f043 030e 	orr.w	r3, r3, #14
    8056:	4a2a      	ldr	r2, [pc, #168]	; (8100 <usart_init_spi_master+0x108>)
    8058:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode;

	switch (p_usart_opt->spi_mode) {
    805a:	68bb      	ldr	r3, [r7, #8]
    805c:	689b      	ldr	r3, [r3, #8]
    805e:	2b03      	cmp	r3, #3
    8060:	d83e      	bhi.n	80e0 <usart_init_spi_master+0xe8>
    8062:	a201      	add	r2, pc, #4	; (adr r2, 8068 <usart_init_spi_master+0x70>)
    8064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8068:	00008079 	.word	0x00008079
    806c:	00008093 	.word	0x00008093
    8070:	000080ad 	.word	0x000080ad
    8074:	000080c7 	.word	0x000080c7
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
    8078:	4b21      	ldr	r3, [pc, #132]	; (8100 <usart_init_spi_master+0x108>)
    807a:	681b      	ldr	r3, [r3, #0]
    807c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8080:	4b1f      	ldr	r3, [pc, #124]	; (8100 <usart_init_spi_master+0x108>)
    8082:	601a      	str	r2, [r3, #0]
		ul_reg_val &= ~US_MR_CPOL;
    8084:	4b1e      	ldr	r3, [pc, #120]	; (8100 <usart_init_spi_master+0x108>)
    8086:	681b      	ldr	r3, [r3, #0]
    8088:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    808c:	4b1c      	ldr	r3, [pc, #112]	; (8100 <usart_init_spi_master+0x108>)
    808e:	601a      	str	r2, [r3, #0]
		break;
    8090:	e027      	b.n	80e2 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
    8092:	4b1b      	ldr	r3, [pc, #108]	; (8100 <usart_init_spi_master+0x108>)
    8094:	681b      	ldr	r3, [r3, #0]
    8096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    809a:	4b19      	ldr	r3, [pc, #100]	; (8100 <usart_init_spi_master+0x108>)
    809c:	601a      	str	r2, [r3, #0]
		ul_reg_val &= ~US_MR_CPOL;
    809e:	4b18      	ldr	r3, [pc, #96]	; (8100 <usart_init_spi_master+0x108>)
    80a0:	681b      	ldr	r3, [r3, #0]
    80a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    80a6:	4b16      	ldr	r3, [pc, #88]	; (8100 <usart_init_spi_master+0x108>)
    80a8:	601a      	str	r2, [r3, #0]
		break;
    80aa:	e01a      	b.n	80e2 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
    80ac:	4b14      	ldr	r3, [pc, #80]	; (8100 <usart_init_spi_master+0x108>)
    80ae:	681b      	ldr	r3, [r3, #0]
    80b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    80b4:	4b12      	ldr	r3, [pc, #72]	; (8100 <usart_init_spi_master+0x108>)
    80b6:	601a      	str	r2, [r3, #0]
		ul_reg_val |= US_MR_CPOL;
    80b8:	4b11      	ldr	r3, [pc, #68]	; (8100 <usart_init_spi_master+0x108>)
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    80c0:	4b0f      	ldr	r3, [pc, #60]	; (8100 <usart_init_spi_master+0x108>)
    80c2:	601a      	str	r2, [r3, #0]
		break;
    80c4:	e00d      	b.n	80e2 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
    80c6:	4b0e      	ldr	r3, [pc, #56]	; (8100 <usart_init_spi_master+0x108>)
    80c8:	681b      	ldr	r3, [r3, #0]
    80ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    80ce:	4b0c      	ldr	r3, [pc, #48]	; (8100 <usart_init_spi_master+0x108>)
    80d0:	601a      	str	r2, [r3, #0]
		ul_reg_val |= US_MR_CPOL;
    80d2:	4b0b      	ldr	r3, [pc, #44]	; (8100 <usart_init_spi_master+0x108>)
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    80da:	4b09      	ldr	r3, [pc, #36]	; (8100 <usart_init_spi_master+0x108>)
    80dc:	601a      	str	r2, [r3, #0]
		break;
    80de:	e000      	b.n	80e2 <usart_init_spi_master+0xea>

	default:
		break;
    80e0:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
    80e2:	68fb      	ldr	r3, [r7, #12]
    80e4:	685a      	ldr	r2, [r3, #4]
    80e6:	4b06      	ldr	r3, [pc, #24]	; (8100 <usart_init_spi_master+0x108>)
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	431a      	orrs	r2, r3
    80ec:	68fb      	ldr	r3, [r7, #12]
    80ee:	605a      	str	r2, [r3, #4]

	return 0;
    80f0:	2300      	movs	r3, #0
}
    80f2:	4618      	mov	r0, r3
    80f4:	3710      	adds	r7, #16
    80f6:	46bd      	mov	sp, r7
    80f8:	bd80      	pop	{r7, pc}
    80fa:	bf00      	nop
    80fc:	00007f19 	.word	0x00007f19
    8100:	20000e1c 	.word	0x20000e1c
    8104:	00007ed5 	.word	0x00007ed5

00008108 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
    8108:	b480      	push	{r7}
    810a:	b083      	sub	sp, #12
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	2240      	movs	r2, #64	; 0x40
    8114:	601a      	str	r2, [r3, #0]
}
    8116:	370c      	adds	r7, #12
    8118:	46bd      	mov	sp, r7
    811a:	f85d 7b04 	ldr.w	r7, [sp], #4
    811e:	4770      	bx	lr

00008120 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
    8120:	b480      	push	{r7}
    8122:	b083      	sub	sp, #12
    8124:	af00      	add	r7, sp, #0
    8126:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	2288      	movs	r2, #136	; 0x88
    812c:	601a      	str	r2, [r3, #0]
}
    812e:	370c      	adds	r7, #12
    8130:	46bd      	mov	sp, r7
    8132:	f85d 7b04 	ldr.w	r7, [sp], #4
    8136:	4770      	bx	lr

00008138 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
    8138:	b480      	push	{r7}
    813a:	b083      	sub	sp, #12
    813c:	af00      	add	r7, sp, #0
    813e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	2210      	movs	r2, #16
    8144:	601a      	str	r2, [r3, #0]
}
    8146:	370c      	adds	r7, #12
    8148:	46bd      	mov	sp, r7
    814a:	f85d 7b04 	ldr.w	r7, [sp], #4
    814e:	4770      	bx	lr

00008150 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
    8150:	b480      	push	{r7}
    8152:	b083      	sub	sp, #12
    8154:	af00      	add	r7, sp, #0
    8156:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	2224      	movs	r2, #36	; 0x24
    815c:	601a      	str	r2, [r3, #0]
}
    815e:	370c      	adds	r7, #12
    8160:	46bd      	mov	sp, r7
    8162:	f85d 7b04 	ldr.w	r7, [sp], #4
    8166:	4770      	bx	lr

00008168 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
    8168:	b480      	push	{r7}
    816a:	b083      	sub	sp, #12
    816c:	af00      	add	r7, sp, #0
    816e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
    8170:	687b      	ldr	r3, [r7, #4]
    8172:	f44f 7280 	mov.w	r2, #256	; 0x100
    8176:	601a      	str	r2, [r3, #0]
}
    8178:	370c      	adds	r7, #12
    817a:	46bd      	mov	sp, r7
    817c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8180:	4770      	bx	lr
    8182:	bf00      	nop

00008184 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
    8184:	b480      	push	{r7}
    8186:	b083      	sub	sp, #12
    8188:	af00      	add	r7, sp, #0
    818a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
    818c:	687b      	ldr	r3, [r7, #4]
    818e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8192:	601a      	str	r2, [r3, #0]
}
    8194:	370c      	adds	r7, #12
    8196:	46bd      	mov	sp, r7
    8198:	f85d 7b04 	ldr.w	r7, [sp], #4
    819c:	4770      	bx	lr
    819e:	bf00      	nop

000081a0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
    81a0:	b480      	push	{r7}
    81a2:	b083      	sub	sp, #12
    81a4:	af00      	add	r7, sp, #0
    81a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
    81a8:	687b      	ldr	r3, [r7, #4]
    81aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    81ae:	601a      	str	r2, [r3, #0]
}
    81b0:	370c      	adds	r7, #12
    81b2:	46bd      	mov	sp, r7
    81b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81b8:	4770      	bx	lr
    81ba:	bf00      	nop

000081bc <usart_spi_force_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_force_chip_select(Usart *p_usart)
{
    81bc:	b480      	push	{r7}
    81be:	b083      	sub	sp, #12
    81c0:	af00      	add	r7, sp, #0
    81c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_FCS;
    81c4:	687b      	ldr	r3, [r7, #4]
    81c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    81ca:	601a      	str	r2, [r3, #0]
}
    81cc:	370c      	adds	r7, #12
    81ce:	46bd      	mov	sp, r7
    81d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    81d4:	4770      	bx	lr
    81d6:	bf00      	nop

000081d8 <usart_spi_release_chip_select>:
 * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_spi_release_chip_select(Usart *p_usart)
{
    81d8:	b480      	push	{r7}
    81da:	b083      	sub	sp, #12
    81dc:	af00      	add	r7, sp, #0
    81de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RCS;
    81e0:	687b      	ldr	r3, [r7, #4]
    81e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    81e6:	601a      	str	r2, [r3, #0]
}
    81e8:	370c      	adds	r7, #12
    81ea:	46bd      	mov	sp, r7
    81ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f0:	4770      	bx	lr
    81f2:	bf00      	nop

000081f4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
    81f4:	b480      	push	{r7}
    81f6:	b083      	sub	sp, #12
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
    81fc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    81fe:	687b      	ldr	r3, [r7, #4]
    8200:	695b      	ldr	r3, [r3, #20]
    8202:	f003 0302 	and.w	r3, r3, #2
    8206:	2b00      	cmp	r3, #0
    8208:	d101      	bne.n	820e <usart_write+0x1a>
		return 1;
    820a:	2301      	movs	r3, #1
    820c:	e005      	b.n	821a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    820e:	683b      	ldr	r3, [r7, #0]
    8210:	f3c3 0208 	ubfx	r2, r3, #0, #9
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	61da      	str	r2, [r3, #28]
	return 0;
    8218:	2300      	movs	r3, #0
}
    821a:	4618      	mov	r0, r3
    821c:	370c      	adds	r7, #12
    821e:	46bd      	mov	sp, r7
    8220:	f85d 7b04 	ldr.w	r7, [sp], #4
    8224:	4770      	bx	lr
    8226:	bf00      	nop

00008228 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
    8228:	b480      	push	{r7}
    822a:	b083      	sub	sp, #12
    822c:	af00      	add	r7, sp, #0
    822e:	6078      	str	r0, [r7, #4]
    8230:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    8232:	bf00      	nop
    8234:	687b      	ldr	r3, [r7, #4]
    8236:	695b      	ldr	r3, [r3, #20]
    8238:	f003 0302 	and.w	r3, r3, #2
    823c:	2b00      	cmp	r3, #0
    823e:	d0f9      	beq.n	8234 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    8240:	683b      	ldr	r3, [r7, #0]
    8242:	f3c3 0208 	ubfx	r2, r3, #0, #9
    8246:	687b      	ldr	r3, [r7, #4]
    8248:	61da      	str	r2, [r3, #28]

	return 0;
    824a:	2300      	movs	r3, #0
}
    824c:	4618      	mov	r0, r3
    824e:	370c      	adds	r7, #12
    8250:	46bd      	mov	sp, r7
    8252:	f85d 7b04 	ldr.w	r7, [sp], #4
    8256:	4770      	bx	lr

00008258 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
    8258:	b480      	push	{r7}
    825a:	b083      	sub	sp, #12
    825c:	af00      	add	r7, sp, #0
    825e:	6078      	str	r0, [r7, #4]
    8260:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	695b      	ldr	r3, [r3, #20]
    8266:	f003 0301 	and.w	r3, r3, #1
    826a:	2b00      	cmp	r3, #0
    826c:	d101      	bne.n	8272 <usart_read+0x1a>
		return 1;
    826e:	2301      	movs	r3, #1
    8270:	e006      	b.n	8280 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    8272:	687b      	ldr	r3, [r7, #4]
    8274:	699b      	ldr	r3, [r3, #24]
    8276:	f3c3 0208 	ubfx	r2, r3, #0, #9
    827a:	683b      	ldr	r3, [r7, #0]
    827c:	601a      	str	r2, [r3, #0]

	return 0;
    827e:	2300      	movs	r3, #0
}
    8280:	4618      	mov	r0, r3
    8282:	370c      	adds	r7, #12
    8284:	46bd      	mov	sp, r7
    8286:	f85d 7b04 	ldr.w	r7, [sp], #4
    828a:	4770      	bx	lr

0000828c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
    828c:	b480      	push	{r7}
    828e:	b083      	sub	sp, #12
    8290:	af00      	add	r7, sp, #0
    8292:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
    8294:	687b      	ldr	r3, [r7, #4]
    8296:	4a04      	ldr	r2, [pc, #16]	; (82a8 <usart_disable_writeprotect+0x1c>)
    8298:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
    829c:	370c      	adds	r7, #12
    829e:	46bd      	mov	sp, r7
    82a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    82a4:	4770      	bx	lr
    82a6:	bf00      	nop
    82a8:	55534100 	.word	0x55534100

000082ac <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    82ac:	b480      	push	{r7}
    82ae:	b083      	sub	sp, #12
    82b0:	af00      	add	r7, sp, #0
    82b2:	4603      	mov	r3, r0
    82b4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    82b6:	79fb      	ldrb	r3, [r7, #7]
    82b8:	2b0d      	cmp	r3, #13
    82ba:	d82b      	bhi.n	8314 <dfll_priv_get_source_hz+0x68>
    82bc:	a201      	add	r2, pc, #4	; (adr r2, 82c4 <dfll_priv_get_source_hz+0x18>)
    82be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    82c2:	bf00      	nop
    82c4:	000082fd 	.word	0x000082fd
    82c8:	00008301 	.word	0x00008301
    82cc:	00008315 	.word	0x00008315
    82d0:	00008307 	.word	0x00008307
    82d4:	0000830b 	.word	0x0000830b
    82d8:	00008315 	.word	0x00008315
    82dc:	00008315 	.word	0x00008315
    82e0:	00008315 	.word	0x00008315
    82e4:	00008315 	.word	0x00008315
    82e8:	00008315 	.word	0x00008315
    82ec:	00008315 	.word	0x00008315
    82f0:	00008315 	.word	0x00008315
    82f4:	00008315 	.word	0x00008315
    82f8:	0000830f 	.word	0x0000830f
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    82fc:	4b09      	ldr	r3, [pc, #36]	; (8324 <dfll_priv_get_source_hz+0x78>)
    82fe:	e00a      	b.n	8316 <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    8300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    8304:	e007      	b.n	8316 <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    8306:	4b08      	ldr	r3, [pc, #32]	; (8328 <dfll_priv_get_source_hz+0x7c>)
    8308:	e005      	b.n	8316 <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    830a:	4b08      	ldr	r3, [pc, #32]	; (832c <dfll_priv_get_source_hz+0x80>)
    830c:	e003      	b.n	8316 <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    830e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    8312:	e000      	b.n	8316 <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    8314:	2300      	movs	r3, #0
	}
}
    8316:	4618      	mov	r0, r3
    8318:	370c      	adds	r7, #12
    831a:	46bd      	mov	sp, r7
    831c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8320:	4770      	bx	lr
    8322:	bf00      	nop
    8324:	0001c138 	.word	0x0001c138
    8328:	00b71b00 	.word	0x00b71b00
    832c:	04c4b400 	.word	0x04c4b400

00008330 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    8330:	b580      	push	{r7, lr}
    8332:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    8334:	2001      	movs	r0, #1
    8336:	4b04      	ldr	r3, [pc, #16]	; (8348 <sysclk_get_main_hz+0x18>)
    8338:	4798      	blx	r3
    833a:	4603      	mov	r3, r0
    833c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    8340:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    8344:	4618      	mov	r0, r3
    8346:	bd80      	pop	{r7, pc}
    8348:	000082ad 	.word	0x000082ad

0000834c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    834c:	b580      	push	{r7, lr}
    834e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    8350:	4b02      	ldr	r3, [pc, #8]	; (835c <sysclk_get_cpu_hz+0x10>)
    8352:	4798      	blx	r3
    8354:	4603      	mov	r3, r0
}
    8356:	4618      	mov	r0, r3
    8358:	bd80      	pop	{r7, pc}
    835a:	bf00      	nop
    835c:	00008331 	.word	0x00008331

00008360 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    8360:	b5b0      	push	{r4, r5, r7, lr}
    8362:	b08e      	sub	sp, #56	; 0x38
    8364:	af00      	add	r7, sp, #0
    8366:	4603      	mov	r3, r0
    8368:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    836a:	2311      	movs	r3, #17
    836c:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    836e:	f107 030c 	add.w	r3, r7, #12
    8372:	4839      	ldr	r0, [pc, #228]	; (8458 <ssd1306_write_command+0xf8>)
    8374:	4619      	mov	r1, r3
    8376:	4b39      	ldr	r3, [pc, #228]	; (845c <ssd1306_write_command+0xfc>)
    8378:	4798      	blx	r3
    837a:	234f      	movs	r3, #79	; 0x4f
    837c:	637b      	str	r3, [r7, #52]	; 0x34
    837e:	2300      	movs	r3, #0
    8380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    8384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    8388:	2b00      	cmp	r3, #0
    838a:	d016      	beq.n	83ba <ssd1306_write_command+0x5a>
    838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    838e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8392:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    8394:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8396:	095b      	lsrs	r3, r3, #5
    8398:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    839c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    83a0:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    83a4:	025b      	lsls	r3, r3, #9
    83a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    83a8:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    83aa:	6a3a      	ldr	r2, [r7, #32]
    83ac:	f002 021f 	and.w	r2, r2, #31
    83b0:	2101      	movs	r1, #1
    83b2:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    83b6:	655a      	str	r2, [r3, #84]	; 0x54
    83b8:	e015      	b.n	83e6 <ssd1306_write_command+0x86>
    83ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    83bc:	61fb      	str	r3, [r7, #28]
    83be:	69fb      	ldr	r3, [r7, #28]
    83c0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    83c2:	69bb      	ldr	r3, [r7, #24]
    83c4:	095b      	lsrs	r3, r3, #5
    83c6:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    83c8:	697b      	ldr	r3, [r7, #20]
    83ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    83ce:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    83d2:	025b      	lsls	r3, r3, #9
    83d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    83d6:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    83d8:	693a      	ldr	r2, [r7, #16]
    83da:	f002 021f 	and.w	r2, r2, #31
    83de:	2101      	movs	r1, #1
    83e0:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    83e4:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
    83e6:	79fb      	ldrb	r3, [r7, #7]
    83e8:	481b      	ldr	r0, [pc, #108]	; (8458 <ssd1306_write_command+0xf8>)
    83ea:	4619      	mov	r1, r3
    83ec:	4b1c      	ldr	r3, [pc, #112]	; (8460 <ssd1306_write_command+0x100>)
    83ee:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
    83f0:	4b1c      	ldr	r3, [pc, #112]	; (8464 <ssd1306_write_command+0x104>)
    83f2:	4798      	blx	r3
    83f4:	4603      	mov	r3, r0
    83f6:	4618      	mov	r0, r3
    83f8:	f04f 0100 	mov.w	r1, #0
    83fc:	4602      	mov	r2, r0
    83fe:	460b      	mov	r3, r1
    8400:	009d      	lsls	r5, r3, #2
    8402:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    8406:	0094      	lsls	r4, r2, #2
    8408:	4622      	mov	r2, r4
    840a:	462b      	mov	r3, r5
    840c:	1880      	adds	r0, r0, r2
    840e:	eb41 0103 	adc.w	r1, r1, r3
    8412:	a30f      	add	r3, pc, #60	; (adr r3, 8450 <ssd1306_write_command+0xf0>)
    8414:	e9d3 2300 	ldrd	r2, r3, [r3]
    8418:	1812      	adds	r2, r2, r0
    841a:	eb43 0301 	adc.w	r3, r3, r1
    841e:	4c12      	ldr	r4, [pc, #72]	; (8468 <ssd1306_write_command+0x108>)
    8420:	4610      	mov	r0, r2
    8422:	4619      	mov	r1, r3
    8424:	4a11      	ldr	r2, [pc, #68]	; (846c <ssd1306_write_command+0x10c>)
    8426:	f04f 0300 	mov.w	r3, #0
    842a:	47a0      	blx	r4
    842c:	4602      	mov	r2, r0
    842e:	460b      	mov	r3, r1
    8430:	4613      	mov	r3, r2
    8432:	4618      	mov	r0, r3
    8434:	4b0e      	ldr	r3, [pc, #56]	; (8470 <ssd1306_write_command+0x110>)
    8436:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    8438:	f107 030c 	add.w	r3, r7, #12
    843c:	4806      	ldr	r0, [pc, #24]	; (8458 <ssd1306_write_command+0xf8>)
    843e:	4619      	mov	r1, r3
    8440:	4b0c      	ldr	r3, [pc, #48]	; (8474 <ssd1306_write_command+0x114>)
    8442:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    8444:	3738      	adds	r7, #56	; 0x38
    8446:	46bd      	mov	sp, r7
    8448:	bdb0      	pop	{r4, r5, r7, pc}
    844a:	bf00      	nop
    844c:	f3af 8000 	nop.w
    8450:	00d59f7f 	.word	0x00d59f7f
    8454:	00000000 	.word	0x00000000
    8458:	4002c000 	.word	0x4002c000
    845c:	0000590d 	.word	0x0000590d
    8460:	000058ed 	.word	0x000058ed
    8464:	0000834d 	.word	0x0000834d
    8468:	0000d0c9 	.word	0x0000d0c9
    846c:	00d59f80 	.word	0x00d59f80
    8470:	20000001 	.word	0x20000001
    8474:	00005929 	.word	0x00005929

00008478 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
    8478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    847c:	b099      	sub	sp, #100	; 0x64
    847e:	af00      	add	r7, sp, #0
    8480:	4603      	mov	r3, r0
    8482:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    8484:	2311      	movs	r3, #17
    8486:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    8488:	f107 030c 	add.w	r3, r7, #12
    848c:	4866      	ldr	r0, [pc, #408]	; (8628 <ssd1306_write_data+0x1b0>)
    848e:	4619      	mov	r1, r3
    8490:	4b66      	ldr	r3, [pc, #408]	; (862c <ssd1306_write_data+0x1b4>)
    8492:	4798      	blx	r3
    8494:	234f      	movs	r3, #79	; 0x4f
    8496:	65fb      	str	r3, [r7, #92]	; 0x5c
    8498:	2301      	movs	r3, #1
    849a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    849e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    84a2:	2b00      	cmp	r3, #0
    84a4:	d016      	beq.n	84d4 <ssd1306_write_data+0x5c>
    84a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    84a8:	657b      	str	r3, [r7, #84]	; 0x54
    84aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    84ac:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    84ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    84b0:	095b      	lsrs	r3, r3, #5
    84b2:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    84b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    84b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    84ba:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    84be:	025b      	lsls	r3, r3, #9
    84c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    84c2:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    84c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    84c6:	f002 021f 	and.w	r2, r2, #31
    84ca:	2101      	movs	r1, #1
    84cc:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    84d0:	655a      	str	r2, [r3, #84]	; 0x54
    84d2:	e015      	b.n	8500 <ssd1306_write_data+0x88>
    84d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    84d6:	647b      	str	r3, [r7, #68]	; 0x44
    84d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84da:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    84dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    84de:	095b      	lsrs	r3, r3, #5
    84e0:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    84e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    84e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    84e8:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    84ec:	025b      	lsls	r3, r3, #9
    84ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    84f0:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    84f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    84f4:	f002 021f 	and.w	r2, r2, #31
    84f8:	2101      	movs	r1, #1
    84fa:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    84fe:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    8500:	4b4b      	ldr	r3, [pc, #300]	; (8630 <ssd1306_write_data+0x1b8>)
    8502:	4798      	blx	r3
    8504:	4603      	mov	r3, r0
    8506:	4618      	mov	r0, r3
    8508:	f04f 0100 	mov.w	r1, #0
    850c:	4602      	mov	r2, r0
    850e:	460b      	mov	r3, r1
    8510:	ea4f 0983 	mov.w	r9, r3, lsl #2
    8514:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    8518:	ea4f 0882 	mov.w	r8, r2, lsl #2
    851c:	4642      	mov	r2, r8
    851e:	464b      	mov	r3, r9
    8520:	1880      	adds	r0, r0, r2
    8522:	eb41 0103 	adc.w	r1, r1, r3
    8526:	a33e      	add	r3, pc, #248	; (adr r3, 8620 <ssd1306_write_data+0x1a8>)
    8528:	e9d3 2300 	ldrd	r2, r3, [r3]
    852c:	1812      	adds	r2, r2, r0
    852e:	eb43 0301 	adc.w	r3, r3, r1
    8532:	4e40      	ldr	r6, [pc, #256]	; (8634 <ssd1306_write_data+0x1bc>)
    8534:	4610      	mov	r0, r2
    8536:	4619      	mov	r1, r3
    8538:	4a3f      	ldr	r2, [pc, #252]	; (8638 <ssd1306_write_data+0x1c0>)
    853a:	f04f 0300 	mov.w	r3, #0
    853e:	47b0      	blx	r6
    8540:	4602      	mov	r2, r0
    8542:	460b      	mov	r3, r1
    8544:	4613      	mov	r3, r2
    8546:	4618      	mov	r0, r3
    8548:	4b3c      	ldr	r3, [pc, #240]	; (863c <ssd1306_write_data+0x1c4>)
    854a:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
    854c:	79fb      	ldrb	r3, [r7, #7]
    854e:	4836      	ldr	r0, [pc, #216]	; (8628 <ssd1306_write_data+0x1b0>)
    8550:	4619      	mov	r1, r3
    8552:	4b3b      	ldr	r3, [pc, #236]	; (8640 <ssd1306_write_data+0x1c8>)
    8554:	4798      	blx	r3
    8556:	234f      	movs	r3, #79	; 0x4f
    8558:	637b      	str	r3, [r7, #52]	; 0x34
    855a:	2301      	movs	r3, #1
    855c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    8560:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    8564:	2b00      	cmp	r3, #0
    8566:	d016      	beq.n	8596 <ssd1306_write_data+0x11e>
    8568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    856a:	62fb      	str	r3, [r7, #44]	; 0x2c
    856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    856e:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    8570:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8572:	095b      	lsrs	r3, r3, #5
    8574:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    8576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8578:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    857c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    8580:	025b      	lsls	r3, r3, #9
    8582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8584:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    8586:	6a3a      	ldr	r2, [r7, #32]
    8588:	f002 021f 	and.w	r2, r2, #31
    858c:	2101      	movs	r1, #1
    858e:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    8592:	655a      	str	r2, [r3, #84]	; 0x54
    8594:	e015      	b.n	85c2 <ssd1306_write_data+0x14a>
    8596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8598:	61fb      	str	r3, [r7, #28]
    859a:	69fb      	ldr	r3, [r7, #28]
    859c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    859e:	69bb      	ldr	r3, [r7, #24]
    85a0:	095b      	lsrs	r3, r3, #5
    85a2:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    85a4:	697b      	ldr	r3, [r7, #20]
    85a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    85aa:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    85ae:	025b      	lsls	r3, r3, #9
    85b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    85b2:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    85b4:	693a      	ldr	r2, [r7, #16]
    85b6:	f002 021f 	and.w	r2, r2, #31
    85ba:	2101      	movs	r1, #1
    85bc:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    85c0:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
    85c2:	4b1b      	ldr	r3, [pc, #108]	; (8630 <ssd1306_write_data+0x1b8>)
    85c4:	4798      	blx	r3
    85c6:	4603      	mov	r3, r0
    85c8:	4618      	mov	r0, r3
    85ca:	f04f 0100 	mov.w	r1, #0
    85ce:	4602      	mov	r2, r0
    85d0:	460b      	mov	r3, r1
    85d2:	009d      	lsls	r5, r3, #2
    85d4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    85d8:	0094      	lsls	r4, r2, #2
    85da:	4622      	mov	r2, r4
    85dc:	462b      	mov	r3, r5
    85de:	1880      	adds	r0, r0, r2
    85e0:	eb41 0103 	adc.w	r1, r1, r3
    85e4:	a30e      	add	r3, pc, #56	; (adr r3, 8620 <ssd1306_write_data+0x1a8>)
    85e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    85ea:	1812      	adds	r2, r2, r0
    85ec:	eb43 0301 	adc.w	r3, r3, r1
    85f0:	4c10      	ldr	r4, [pc, #64]	; (8634 <ssd1306_write_data+0x1bc>)
    85f2:	4610      	mov	r0, r2
    85f4:	4619      	mov	r1, r3
    85f6:	4a10      	ldr	r2, [pc, #64]	; (8638 <ssd1306_write_data+0x1c0>)
    85f8:	f04f 0300 	mov.w	r3, #0
    85fc:	47a0      	blx	r4
    85fe:	4602      	mov	r2, r0
    8600:	460b      	mov	r3, r1
    8602:	4613      	mov	r3, r2
    8604:	4618      	mov	r0, r3
    8606:	4b0d      	ldr	r3, [pc, #52]	; (863c <ssd1306_write_data+0x1c4>)
    8608:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    860a:	f107 030c 	add.w	r3, r7, #12
    860e:	4806      	ldr	r0, [pc, #24]	; (8628 <ssd1306_write_data+0x1b0>)
    8610:	4619      	mov	r1, r3
    8612:	4b0c      	ldr	r3, [pc, #48]	; (8644 <ssd1306_write_data+0x1cc>)
    8614:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    8616:	3764      	adds	r7, #100	; 0x64
    8618:	46bd      	mov	sp, r7
    861a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    861e:	bf00      	nop
    8620:	00d59f7f 	.word	0x00d59f7f
    8624:	00000000 	.word	0x00000000
    8628:	4002c000 	.word	0x4002c000
    862c:	0000590d 	.word	0x0000590d
    8630:	0000834d 	.word	0x0000834d
    8634:	0000d0c9 	.word	0x0000d0c9
    8638:	00d59f80 	.word	0x00d59f80
    863c:	20000001 	.word	0x20000001
    8640:	000058ed 	.word	0x000058ed
    8644:	00005929 	.word	0x00005929

00008648 <ssd1306_hard_reset>:
 * This functions will reset the OLED controller by setting the reset pin low.
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
    8648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    864c:	b095      	sub	sp, #84	; 0x54
    864e:	af00      	add	r7, sp, #0
    8650:	230a      	movs	r3, #10
    8652:	64fb      	str	r3, [r7, #76]	; 0x4c
    8654:	2300      	movs	r3, #0
    8656:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    865a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    865e:	2b00      	cmp	r3, #0
    8660:	d016      	beq.n	8690 <ssd1306_hard_reset+0x48>
    8662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8664:	647b      	str	r3, [r7, #68]	; 0x44
    8666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8668:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    866a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    866c:	095b      	lsrs	r3, r3, #5
    866e:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    8670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8672:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    8676:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    867a:	025b      	lsls	r3, r3, #9
    867c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    867e:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    8680:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8682:	f002 021f 	and.w	r2, r2, #31
    8686:	2101      	movs	r1, #1
    8688:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    868c:	655a      	str	r2, [r3, #84]	; 0x54
    868e:	e015      	b.n	86bc <ssd1306_hard_reset+0x74>
    8690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8692:	637b      	str	r3, [r7, #52]	; 0x34
    8694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8696:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    8698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    869a:	095b      	lsrs	r3, r3, #5
    869c:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    86a4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    86a8:	025b      	lsls	r3, r3, #9
    86aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    86ac:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    86ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    86b0:	f002 021f 	and.w	r2, r2, #31
    86b4:	2101      	movs	r1, #1
    86b6:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    86ba:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
    86bc:	4b44      	ldr	r3, [pc, #272]	; (87d0 <ssd1306_hard_reset+0x188>)
    86be:	4798      	blx	r3
    86c0:	4603      	mov	r3, r0
    86c2:	4618      	mov	r0, r3
    86c4:	f04f 0100 	mov.w	r1, #0
    86c8:	4602      	mov	r2, r0
    86ca:	460b      	mov	r3, r1
    86cc:	ea4f 0983 	mov.w	r9, r3, lsl #2
    86d0:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    86d4:	ea4f 0882 	mov.w	r8, r2, lsl #2
    86d8:	4642      	mov	r2, r8
    86da:	464b      	mov	r3, r9
    86dc:	1880      	adds	r0, r0, r2
    86de:	eb41 0103 	adc.w	r1, r1, r3
    86e2:	a339      	add	r3, pc, #228	; (adr r3, 87c8 <ssd1306_hard_reset+0x180>)
    86e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    86e8:	1812      	adds	r2, r2, r0
    86ea:	eb43 0301 	adc.w	r3, r3, r1
    86ee:	4e39      	ldr	r6, [pc, #228]	; (87d4 <ssd1306_hard_reset+0x18c>)
    86f0:	4610      	mov	r0, r2
    86f2:	4619      	mov	r1, r3
    86f4:	4a38      	ldr	r2, [pc, #224]	; (87d8 <ssd1306_hard_reset+0x190>)
    86f6:	f04f 0300 	mov.w	r3, #0
    86fa:	47b0      	blx	r6
    86fc:	4602      	mov	r2, r0
    86fe:	460b      	mov	r3, r1
    8700:	4613      	mov	r3, r2
    8702:	4618      	mov	r0, r3
    8704:	4b35      	ldr	r3, [pc, #212]	; (87dc <ssd1306_hard_reset+0x194>)
    8706:	4798      	blx	r3
    8708:	230a      	movs	r3, #10
    870a:	627b      	str	r3, [r7, #36]	; 0x24
    870c:	2301      	movs	r3, #1
    870e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    8712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8716:	2b00      	cmp	r3, #0
    8718:	d016      	beq.n	8748 <ssd1306_hard_reset+0x100>
    871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    871c:	61fb      	str	r3, [r7, #28]
    871e:	69fb      	ldr	r3, [r7, #28]
    8720:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    8722:	69bb      	ldr	r3, [r7, #24]
    8724:	095b      	lsrs	r3, r3, #5
    8726:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    8728:	697b      	ldr	r3, [r7, #20]
    872a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    872e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    8732:	025b      	lsls	r3, r3, #9
    8734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8736:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    8738:	693a      	ldr	r2, [r7, #16]
    873a:	f002 021f 	and.w	r2, r2, #31
    873e:	2101      	movs	r1, #1
    8740:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    8744:	655a      	str	r2, [r3, #84]	; 0x54
    8746:	e015      	b.n	8774 <ssd1306_hard_reset+0x12c>
    8748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    874a:	60fb      	str	r3, [r7, #12]
    874c:	68fb      	ldr	r3, [r7, #12]
    874e:	60bb      	str	r3, [r7, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    8750:	68bb      	ldr	r3, [r7, #8]
    8752:	095b      	lsrs	r3, r3, #5
    8754:	607b      	str	r3, [r7, #4]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    8756:	687b      	ldr	r3, [r7, #4]
    8758:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    875c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    8760:	025b      	lsls	r3, r3, #9
    8762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8764:	603a      	str	r2, [r7, #0]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    8766:	683a      	ldr	r2, [r7, #0]
    8768:	f002 021f 	and.w	r2, r2, #31
    876c:	2101      	movs	r1, #1
    876e:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    8772:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    8774:	4b16      	ldr	r3, [pc, #88]	; (87d0 <ssd1306_hard_reset+0x188>)
    8776:	4798      	blx	r3
    8778:	4603      	mov	r3, r0
    877a:	4618      	mov	r0, r3
    877c:	f04f 0100 	mov.w	r1, #0
    8780:	4602      	mov	r2, r0
    8782:	460b      	mov	r3, r1
    8784:	009d      	lsls	r5, r3, #2
    8786:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    878a:	0094      	lsls	r4, r2, #2
    878c:	4622      	mov	r2, r4
    878e:	462b      	mov	r3, r5
    8790:	1880      	adds	r0, r0, r2
    8792:	eb41 0103 	adc.w	r1, r1, r3
    8796:	a30c      	add	r3, pc, #48	; (adr r3, 87c8 <ssd1306_hard_reset+0x180>)
    8798:	e9d3 2300 	ldrd	r2, r3, [r3]
    879c:	1812      	adds	r2, r2, r0
    879e:	eb43 0301 	adc.w	r3, r3, r1
    87a2:	4c0c      	ldr	r4, [pc, #48]	; (87d4 <ssd1306_hard_reset+0x18c>)
    87a4:	4610      	mov	r0, r2
    87a6:	4619      	mov	r1, r3
    87a8:	4a0b      	ldr	r2, [pc, #44]	; (87d8 <ssd1306_hard_reset+0x190>)
    87aa:	f04f 0300 	mov.w	r3, #0
    87ae:	47a0      	blx	r4
    87b0:	4602      	mov	r2, r0
    87b2:	460b      	mov	r3, r1
    87b4:	4613      	mov	r3, r2
    87b6:	4618      	mov	r0, r3
    87b8:	4b08      	ldr	r3, [pc, #32]	; (87dc <ssd1306_hard_reset+0x194>)
    87ba:	4798      	blx	r3
}
    87bc:	3754      	adds	r7, #84	; 0x54
    87be:	46bd      	mov	sp, r7
    87c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    87c4:	f3af 8000 	nop.w
    87c8:	00d59f7f 	.word	0x00d59f7f
    87cc:	00000000 	.word	0x00000000
    87d0:	0000834d 	.word	0x0000834d
    87d4:	0000d0c9 	.word	0x0000d0c9
    87d8:	00d59f80 	.word	0x00d59f80
    87dc:	20000001 	.word	0x20000001

000087e0 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
    87e0:	b580      	push	{r7, lr}
    87e2:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    87e4:	20af      	movs	r0, #175	; 0xaf
    87e6:	4b01      	ldr	r3, [pc, #4]	; (87ec <ssd1306_display_on+0xc>)
    87e8:	4798      	blx	r3
}
    87ea:	bd80      	pop	{r7, pc}
    87ec:	00008361 	.word	0x00008361

000087f0 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
    87f0:	b580      	push	{r7, lr}
    87f2:	b082      	sub	sp, #8
    87f4:	af00      	add	r7, sp, #0
    87f6:	4603      	mov	r3, r0
    87f8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    87fa:	2081      	movs	r0, #129	; 0x81
    87fc:	4b05      	ldr	r3, [pc, #20]	; (8814 <ssd1306_set_contrast+0x24>)
    87fe:	4798      	blx	r3
	ssd1306_write_command(contrast);
    8800:	79fb      	ldrb	r3, [r7, #7]
    8802:	4618      	mov	r0, r3
    8804:	4b03      	ldr	r3, [pc, #12]	; (8814 <ssd1306_set_contrast+0x24>)
    8806:	4798      	blx	r3
	return contrast;
    8808:	79fb      	ldrb	r3, [r7, #7]
}
    880a:	4618      	mov	r0, r3
    880c:	3708      	adds	r7, #8
    880e:	46bd      	mov	sp, r7
    8810:	bd80      	pop	{r7, pc}
    8812:	bf00      	nop
    8814:	00008361 	.word	0x00008361

00008818 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
    8818:	b580      	push	{r7, lr}
    881a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    881c:	20a6      	movs	r0, #166	; 0xa6
    881e:	4b01      	ldr	r3, [pc, #4]	; (8824 <ssd1306_display_invert_disable+0xc>)
    8820:	4798      	blx	r3
}
    8822:	bd80      	pop	{r7, pc}
    8824:	00008361 	.word	0x00008361

00008828 <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
    8828:	b590      	push	{r4, r7, lr}
    882a:	b087      	sub	sp, #28
    882c:	af02      	add	r7, sp, #8
#ifdef SSD1306_SERIAL_INTERFACE
	spi_flags_t spi_flags = SPI_MODE_0;
    882e:	2300      	movs	r3, #0
    8830:	73fb      	strb	r3, [r7, #15]
	board_spi_select_id_t spi_select_id = 0;
    8832:	2300      	movs	r3, #0
    8834:	60bb      	str	r3, [r7, #8]
#endif

#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
    8836:	2311      	movs	r3, #17
    8838:	713b      	strb	r3, [r7, #4]
		.id = SSD1306_CS_PIN,
	};
	usart_spi_init(SSD1306_USART_SPI);
    883a:	4808      	ldr	r0, [pc, #32]	; (885c <ssd1306_interface_init+0x34>)
    883c:	4b08      	ldr	r3, [pc, #32]	; (8860 <ssd1306_interface_init+0x38>)
    883e:	4798      	blx	r3
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
    8840:	1d3a      	adds	r2, r7, #4
    8842:	7bfb      	ldrb	r3, [r7, #15]
    8844:	68b9      	ldr	r1, [r7, #8]
    8846:	9100      	str	r1, [sp, #0]
    8848:	4804      	ldr	r0, [pc, #16]	; (885c <ssd1306_interface_init+0x34>)
    884a:	4611      	mov	r1, r2
    884c:	461a      	mov	r2, r3
    884e:	4b05      	ldr	r3, [pc, #20]	; (8864 <ssd1306_interface_init+0x3c>)
    8850:	4c05      	ldr	r4, [pc, #20]	; (8868 <ssd1306_interface_init+0x40>)
    8852:	47a0      	blx	r4
			SSD1306_CLOCK_SPEED, spi_select_id);
#ifdef SAM
	spi_enable(SSD1306_SPI);
#endif
#endif
}
    8854:	3714      	adds	r7, #20
    8856:	46bd      	mov	sp, r7
    8858:	bd90      	pop	{r4, r7, pc}
    885a:	bf00      	nop
    885c:	4002c000 	.word	0x4002c000
    8860:	00005835 	.word	0x00005835
    8864:	00989680 	.word	0x00989680
    8868:	00005895 	.word	0x00005895

0000886c <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{	
    886c:	b580      	push	{r7, lr}
    886e:	af00      	add	r7, sp, #0
	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
    8870:	4b20      	ldr	r3, [pc, #128]	; (88f4 <ssd1306_init+0x88>)
    8872:	4798      	blx	r3

	// Initialize the interface
	ssd1306_interface_init();
    8874:	4b20      	ldr	r3, [pc, #128]	; (88f8 <ssd1306_init+0x8c>)
    8876:	4798      	blx	r3

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    8878:	20a8      	movs	r0, #168	; 0xa8
    887a:	4b20      	ldr	r3, [pc, #128]	; (88fc <ssd1306_init+0x90>)
    887c:	4798      	blx	r3
	ssd1306_write_command(0x1F);
    887e:	201f      	movs	r0, #31
    8880:	4b1e      	ldr	r3, [pc, #120]	; (88fc <ssd1306_init+0x90>)
    8882:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    8884:	20d3      	movs	r0, #211	; 0xd3
    8886:	4b1d      	ldr	r3, [pc, #116]	; (88fc <ssd1306_init+0x90>)
    8888:	4798      	blx	r3
	ssd1306_write_command(0x00);
    888a:	2000      	movs	r0, #0
    888c:	4b1b      	ldr	r3, [pc, #108]	; (88fc <ssd1306_init+0x90>)
    888e:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
    8890:	2040      	movs	r0, #64	; 0x40
    8892:	4b1a      	ldr	r3, [pc, #104]	; (88fc <ssd1306_init+0x90>)
    8894:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    8896:	20a1      	movs	r0, #161	; 0xa1
    8898:	4b18      	ldr	r3, [pc, #96]	; (88fc <ssd1306_init+0x90>)
    889a:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    889c:	20c8      	movs	r0, #200	; 0xc8
    889e:	4b17      	ldr	r3, [pc, #92]	; (88fc <ssd1306_init+0x90>)
    88a0:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    88a2:	20da      	movs	r0, #218	; 0xda
    88a4:	4b15      	ldr	r3, [pc, #84]	; (88fc <ssd1306_init+0x90>)
    88a6:	4798      	blx	r3
	ssd1306_write_command(0x02);
    88a8:	2002      	movs	r0, #2
    88aa:	4b14      	ldr	r3, [pc, #80]	; (88fc <ssd1306_init+0x90>)
    88ac:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
    88ae:	208f      	movs	r0, #143	; 0x8f
    88b0:	4b13      	ldr	r3, [pc, #76]	; (8900 <ssd1306_init+0x94>)
    88b2:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    88b4:	20a4      	movs	r0, #164	; 0xa4
    88b6:	4b11      	ldr	r3, [pc, #68]	; (88fc <ssd1306_init+0x90>)
    88b8:	4798      	blx	r3

	ssd1306_display_invert_disable();
    88ba:	4b12      	ldr	r3, [pc, #72]	; (8904 <ssd1306_init+0x98>)
    88bc:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    88be:	20d5      	movs	r0, #213	; 0xd5
    88c0:	4b0e      	ldr	r3, [pc, #56]	; (88fc <ssd1306_init+0x90>)
    88c2:	4798      	blx	r3
	ssd1306_write_command(0x80);
    88c4:	2080      	movs	r0, #128	; 0x80
    88c6:	4b0d      	ldr	r3, [pc, #52]	; (88fc <ssd1306_init+0x90>)
    88c8:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    88ca:	208d      	movs	r0, #141	; 0x8d
    88cc:	4b0b      	ldr	r3, [pc, #44]	; (88fc <ssd1306_init+0x90>)
    88ce:	4798      	blx	r3
	ssd1306_write_command(0x14);
    88d0:	2014      	movs	r0, #20
    88d2:	4b0a      	ldr	r3, [pc, #40]	; (88fc <ssd1306_init+0x90>)
    88d4:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    88d6:	20db      	movs	r0, #219	; 0xdb
    88d8:	4b08      	ldr	r3, [pc, #32]	; (88fc <ssd1306_init+0x90>)
    88da:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    88dc:	2040      	movs	r0, #64	; 0x40
    88de:	4b07      	ldr	r3, [pc, #28]	; (88fc <ssd1306_init+0x90>)
    88e0:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    88e2:	20d9      	movs	r0, #217	; 0xd9
    88e4:	4b05      	ldr	r3, [pc, #20]	; (88fc <ssd1306_init+0x90>)
    88e6:	4798      	blx	r3
	ssd1306_write_command(0xF1);
    88e8:	20f1      	movs	r0, #241	; 0xf1
    88ea:	4b04      	ldr	r3, [pc, #16]	; (88fc <ssd1306_init+0x90>)
    88ec:	4798      	blx	r3

	ssd1306_display_on();
    88ee:	4b06      	ldr	r3, [pc, #24]	; (8908 <ssd1306_init+0x9c>)
    88f0:	4798      	blx	r3
}
    88f2:	bd80      	pop	{r7, pc}
    88f4:	00008649 	.word	0x00008649
    88f8:	00008829 	.word	0x00008829
    88fc:	00008361 	.word	0x00008361
    8900:	000087f1 	.word	0x000087f1
    8904:	00008819 	.word	0x00008819
    8908:	000087e1 	.word	0x000087e1

0000890c <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
    890c:	b580      	push	{r7, lr}
    890e:	b084      	sub	sp, #16
    8910:	af00      	add	r7, sp, #0
    8912:	6078      	str	r0, [r7, #4]
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
    8914:	e023      	b.n	895e <ssd1306_write_text+0x52>
		if (*string < 0x7F) {
    8916:	687b      	ldr	r3, [r7, #4]
    8918:	781b      	ldrb	r3, [r3, #0]
    891a:	2b7e      	cmp	r3, #126	; 0x7e
    891c:	d81c      	bhi.n	8958 <ssd1306_write_text+0x4c>
			char_ptr = font_table[*string - 32];
    891e:	687b      	ldr	r3, [r7, #4]
    8920:	781b      	ldrb	r3, [r3, #0]
    8922:	f1a3 0220 	sub.w	r2, r3, #32
    8926:	4b11      	ldr	r3, [pc, #68]	; (896c <ssd1306_write_text+0x60>)
    8928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    892c:	60bb      	str	r3, [r7, #8]
			for (i = 1; i <= char_ptr[0]; i++) {
    892e:	2301      	movs	r3, #1
    8930:	73fb      	strb	r3, [r7, #15]
    8932:	e009      	b.n	8948 <ssd1306_write_text+0x3c>
				ssd1306_write_data(char_ptr[i]);
    8934:	7bfb      	ldrb	r3, [r7, #15]
    8936:	68ba      	ldr	r2, [r7, #8]
    8938:	4413      	add	r3, r2
    893a:	781b      	ldrb	r3, [r3, #0]
    893c:	4618      	mov	r0, r3
    893e:	4b0c      	ldr	r3, [pc, #48]	; (8970 <ssd1306_write_text+0x64>)
    8940:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
    8942:	7bfb      	ldrb	r3, [r7, #15]
    8944:	3301      	adds	r3, #1
    8946:	73fb      	strb	r3, [r7, #15]
    8948:	68bb      	ldr	r3, [r7, #8]
    894a:	781b      	ldrb	r3, [r3, #0]
    894c:	7bfa      	ldrb	r2, [r7, #15]
    894e:	429a      	cmp	r2, r3
    8950:	d9f0      	bls.n	8934 <ssd1306_write_text+0x28>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
    8952:	2000      	movs	r0, #0
    8954:	4b06      	ldr	r3, [pc, #24]	; (8970 <ssd1306_write_text+0x64>)
    8956:	4798      	blx	r3
		}
			string++;
    8958:	687b      	ldr	r3, [r7, #4]
    895a:	3301      	adds	r3, #1
    895c:	607b      	str	r3, [r7, #4]
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	781b      	ldrb	r3, [r3, #0]
    8962:	2b00      	cmp	r3, #0
    8964:	d1d7      	bne.n	8916 <ssd1306_write_text+0xa>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
    8966:	3710      	adds	r7, #16
    8968:	46bd      	mov	sp, r7
    896a:	bd80      	pop	{r7, pc}
    896c:	20000090 	.word	0x20000090
    8970:	00008479 	.word	0x00008479

00008974 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    8974:	b480      	push	{r7}
    8976:	b083      	sub	sp, #12
    8978:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    897a:	f3ef 8310 	mrs	r3, PRIMASK
    897e:	603b      	str	r3, [r7, #0]
  return(result);
    8980:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    8982:	2b00      	cmp	r3, #0
    8984:	bf14      	ite	ne
    8986:	2300      	movne	r3, #0
    8988:	2301      	moveq	r3, #1
    898a:	b2db      	uxtb	r3, r3
    898c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    898e:	b672      	cpsid	i
    8990:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8994:	4b04      	ldr	r3, [pc, #16]	; (89a8 <cpu_irq_save+0x34>)
    8996:	2200      	movs	r2, #0
    8998:	701a      	strb	r2, [r3, #0]
	return flags;
    899a:	687b      	ldr	r3, [r7, #4]
}
    899c:	4618      	mov	r0, r3
    899e:	370c      	adds	r7, #12
    89a0:	46bd      	mov	sp, r7
    89a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    89a6:	4770      	bx	lr
    89a8:	200004b0 	.word	0x200004b0

000089ac <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    89ac:	b480      	push	{r7}
    89ae:	b083      	sub	sp, #12
    89b0:	af00      	add	r7, sp, #0
    89b2:	6078      	str	r0, [r7, #4]
	return (flags);
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	2b00      	cmp	r3, #0
    89b8:	bf0c      	ite	eq
    89ba:	2300      	moveq	r3, #0
    89bc:	2301      	movne	r3, #1
    89be:	b2db      	uxtb	r3, r3
}
    89c0:	4618      	mov	r0, r3
    89c2:	370c      	adds	r7, #12
    89c4:	46bd      	mov	sp, r7
    89c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ca:	4770      	bx	lr

000089cc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    89d4:	6878      	ldr	r0, [r7, #4]
    89d6:	4b07      	ldr	r3, [pc, #28]	; (89f4 <cpu_irq_restore+0x28>)
    89d8:	4798      	blx	r3
    89da:	4603      	mov	r3, r0
    89dc:	2b00      	cmp	r3, #0
    89de:	d005      	beq.n	89ec <cpu_irq_restore+0x20>
		cpu_irq_enable();
    89e0:	4b05      	ldr	r3, [pc, #20]	; (89f8 <cpu_irq_restore+0x2c>)
    89e2:	2201      	movs	r2, #1
    89e4:	701a      	strb	r2, [r3, #0]
    89e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    89ea:	b662      	cpsie	i
}
    89ec:	3708      	adds	r7, #8
    89ee:	46bd      	mov	sp, r7
    89f0:	bd80      	pop	{r7, pc}
    89f2:	bf00      	nop
    89f4:	000089ad 	.word	0x000089ad
    89f8:	200004b0 	.word	0x200004b0

000089fc <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
    8a02:	4603      	mov	r3, r0
    8a04:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    8a06:	79fb      	ldrb	r3, [r7, #7]
    8a08:	2b06      	cmp	r3, #6
    8a0a:	d823      	bhi.n	8a54 <osc_enable+0x58>
    8a0c:	a201      	add	r2, pc, #4	; (adr r2, 8a14 <osc_enable+0x18>)
    8a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8a12:	bf00      	nop
    8a14:	00008a31 	.word	0x00008a31
    8a18:	00008a37 	.word	0x00008a37
    8a1c:	00008a3d 	.word	0x00008a3d
    8a20:	00008a43 	.word	0x00008a43
    8a24:	00008a49 	.word	0x00008a49
    8a28:	00008a4f 	.word	0x00008a4f
    8a2c:	00008a55 	.word	0x00008a55
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    8a30:	4b0a      	ldr	r3, [pc, #40]	; (8a5c <osc_enable+0x60>)
    8a32:	4798      	blx	r3
		break;
    8a34:	e00f      	b.n	8a56 <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    8a36:	4b0a      	ldr	r3, [pc, #40]	; (8a60 <osc_enable+0x64>)
    8a38:	4798      	blx	r3
		break;
    8a3a:	e00c      	b.n	8a56 <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    8a3c:	4b09      	ldr	r3, [pc, #36]	; (8a64 <osc_enable+0x68>)
    8a3e:	4798      	blx	r3
		break;
    8a40:	e009      	b.n	8a56 <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    8a42:	4b09      	ldr	r3, [pc, #36]	; (8a68 <osc_enable+0x6c>)
    8a44:	4798      	blx	r3
		break;
    8a46:	e006      	b.n	8a56 <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    8a48:	4b08      	ldr	r3, [pc, #32]	; (8a6c <osc_enable+0x70>)
    8a4a:	4798      	blx	r3
		break;
    8a4c:	e003      	b.n	8a56 <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    8a4e:	4b08      	ldr	r3, [pc, #32]	; (8a70 <osc_enable+0x74>)
    8a50:	4798      	blx	r3
		break;
    8a52:	e000      	b.n	8a56 <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    8a54:	bf00      	nop
	}
}
    8a56:	3708      	adds	r7, #8
    8a58:	46bd      	mov	sp, r7
    8a5a:	bd80      	pop	{r7, pc}
    8a5c:	0000908d 	.word	0x0000908d
    8a60:	000090c5 	.word	0x000090c5
    8a64:	000090fd 	.word	0x000090fd
    8a68:	0000917d 	.word	0x0000917d
    8a6c:	000091bd 	.word	0x000091bd
    8a70:	0000913d 	.word	0x0000913d

00008a74 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    8a74:	b480      	push	{r7}
    8a76:	b083      	sub	sp, #12
    8a78:	af00      	add	r7, sp, #0
    8a7a:	4603      	mov	r3, r0
    8a7c:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    8a7e:	79fb      	ldrb	r3, [r7, #7]
    8a80:	2b06      	cmp	r3, #6
    8a82:	d84f      	bhi.n	8b24 <osc_is_ready+0xb0>
    8a84:	a201      	add	r2, pc, #4	; (adr r2, 8a8c <osc_is_ready+0x18>)
    8a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8a8a:	bf00      	nop
    8a8c:	00008aa9 	.word	0x00008aa9
    8a90:	00008abd 	.word	0x00008abd
    8a94:	00008ad1 	.word	0x00008ad1
    8a98:	00008ae5 	.word	0x00008ae5
    8a9c:	00008af9 	.word	0x00008af9
    8aa0:	00008b0d 	.word	0x00008b0d
    8aa4:	00008b21 	.word	0x00008b21
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    8aa8:	4b22      	ldr	r3, [pc, #136]	; (8b34 <osc_is_ready+0xc0>)
    8aaa:	695b      	ldr	r3, [r3, #20]
    8aac:	f003 0301 	and.w	r3, r3, #1
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	bf0c      	ite	eq
    8ab4:	2300      	moveq	r3, #0
    8ab6:	2301      	movne	r3, #1
    8ab8:	b2db      	uxtb	r3, r3
    8aba:	e034      	b.n	8b26 <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    8abc:	4b1e      	ldr	r3, [pc, #120]	; (8b38 <osc_is_ready+0xc4>)
    8abe:	695b      	ldr	r3, [r3, #20]
    8ac0:	f003 0301 	and.w	r3, r3, #1
    8ac4:	2b00      	cmp	r3, #0
    8ac6:	bf0c      	ite	eq
    8ac8:	2300      	moveq	r3, #0
    8aca:	2301      	movne	r3, #1
    8acc:	b2db      	uxtb	r3, r3
    8ace:	e02a      	b.n	8b26 <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    8ad0:	4b19      	ldr	r3, [pc, #100]	; (8b38 <osc_is_ready+0xc4>)
    8ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ad4:	f003 0301 	and.w	r3, r3, #1
    8ad8:	2b00      	cmp	r3, #0
    8ada:	bf0c      	ite	eq
    8adc:	2300      	moveq	r3, #0
    8ade:	2301      	movne	r3, #1
    8ae0:	b2db      	uxtb	r3, r3
    8ae2:	e020      	b.n	8b26 <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    8ae4:	4b13      	ldr	r3, [pc, #76]	; (8b34 <osc_is_ready+0xc0>)
    8ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8ae8:	f003 0301 	and.w	r3, r3, #1
    8aec:	2b00      	cmp	r3, #0
    8aee:	bf0c      	ite	eq
    8af0:	2300      	moveq	r3, #0
    8af2:	2301      	movne	r3, #1
    8af4:	b2db      	uxtb	r3, r3
    8af6:	e016      	b.n	8b26 <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    8af8:	4b0e      	ldr	r3, [pc, #56]	; (8b34 <osc_is_ready+0xc0>)
    8afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8afc:	f003 0301 	and.w	r3, r3, #1
    8b00:	2b00      	cmp	r3, #0
    8b02:	bf0c      	ite	eq
    8b04:	2300      	moveq	r3, #0
    8b06:	2301      	movne	r3, #1
    8b08:	b2db      	uxtb	r3, r3
    8b0a:	e00c      	b.n	8b26 <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    8b0c:	4b0a      	ldr	r3, [pc, #40]	; (8b38 <osc_is_ready+0xc4>)
    8b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    8b10:	f003 0301 	and.w	r3, r3, #1
    8b14:	2b00      	cmp	r3, #0
    8b16:	bf0c      	ite	eq
    8b18:	2300      	moveq	r3, #0
    8b1a:	2301      	movne	r3, #1
    8b1c:	b2db      	uxtb	r3, r3
    8b1e:	e002      	b.n	8b26 <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    8b20:	2301      	movs	r3, #1
    8b22:	e000      	b.n	8b26 <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    8b24:	2300      	movs	r3, #0
	}
}
    8b26:	4618      	mov	r0, r3
    8b28:	370c      	adds	r7, #12
    8b2a:	46bd      	mov	sp, r7
    8b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b30:	4770      	bx	lr
    8b32:	bf00      	nop
    8b34:	400e0800 	.word	0x400e0800
    8b38:	400f0400 	.word	0x400f0400

00008b3c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b082      	sub	sp, #8
    8b40:	af00      	add	r7, sp, #0
    8b42:	4603      	mov	r3, r0
    8b44:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    8b46:	bf00      	nop
    8b48:	79fb      	ldrb	r3, [r7, #7]
    8b4a:	4618      	mov	r0, r3
    8b4c:	4b05      	ldr	r3, [pc, #20]	; (8b64 <osc_wait_ready+0x28>)
    8b4e:	4798      	blx	r3
    8b50:	4603      	mov	r3, r0
    8b52:	f083 0301 	eor.w	r3, r3, #1
    8b56:	b2db      	uxtb	r3, r3
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d1f5      	bne.n	8b48 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    8b5c:	3708      	adds	r7, #8
    8b5e:	46bd      	mov	sp, r7
    8b60:	bd80      	pop	{r7, pc}
    8b62:	bf00      	nop
    8b64:	00008a75 	.word	0x00008a75

00008b68 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		uint32_t id)
{
    8b68:	b480      	push	{r7}
    8b6a:	b083      	sub	sp, #12
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	6078      	str	r0, [r7, #4]
    8b70:	6039      	str	r1, [r7, #0]
	UNUSED(id);
	cfg->ctrl = 0;
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	2200      	movs	r2, #0
    8b76:	601a      	str	r2, [r3, #0]
}
    8b78:	370c      	adds	r7, #12
    8b7a:	46bd      	mov	sp, r7
    8b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b80:	4770      	bx	lr
    8b82:	bf00      	nop

00008b84 <genclk_config_set_source>:
	SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
    8b84:	b480      	push	{r7}
    8b86:	b083      	sub	sp, #12
    8b88:	af00      	add	r7, sp, #0
    8b8a:	6078      	str	r0, [r7, #4]
    8b8c:	460b      	mov	r3, r1
    8b8e:	70fb      	strb	r3, [r7, #3]
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	681b      	ldr	r3, [r3, #0]
    8b94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
			| SCIF_GCCTRL_OSCSEL(src);
    8b98:	78fb      	ldrb	r3, [r7, #3]
    8b9a:	021b      	lsls	r3, r3, #8
    8b9c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8ba0:	431a      	orrs	r2, r3
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	601a      	str	r2, [r3, #0]
			| SCIF_GCCTRL_OSCSEL(src);
}
    8ba6:	370c      	adds	r7, #12
    8ba8:	46bd      	mov	sp, r7
    8baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bae:	4770      	bx	lr

00008bb0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		uint32_t divider)
{
    8bb0:	b480      	push	{r7}
    8bb2:	b083      	sub	sp, #12
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
    8bb8:	6039      	str	r1, [r7, #0]
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(SCIF_GCCTRL_DIVEN
    8bba:	687b      	ldr	r3, [r7, #4]
    8bbc:	681a      	ldr	r2, [r3, #0]
    8bbe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    8bc2:	4013      	ands	r3, r2
    8bc4:	687a      	ldr	r2, [r7, #4]
    8bc6:	6013      	str	r3, [r2, #0]
			| SCIF_GCCTRL_DIV_Msk);

	if (divider > 1) {
    8bc8:	683b      	ldr	r3, [r7, #0]
    8bca:	2b01      	cmp	r3, #1
    8bcc:	d90f      	bls.n	8bee <genclk_config_set_divider+0x3e>
		cfg->ctrl |= SCIF_GCCTRL_DIVEN;
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	681b      	ldr	r3, [r3, #0]
    8bd2:	f043 0202 	orr.w	r2, r3, #2
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	601a      	str	r2, [r3, #0]
		cfg->ctrl |= SCIF_GCCTRL_DIV(((divider + 1) / 2) - 1);
    8bda:	687b      	ldr	r3, [r7, #4]
    8bdc:	681a      	ldr	r2, [r3, #0]
    8bde:	683b      	ldr	r3, [r7, #0]
    8be0:	3301      	adds	r3, #1
    8be2:	085b      	lsrs	r3, r3, #1
    8be4:	3b01      	subs	r3, #1
    8be6:	041b      	lsls	r3, r3, #16
    8be8:	431a      	orrs	r2, r3
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	601a      	str	r2, [r3, #0]
	}
}
    8bee:	370c      	adds	r7, #12
    8bf0:	46bd      	mov	sp, r7
    8bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf6:	4770      	bx	lr

00008bf8 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
    8bf8:	b480      	push	{r7}
    8bfa:	b083      	sub	sp, #12
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	6078      	str	r0, [r7, #4]
    8c00:	6039      	str	r1, [r7, #0]
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    8c02:	4907      	ldr	r1, [pc, #28]	; (8c20 <genclk_enable+0x28>)
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	681b      	ldr	r3, [r3, #0]
    8c08:	f043 0201 	orr.w	r2, r3, #1
    8c0c:	683b      	ldr	r3, [r7, #0]
    8c0e:	331c      	adds	r3, #28
    8c10:	009b      	lsls	r3, r3, #2
    8c12:	440b      	add	r3, r1
    8c14:	605a      	str	r2, [r3, #4]
}
    8c16:	370c      	adds	r7, #12
    8c18:	46bd      	mov	sp, r7
    8c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c1e:	4770      	bx	lr
    8c20:	400e0800 	.word	0x400e0800

00008c24 <dfll_config_set_max_step>:
	uint8_t                 freq_range;     //!< Frequency Range
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
    8c24:	b480      	push	{r7}
    8c26:	b083      	sub	sp, #12
    8c28:	af00      	add	r7, sp, #0
    8c2a:	6078      	str	r0, [r7, #4]
    8c2c:	4613      	mov	r3, r2
    8c2e:	460a      	mov	r2, r1
    8c30:	807a      	strh	r2, [r7, #2]
    8c32:	803b      	strh	r3, [r7, #0]
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    8c34:	887b      	ldrh	r3, [r7, #2]
    8c36:	041b      	lsls	r3, r3, #16
    8c38:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
			| SCIF_DFLL0STEP_FSTEP(fine));
    8c3c:	883b      	ldrh	r3, [r7, #0]
    8c3e:	b2db      	uxtb	r3, r3
    8c40:	431a      	orrs	r2, r3
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	60da      	str	r2, [r3, #12]
			| SCIF_DFLL0STEP_FSTEP(fine));
}
    8c46:	370c      	adds	r7, #12
    8c48:	46bd      	mov	sp, r7
    8c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c4e:	4770      	bx	lr

00008c50 <dfll_priv_set_frequency_range>:

static inline void dfll_priv_set_frequency_range(struct dfll_config *cfg,
		uint32_t freq)
{
    8c50:	b480      	push	{r7}
    8c52:	b083      	sub	sp, #12
    8c54:	af00      	add	r7, sp, #0
    8c56:	6078      	str	r0, [r7, #4]
    8c58:	6039      	str	r1, [r7, #0]
	if (freq < DFLL_MAX_RANGE3){
    8c5a:	683a      	ldr	r2, [r7, #0]
    8c5c:	4b17      	ldr	r3, [pc, #92]	; (8cbc <dfll_priv_set_frequency_range+0x6c>)
    8c5e:	429a      	cmp	r2, r3
    8c60:	d803      	bhi.n	8c6a <dfll_priv_set_frequency_range+0x1a>
		cfg->freq_range = DFLL_RANGE3;
    8c62:	687b      	ldr	r3, [r7, #4]
    8c64:	2203      	movs	r2, #3
    8c66:	761a      	strb	r2, [r3, #24]
    8c68:	e012      	b.n	8c90 <dfll_priv_set_frequency_range+0x40>
	}
	else if (freq < DFLL_MAX_RANGE2){
    8c6a:	683a      	ldr	r2, [r7, #0]
    8c6c:	4b14      	ldr	r3, [pc, #80]	; (8cc0 <dfll_priv_set_frequency_range+0x70>)
    8c6e:	429a      	cmp	r2, r3
    8c70:	d803      	bhi.n	8c7a <dfll_priv_set_frequency_range+0x2a>
		cfg->freq_range = DFLL_RANGE2;
    8c72:	687b      	ldr	r3, [r7, #4]
    8c74:	2202      	movs	r2, #2
    8c76:	761a      	strb	r2, [r3, #24]
    8c78:	e00a      	b.n	8c90 <dfll_priv_set_frequency_range+0x40>
	}
	else if (freq < DFLL_MAX_RANGE1){
    8c7a:	683a      	ldr	r2, [r7, #0]
    8c7c:	4b11      	ldr	r3, [pc, #68]	; (8cc4 <dfll_priv_set_frequency_range+0x74>)
    8c7e:	429a      	cmp	r2, r3
    8c80:	d803      	bhi.n	8c8a <dfll_priv_set_frequency_range+0x3a>
		cfg->freq_range = DFLL_RANGE1;
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	2201      	movs	r2, #1
    8c86:	761a      	strb	r2, [r3, #24]
    8c88:	e002      	b.n	8c90 <dfll_priv_set_frequency_range+0x40>
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	2200      	movs	r2, #0
    8c8e:	761a      	strb	r2, [r3, #24]
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    8c90:	687b      	ldr	r3, [r7, #4]
    8c92:	685b      	ldr	r3, [r3, #4]
    8c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	605a      	str	r2, [r3, #4]
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	685a      	ldr	r2, [r3, #4]
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	7e1b      	ldrb	r3, [r3, #24]
    8ca4:	041b      	lsls	r3, r3, #16
    8ca6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    8caa:	431a      	orrs	r2, r3
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	605a      	str	r2, [r3, #4]
}
    8cb0:	370c      	adds	r7, #12
    8cb2:	46bd      	mov	sp, r7
    8cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cb8:	4770      	bx	lr
    8cba:	bf00      	nop
    8cbc:	01c9c37f 	.word	0x01c9c37f
    8cc0:	03473bbf 	.word	0x03473bbf
    8cc4:	068e777f 	.word	0x068e777f

00008cc8 <dfll_config_init_closed_loop_mode>:
}

#ifdef CONFIG_DFLL0_FREQ
static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t divide, uint16_t mul)
{
    8cc8:	b580      	push	{r7, lr}
    8cca:	b084      	sub	sp, #16
    8ccc:	af00      	add	r7, sp, #0
    8cce:	60f8      	str	r0, [r7, #12]
    8cd0:	72f9      	strb	r1, [r7, #11]
    8cd2:	813a      	strh	r2, [r7, #8]
    8cd4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
    8cd6:	68fb      	ldr	r3, [r7, #12]
    8cd8:	4618      	mov	r0, r3
    8cda:	2100      	movs	r1, #0
    8cdc:	4b1b      	ldr	r3, [pc, #108]	; (8d4c <dfll_config_init_closed_loop_mode+0x84>)
    8cde:	4798      	blx	r3
	genclk_config_set_source(&cfg->ref_cfg, refclk);
    8ce0:	68fa      	ldr	r2, [r7, #12]
    8ce2:	7afb      	ldrb	r3, [r7, #11]
    8ce4:	4610      	mov	r0, r2
    8ce6:	4619      	mov	r1, r3
    8ce8:	4b19      	ldr	r3, [pc, #100]	; (8d50 <dfll_config_init_closed_loop_mode+0x88>)
    8cea:	4798      	blx	r3
	genclk_config_set_divider(&cfg->ref_cfg, divide);
    8cec:	68fa      	ldr	r2, [r7, #12]
    8cee:	893b      	ldrh	r3, [r7, #8]
    8cf0:	4610      	mov	r0, r2
    8cf2:	4619      	mov	r1, r3
    8cf4:	4b17      	ldr	r3, [pc, #92]	; (8d54 <dfll_config_init_closed_loop_mode+0x8c>)
    8cf6:	4798      	blx	r3

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    8cf8:	4b17      	ldr	r3, [pc, #92]	; (8d58 <dfll_config_init_closed_loop_mode+0x90>)
    8cfa:	2201      	movs	r2, #1
    8cfc:	641a      	str	r2, [r3, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    8cfe:	bf00      	nop
    8d00:	4b15      	ldr	r3, [pc, #84]	; (8d58 <dfll_config_init_closed_loop_mode+0x90>)
    8d02:	695b      	ldr	r3, [r3, #20]
    8d04:	f003 0308 	and.w	r3, r3, #8
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d0f9      	beq.n	8d00 <dfll_config_init_closed_loop_mode+0x38>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    8d0c:	4b12      	ldr	r3, [pc, #72]	; (8d58 <dfll_config_init_closed_loop_mode+0x90>)
    8d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8d10:	68fb      	ldr	r3, [r7, #12]
    8d12:	605a      	str	r2, [r3, #4]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
    8d14:	68fb      	ldr	r3, [r7, #12]
    8d16:	685b      	ldr	r3, [r3, #4]
    8d18:	f043 0202 	orr.w	r2, r3, #2
    8d1c:	68fb      	ldr	r3, [r7, #12]
    8d1e:	605a      	str	r2, [r3, #4]
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);
    8d20:	68f8      	ldr	r0, [r7, #12]
    8d22:	490e      	ldr	r1, [pc, #56]	; (8d5c <dfll_config_init_closed_loop_mode+0x94>)
    8d24:	4b0e      	ldr	r3, [pc, #56]	; (8d60 <dfll_config_init_closed_loop_mode+0x98>)
    8d26:	4798      	blx	r3

	cfg->mul = mul;
    8d28:	88fa      	ldrh	r2, [r7, #6]
    8d2a:	68fb      	ldr	r3, [r7, #12]
    8d2c:	609a      	str	r2, [r3, #8]
	cfg->val = 0;
    8d2e:	68fb      	ldr	r3, [r7, #12]
    8d30:	2200      	movs	r2, #0
    8d32:	615a      	str	r2, [r3, #20]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
    8d34:	68f8      	ldr	r0, [r7, #12]
    8d36:	2104      	movs	r1, #4
    8d38:	2204      	movs	r2, #4
    8d3a:	4b0a      	ldr	r3, [pc, #40]	; (8d64 <dfll_config_init_closed_loop_mode+0x9c>)
    8d3c:	4798      	blx	r3
	cfg->ssg = 0;
    8d3e:	68fb      	ldr	r3, [r7, #12]
    8d40:	2200      	movs	r2, #0
    8d42:	611a      	str	r2, [r3, #16]
}
    8d44:	3710      	adds	r7, #16
    8d46:	46bd      	mov	sp, r7
    8d48:	bd80      	pop	{r7, pc}
    8d4a:	bf00      	nop
    8d4c:	00008b69 	.word	0x00008b69
    8d50:	00008b85 	.word	0x00008b85
    8d54:	00008bb1 	.word	0x00008bb1
    8d58:	400e0800 	.word	0x400e0800
    8d5c:	02dc6c00 	.word	0x02dc6c00
    8d60:	00008c51 	.word	0x00008c51
    8d64:	00008c25 	.word	0x00008c25

00008d68 <dfll_is_fine_locked>:
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKC);
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
    8d68:	b480      	push	{r7}
    8d6a:	b083      	sub	sp, #12
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	6078      	str	r0, [r7, #4]
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    8d70:	4b07      	ldr	r3, [pc, #28]	; (8d90 <dfll_is_fine_locked+0x28>)
    8d72:	695b      	ldr	r3, [r3, #20]
    8d74:	f003 0304 	and.w	r3, r3, #4
    8d78:	2b00      	cmp	r3, #0
    8d7a:	bf0c      	ite	eq
    8d7c:	2300      	moveq	r3, #0
    8d7e:	2301      	movne	r3, #1
    8d80:	b2db      	uxtb	r3, r3
}
    8d82:	4618      	mov	r0, r3
    8d84:	370c      	adds	r7, #12
    8d86:	46bd      	mov	sp, r7
    8d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d8c:	4770      	bx	lr
    8d8e:	bf00      	nop
    8d90:	400e0800 	.word	0x400e0800

00008d94 <dfll_enable_source>:
	return (dfll_is_coarse_locked(dfll_id) &&
			dfll_is_fine_locked(dfll_id));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
    8d94:	b580      	push	{r7, lr}
    8d96:	b082      	sub	sp, #8
    8d98:	af00      	add	r7, sp, #0
    8d9a:	4603      	mov	r3, r0
    8d9c:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    8d9e:	79fb      	ldrb	r3, [r7, #7]
    8da0:	2b0d      	cmp	r3, #13
    8da2:	d863      	bhi.n	8e6c <dfll_enable_source+0xd8>
    8da4:	a201      	add	r2, pc, #4	; (adr r2, 8dac <dfll_enable_source+0x18>)
    8da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8daa:	bf00      	nop
    8dac:	00008e6d 	.word	0x00008e6d
    8db0:	00008de5 	.word	0x00008de5
    8db4:	00008e6d 	.word	0x00008e6d
    8db8:	00008e07 	.word	0x00008e07
    8dbc:	00008e29 	.word	0x00008e29
    8dc0:	00008e6d 	.word	0x00008e6d
    8dc4:	00008e6d 	.word	0x00008e6d
    8dc8:	00008e6d 	.word	0x00008e6d
    8dcc:	00008e6d 	.word	0x00008e6d
    8dd0:	00008e6d 	.word	0x00008e6d
    8dd4:	00008e6d 	.word	0x00008e6d
    8dd8:	00008e6d 	.word	0x00008e6d
    8ddc:	00008e6d 	.word	0x00008e6d
    8de0:	00008e4b 	.word	0x00008e4b
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    8de4:	2001      	movs	r0, #1
    8de6:	4b23      	ldr	r3, [pc, #140]	; (8e74 <dfll_enable_source+0xe0>)
    8de8:	4798      	blx	r3
    8dea:	4603      	mov	r3, r0
    8dec:	f083 0301 	eor.w	r3, r3, #1
    8df0:	b2db      	uxtb	r3, r3
    8df2:	2b00      	cmp	r3, #0
    8df4:	d006      	beq.n	8e04 <dfll_enable_source+0x70>
			osc_enable(OSC_ID_OSC32);
    8df6:	2001      	movs	r0, #1
    8df8:	4b1f      	ldr	r3, [pc, #124]	; (8e78 <dfll_enable_source+0xe4>)
    8dfa:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC32);
    8dfc:	2001      	movs	r0, #1
    8dfe:	4b1f      	ldr	r3, [pc, #124]	; (8e7c <dfll_enable_source+0xe8>)
    8e00:	4798      	blx	r3
		}
		break;
    8e02:	e034      	b.n	8e6e <dfll_enable_source+0xda>
    8e04:	e033      	b.n	8e6e <dfll_enable_source+0xda>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
    8e06:	2000      	movs	r0, #0
    8e08:	4b1a      	ldr	r3, [pc, #104]	; (8e74 <dfll_enable_source+0xe0>)
    8e0a:	4798      	blx	r3
    8e0c:	4603      	mov	r3, r0
    8e0e:	f083 0301 	eor.w	r3, r3, #1
    8e12:	b2db      	uxtb	r3, r3
    8e14:	2b00      	cmp	r3, #0
    8e16:	d006      	beq.n	8e26 <dfll_enable_source+0x92>
			osc_enable(OSC_ID_OSC0);
    8e18:	2000      	movs	r0, #0
    8e1a:	4b17      	ldr	r3, [pc, #92]	; (8e78 <dfll_enable_source+0xe4>)
    8e1c:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC0);
    8e1e:	2000      	movs	r0, #0
    8e20:	4b16      	ldr	r3, [pc, #88]	; (8e7c <dfll_enable_source+0xe8>)
    8e22:	4798      	blx	r3
		}
		break;
    8e24:	e023      	b.n	8e6e <dfll_enable_source+0xda>
    8e26:	e022      	b.n	8e6e <dfll_enable_source+0xda>
#endif

	case GENCLK_SRC_RC80M:
		if (!osc_is_ready(OSC_ID_RC80M)) {
    8e28:	2003      	movs	r0, #3
    8e2a:	4b12      	ldr	r3, [pc, #72]	; (8e74 <dfll_enable_source+0xe0>)
    8e2c:	4798      	blx	r3
    8e2e:	4603      	mov	r3, r0
    8e30:	f083 0301 	eor.w	r3, r3, #1
    8e34:	b2db      	uxtb	r3, r3
    8e36:	2b00      	cmp	r3, #0
    8e38:	d006      	beq.n	8e48 <dfll_enable_source+0xb4>
			osc_enable(OSC_ID_RC80M);
    8e3a:	2003      	movs	r0, #3
    8e3c:	4b0e      	ldr	r3, [pc, #56]	; (8e78 <dfll_enable_source+0xe4>)
    8e3e:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC80M);
    8e40:	2003      	movs	r0, #3
    8e42:	4b0e      	ldr	r3, [pc, #56]	; (8e7c <dfll_enable_source+0xe8>)
    8e44:	4798      	blx	r3
		}
		break;
    8e46:	e012      	b.n	8e6e <dfll_enable_source+0xda>
    8e48:	e011      	b.n	8e6e <dfll_enable_source+0xda>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
    8e4a:	2002      	movs	r0, #2
    8e4c:	4b09      	ldr	r3, [pc, #36]	; (8e74 <dfll_enable_source+0xe0>)
    8e4e:	4798      	blx	r3
    8e50:	4603      	mov	r3, r0
    8e52:	f083 0301 	eor.w	r3, r3, #1
    8e56:	b2db      	uxtb	r3, r3
    8e58:	2b00      	cmp	r3, #0
    8e5a:	d006      	beq.n	8e6a <dfll_enable_source+0xd6>
			osc_enable(OSC_ID_RC32K);
    8e5c:	2002      	movs	r0, #2
    8e5e:	4b06      	ldr	r3, [pc, #24]	; (8e78 <dfll_enable_source+0xe4>)
    8e60:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC32K);
    8e62:	2002      	movs	r0, #2
    8e64:	4b05      	ldr	r3, [pc, #20]	; (8e7c <dfll_enable_source+0xe8>)
    8e66:	4798      	blx	r3
		}
		break;
    8e68:	e001      	b.n	8e6e <dfll_enable_source+0xda>
    8e6a:	e000      	b.n	8e6e <dfll_enable_source+0xda>

	default:
		Assert(false);
		break;
    8e6c:	bf00      	nop
	}
}
    8e6e:	3708      	adds	r7, #8
    8e70:	46bd      	mov	sp, r7
    8e72:	bd80      	pop	{r7, pc}
    8e74:	00008a75 	.word	0x00008a75
    8e78:	000089fd 	.word	0x000089fd
    8e7c:	00008b3d 	.word	0x00008b3d

00008e80 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    8e80:	b580      	push	{r7, lr}
    8e82:	b088      	sub	sp, #32
    8e84:	af00      	add	r7, sp, #0
    8e86:	6078      	str	r0, [r7, #4]
    8e88:	6039      	str	r1, [r7, #0]
	irqflags_t flags;

	UNUSED(dfll_id);

	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	4618      	mov	r0, r3
    8e8e:	2100      	movs	r1, #0
    8e90:	4b31      	ldr	r3, [pc, #196]	; (8f58 <dfll_enable_closed_loop+0xd8>)
    8e92:	4798      	blx	r3
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
    8e94:	4b31      	ldr	r3, [pc, #196]	; (8f5c <dfll_enable_closed_loop+0xdc>)
    8e96:	4798      	blx	r3
    8e98:	61f8      	str	r0, [r7, #28]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    8e9a:	4b31      	ldr	r3, [pc, #196]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8e9c:	4a31      	ldr	r2, [pc, #196]	; (8f64 <dfll_enable_closed_loop+0xe4>)
    8e9e:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    8ea0:	4b2f      	ldr	r3, [pc, #188]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8ea2:	2201      	movs	r2, #1
    8ea4:	629a      	str	r2, [r3, #40]	; 0x28
	cpu_irq_restore(flags);
    8ea6:	69f8      	ldr	r0, [r7, #28]
    8ea8:	4b2f      	ldr	r3, [pc, #188]	; (8f68 <dfll_enable_closed_loop+0xe8>)
    8eaa:	4798      	blx	r3

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    8eac:	bf00      	nop
    8eae:	4b2c      	ldr	r3, [pc, #176]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8eb0:	695b      	ldr	r3, [r3, #20]
    8eb2:	f003 0308 	and.w	r3, r3, #8
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d0f9      	beq.n	8eae <dfll_enable_closed_loop+0x2e>
    8eba:	4b28      	ldr	r3, [pc, #160]	; (8f5c <dfll_enable_closed_loop+0xdc>)
    8ebc:	4798      	blx	r3
    8ebe:	61b8      	str	r0, [r7, #24]
    8ec0:	4b27      	ldr	r3, [pc, #156]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8ec2:	4a2a      	ldr	r2, [pc, #168]	; (8f6c <dfll_enable_closed_loop+0xec>)
    8ec4:	619a      	str	r2, [r3, #24]
    8ec6:	4b26      	ldr	r3, [pc, #152]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8ec8:	687a      	ldr	r2, [r7, #4]
    8eca:	68d2      	ldr	r2, [r2, #12]
    8ecc:	635a      	str	r2, [r3, #52]	; 0x34
    8ece:	69b8      	ldr	r0, [r7, #24]
    8ed0:	4b25      	ldr	r3, [pc, #148]	; (8f68 <dfll_enable_closed_loop+0xe8>)
    8ed2:	4798      	blx	r3
	dfll_write_reg(DFLL0MUL, cfg->mul);
    8ed4:	bf00      	nop
    8ed6:	4b22      	ldr	r3, [pc, #136]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8ed8:	695b      	ldr	r3, [r3, #20]
    8eda:	f003 0308 	and.w	r3, r3, #8
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d0f9      	beq.n	8ed6 <dfll_enable_closed_loop+0x56>
    8ee2:	4b1e      	ldr	r3, [pc, #120]	; (8f5c <dfll_enable_closed_loop+0xdc>)
    8ee4:	4798      	blx	r3
    8ee6:	6178      	str	r0, [r7, #20]
    8ee8:	4b1d      	ldr	r3, [pc, #116]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8eea:	4a21      	ldr	r2, [pc, #132]	; (8f70 <dfll_enable_closed_loop+0xf0>)
    8eec:	619a      	str	r2, [r3, #24]
    8eee:	4b1c      	ldr	r3, [pc, #112]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8ef0:	687a      	ldr	r2, [r7, #4]
    8ef2:	6892      	ldr	r2, [r2, #8]
    8ef4:	631a      	str	r2, [r3, #48]	; 0x30
    8ef6:	6978      	ldr	r0, [r7, #20]
    8ef8:	4b1b      	ldr	r3, [pc, #108]	; (8f68 <dfll_enable_closed_loop+0xe8>)
    8efa:	4798      	blx	r3
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    8efc:	bf00      	nop
    8efe:	4b18      	ldr	r3, [pc, #96]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8f00:	695b      	ldr	r3, [r3, #20]
    8f02:	f003 0308 	and.w	r3, r3, #8
    8f06:	2b00      	cmp	r3, #0
    8f08:	d0f9      	beq.n	8efe <dfll_enable_closed_loop+0x7e>
    8f0a:	4b14      	ldr	r3, [pc, #80]	; (8f5c <dfll_enable_closed_loop+0xdc>)
    8f0c:	4798      	blx	r3
    8f0e:	6138      	str	r0, [r7, #16]
    8f10:	4b13      	ldr	r3, [pc, #76]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8f12:	4a18      	ldr	r2, [pc, #96]	; (8f74 <dfll_enable_closed_loop+0xf4>)
    8f14:	619a      	str	r2, [r3, #24]
    8f16:	4b12      	ldr	r3, [pc, #72]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8f18:	687a      	ldr	r2, [r7, #4]
    8f1a:	6912      	ldr	r2, [r2, #16]
    8f1c:	639a      	str	r2, [r3, #56]	; 0x38
    8f1e:	6938      	ldr	r0, [r7, #16]
    8f20:	4b11      	ldr	r3, [pc, #68]	; (8f68 <dfll_enable_closed_loop+0xe8>)
    8f22:	4798      	blx	r3
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    8f24:	bf00      	nop
    8f26:	4b0e      	ldr	r3, [pc, #56]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8f28:	695b      	ldr	r3, [r3, #20]
    8f2a:	f003 0308 	and.w	r3, r3, #8
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d0f9      	beq.n	8f26 <dfll_enable_closed_loop+0xa6>
    8f32:	4b0a      	ldr	r3, [pc, #40]	; (8f5c <dfll_enable_closed_loop+0xdc>)
    8f34:	4798      	blx	r3
    8f36:	60f8      	str	r0, [r7, #12]
    8f38:	4b09      	ldr	r3, [pc, #36]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8f3a:	4a0a      	ldr	r2, [pc, #40]	; (8f64 <dfll_enable_closed_loop+0xe4>)
    8f3c:	619a      	str	r2, [r3, #24]
    8f3e:	4b08      	ldr	r3, [pc, #32]	; (8f60 <dfll_enable_closed_loop+0xe0>)
    8f40:	687a      	ldr	r2, [r7, #4]
    8f42:	6852      	ldr	r2, [r2, #4]
    8f44:	f042 0201 	orr.w	r2, r2, #1
    8f48:	629a      	str	r2, [r3, #40]	; 0x28
    8f4a:	68f8      	ldr	r0, [r7, #12]
    8f4c:	4b06      	ldr	r3, [pc, #24]	; (8f68 <dfll_enable_closed_loop+0xe8>)
    8f4e:	4798      	blx	r3
}
    8f50:	3720      	adds	r7, #32
    8f52:	46bd      	mov	sp, r7
    8f54:	bd80      	pop	{r7, pc}
    8f56:	bf00      	nop
    8f58:	00008bf9 	.word	0x00008bf9
    8f5c:	00008975 	.word	0x00008975
    8f60:	400e0800 	.word	0x400e0800
    8f64:	aa000028 	.word	0xaa000028
    8f68:	000089cd 	.word	0x000089cd
    8f6c:	aa000034 	.word	0xaa000034
    8f70:	aa000030 	.word	0xaa000030
    8f74:	aa000038 	.word	0xaa000038

00008f78 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    8f78:	b590      	push	{r4, r7, lr}
    8f7a:	b08b      	sub	sp, #44	; 0x2c
    8f7c:	af00      	add	r7, sp, #0
    8f7e:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if(SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) {
    8f80:	4b1a      	ldr	r3, [pc, #104]	; (8fec <dfll_enable_config_defaults+0x74>)
    8f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f84:	f003 0302 	and.w	r3, r3, #2
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d006      	beq.n	8f9a <dfll_enable_config_defaults+0x22>
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    8f8c:	6878      	ldr	r0, [r7, #4]
    8f8e:	4b18      	ldr	r3, [pc, #96]	; (8ff0 <dfll_enable_config_defaults+0x78>)
    8f90:	4798      	blx	r3
    8f92:	4603      	mov	r3, r0
    8f94:	2b00      	cmp	r3, #0
    8f96:	d000      	beq.n	8f9a <dfll_enable_config_defaults+0x22>
			return; // DFLL already running
    8f98:	e025      	b.n	8fe6 <dfll_enable_config_defaults+0x6e>
		}
	}
	if (open_loop_done == true) {
    8f9a:	4b16      	ldr	r3, [pc, #88]	; (8ff4 <dfll_enable_config_defaults+0x7c>)
    8f9c:	781b      	ldrb	r3, [r3, #0]
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	d000      	beq.n	8fa4 <dfll_enable_config_defaults+0x2c>
		return;
    8fa2:	e020      	b.n	8fe6 <dfll_enable_config_defaults+0x6e>
	}

	switch (dfll_id) {
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d000      	beq.n	8fac <dfll_enable_config_defaults+0x34>
		break;
#endif

	default:
		Assert(false);
		break;
    8faa:	e01c      	b.n	8fe6 <dfll_enable_config_defaults+0x6e>
	}

	switch (dfll_id) {
#ifdef CONFIG_DFLL0_SOURCE
	case 0:
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
    8fac:	2001      	movs	r0, #1
    8fae:	4b12      	ldr	r3, [pc, #72]	; (8ff8 <dfll_enable_config_defaults+0x80>)
    8fb0:	4798      	blx	r3
		dfll_config_init_closed_loop_mode(&dfllcfg,
    8fb2:	f107 030c 	add.w	r3, r7, #12
    8fb6:	4618      	mov	r0, r3
    8fb8:	2101      	movs	r1, #1
    8fba:	2201      	movs	r2, #1
    8fbc:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    8fc0:	4c0e      	ldr	r4, [pc, #56]	; (8ffc <dfll_enable_config_defaults+0x84>)
    8fc2:	47a0      	blx	r4
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    8fc4:	f107 030c 	add.w	r3, r7, #12
    8fc8:	4618      	mov	r0, r3
    8fca:	6879      	ldr	r1, [r7, #4]
    8fcc:	4b0c      	ldr	r3, [pc, #48]	; (9000 <dfll_enable_config_defaults+0x88>)
    8fce:	4798      	blx	r3
		while (!dfll_is_fine_locked(dfll_id));
    8fd0:	bf00      	nop
    8fd2:	6878      	ldr	r0, [r7, #4]
    8fd4:	4b06      	ldr	r3, [pc, #24]	; (8ff0 <dfll_enable_config_defaults+0x78>)
    8fd6:	4798      	blx	r3
    8fd8:	4603      	mov	r3, r0
    8fda:	f083 0301 	eor.w	r3, r3, #1
    8fde:	b2db      	uxtb	r3, r3
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d1f6      	bne.n	8fd2 <dfll_enable_config_defaults+0x5a>
		break;
    8fe4:	bf00      	nop

	default:
		Assert(false);
		break;
	}
}
    8fe6:	372c      	adds	r7, #44	; 0x2c
    8fe8:	46bd      	mov	sp, r7
    8fea:	bd90      	pop	{r4, r7, pc}
    8fec:	400e0800 	.word	0x400e0800
    8ff0:	00008d69 	.word	0x00008d69
    8ff4:	20000e20 	.word	0x20000e20
    8ff8:	00008d95 	.word	0x00008d95
    8ffc:	00008cc9 	.word	0x00008cc9
    9000:	00008e81 	.word	0x00008e81

00009004 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    9004:	b480      	push	{r7}
    9006:	b083      	sub	sp, #12
    9008:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    900a:	f3ef 8310 	mrs	r3, PRIMASK
    900e:	603b      	str	r3, [r7, #0]
  return(result);
    9010:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    9012:	2b00      	cmp	r3, #0
    9014:	bf14      	ite	ne
    9016:	2300      	movne	r3, #0
    9018:	2301      	moveq	r3, #1
    901a:	b2db      	uxtb	r3, r3
    901c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    901e:	b672      	cpsid	i
    9020:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9024:	4b04      	ldr	r3, [pc, #16]	; (9038 <cpu_irq_save+0x34>)
    9026:	2200      	movs	r2, #0
    9028:	701a      	strb	r2, [r3, #0]
	return flags;
    902a:	687b      	ldr	r3, [r7, #4]
}
    902c:	4618      	mov	r0, r3
    902e:	370c      	adds	r7, #12
    9030:	46bd      	mov	sp, r7
    9032:	f85d 7b04 	ldr.w	r7, [sp], #4
    9036:	4770      	bx	lr
    9038:	200004b0 	.word	0x200004b0

0000903c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    903c:	b480      	push	{r7}
    903e:	b083      	sub	sp, #12
    9040:	af00      	add	r7, sp, #0
    9042:	6078      	str	r0, [r7, #4]
	return (flags);
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	2b00      	cmp	r3, #0
    9048:	bf0c      	ite	eq
    904a:	2300      	moveq	r3, #0
    904c:	2301      	movne	r3, #1
    904e:	b2db      	uxtb	r3, r3
}
    9050:	4618      	mov	r0, r3
    9052:	370c      	adds	r7, #12
    9054:	46bd      	mov	sp, r7
    9056:	f85d 7b04 	ldr.w	r7, [sp], #4
    905a:	4770      	bx	lr

0000905c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    905c:	b580      	push	{r7, lr}
    905e:	b082      	sub	sp, #8
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    9064:	6878      	ldr	r0, [r7, #4]
    9066:	4b07      	ldr	r3, [pc, #28]	; (9084 <cpu_irq_restore+0x28>)
    9068:	4798      	blx	r3
    906a:	4603      	mov	r3, r0
    906c:	2b00      	cmp	r3, #0
    906e:	d005      	beq.n	907c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    9070:	4b05      	ldr	r3, [pc, #20]	; (9088 <cpu_irq_restore+0x2c>)
    9072:	2201      	movs	r2, #1
    9074:	701a      	strb	r2, [r3, #0]
    9076:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    907a:	b662      	cpsie	i
}
    907c:	3708      	adds	r7, #8
    907e:	46bd      	mov	sp, r7
    9080:	bd80      	pop	{r7, pc}
    9082:	bf00      	nop
    9084:	0000903d 	.word	0x0000903d
    9088:	200004b0 	.word	0x200004b0

0000908c <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    908c:	b580      	push	{r7, lr}
    908e:	b082      	sub	sp, #8
    9090:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    9092:	4b07      	ldr	r3, [pc, #28]	; (90b0 <osc_priv_enable_osc0+0x24>)
    9094:	4798      	blx	r3
    9096:	6078      	str	r0, [r7, #4]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    9098:	4b06      	ldr	r3, [pc, #24]	; (90b4 <osc_priv_enable_osc0+0x28>)
    909a:	4a07      	ldr	r2, [pc, #28]	; (90b8 <osc_priv_enable_osc0+0x2c>)
    909c:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    909e:	4b05      	ldr	r3, [pc, #20]	; (90b4 <osc_priv_enable_osc0+0x28>)
    90a0:	4a06      	ldr	r2, [pc, #24]	; (90bc <osc_priv_enable_osc0+0x30>)
    90a2:	621a      	str	r2, [r3, #32]
# if BOARD_OSC0_IS_XTAL == true
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
    90a4:	6878      	ldr	r0, [r7, #4]
    90a6:	4b06      	ldr	r3, [pc, #24]	; (90c0 <osc_priv_enable_osc0+0x34>)
    90a8:	4798      	blx	r3
}
    90aa:	3708      	adds	r7, #8
    90ac:	46bd      	mov	sp, r7
    90ae:	bd80      	pop	{r7, pc}
    90b0:	00009005 	.word	0x00009005
    90b4:	400e0800 	.word	0x400e0800
    90b8:	aa000020 	.word	0xaa000020
    90bc:	00010307 	.word	0x00010307
    90c0:	0000905d 	.word	0x0000905d

000090c4 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
    90c4:	b580      	push	{r7, lr}
    90c6:	b082      	sub	sp, #8
    90c8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    90ca:	4b07      	ldr	r3, [pc, #28]	; (90e8 <osc_priv_enable_osc32+0x24>)
    90cc:	4798      	blx	r3
    90ce:	6078      	str	r0, [r7, #4]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    90d0:	4b06      	ldr	r3, [pc, #24]	; (90ec <osc_priv_enable_osc32+0x28>)
    90d2:	4a07      	ldr	r2, [pc, #28]	; (90f0 <osc_priv_enable_osc32+0x2c>)
    90d4:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    90d6:	4b05      	ldr	r3, [pc, #20]	; (90ec <osc_priv_enable_osc32+0x28>)
    90d8:	4a06      	ldr	r2, [pc, #24]	; (90f4 <osc_priv_enable_osc32+0x30>)
    90da:	621a      	str	r2, [r3, #32]
			| BOARD_OSC32_SELCURR
			| OSC32_MODE_VALUE
			| BSCIF_OSCCTRL32_EN1K
			| BSCIF_OSCCTRL32_EN32K
			| BSCIF_OSCCTRL32_OSC32EN;
	cpu_irq_restore(flags);
    90dc:	6878      	ldr	r0, [r7, #4]
    90de:	4b06      	ldr	r3, [pc, #24]	; (90f8 <osc_priv_enable_osc32+0x34>)
    90e0:	4798      	blx	r3
}
    90e2:	3708      	adds	r7, #8
    90e4:	46bd      	mov	sp, r7
    90e6:	bd80      	pop	{r7, pc}
    90e8:	00009005 	.word	0x00009005
    90ec:	400f0400 	.word	0x400f0400
    90f0:	aa000020 	.word	0xaa000020
    90f4:	0005a10d 	.word	0x0005a10d
    90f8:	0000905d 	.word	0x0000905d

000090fc <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc32k(void)
{
    90fc:	b580      	push	{r7, lr}
    90fe:	b082      	sub	sp, #8
    9100:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    9102:	4b0a      	ldr	r3, [pc, #40]	; (912c <osc_priv_enable_rc32k+0x30>)
    9104:	4798      	blx	r3
    9106:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC32KCR;
    9108:	4b09      	ldr	r3, [pc, #36]	; (9130 <osc_priv_enable_rc32k+0x34>)
    910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    910c:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    910e:	4b08      	ldr	r3, [pc, #32]	; (9130 <osc_priv_enable_rc32k+0x34>)
    9110:	4a08      	ldr	r2, [pc, #32]	; (9134 <osc_priv_enable_rc32k+0x38>)
    9112:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC32KCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC32KCR = temp | BSCIF_RC32KCR_EN32K | BSCIF_RC32KCR_EN;
    9114:	4b06      	ldr	r3, [pc, #24]	; (9130 <osc_priv_enable_rc32k+0x34>)
    9116:	683a      	ldr	r2, [r7, #0]
    9118:	f042 0205 	orr.w	r2, r2, #5
    911c:	625a      	str	r2, [r3, #36]	; 0x24
	cpu_irq_restore(flags);
    911e:	6878      	ldr	r0, [r7, #4]
    9120:	4b05      	ldr	r3, [pc, #20]	; (9138 <osc_priv_enable_rc32k+0x3c>)
    9122:	4798      	blx	r3
}
    9124:	3708      	adds	r7, #8
    9126:	46bd      	mov	sp, r7
    9128:	bd80      	pop	{r7, pc}
    912a:	bf00      	nop
    912c:	00009005 	.word	0x00009005
    9130:	400f0400 	.word	0x400f0400
    9134:	aa000024 	.word	0xaa000024
    9138:	0000905d 	.word	0x0000905d

0000913c <osc_priv_enable_rc1m>:
	BSCIF->BSCIF_RC32KCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc1m(void)
{
    913c:	b580      	push	{r7, lr}
    913e:	b082      	sub	sp, #8
    9140:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    9142:	4b0a      	ldr	r3, [pc, #40]	; (916c <osc_priv_enable_rc1m+0x30>)
    9144:	4798      	blx	r3
    9146:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC1MCR;
    9148:	4b09      	ldr	r3, [pc, #36]	; (9170 <osc_priv_enable_rc1m+0x34>)
    914a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    914c:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    914e:	4b08      	ldr	r3, [pc, #32]	; (9170 <osc_priv_enable_rc1m+0x34>)
    9150:	4a08      	ldr	r2, [pc, #32]	; (9174 <osc_priv_enable_rc1m+0x38>)
    9152:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC1MCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC1MCR = temp | BSCIF_RC1MCR_CLKOE;
    9154:	4b06      	ldr	r3, [pc, #24]	; (9170 <osc_priv_enable_rc1m+0x34>)
    9156:	683a      	ldr	r2, [r7, #0]
    9158:	f042 0201 	orr.w	r2, r2, #1
    915c:	659a      	str	r2, [r3, #88]	; 0x58
	cpu_irq_restore(flags);
    915e:	6878      	ldr	r0, [r7, #4]
    9160:	4b05      	ldr	r3, [pc, #20]	; (9178 <osc_priv_enable_rc1m+0x3c>)
    9162:	4798      	blx	r3
}
    9164:	3708      	adds	r7, #8
    9166:	46bd      	mov	sp, r7
    9168:	bd80      	pop	{r7, pc}
    916a:	bf00      	nop
    916c:	00009005 	.word	0x00009005
    9170:	400f0400 	.word	0x400f0400
    9174:	aa000058 	.word	0xaa000058
    9178:	0000905d 	.word	0x0000905d

0000917c <osc_priv_enable_rc80m>:
	BSCIF->BSCIF_RC1MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc80m(void)
{
    917c:	b580      	push	{r7, lr}
    917e:	b082      	sub	sp, #8
    9180:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    9182:	4b0a      	ldr	r3, [pc, #40]	; (91ac <osc_priv_enable_rc80m+0x30>)
    9184:	4798      	blx	r3
    9186:	6078      	str	r0, [r7, #4]
	temp = SCIF->SCIF_RC80MCR;
    9188:	4b09      	ldr	r3, [pc, #36]	; (91b0 <osc_priv_enable_rc80m+0x34>)
    918a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    918c:	603b      	str	r3, [r7, #0]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    918e:	4b08      	ldr	r3, [pc, #32]	; (91b0 <osc_priv_enable_rc80m+0x34>)
    9190:	4a08      	ldr	r2, [pc, #32]	; (91b4 <osc_priv_enable_rc80m+0x38>)
    9192:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RC80MCR - (uint32_t)SCIF);
	SCIF->SCIF_RC80MCR = temp | SCIF_RC80MCR_EN;
    9194:	4b06      	ldr	r3, [pc, #24]	; (91b0 <osc_priv_enable_rc80m+0x34>)
    9196:	683a      	ldr	r2, [r7, #0]
    9198:	f042 0201 	orr.w	r2, r2, #1
    919c:	651a      	str	r2, [r3, #80]	; 0x50
	cpu_irq_restore(flags);
    919e:	6878      	ldr	r0, [r7, #4]
    91a0:	4b05      	ldr	r3, [pc, #20]	; (91b8 <osc_priv_enable_rc80m+0x3c>)
    91a2:	4798      	blx	r3
}
    91a4:	3708      	adds	r7, #8
    91a6:	46bd      	mov	sp, r7
    91a8:	bd80      	pop	{r7, pc}
    91aa:	bf00      	nop
    91ac:	00009005 	.word	0x00009005
    91b0:	400e0800 	.word	0x400e0800
    91b4:	aa000050 	.word	0xaa000050
    91b8:	0000905d 	.word	0x0000905d

000091bc <osc_priv_enable_rcfast>:
	SCIF->SCIF_RC80MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rcfast(void)
{
    91bc:	b580      	push	{r7, lr}
    91be:	b082      	sub	sp, #8
    91c0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    91c2:	4b0c      	ldr	r3, [pc, #48]	; (91f4 <osc_priv_enable_rcfast+0x38>)
    91c4:	4798      	blx	r3
    91c6:	6078      	str	r0, [r7, #4]
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
    91c8:	4b0b      	ldr	r3, [pc, #44]	; (91f8 <osc_priv_enable_rcfast+0x3c>)
    91ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    91cc:	603b      	str	r3, [r7, #0]
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;
    91ce:	683b      	ldr	r3, [r7, #0]
    91d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    91d4:	603b      	str	r3, [r7, #0]

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    91d6:	4b08      	ldr	r3, [pc, #32]	; (91f8 <osc_priv_enable_rcfast+0x3c>)
    91d8:	4a08      	ldr	r2, [pc, #32]	; (91fc <osc_priv_enable_rcfast+0x40>)
    91da:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    91dc:	4b06      	ldr	r3, [pc, #24]	; (91f8 <osc_priv_enable_rcfast+0x3c>)
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
    91de:	683a      	ldr	r2, [r7, #0]
    91e0:	f042 0201 	orr.w	r2, r2, #1
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    91e4:	649a      	str	r2, [r3, #72]	; 0x48
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
	cpu_irq_restore(flags);
    91e6:	6878      	ldr	r0, [r7, #4]
    91e8:	4b05      	ldr	r3, [pc, #20]	; (9200 <osc_priv_enable_rcfast+0x44>)
    91ea:	4798      	blx	r3
}
    91ec:	3708      	adds	r7, #8
    91ee:	46bd      	mov	sp, r7
    91f0:	bd80      	pop	{r7, pc}
    91f2:	bf00      	nop
    91f4:	00009005 	.word	0x00009005
    91f8:	400e0800 	.word	0x400e0800
    91fc:	aa000048 	.word	0xaa000048
    9200:	0000905d 	.word	0x0000905d

00009204 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    9204:	b480      	push	{r7}
    9206:	b083      	sub	sp, #12
    9208:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    920a:	f3ef 8310 	mrs	r3, PRIMASK
    920e:	603b      	str	r3, [r7, #0]
  return(result);
    9210:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    9212:	2b00      	cmp	r3, #0
    9214:	bf14      	ite	ne
    9216:	2300      	movne	r3, #0
    9218:	2301      	moveq	r3, #1
    921a:	b2db      	uxtb	r3, r3
    921c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    921e:	b672      	cpsid	i
    9220:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9224:	4b04      	ldr	r3, [pc, #16]	; (9238 <cpu_irq_save+0x34>)
    9226:	2200      	movs	r2, #0
    9228:	701a      	strb	r2, [r3, #0]
	return flags;
    922a:	687b      	ldr	r3, [r7, #4]
}
    922c:	4618      	mov	r0, r3
    922e:	370c      	adds	r7, #12
    9230:	46bd      	mov	sp, r7
    9232:	f85d 7b04 	ldr.w	r7, [sp], #4
    9236:	4770      	bx	lr
    9238:	200004b0 	.word	0x200004b0

0000923c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    923c:	b480      	push	{r7}
    923e:	b083      	sub	sp, #12
    9240:	af00      	add	r7, sp, #0
    9242:	6078      	str	r0, [r7, #4]
	return (flags);
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	2b00      	cmp	r3, #0
    9248:	bf0c      	ite	eq
    924a:	2300      	moveq	r3, #0
    924c:	2301      	movne	r3, #1
    924e:	b2db      	uxtb	r3, r3
}
    9250:	4618      	mov	r0, r3
    9252:	370c      	adds	r7, #12
    9254:	46bd      	mov	sp, r7
    9256:	f85d 7b04 	ldr.w	r7, [sp], #4
    925a:	4770      	bx	lr

0000925c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    925c:	b580      	push	{r7, lr}
    925e:	b082      	sub	sp, #8
    9260:	af00      	add	r7, sp, #0
    9262:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    9264:	6878      	ldr	r0, [r7, #4]
    9266:	4b07      	ldr	r3, [pc, #28]	; (9284 <cpu_irq_restore+0x28>)
    9268:	4798      	blx	r3
    926a:	4603      	mov	r3, r0
    926c:	2b00      	cmp	r3, #0
    926e:	d005      	beq.n	927c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    9270:	4b05      	ldr	r3, [pc, #20]	; (9288 <cpu_irq_restore+0x2c>)
    9272:	2201      	movs	r2, #1
    9274:	701a      	strb	r2, [r3, #0]
    9276:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    927a:	b662      	cpsie	i
}
    927c:	3708      	adds	r7, #8
    927e:	46bd      	mov	sp, r7
    9280:	bd80      	pop	{r7, pc}
    9282:	bf00      	nop
    9284:	0000923d 	.word	0x0000923d
    9288:	200004b0 	.word	0x200004b0

0000928c <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    928c:	b480      	push	{r7}
    928e:	b083      	sub	sp, #12
    9290:	af00      	add	r7, sp, #0
    9292:	4603      	mov	r3, r0
    9294:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    9296:	79fb      	ldrb	r3, [r7, #7]
    9298:	2b0d      	cmp	r3, #13
    929a:	d82b      	bhi.n	92f4 <dfll_priv_get_source_hz+0x68>
    929c:	a201      	add	r2, pc, #4	; (adr r2, 92a4 <dfll_priv_get_source_hz+0x18>)
    929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    92a2:	bf00      	nop
    92a4:	000092dd 	.word	0x000092dd
    92a8:	000092e1 	.word	0x000092e1
    92ac:	000092f5 	.word	0x000092f5
    92b0:	000092e7 	.word	0x000092e7
    92b4:	000092eb 	.word	0x000092eb
    92b8:	000092f5 	.word	0x000092f5
    92bc:	000092f5 	.word	0x000092f5
    92c0:	000092f5 	.word	0x000092f5
    92c4:	000092f5 	.word	0x000092f5
    92c8:	000092f5 	.word	0x000092f5
    92cc:	000092f5 	.word	0x000092f5
    92d0:	000092f5 	.word	0x000092f5
    92d4:	000092f5 	.word	0x000092f5
    92d8:	000092ef 	.word	0x000092ef
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    92dc:	4b09      	ldr	r3, [pc, #36]	; (9304 <dfll_priv_get_source_hz+0x78>)
    92de:	e00a      	b.n	92f6 <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    92e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    92e4:	e007      	b.n	92f6 <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    92e6:	4b08      	ldr	r3, [pc, #32]	; (9308 <dfll_priv_get_source_hz+0x7c>)
    92e8:	e005      	b.n	92f6 <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    92ea:	4b08      	ldr	r3, [pc, #32]	; (930c <dfll_priv_get_source_hz+0x80>)
    92ec:	e003      	b.n	92f6 <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    92ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    92f2:	e000      	b.n	92f6 <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    92f4:	2300      	movs	r3, #0
	}
}
    92f6:	4618      	mov	r0, r3
    92f8:	370c      	adds	r7, #12
    92fa:	46bd      	mov	sp, r7
    92fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9300:	4770      	bx	lr
    9302:	bf00      	nop
    9304:	0001c138 	.word	0x0001c138
    9308:	00b71b00 	.word	0x00b71b00
    930c:	04c4b400 	.word	0x04c4b400

00009310 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    9310:	b580      	push	{r7, lr}
    9312:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    9314:	2001      	movs	r0, #1
    9316:	4b04      	ldr	r3, [pc, #16]	; (9328 <sysclk_get_main_hz+0x18>)
    9318:	4798      	blx	r3
    931a:	4603      	mov	r3, r0
    931c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    9320:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    9324:	4618      	mov	r0, r3
    9326:	bd80      	pop	{r7, pc}
    9328:	0000928d 	.word	0x0000928d

0000932c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    932c:	b580      	push	{r7, lr}
    932e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    9330:	4b02      	ldr	r3, [pc, #8]	; (933c <sysclk_get_cpu_hz+0x10>)
    9332:	4798      	blx	r3
    9334:	4603      	mov	r3, r0
}
    9336:	4618      	mov	r0, r3
    9338:	bd80      	pop	{r7, pc}
    933a:	bf00      	nop
    933c:	00009311 	.word	0x00009311

00009340 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
    9340:	b580      	push	{r7, lr}
    9342:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
    9344:	4b02      	ldr	r3, [pc, #8]	; (9350 <sysclk_get_pba_hz+0x10>)
    9346:	4798      	blx	r3
    9348:	4603      	mov	r3, r0
}
    934a:	4618      	mov	r0, r3
    934c:	bd80      	pop	{r7, pc}
    934e:	bf00      	nop
    9350:	00009311 	.word	0x00009311

00009354 <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
    9354:	b580      	push	{r7, lr}
    9356:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
    9358:	4b02      	ldr	r3, [pc, #8]	; (9364 <sysclk_get_pbb_hz+0x10>)
    935a:	4798      	blx	r3
    935c:	4603      	mov	r3, r0
}
    935e:	4618      	mov	r0, r3
    9360:	bd80      	pop	{r7, pc}
    9362:	bf00      	nop
    9364:	00009311 	.word	0x00009311

00009368 <sysclk_get_pbc_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus C clock
 *
 * \return Frequency of the Peripheral Bus C clock, in Hz.
 */
static inline uint32_t sysclk_get_pbc_hz(void)
{
    9368:	b580      	push	{r7, lr}
    936a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBC_DIV;
    936c:	4b02      	ldr	r3, [pc, #8]	; (9378 <sysclk_get_pbc_hz+0x10>)
    936e:	4798      	blx	r3
    9370:	4603      	mov	r3, r0
}
    9372:	4618      	mov	r0, r3
    9374:	bd80      	pop	{r7, pc}
    9376:	bf00      	nop
    9378:	00009311 	.word	0x00009311

0000937c <sysclk_get_pbd_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus D clock
 *
 * \return Frequency of the Peripheral Bus D clock, in Hz.
 */
static inline uint32_t sysclk_get_pbd_hz(void)
{
    937c:	b580      	push	{r7, lr}
    937e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBD_DIV;
    9380:	4b02      	ldr	r3, [pc, #8]	; (938c <sysclk_get_pbd_hz+0x10>)
    9382:	4798      	blx	r3
    9384:	4603      	mov	r3, r0
}
    9386:	4618      	mov	r0, r3
    9388:	bd80      	pop	{r7, pc}
    938a:	bf00      	nop
    938c:	00009311 	.word	0x00009311

00009390 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
    9390:	b580      	push	{r7, lr}
    9392:	b082      	sub	sp, #8
    9394:	af00      	add	r7, sp, #0
    9396:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    9398:	2001      	movs	r0, #1
    939a:	6879      	ldr	r1, [r7, #4]
    939c:	4b02      	ldr	r3, [pc, #8]	; (93a8 <sysclk_enable_hsb_module+0x18>)
    939e:	4798      	blx	r3
}
    93a0:	3708      	adds	r7, #8
    93a2:	46bd      	mov	sp, r7
    93a4:	bd80      	pop	{r7, pc}
    93a6:	bf00      	nop
    93a8:	000094a5 	.word	0x000094a5

000093ac <sysclk_disable_hsb_module>:
/**
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
    93ac:	b580      	push	{r7, lr}
    93ae:	b082      	sub	sp, #8
    93b0:	af00      	add	r7, sp, #0
    93b2:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    93b4:	2001      	movs	r0, #1
    93b6:	6879      	ldr	r1, [r7, #4]
    93b8:	4b02      	ldr	r3, [pc, #8]	; (93c4 <sysclk_disable_hsb_module+0x18>)
    93ba:	4798      	blx	r3
}
    93bc:	3708      	adds	r7, #8
    93be:	46bd      	mov	sp, r7
    93c0:	bd80      	pop	{r7, pc}
    93c2:	bf00      	nop
    93c4:	00009509 	.word	0x00009509

000093c8 <sysclk_enable_pbc_module>:
/**
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
    93c8:	b580      	push	{r7, lr}
    93ca:	b082      	sub	sp, #8
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    93d0:	2004      	movs	r0, #4
    93d2:	6879      	ldr	r1, [r7, #4]
    93d4:	4b02      	ldr	r3, [pc, #8]	; (93e0 <sysclk_enable_pbc_module+0x18>)
    93d6:	4798      	blx	r3
}
    93d8:	3708      	adds	r7, #8
    93da:	46bd      	mov	sp, r7
    93dc:	bd80      	pop	{r7, pc}
    93de:	bf00      	nop
    93e0:	000094a5 	.word	0x000094a5

000093e4 <sysclk_disable_pbc_module>:
/**
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
    93e4:	b580      	push	{r7, lr}
    93e6:	b082      	sub	sp, #8
    93e8:	af00      	add	r7, sp, #0
    93ea:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    93ec:	2004      	movs	r0, #4
    93ee:	6879      	ldr	r1, [r7, #4]
    93f0:	4b02      	ldr	r3, [pc, #8]	; (93fc <sysclk_disable_pbc_module+0x18>)
    93f2:	4798      	blx	r3
}
    93f4:	3708      	adds	r7, #8
    93f6:	46bd      	mov	sp, r7
    93f8:	bd80      	pop	{r7, pc}
    93fa:	bf00      	nop
    93fc:	00009509 	.word	0x00009509

00009400 <sysclk_enable_pbd_module>:
/**
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
    9400:	b580      	push	{r7, lr}
    9402:	b082      	sub	sp, #8
    9404:	af00      	add	r7, sp, #0
    9406:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    9408:	2005      	movs	r0, #5
    940a:	6879      	ldr	r1, [r7, #4]
    940c:	4b02      	ldr	r3, [pc, #8]	; (9418 <sysclk_enable_pbd_module+0x18>)
    940e:	4798      	blx	r3
}
    9410:	3708      	adds	r7, #8
    9412:	46bd      	mov	sp, r7
    9414:	bd80      	pop	{r7, pc}
    9416:	bf00      	nop
    9418:	000094a5 	.word	0x000094a5

0000941c <sysclk_disable_pbd_module>:
/**
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
    941c:	b580      	push	{r7, lr}
    941e:	b082      	sub	sp, #8
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    9424:	2005      	movs	r0, #5
    9426:	6879      	ldr	r1, [r7, #4]
    9428:	4b02      	ldr	r3, [pc, #8]	; (9434 <sysclk_disable_pbd_module+0x18>)
    942a:	4798      	blx	r3
}
    942c:	3708      	adds	r7, #8
    942e:	46bd      	mov	sp, r7
    9430:	bd80      	pop	{r7, pc}
    9432:	bf00      	nop
    9434:	00009509 	.word	0x00009509

00009438 <sysclk_enable_pba_divmask>:
/**
 * \brief Enable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
    9438:	b480      	push	{r7}
    943a:	b085      	sub	sp, #20
    943c:	af00      	add	r7, sp, #0
    943e:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    9440:	4b08      	ldr	r3, [pc, #32]	; (9464 <sysclk_enable_pba_divmask+0x2c>)
    9442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9444:	60fb      	str	r3, [r7, #12]
	temp_mask |= mask;
    9446:	68fa      	ldr	r2, [r7, #12]
    9448:	687b      	ldr	r3, [r7, #4]
    944a:	4313      	orrs	r3, r2
    944c:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    944e:	4b05      	ldr	r3, [pc, #20]	; (9464 <sysclk_enable_pba_divmask+0x2c>)
    9450:	4a05      	ldr	r2, [pc, #20]	; (9468 <sysclk_enable_pba_divmask+0x30>)
    9452:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    9454:	4b03      	ldr	r3, [pc, #12]	; (9464 <sysclk_enable_pba_divmask+0x2c>)
    9456:	68fa      	ldr	r2, [r7, #12]
    9458:	641a      	str	r2, [r3, #64]	; 0x40
}
    945a:	3714      	adds	r7, #20
    945c:	46bd      	mov	sp, r7
    945e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9462:	4770      	bx	lr
    9464:	400e0000 	.word	0x400e0000
    9468:	aa000040 	.word	0xaa000040

0000946c <sysclk_disable_pba_divmask>:
/**
 * \brief Disable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
    946c:	b480      	push	{r7}
    946e:	b085      	sub	sp, #20
    9470:	af00      	add	r7, sp, #0
    9472:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    9474:	4b09      	ldr	r3, [pc, #36]	; (949c <sysclk_disable_pba_divmask+0x30>)
    9476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9478:	60fb      	str	r3, [r7, #12]
	temp_mask &= ~mask;
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	43db      	mvns	r3, r3
    947e:	68fa      	ldr	r2, [r7, #12]
    9480:	4013      	ands	r3, r2
    9482:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    9484:	4b05      	ldr	r3, [pc, #20]	; (949c <sysclk_disable_pba_divmask+0x30>)
    9486:	4a06      	ldr	r2, [pc, #24]	; (94a0 <sysclk_disable_pba_divmask+0x34>)
    9488:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    948a:	4b04      	ldr	r3, [pc, #16]	; (949c <sysclk_disable_pba_divmask+0x30>)
    948c:	68fa      	ldr	r2, [r7, #12]
    948e:	641a      	str	r2, [r3, #64]	; 0x40
}
    9490:	3714      	adds	r7, #20
    9492:	46bd      	mov	sp, r7
    9494:	f85d 7b04 	ldr.w	r7, [sp], #4
    9498:	4770      	bx	lr
    949a:	bf00      	nop
    949c:	400e0000 	.word	0x400e0000
    94a0:	aa000040 	.word	0xaa000040

000094a4 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    94a4:	b580      	push	{r7, lr}
    94a6:	b084      	sub	sp, #16
    94a8:	af00      	add	r7, sp, #0
    94aa:	6078      	str	r0, [r7, #4]
    94ac:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    94ae:	4b12      	ldr	r3, [pc, #72]	; (94f8 <sysclk_priv_enable_module+0x54>)
    94b0:	4798      	blx	r3
    94b2:	60f8      	str	r0, [r7, #12]

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    94b4:	687b      	ldr	r3, [r7, #4]
    94b6:	009a      	lsls	r2, r3, #2
    94b8:	4b10      	ldr	r3, [pc, #64]	; (94fc <sysclk_priv_enable_module+0x58>)
    94ba:	4413      	add	r3, r2
    94bc:	681b      	ldr	r3, [r3, #0]
    94be:	60bb      	str	r3, [r7, #8]
	mask |= 1U << module_index;
    94c0:	683b      	ldr	r3, [r7, #0]
    94c2:	2201      	movs	r2, #1
    94c4:	fa02 f303 	lsl.w	r3, r2, r3
    94c8:	68ba      	ldr	r2, [r7, #8]
    94ca:	4313      	orrs	r3, r2
    94cc:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    94ce:	4b0c      	ldr	r3, [pc, #48]	; (9500 <sysclk_priv_enable_module+0x5c>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    94d0:	687a      	ldr	r2, [r7, #4]
    94d2:	3208      	adds	r2, #8
    94d4:	0092      	lsls	r2, r2, #2
    94d6:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    94da:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    94de:	659a      	str	r2, [r3, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	009a      	lsls	r2, r3, #2
    94e4:	4b05      	ldr	r3, [pc, #20]	; (94fc <sysclk_priv_enable_module+0x58>)
    94e6:	4413      	add	r3, r2
    94e8:	68ba      	ldr	r2, [r7, #8]
    94ea:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    94ec:	68f8      	ldr	r0, [r7, #12]
    94ee:	4b05      	ldr	r3, [pc, #20]	; (9504 <sysclk_priv_enable_module+0x60>)
    94f0:	4798      	blx	r3
}
    94f2:	3710      	adds	r7, #16
    94f4:	46bd      	mov	sp, r7
    94f6:	bd80      	pop	{r7, pc}
    94f8:	00009205 	.word	0x00009205
    94fc:	400e0020 	.word	0x400e0020
    9500:	400e0000 	.word	0x400e0000
    9504:	0000925d 	.word	0x0000925d

00009508 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    9508:	b580      	push	{r7, lr}
    950a:	b084      	sub	sp, #16
    950c:	af00      	add	r7, sp, #0
    950e:	6078      	str	r0, [r7, #4]
    9510:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    9512:	4b13      	ldr	r3, [pc, #76]	; (9560 <sysclk_priv_disable_module+0x58>)
    9514:	4798      	blx	r3
    9516:	60f8      	str	r0, [r7, #12]

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	009a      	lsls	r2, r3, #2
    951c:	4b11      	ldr	r3, [pc, #68]	; (9564 <sysclk_priv_disable_module+0x5c>)
    951e:	4413      	add	r3, r2
    9520:	681b      	ldr	r3, [r3, #0]
    9522:	60bb      	str	r3, [r7, #8]
	mask &= ~(1U << module_index);
    9524:	683b      	ldr	r3, [r7, #0]
    9526:	2201      	movs	r2, #1
    9528:	fa02 f303 	lsl.w	r3, r2, r3
    952c:	43db      	mvns	r3, r3
    952e:	68ba      	ldr	r2, [r7, #8]
    9530:	4013      	ands	r3, r2
    9532:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    9534:	4b0c      	ldr	r3, [pc, #48]	; (9568 <sysclk_priv_disable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    9536:	687a      	ldr	r2, [r7, #4]
    9538:	3208      	adds	r2, #8
    953a:	0092      	lsls	r2, r2, #2
    953c:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    9540:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    9544:	659a      	str	r2, [r3, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	009a      	lsls	r2, r3, #2
    954a:	4b06      	ldr	r3, [pc, #24]	; (9564 <sysclk_priv_disable_module+0x5c>)
    954c:	4413      	add	r3, r2
    954e:	68ba      	ldr	r2, [r7, #8]
    9550:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    9552:	68f8      	ldr	r0, [r7, #12]
    9554:	4b05      	ldr	r3, [pc, #20]	; (956c <sysclk_priv_disable_module+0x64>)
    9556:	4798      	blx	r3
}
    9558:	3710      	adds	r7, #16
    955a:	46bd      	mov	sp, r7
    955c:	bd80      	pop	{r7, pc}
    955e:	bf00      	nop
    9560:	00009205 	.word	0x00009205
    9564:	400e0020 	.word	0x400e0020
    9568:	400e0000 	.word	0x400e0000
    956c:	0000925d 	.word	0x0000925d

00009570 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    9570:	b580      	push	{r7, lr}
    9572:	b084      	sub	sp, #16
    9574:	af00      	add	r7, sp, #0
    9576:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    9578:	4b09      	ldr	r3, [pc, #36]	; (95a0 <sysclk_enable_pba_module+0x30>)
    957a:	4798      	blx	r3
    957c:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    957e:	4b09      	ldr	r3, [pc, #36]	; (95a4 <sysclk_enable_pba_module+0x34>)
    9580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9582:	2b00      	cmp	r3, #0
    9584:	d102      	bne.n	958c <sysclk_enable_pba_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBA_BRIDGE);
    9586:	2005      	movs	r0, #5
    9588:	4b07      	ldr	r3, [pc, #28]	; (95a8 <sysclk_enable_pba_module+0x38>)
    958a:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    958c:	68f8      	ldr	r0, [r7, #12]
    958e:	4b07      	ldr	r3, [pc, #28]	; (95ac <sysclk_enable_pba_module+0x3c>)
    9590:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    9592:	2002      	movs	r0, #2
    9594:	6879      	ldr	r1, [r7, #4]
    9596:	4b06      	ldr	r3, [pc, #24]	; (95b0 <sysclk_enable_pba_module+0x40>)
    9598:	4798      	blx	r3
}
    959a:	3710      	adds	r7, #16
    959c:	46bd      	mov	sp, r7
    959e:	bd80      	pop	{r7, pc}
    95a0:	00009205 	.word	0x00009205
    95a4:	400e0000 	.word	0x400e0000
    95a8:	00009391 	.word	0x00009391
    95ac:	0000925d 	.word	0x0000925d
    95b0:	000094a5 	.word	0x000094a5

000095b4 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    95b4:	b580      	push	{r7, lr}
    95b6:	b084      	sub	sp, #16
    95b8:	af00      	add	r7, sp, #0
    95ba:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    95bc:	2002      	movs	r0, #2
    95be:	6879      	ldr	r1, [r7, #4]
    95c0:	4b08      	ldr	r3, [pc, #32]	; (95e4 <sysclk_disable_pba_module+0x30>)
    95c2:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    95c4:	4b08      	ldr	r3, [pc, #32]	; (95e8 <sysclk_disable_pba_module+0x34>)
    95c6:	4798      	blx	r3
    95c8:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    95ca:	4b08      	ldr	r3, [pc, #32]	; (95ec <sysclk_disable_pba_module+0x38>)
    95cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    95ce:	2b00      	cmp	r3, #0
    95d0:	d102      	bne.n	95d8 <sysclk_disable_pba_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
    95d2:	2005      	movs	r0, #5
    95d4:	4b06      	ldr	r3, [pc, #24]	; (95f0 <sysclk_disable_pba_module+0x3c>)
    95d6:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    95d8:	68f8      	ldr	r0, [r7, #12]
    95da:	4b06      	ldr	r3, [pc, #24]	; (95f4 <sysclk_disable_pba_module+0x40>)
    95dc:	4798      	blx	r3
}
    95de:	3710      	adds	r7, #16
    95e0:	46bd      	mov	sp, r7
    95e2:	bd80      	pop	{r7, pc}
    95e4:	00009509 	.word	0x00009509
    95e8:	00009205 	.word	0x00009205
    95ec:	400e0000 	.word	0x400e0000
    95f0:	000093ad 	.word	0x000093ad
    95f4:	0000925d 	.word	0x0000925d

000095f8 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    95f8:	b580      	push	{r7, lr}
    95fa:	b084      	sub	sp, #16
    95fc:	af00      	add	r7, sp, #0
    95fe:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    9600:	4b09      	ldr	r3, [pc, #36]	; (9628 <sysclk_enable_pbb_module+0x30>)
    9602:	4798      	blx	r3
    9604:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    9606:	4b09      	ldr	r3, [pc, #36]	; (962c <sysclk_enable_pbb_module+0x34>)
    9608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    960a:	2b00      	cmp	r3, #0
    960c:	d102      	bne.n	9614 <sysclk_enable_pbb_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
    960e:	2006      	movs	r0, #6
    9610:	4b07      	ldr	r3, [pc, #28]	; (9630 <sysclk_enable_pbb_module+0x38>)
    9612:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    9614:	68f8      	ldr	r0, [r7, #12]
    9616:	4b07      	ldr	r3, [pc, #28]	; (9634 <sysclk_enable_pbb_module+0x3c>)
    9618:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    961a:	2003      	movs	r0, #3
    961c:	6879      	ldr	r1, [r7, #4]
    961e:	4b06      	ldr	r3, [pc, #24]	; (9638 <sysclk_enable_pbb_module+0x40>)
    9620:	4798      	blx	r3
}
    9622:	3710      	adds	r7, #16
    9624:	46bd      	mov	sp, r7
    9626:	bd80      	pop	{r7, pc}
    9628:	00009205 	.word	0x00009205
    962c:	400e0000 	.word	0x400e0000
    9630:	00009391 	.word	0x00009391
    9634:	0000925d 	.word	0x0000925d
    9638:	000094a5 	.word	0x000094a5

0000963c <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    963c:	b580      	push	{r7, lr}
    963e:	b084      	sub	sp, #16
    9640:	af00      	add	r7, sp, #0
    9642:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    9644:	2003      	movs	r0, #3
    9646:	6879      	ldr	r1, [r7, #4]
    9648:	4b08      	ldr	r3, [pc, #32]	; (966c <sysclk_disable_pbb_module+0x30>)
    964a:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    964c:	4b08      	ldr	r3, [pc, #32]	; (9670 <sysclk_disable_pbb_module+0x34>)
    964e:	4798      	blx	r3
    9650:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    9652:	4b08      	ldr	r3, [pc, #32]	; (9674 <sysclk_disable_pbb_module+0x38>)
    9654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9656:	2b00      	cmp	r3, #0
    9658:	d102      	bne.n	9660 <sysclk_disable_pbb_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
    965a:	2006      	movs	r0, #6
    965c:	4b06      	ldr	r3, [pc, #24]	; (9678 <sysclk_disable_pbb_module+0x3c>)
    965e:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    9660:	68f8      	ldr	r0, [r7, #12]
    9662:	4b06      	ldr	r3, [pc, #24]	; (967c <sysclk_disable_pbb_module+0x40>)
    9664:	4798      	blx	r3
}
    9666:	3710      	adds	r7, #16
    9668:	46bd      	mov	sp, r7
    966a:	bd80      	pop	{r7, pc}
    966c:	00009509 	.word	0x00009509
    9670:	00009205 	.word	0x00009205
    9674:	400e0000 	.word	0x400e0000
    9678:	000093ad 	.word	0x000093ad
    967c:	0000925d 	.word	0x0000925d

00009680 <sysclk_get_peripheral_bus_hz>:
 * \param module Pointer to the module's base address.
 *
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
    9680:	b580      	push	{r7, lr}
    9682:	b082      	sub	sp, #8
    9684:	af00      	add	r7, sp, #0
    9686:	6078      	str	r0, [r7, #4]
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    9688:	687b      	ldr	r3, [r7, #4]
    968a:	4a6c      	ldr	r2, [pc, #432]	; (983c <sysclk_get_peripheral_bus_hz+0x1bc>)
    968c:	4293      	cmp	r3, r2
    968e:	f000 80c0 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9692:	4a6a      	ldr	r2, [pc, #424]	; (983c <sysclk_get_peripheral_bus_hz+0x1bc>)
    9694:	4293      	cmp	r3, r2
    9696:	d863      	bhi.n	9760 <sysclk_get_peripheral_bus_hz+0xe0>
    9698:	4a69      	ldr	r2, [pc, #420]	; (9840 <sysclk_get_peripheral_bus_hz+0x1c0>)
    969a:	4293      	cmp	r3, r2
    969c:	f000 80b9 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96a0:	4a67      	ldr	r2, [pc, #412]	; (9840 <sysclk_get_peripheral_bus_hz+0x1c0>)
    96a2:	4293      	cmp	r3, r2
    96a4:	d830      	bhi.n	9708 <sysclk_get_peripheral_bus_hz+0x88>
    96a6:	4a67      	ldr	r2, [pc, #412]	; (9844 <sysclk_get_peripheral_bus_hz+0x1c4>)
    96a8:	4293      	cmp	r3, r2
    96aa:	f000 80b2 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96ae:	4a65      	ldr	r2, [pc, #404]	; (9844 <sysclk_get_peripheral_bus_hz+0x1c4>)
    96b0:	4293      	cmp	r3, r2
    96b2:	d814      	bhi.n	96de <sysclk_get_peripheral_bus_hz+0x5e>
    96b4:	4a64      	ldr	r2, [pc, #400]	; (9848 <sysclk_get_peripheral_bus_hz+0x1c8>)
    96b6:	4293      	cmp	r3, r2
    96b8:	f000 80ab 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96bc:	4a62      	ldr	r2, [pc, #392]	; (9848 <sysclk_get_peripheral_bus_hz+0x1c8>)
    96be:	4293      	cmp	r3, r2
    96c0:	d804      	bhi.n	96cc <sysclk_get_peripheral_bus_hz+0x4c>
    96c2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    96c6:	f000 80a4 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96ca:	e0b2      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    96cc:	4a5f      	ldr	r2, [pc, #380]	; (984c <sysclk_get_peripheral_bus_hz+0x1cc>)
    96ce:	4293      	cmp	r3, r2
    96d0:	f000 809f 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96d4:	4a5e      	ldr	r2, [pc, #376]	; (9850 <sysclk_get_peripheral_bus_hz+0x1d0>)
    96d6:	4293      	cmp	r3, r2
    96d8:	f000 809b 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96dc:	e0a9      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    96de:	4a5d      	ldr	r2, [pc, #372]	; (9854 <sysclk_get_peripheral_bus_hz+0x1d4>)
    96e0:	4293      	cmp	r3, r2
    96e2:	f000 8096 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96e6:	4a5b      	ldr	r2, [pc, #364]	; (9854 <sysclk_get_peripheral_bus_hz+0x1d4>)
    96e8:	4293      	cmp	r3, r2
    96ea:	d804      	bhi.n	96f6 <sysclk_get_peripheral_bus_hz+0x76>
    96ec:	4a5a      	ldr	r2, [pc, #360]	; (9858 <sysclk_get_peripheral_bus_hz+0x1d8>)
    96ee:	4293      	cmp	r3, r2
    96f0:	f000 808f 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96f4:	e09d      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    96f6:	4a59      	ldr	r2, [pc, #356]	; (985c <sysclk_get_peripheral_bus_hz+0x1dc>)
    96f8:	4293      	cmp	r3, r2
    96fa:	f000 808a 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    96fe:	4a58      	ldr	r2, [pc, #352]	; (9860 <sysclk_get_peripheral_bus_hz+0x1e0>)
    9700:	4293      	cmp	r3, r2
    9702:	f000 8086 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9706:	e094      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    9708:	4a56      	ldr	r2, [pc, #344]	; (9864 <sysclk_get_peripheral_bus_hz+0x1e4>)
    970a:	4293      	cmp	r3, r2
    970c:	f000 8081 	beq.w	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9710:	4a54      	ldr	r2, [pc, #336]	; (9864 <sysclk_get_peripheral_bus_hz+0x1e4>)
    9712:	4293      	cmp	r3, r2
    9714:	d810      	bhi.n	9738 <sysclk_get_peripheral_bus_hz+0xb8>
    9716:	4a54      	ldr	r2, [pc, #336]	; (9868 <sysclk_get_peripheral_bus_hz+0x1e8>)
    9718:	4293      	cmp	r3, r2
    971a:	d07a      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    971c:	4a52      	ldr	r2, [pc, #328]	; (9868 <sysclk_get_peripheral_bus_hz+0x1e8>)
    971e:	4293      	cmp	r3, r2
    9720:	d803      	bhi.n	972a <sysclk_get_peripheral_bus_hz+0xaa>
    9722:	4a52      	ldr	r2, [pc, #328]	; (986c <sysclk_get_peripheral_bus_hz+0x1ec>)
    9724:	4293      	cmp	r3, r2
    9726:	d074      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9728:	e083      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    972a:	4a51      	ldr	r2, [pc, #324]	; (9870 <sysclk_get_peripheral_bus_hz+0x1f0>)
    972c:	4293      	cmp	r3, r2
    972e:	d070      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9730:	4a50      	ldr	r2, [pc, #320]	; (9874 <sysclk_get_peripheral_bus_hz+0x1f4>)
    9732:	4293      	cmp	r3, r2
    9734:	d06d      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9736:	e07c      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    9738:	4a4f      	ldr	r2, [pc, #316]	; (9878 <sysclk_get_peripheral_bus_hz+0x1f8>)
    973a:	4293      	cmp	r3, r2
    973c:	d069      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    973e:	4a4e      	ldr	r2, [pc, #312]	; (9878 <sysclk_get_peripheral_bus_hz+0x1f8>)
    9740:	4293      	cmp	r3, r2
    9742:	d806      	bhi.n	9752 <sysclk_get_peripheral_bus_hz+0xd2>
    9744:	4a4d      	ldr	r2, [pc, #308]	; (987c <sysclk_get_peripheral_bus_hz+0x1fc>)
    9746:	4293      	cmp	r3, r2
    9748:	d063      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    974a:	4a4d      	ldr	r2, [pc, #308]	; (9880 <sysclk_get_peripheral_bus_hz+0x200>)
    974c:	4293      	cmp	r3, r2
    974e:	d060      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9750:	e06f      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    9752:	4a4c      	ldr	r2, [pc, #304]	; (9884 <sysclk_get_peripheral_bus_hz+0x204>)
    9754:	4293      	cmp	r3, r2
    9756:	d05c      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    9758:	4a4b      	ldr	r2, [pc, #300]	; (9888 <sysclk_get_peripheral_bus_hz+0x208>)
    975a:	4293      	cmp	r3, r2
    975c:	d059      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    975e:	e068      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    9760:	4a4a      	ldr	r2, [pc, #296]	; (988c <sysclk_get_peripheral_bus_hz+0x20c>)
    9762:	4293      	cmp	r3, r2
    9764:	d05d      	beq.n	9822 <sysclk_get_peripheral_bus_hz+0x1a2>
    9766:	4a49      	ldr	r2, [pc, #292]	; (988c <sysclk_get_peripheral_bus_hz+0x20c>)
    9768:	4293      	cmp	r3, r2
    976a:	d827      	bhi.n	97bc <sysclk_get_peripheral_bus_hz+0x13c>
    976c:	4a48      	ldr	r2, [pc, #288]	; (9890 <sysclk_get_peripheral_bus_hz+0x210>)
    976e:	4293      	cmp	r3, r2
    9770:	d053      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    9772:	4a47      	ldr	r2, [pc, #284]	; (9890 <sysclk_get_peripheral_bus_hz+0x210>)
    9774:	4293      	cmp	r3, r2
    9776:	d810      	bhi.n	979a <sysclk_get_peripheral_bus_hz+0x11a>
    9778:	4a46      	ldr	r2, [pc, #280]	; (9894 <sysclk_get_peripheral_bus_hz+0x214>)
    977a:	4293      	cmp	r3, r2
    977c:	d049      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    977e:	4a45      	ldr	r2, [pc, #276]	; (9894 <sysclk_get_peripheral_bus_hz+0x214>)
    9780:	4293      	cmp	r3, r2
    9782:	d803      	bhi.n	978c <sysclk_get_peripheral_bus_hz+0x10c>
    9784:	4a44      	ldr	r2, [pc, #272]	; (9898 <sysclk_get_peripheral_bus_hz+0x218>)
    9786:	4293      	cmp	r3, r2
    9788:	d043      	beq.n	9812 <sysclk_get_peripheral_bus_hz+0x192>
    978a:	e052      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    978c:	4a43      	ldr	r2, [pc, #268]	; (989c <sysclk_get_peripheral_bus_hz+0x21c>)
    978e:	4293      	cmp	r3, r2
    9790:	d043      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    9792:	4a43      	ldr	r2, [pc, #268]	; (98a0 <sysclk_get_peripheral_bus_hz+0x220>)
    9794:	4293      	cmp	r3, r2
    9796:	d040      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    9798:	e04b      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    979a:	4a42      	ldr	r2, [pc, #264]	; (98a4 <sysclk_get_peripheral_bus_hz+0x224>)
    979c:	4293      	cmp	r3, r2
    979e:	d03c      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    97a0:	4a40      	ldr	r2, [pc, #256]	; (98a4 <sysclk_get_peripheral_bus_hz+0x224>)
    97a2:	4293      	cmp	r3, r2
    97a4:	d803      	bhi.n	97ae <sysclk_get_peripheral_bus_hz+0x12e>
    97a6:	4a40      	ldr	r2, [pc, #256]	; (98a8 <sysclk_get_peripheral_bus_hz+0x228>)
    97a8:	4293      	cmp	r3, r2
    97aa:	d036      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    97ac:	e041      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    97ae:	4a3f      	ldr	r2, [pc, #252]	; (98ac <sysclk_get_peripheral_bus_hz+0x22c>)
    97b0:	4293      	cmp	r3, r2
    97b2:	d032      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    97b4:	4a3e      	ldr	r2, [pc, #248]	; (98b0 <sysclk_get_peripheral_bus_hz+0x230>)
    97b6:	4293      	cmp	r3, r2
    97b8:	d02f      	beq.n	981a <sysclk_get_peripheral_bus_hz+0x19a>
    97ba:	e03a      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    97bc:	4a3d      	ldr	r2, [pc, #244]	; (98b4 <sysclk_get_peripheral_bus_hz+0x234>)
    97be:	4293      	cmp	r3, r2
    97c0:	d033      	beq.n	982a <sysclk_get_peripheral_bus_hz+0x1aa>
    97c2:	4a3c      	ldr	r2, [pc, #240]	; (98b4 <sysclk_get_peripheral_bus_hz+0x234>)
    97c4:	4293      	cmp	r3, r2
    97c6:	d810      	bhi.n	97ea <sysclk_get_peripheral_bus_hz+0x16a>
    97c8:	4a3b      	ldr	r2, [pc, #236]	; (98b8 <sysclk_get_peripheral_bus_hz+0x238>)
    97ca:	4293      	cmp	r3, r2
    97cc:	d029      	beq.n	9822 <sysclk_get_peripheral_bus_hz+0x1a2>
    97ce:	4a3a      	ldr	r2, [pc, #232]	; (98b8 <sysclk_get_peripheral_bus_hz+0x238>)
    97d0:	4293      	cmp	r3, r2
    97d2:	d803      	bhi.n	97dc <sysclk_get_peripheral_bus_hz+0x15c>
    97d4:	4a39      	ldr	r2, [pc, #228]	; (98bc <sysclk_get_peripheral_bus_hz+0x23c>)
    97d6:	4293      	cmp	r3, r2
    97d8:	d023      	beq.n	9822 <sysclk_get_peripheral_bus_hz+0x1a2>
    97da:	e02a      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    97dc:	4a38      	ldr	r2, [pc, #224]	; (98c0 <sysclk_get_peripheral_bus_hz+0x240>)
    97de:	4293      	cmp	r3, r2
    97e0:	d01f      	beq.n	9822 <sysclk_get_peripheral_bus_hz+0x1a2>
    97e2:	4a38      	ldr	r2, [pc, #224]	; (98c4 <sysclk_get_peripheral_bus_hz+0x244>)
    97e4:	4293      	cmp	r3, r2
    97e6:	d01c      	beq.n	9822 <sysclk_get_peripheral_bus_hz+0x1a2>
    97e8:	e023      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    97ea:	4a37      	ldr	r2, [pc, #220]	; (98c8 <sysclk_get_peripheral_bus_hz+0x248>)
    97ec:	4293      	cmp	r3, r2
    97ee:	d01c      	beq.n	982a <sysclk_get_peripheral_bus_hz+0x1aa>
    97f0:	4a35      	ldr	r2, [pc, #212]	; (98c8 <sysclk_get_peripheral_bus_hz+0x248>)
    97f2:	4293      	cmp	r3, r2
    97f4:	d806      	bhi.n	9804 <sysclk_get_peripheral_bus_hz+0x184>
    97f6:	4a35      	ldr	r2, [pc, #212]	; (98cc <sysclk_get_peripheral_bus_hz+0x24c>)
    97f8:	4293      	cmp	r3, r2
    97fa:	d016      	beq.n	982a <sysclk_get_peripheral_bus_hz+0x1aa>
    97fc:	4a34      	ldr	r2, [pc, #208]	; (98d0 <sysclk_get_peripheral_bus_hz+0x250>)
    97fe:	4293      	cmp	r3, r2
    9800:	d013      	beq.n	982a <sysclk_get_peripheral_bus_hz+0x1aa>
    9802:	e016      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
    9804:	4a33      	ldr	r2, [pc, #204]	; (98d4 <sysclk_get_peripheral_bus_hz+0x254>)
    9806:	4293      	cmp	r3, r2
    9808:	d00f      	beq.n	982a <sysclk_get_peripheral_bus_hz+0x1aa>
    980a:	4a33      	ldr	r2, [pc, #204]	; (98d8 <sysclk_get_peripheral_bus_hz+0x258>)
    980c:	4293      	cmp	r3, r2
    980e:	d00c      	beq.n	982a <sysclk_get_peripheral_bus_hz+0x1aa>
    9810:	e00f      	b.n	9832 <sysclk_get_peripheral_bus_hz+0x1b2>
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
    9812:	4b32      	ldr	r3, [pc, #200]	; (98dc <sysclk_get_peripheral_bus_hz+0x25c>)
    9814:	4798      	blx	r3
    9816:	4603      	mov	r3, r0
    9818:	e00c      	b.n	9834 <sysclk_get_peripheral_bus_hz+0x1b4>
	case HMATRIX_ADDR:
	case PDCA_ADDR:
	case CRCCU_ADDR:
	case USBC_ADDR:
	case PEVC_ADDR:
		return sysclk_get_pbb_hz();
    981a:	4b31      	ldr	r3, [pc, #196]	; (98e0 <sysclk_get_peripheral_bus_hz+0x260>)
    981c:	4798      	blx	r3
    981e:	4603      	mov	r3, r0
    9820:	e008      	b.n	9834 <sysclk_get_peripheral_bus_hz+0x1b4>
	case PM_ADDR:
	case CHIPID_ADDR:
	case SCIF_ADDR:
	case FREQM_ADDR:
	case GPIO_ADDR:
		return sysclk_get_pbc_hz();
    9822:	4b30      	ldr	r3, [pc, #192]	; (98e4 <sysclk_get_peripheral_bus_hz+0x264>)
    9824:	4798      	blx	r3
    9826:	4603      	mov	r3, r0
    9828:	e004      	b.n	9834 <sysclk_get_peripheral_bus_hz+0x1b4>
	case BSCIF_ADDR:
	case AST_ADDR:
	case WDT_ADDR:
	case EIC_ADDR:
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();
    982a:	4b2f      	ldr	r3, [pc, #188]	; (98e8 <sysclk_get_peripheral_bus_hz+0x268>)
    982c:	4798      	blx	r3
    982e:	4603      	mov	r3, r0
    9830:	e000      	b.n	9834 <sysclk_get_peripheral_bus_hz+0x1b4>

	default:
		Assert(false);
		return 0;
    9832:	2300      	movs	r3, #0
	}
}
    9834:	4618      	mov	r0, r3
    9836:	3708      	adds	r7, #8
    9838:	46bd      	mov	sp, r7
    983a:	bd80      	pop	{r7, pc}
    983c:	40078000 	.word	0x40078000
    9840:	40028000 	.word	0x40028000
    9844:	40018000 	.word	0x40018000
    9848:	40008000 	.word	0x40008000
    984c:	40010000 	.word	0x40010000
    9850:	40014000 	.word	0x40014000
    9854:	4001c000 	.word	0x4001c000
    9858:	40018400 	.word	0x40018400
    985c:	4001c400 	.word	0x4001c400
    9860:	40024000 	.word	0x40024000
    9864:	40040000 	.word	0x40040000
    9868:	40030000 	.word	0x40030000
    986c:	4002c000 	.word	0x4002c000
    9870:	40038000 	.word	0x40038000
    9874:	4003c000 	.word	0x4003c000
    9878:	40068000 	.word	0x40068000
    987c:	40060000 	.word	0x40060000
    9880:	40064000 	.word	0x40064000
    9884:	4006c000 	.word	0x4006c000
    9888:	40070000 	.word	0x40070000
    988c:	400e0000 	.word	0x400e0000
    9890:	400a1000 	.word	0x400a1000
    9894:	40080000 	.word	0x40080000
    9898:	4007c000 	.word	0x4007c000
    989c:	400a0000 	.word	0x400a0000
    98a0:	400a0400 	.word	0x400a0400
    98a4:	400a4000 	.word	0x400a4000
    98a8:	400a2000 	.word	0x400a2000
    98ac:	400a5000 	.word	0x400a5000
    98b0:	400a6000 	.word	0x400a6000
    98b4:	400f0000 	.word	0x400f0000
    98b8:	400e0800 	.word	0x400e0800
    98bc:	400e0400 	.word	0x400e0400
    98c0:	400e0c00 	.word	0x400e0c00
    98c4:	400e1000 	.word	0x400e1000
    98c8:	400f0c00 	.word	0x400f0c00
    98cc:	400f0400 	.word	0x400f0400
    98d0:	400f0800 	.word	0x400f0800
    98d4:	400f1000 	.word	0x400f1000
    98d8:	400f1400 	.word	0x400f1400
    98dc:	00009341 	.word	0x00009341
    98e0:	00009355 	.word	0x00009355
    98e4:	00009369 	.word	0x00009369
    98e8:	0000937d 	.word	0x0000937d

000098ec <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    98ec:	b580      	push	{r7, lr}
    98ee:	b082      	sub	sp, #8
    98f0:	af00      	add	r7, sp, #0
    98f2:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    98f4:	687b      	ldr	r3, [r7, #4]
    98f6:	4aa9      	ldr	r2, [pc, #676]	; (9b9c <sysclk_enable_peripheral_clock+0x2b0>)
    98f8:	4293      	cmp	r3, r2
    98fa:	f000 8146 	beq.w	9b8a <sysclk_enable_peripheral_clock+0x29e>
    98fe:	4aa7      	ldr	r2, [pc, #668]	; (9b9c <sysclk_enable_peripheral_clock+0x2b0>)
    9900:	4293      	cmp	r3, r2
    9902:	d86c      	bhi.n	99de <sysclk_enable_peripheral_clock+0xf2>
    9904:	4aa6      	ldr	r2, [pc, #664]	; (9ba0 <sysclk_enable_peripheral_clock+0x2b4>)
    9906:	4293      	cmp	r3, r2
    9908:	f000 810a 	beq.w	9b20 <sysclk_enable_peripheral_clock+0x234>
    990c:	4aa4      	ldr	r2, [pc, #656]	; (9ba0 <sysclk_enable_peripheral_clock+0x2b4>)
    990e:	4293      	cmp	r3, r2
    9910:	d830      	bhi.n	9974 <sysclk_enable_peripheral_clock+0x88>
    9912:	4aa4      	ldr	r2, [pc, #656]	; (9ba4 <sysclk_enable_peripheral_clock+0x2b8>)
    9914:	4293      	cmp	r3, r2
    9916:	f000 80ec 	beq.w	9af2 <sysclk_enable_peripheral_clock+0x206>
    991a:	4aa2      	ldr	r2, [pc, #648]	; (9ba4 <sysclk_enable_peripheral_clock+0x2b8>)
    991c:	4293      	cmp	r3, r2
    991e:	d814      	bhi.n	994a <sysclk_enable_peripheral_clock+0x5e>
    9920:	4aa1      	ldr	r2, [pc, #644]	; (9ba8 <sysclk_enable_peripheral_clock+0x2bc>)
    9922:	4293      	cmp	r3, r2
    9924:	f000 80d3 	beq.w	9ace <sysclk_enable_peripheral_clock+0x1e2>
    9928:	4a9f      	ldr	r2, [pc, #636]	; (9ba8 <sysclk_enable_peripheral_clock+0x2bc>)
    992a:	4293      	cmp	r3, r2
    992c:	d804      	bhi.n	9938 <sysclk_enable_peripheral_clock+0x4c>
    992e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    9932:	f000 80c8 	beq.w	9ac6 <sysclk_enable_peripheral_clock+0x1da>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9936:	e1e4      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9938:	4a9c      	ldr	r2, [pc, #624]	; (9bac <sysclk_enable_peripheral_clock+0x2c0>)
    993a:	4293      	cmp	r3, r2
    993c:	f000 80cb 	beq.w	9ad6 <sysclk_enable_peripheral_clock+0x1ea>
    9940:	4a9b      	ldr	r2, [pc, #620]	; (9bb0 <sysclk_enable_peripheral_clock+0x2c4>)
    9942:	4293      	cmp	r3, r2
    9944:	f000 80ce 	beq.w	9ae4 <sysclk_enable_peripheral_clock+0x1f8>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9948:	e1db      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    994a:	4a9a      	ldr	r2, [pc, #616]	; (9bb4 <sysclk_enable_peripheral_clock+0x2c8>)
    994c:	4293      	cmp	r3, r2
    994e:	f000 80d8 	beq.w	9b02 <sysclk_enable_peripheral_clock+0x216>
    9952:	4a98      	ldr	r2, [pc, #608]	; (9bb4 <sysclk_enable_peripheral_clock+0x2c8>)
    9954:	4293      	cmp	r3, r2
    9956:	d804      	bhi.n	9962 <sysclk_enable_peripheral_clock+0x76>
    9958:	4a97      	ldr	r2, [pc, #604]	; (9bb8 <sysclk_enable_peripheral_clock+0x2cc>)
    995a:	4293      	cmp	r3, r2
    995c:	f000 80cd 	beq.w	9afa <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9960:	e1cf      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9962:	4a96      	ldr	r2, [pc, #600]	; (9bbc <sysclk_enable_peripheral_clock+0x2d0>)
    9964:	4293      	cmp	r3, r2
    9966:	f000 80d0 	beq.w	9b0a <sysclk_enable_peripheral_clock+0x21e>
    996a:	4a95      	ldr	r2, [pc, #596]	; (9bc0 <sysclk_enable_peripheral_clock+0x2d4>)
    996c:	4293      	cmp	r3, r2
    996e:	f000 80d0 	beq.w	9b12 <sysclk_enable_peripheral_clock+0x226>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9972:	e1c6      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9974:	4a93      	ldr	r2, [pc, #588]	; (9bc4 <sysclk_enable_peripheral_clock+0x2d8>)
    9976:	4293      	cmp	r3, r2
    9978:	f000 80ef 	beq.w	9b5a <sysclk_enable_peripheral_clock+0x26e>
    997c:	4a91      	ldr	r2, [pc, #580]	; (9bc4 <sysclk_enable_peripheral_clock+0x2d8>)
    997e:	4293      	cmp	r3, r2
    9980:	d814      	bhi.n	99ac <sysclk_enable_peripheral_clock+0xc0>
    9982:	4a91      	ldr	r2, [pc, #580]	; (9bc8 <sysclk_enable_peripheral_clock+0x2dc>)
    9984:	4293      	cmp	r3, r2
    9986:	f000 80d9 	beq.w	9b3c <sysclk_enable_peripheral_clock+0x250>
    998a:	4a8f      	ldr	r2, [pc, #572]	; (9bc8 <sysclk_enable_peripheral_clock+0x2dc>)
    998c:	4293      	cmp	r3, r2
    998e:	d804      	bhi.n	999a <sysclk_enable_peripheral_clock+0xae>
    9990:	4a8e      	ldr	r2, [pc, #568]	; (9bcc <sysclk_enable_peripheral_clock+0x2e0>)
    9992:	4293      	cmp	r3, r2
    9994:	f000 80cb 	beq.w	9b2e <sysclk_enable_peripheral_clock+0x242>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9998:	e1b3      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    999a:	4a8d      	ldr	r2, [pc, #564]	; (9bd0 <sysclk_enable_peripheral_clock+0x2e4>)
    999c:	4293      	cmp	r3, r2
    999e:	f000 80d4 	beq.w	9b4a <sysclk_enable_peripheral_clock+0x25e>
    99a2:	4a8c      	ldr	r2, [pc, #560]	; (9bd4 <sysclk_enable_peripheral_clock+0x2e8>)
    99a4:	4293      	cmp	r3, r2
    99a6:	f000 80d4 	beq.w	9b52 <sysclk_enable_peripheral_clock+0x266>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    99aa:	e1aa      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    99ac:	4a8a      	ldr	r2, [pc, #552]	; (9bd8 <sysclk_enable_peripheral_clock+0x2ec>)
    99ae:	4293      	cmp	r3, r2
    99b0:	f000 80df 	beq.w	9b72 <sysclk_enable_peripheral_clock+0x286>
    99b4:	4a88      	ldr	r2, [pc, #544]	; (9bd8 <sysclk_enable_peripheral_clock+0x2ec>)
    99b6:	4293      	cmp	r3, r2
    99b8:	d808      	bhi.n	99cc <sysclk_enable_peripheral_clock+0xe0>
    99ba:	4a88      	ldr	r2, [pc, #544]	; (9bdc <sysclk_enable_peripheral_clock+0x2f0>)
    99bc:	4293      	cmp	r3, r2
    99be:	f000 80d0 	beq.w	9b62 <sysclk_enable_peripheral_clock+0x276>
    99c2:	4a87      	ldr	r2, [pc, #540]	; (9be0 <sysclk_enable_peripheral_clock+0x2f4>)
    99c4:	4293      	cmp	r3, r2
    99c6:	f000 80d0 	beq.w	9b6a <sysclk_enable_peripheral_clock+0x27e>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    99ca:	e19a      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    99cc:	4a85      	ldr	r2, [pc, #532]	; (9be4 <sysclk_enable_peripheral_clock+0x2f8>)
    99ce:	4293      	cmp	r3, r2
    99d0:	f000 80d3 	beq.w	9b7a <sysclk_enable_peripheral_clock+0x28e>
    99d4:	4a84      	ldr	r2, [pc, #528]	; (9be8 <sysclk_enable_peripheral_clock+0x2fc>)
    99d6:	4293      	cmp	r3, r2
    99d8:	f000 80d3 	beq.w	9b82 <sysclk_enable_peripheral_clock+0x296>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    99dc:	e191      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    99de:	4a83      	ldr	r2, [pc, #524]	; (9bec <sysclk_enable_peripheral_clock+0x300>)
    99e0:	4293      	cmp	r3, r2
    99e2:	f000 8162 	beq.w	9caa <sysclk_enable_peripheral_clock+0x3be>
    99e6:	4a81      	ldr	r2, [pc, #516]	; (9bec <sysclk_enable_peripheral_clock+0x300>)
    99e8:	4293      	cmp	r3, r2
    99ea:	d833      	bhi.n	9a54 <sysclk_enable_peripheral_clock+0x168>
    99ec:	4a80      	ldr	r2, [pc, #512]	; (9bf0 <sysclk_enable_peripheral_clock+0x304>)
    99ee:	4293      	cmp	r3, r2
    99f0:	f000 813e 	beq.w	9c70 <sysclk_enable_peripheral_clock+0x384>
    99f4:	4a7e      	ldr	r2, [pc, #504]	; (9bf0 <sysclk_enable_peripheral_clock+0x304>)
    99f6:	4293      	cmp	r3, r2
    99f8:	d814      	bhi.n	9a24 <sysclk_enable_peripheral_clock+0x138>
    99fa:	4a7e      	ldr	r2, [pc, #504]	; (9bf4 <sysclk_enable_peripheral_clock+0x308>)
    99fc:	4293      	cmp	r3, r2
    99fe:	f000 8125 	beq.w	9c4c <sysclk_enable_peripheral_clock+0x360>
    9a02:	4a7c      	ldr	r2, [pc, #496]	; (9bf4 <sysclk_enable_peripheral_clock+0x308>)
    9a04:	4293      	cmp	r3, r2
    9a06:	d804      	bhi.n	9a12 <sysclk_enable_peripheral_clock+0x126>
    9a08:	4a7b      	ldr	r2, [pc, #492]	; (9bf8 <sysclk_enable_peripheral_clock+0x30c>)
    9a0a:	4293      	cmp	r3, r2
    9a0c:	f000 80c1 	beq.w	9b92 <sysclk_enable_peripheral_clock+0x2a6>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9a10:	e177      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9a12:	4a7a      	ldr	r2, [pc, #488]	; (9bfc <sysclk_enable_peripheral_clock+0x310>)
    9a14:	4293      	cmp	r3, r2
    9a16:	f000 811d 	beq.w	9c54 <sysclk_enable_peripheral_clock+0x368>
    9a1a:	4a79      	ldr	r2, [pc, #484]	; (9c00 <sysclk_enable_peripheral_clock+0x314>)
    9a1c:	4293      	cmp	r3, r2
    9a1e:	f000 8120 	beq.w	9c62 <sysclk_enable_peripheral_clock+0x376>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9a22:	e16e      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9a24:	4a77      	ldr	r2, [pc, #476]	; (9c04 <sysclk_enable_peripheral_clock+0x318>)
    9a26:	4293      	cmp	r3, r2
    9a28:	f000 8134 	beq.w	9c94 <sysclk_enable_peripheral_clock+0x3a8>
    9a2c:	4a75      	ldr	r2, [pc, #468]	; (9c04 <sysclk_enable_peripheral_clock+0x318>)
    9a2e:	4293      	cmp	r3, r2
    9a30:	d808      	bhi.n	9a44 <sysclk_enable_peripheral_clock+0x158>
    9a32:	4a75      	ldr	r2, [pc, #468]	; (9c08 <sysclk_enable_peripheral_clock+0x31c>)
    9a34:	4293      	cmp	r3, r2
    9a36:	f000 811f 	beq.w	9c78 <sysclk_enable_peripheral_clock+0x38c>
    9a3a:	4a74      	ldr	r2, [pc, #464]	; (9c0c <sysclk_enable_peripheral_clock+0x320>)
    9a3c:	4293      	cmp	r3, r2
    9a3e:	f000 8122 	beq.w	9c86 <sysclk_enable_peripheral_clock+0x39a>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9a42:	e15e      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9a44:	4a72      	ldr	r2, [pc, #456]	; (9c10 <sysclk_enable_peripheral_clock+0x324>)
    9a46:	4293      	cmp	r3, r2
    9a48:	f000 812b 	beq.w	9ca2 <sysclk_enable_peripheral_clock+0x3b6>
    9a4c:	4a71      	ldr	r2, [pc, #452]	; (9c14 <sysclk_enable_peripheral_clock+0x328>)
    9a4e:	4293      	cmp	r3, r2
    9a50:	d035      	beq.n	9abe <sysclk_enable_peripheral_clock+0x1d2>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9a52:	e156      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9a54:	4a70      	ldr	r2, [pc, #448]	; (9c18 <sysclk_enable_peripheral_clock+0x32c>)
    9a56:	4293      	cmp	r3, r2
    9a58:	f000 813b 	beq.w	9cd2 <sysclk_enable_peripheral_clock+0x3e6>
    9a5c:	4a6e      	ldr	r2, [pc, #440]	; (9c18 <sysclk_enable_peripheral_clock+0x32c>)
    9a5e:	4293      	cmp	r3, r2
    9a60:	d814      	bhi.n	9a8c <sysclk_enable_peripheral_clock+0x1a0>
    9a62:	4a6e      	ldr	r2, [pc, #440]	; (9c1c <sysclk_enable_peripheral_clock+0x330>)
    9a64:	4293      	cmp	r3, r2
    9a66:	f000 8128 	beq.w	9cba <sysclk_enable_peripheral_clock+0x3ce>
    9a6a:	4a6c      	ldr	r2, [pc, #432]	; (9c1c <sysclk_enable_peripheral_clock+0x330>)
    9a6c:	4293      	cmp	r3, r2
    9a6e:	d804      	bhi.n	9a7a <sysclk_enable_peripheral_clock+0x18e>
    9a70:	4a6b      	ldr	r2, [pc, #428]	; (9c20 <sysclk_enable_peripheral_clock+0x334>)
    9a72:	4293      	cmp	r3, r2
    9a74:	f000 811d 	beq.w	9cb2 <sysclk_enable_peripheral_clock+0x3c6>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9a78:	e143      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9a7a:	4a6a      	ldr	r2, [pc, #424]	; (9c24 <sysclk_enable_peripheral_clock+0x338>)
    9a7c:	4293      	cmp	r3, r2
    9a7e:	f000 8120 	beq.w	9cc2 <sysclk_enable_peripheral_clock+0x3d6>
    9a82:	4a69      	ldr	r2, [pc, #420]	; (9c28 <sysclk_enable_peripheral_clock+0x33c>)
    9a84:	4293      	cmp	r3, r2
    9a86:	f000 8120 	beq.w	9cca <sysclk_enable_peripheral_clock+0x3de>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9a8a:	e13a      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9a8c:	4a67      	ldr	r2, [pc, #412]	; (9c2c <sysclk_enable_peripheral_clock+0x340>)
    9a8e:	4293      	cmp	r3, r2
    9a90:	f000 812b 	beq.w	9cea <sysclk_enable_peripheral_clock+0x3fe>
    9a94:	4a65      	ldr	r2, [pc, #404]	; (9c2c <sysclk_enable_peripheral_clock+0x340>)
    9a96:	4293      	cmp	r3, r2
    9a98:	d808      	bhi.n	9aac <sysclk_enable_peripheral_clock+0x1c0>
    9a9a:	4a65      	ldr	r2, [pc, #404]	; (9c30 <sysclk_enable_peripheral_clock+0x344>)
    9a9c:	4293      	cmp	r3, r2
    9a9e:	f000 811c 	beq.w	9cda <sysclk_enable_peripheral_clock+0x3ee>
    9aa2:	4a64      	ldr	r2, [pc, #400]	; (9c34 <sysclk_enable_peripheral_clock+0x348>)
    9aa4:	4293      	cmp	r3, r2
    9aa6:	f000 811c 	beq.w	9ce2 <sysclk_enable_peripheral_clock+0x3f6>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9aaa:	e12a      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9aac:	4a62      	ldr	r2, [pc, #392]	; (9c38 <sysclk_enable_peripheral_clock+0x34c>)
    9aae:	4293      	cmp	r3, r2
    9ab0:	f000 811f 	beq.w	9cf2 <sysclk_enable_peripheral_clock+0x406>
    9ab4:	4a61      	ldr	r2, [pc, #388]	; (9c3c <sysclk_enable_peripheral_clock+0x350>)
    9ab6:	4293      	cmp	r3, r2
    9ab8:	f000 811f 	beq.w	9cfa <sysclk_enable_peripheral_clock+0x40e>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9abc:	e121      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
{
	switch ((uintptr_t)module) {

	#if !SAM4LS
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
    9abe:	2009      	movs	r0, #9
    9ac0:	4b5f      	ldr	r3, [pc, #380]	; (9c40 <sysclk_enable_peripheral_clock+0x354>)
    9ac2:	4798      	blx	r3
		break;
    9ac4:	e11d      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
	#endif

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    9ac6:	2000      	movs	r0, #0
    9ac8:	4b5e      	ldr	r3, [pc, #376]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9aca:	4798      	blx	r3
		break;
    9acc:	e119      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    9ace:	2001      	movs	r0, #1
    9ad0:	4b5c      	ldr	r3, [pc, #368]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9ad2:	4798      	blx	r3
		break;
    9ad4:	e115      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    9ad6:	2002      	movs	r0, #2
    9ad8:	4b5a      	ldr	r3, [pc, #360]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9ada:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    9adc:	2055      	movs	r0, #85	; 0x55
    9ade:	4b5a      	ldr	r3, [pc, #360]	; (9c48 <sysclk_enable_peripheral_clock+0x35c>)
    9ae0:	4798      	blx	r3
			| PBA_DIVMASK_TIMER_CLOCK3
			| PBA_DIVMASK_TIMER_CLOCK4
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;
    9ae2:	e10e      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    9ae4:	2003      	movs	r0, #3
    9ae6:	4b57      	ldr	r3, [pc, #348]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9ae8:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    9aea:	2055      	movs	r0, #85	; 0x55
    9aec:	4b56      	ldr	r3, [pc, #344]	; (9c48 <sysclk_enable_peripheral_clock+0x35c>)
    9aee:	4798      	blx	r3
			| PBA_DIVMASK_TIMER_CLOCK3
			| PBA_DIVMASK_TIMER_CLOCK4
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;
    9af0:	e107      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    9af2:	2004      	movs	r0, #4
    9af4:	4b53      	ldr	r3, [pc, #332]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9af6:	4798      	blx	r3
		break;
    9af8:	e103      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    9afa:	2005      	movs	r0, #5
    9afc:	4b51      	ldr	r3, [pc, #324]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9afe:	4798      	blx	r3
		break;
    9b00:	e0ff      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    9b02:	2006      	movs	r0, #6
    9b04:	4b4f      	ldr	r3, [pc, #316]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b06:	4798      	blx	r3
		break;
    9b08:	e0fb      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    9b0a:	2007      	movs	r0, #7
    9b0c:	4b4d      	ldr	r3, [pc, #308]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b0e:	4798      	blx	r3
		break;
    9b10:	e0f7      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    9b12:	2008      	movs	r0, #8
    9b14:	4b4b      	ldr	r3, [pc, #300]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b16:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    9b18:	2004      	movs	r0, #4
    9b1a:	4b4b      	ldr	r3, [pc, #300]	; (9c48 <sysclk_enable_peripheral_clock+0x35c>)
    9b1c:	4798      	blx	r3
		break;
    9b1e:	e0f0      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    9b20:	2009      	movs	r0, #9
    9b22:	4b48      	ldr	r3, [pc, #288]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b24:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    9b26:	2004      	movs	r0, #4
    9b28:	4b47      	ldr	r3, [pc, #284]	; (9c48 <sysclk_enable_peripheral_clock+0x35c>)
    9b2a:	4798      	blx	r3
		break;
    9b2c:	e0e9      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    9b2e:	200a      	movs	r0, #10
    9b30:	4b44      	ldr	r3, [pc, #272]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b32:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    9b34:	2004      	movs	r0, #4
    9b36:	4b44      	ldr	r3, [pc, #272]	; (9c48 <sysclk_enable_peripheral_clock+0x35c>)
    9b38:	4798      	blx	r3
		break;
    9b3a:	e0e2      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    9b3c:	200b      	movs	r0, #11
    9b3e:	4b41      	ldr	r3, [pc, #260]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b40:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    9b42:	2004      	movs	r0, #4
    9b44:	4b40      	ldr	r3, [pc, #256]	; (9c48 <sysclk_enable_peripheral_clock+0x35c>)
    9b46:	4798      	blx	r3
		break;
    9b48:	e0db      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    9b4a:	200c      	movs	r0, #12
    9b4c:	4b3d      	ldr	r3, [pc, #244]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b4e:	4798      	blx	r3
		break;
    9b50:	e0d7      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    9b52:	200d      	movs	r0, #13
    9b54:	4b3b      	ldr	r3, [pc, #236]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b56:	4798      	blx	r3
		break;
    9b58:	e0d3      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    9b5a:	200e      	movs	r0, #14
    9b5c:	4b39      	ldr	r3, [pc, #228]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b5e:	4798      	blx	r3
		break;
    9b60:	e0cf      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    9b62:	200f      	movs	r0, #15
    9b64:	4b37      	ldr	r3, [pc, #220]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b66:	4798      	blx	r3
		break;
    9b68:	e0cb      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    9b6a:	2010      	movs	r0, #16
    9b6c:	4b35      	ldr	r3, [pc, #212]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b6e:	4798      	blx	r3
		break;
    9b70:	e0c7      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    9b72:	2011      	movs	r0, #17
    9b74:	4b33      	ldr	r3, [pc, #204]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b76:	4798      	blx	r3
		break;
    9b78:	e0c3      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    9b7a:	2012      	movs	r0, #18
    9b7c:	4b31      	ldr	r3, [pc, #196]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b7e:	4798      	blx	r3
		break;
    9b80:	e0bf      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    9b82:	2013      	movs	r0, #19
    9b84:	4b2f      	ldr	r3, [pc, #188]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b86:	4798      	blx	r3
		break;
    9b88:	e0bb      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    9b8a:	2015      	movs	r0, #21
    9b8c:	4b2d      	ldr	r3, [pc, #180]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b8e:	4798      	blx	r3
		break;
    9b90:	e0b7      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    9b92:	2016      	movs	r0, #22
    9b94:	4b2b      	ldr	r3, [pc, #172]	; (9c44 <sysclk_enable_peripheral_clock+0x358>)
    9b96:	4798      	blx	r3
		break;
    9b98:	e0b3      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
    9b9a:	bf00      	nop
    9b9c:	40078000 	.word	0x40078000
    9ba0:	40028000 	.word	0x40028000
    9ba4:	40018000 	.word	0x40018000
    9ba8:	40008000 	.word	0x40008000
    9bac:	40010000 	.word	0x40010000
    9bb0:	40014000 	.word	0x40014000
    9bb4:	4001c000 	.word	0x4001c000
    9bb8:	40018400 	.word	0x40018400
    9bbc:	4001c400 	.word	0x4001c400
    9bc0:	40024000 	.word	0x40024000
    9bc4:	40040000 	.word	0x40040000
    9bc8:	40030000 	.word	0x40030000
    9bcc:	4002c000 	.word	0x4002c000
    9bd0:	40038000 	.word	0x40038000
    9bd4:	4003c000 	.word	0x4003c000
    9bd8:	40068000 	.word	0x40068000
    9bdc:	40060000 	.word	0x40060000
    9be0:	40064000 	.word	0x40064000
    9be4:	4006c000 	.word	0x4006c000
    9be8:	40070000 	.word	0x40070000
    9bec:	400e0000 	.word	0x400e0000
    9bf0:	400a1000 	.word	0x400a1000
    9bf4:	40080000 	.word	0x40080000
    9bf8:	4007c000 	.word	0x4007c000
    9bfc:	400a0000 	.word	0x400a0000
    9c00:	400a0400 	.word	0x400a0400
    9c04:	400a5000 	.word	0x400a5000
    9c08:	400a2000 	.word	0x400a2000
    9c0c:	400a4000 	.word	0x400a4000
    9c10:	400a6000 	.word	0x400a6000
    9c14:	400b0000 	.word	0x400b0000
    9c18:	400f0000 	.word	0x400f0000
    9c1c:	400e0800 	.word	0x400e0800
    9c20:	400e0400 	.word	0x400e0400
    9c24:	400e0c00 	.word	0x400e0c00
    9c28:	400e1000 	.word	0x400e1000
    9c2c:	400f0c00 	.word	0x400f0c00
    9c30:	400f0400 	.word	0x400f0400
    9c34:	400f0800 	.word	0x400f0800
    9c38:	400f1000 	.word	0x400f1000
    9c3c:	400f1400 	.word	0x400f1400
    9c40:	00009391 	.word	0x00009391
    9c44:	00009571 	.word	0x00009571
    9c48:	00009439 	.word	0x00009439

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    9c4c:	2017      	movs	r0, #23
    9c4e:	4b2e      	ldr	r3, [pc, #184]	; (9d08 <sysclk_enable_peripheral_clock+0x41c>)
    9c50:	4798      	blx	r3
		break;
    9c52:	e056      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>
	#endif

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
    9c54:	2001      	movs	r0, #1
    9c56:	4b2d      	ldr	r3, [pc, #180]	; (9d0c <sysclk_enable_peripheral_clock+0x420>)
    9c58:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    9c5a:	2000      	movs	r0, #0
    9c5c:	4b2c      	ldr	r3, [pc, #176]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9c5e:	4798      	blx	r3
		break;
    9c60:	e04f      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
    9c62:	2002      	movs	r0, #2
    9c64:	4b29      	ldr	r3, [pc, #164]	; (9d0c <sysclk_enable_peripheral_clock+0x420>)
    9c66:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    9c68:	2001      	movs	r0, #1
    9c6a:	4b29      	ldr	r3, [pc, #164]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9c6c:	4798      	blx	r3
		break;
    9c6e:	e048      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    9c70:	2002      	movs	r0, #2
    9c72:	4b27      	ldr	r3, [pc, #156]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9c74:	4798      	blx	r3
		break;
    9c76:	e044      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
    9c78:	2000      	movs	r0, #0
    9c7a:	4b24      	ldr	r3, [pc, #144]	; (9d0c <sysclk_enable_peripheral_clock+0x420>)
    9c7c:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    9c7e:	2003      	movs	r0, #3
    9c80:	4b23      	ldr	r3, [pc, #140]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9c82:	4798      	blx	r3
		break;
    9c84:	e03d      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
    9c86:	2004      	movs	r0, #4
    9c88:	4b20      	ldr	r3, [pc, #128]	; (9d0c <sysclk_enable_peripheral_clock+0x420>)
    9c8a:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    9c8c:	2004      	movs	r0, #4
    9c8e:	4b20      	ldr	r3, [pc, #128]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9c90:	4798      	blx	r3
		break;
    9c92:	e036      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
    9c94:	2003      	movs	r0, #3
    9c96:	4b1d      	ldr	r3, [pc, #116]	; (9d0c <sysclk_enable_peripheral_clock+0x420>)
    9c98:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    9c9a:	2005      	movs	r0, #5
    9c9c:	4b1c      	ldr	r3, [pc, #112]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9c9e:	4798      	blx	r3
		break;
    9ca0:	e02f      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    9ca2:	2006      	movs	r0, #6
    9ca4:	4b1a      	ldr	r3, [pc, #104]	; (9d10 <sysclk_enable_peripheral_clock+0x424>)
    9ca6:	4798      	blx	r3
		break;
    9ca8:	e02b      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case PM_ADDR:
		sysclk_enable_pbc_module(SYSCLK_PM);
    9caa:	2000      	movs	r0, #0
    9cac:	4b19      	ldr	r3, [pc, #100]	; (9d14 <sysclk_enable_peripheral_clock+0x428>)
    9cae:	4798      	blx	r3
		break;
    9cb0:	e027      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case CHIPID_ADDR:
		sysclk_enable_pbc_module(SYSCLK_CHIPID);
    9cb2:	2001      	movs	r0, #1
    9cb4:	4b17      	ldr	r3, [pc, #92]	; (9d14 <sysclk_enable_peripheral_clock+0x428>)
    9cb6:	4798      	blx	r3
		break;
    9cb8:	e023      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case SCIF_ADDR:
		sysclk_enable_pbc_module(SYSCLK_SCIF);
    9cba:	2002      	movs	r0, #2
    9cbc:	4b15      	ldr	r3, [pc, #84]	; (9d14 <sysclk_enable_peripheral_clock+0x428>)
    9cbe:	4798      	blx	r3
		break;
    9cc0:	e01f      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case FREQM_ADDR:
		sysclk_enable_pbc_module(SYSCLK_FREQM);
    9cc2:	2003      	movs	r0, #3
    9cc4:	4b13      	ldr	r3, [pc, #76]	; (9d14 <sysclk_enable_peripheral_clock+0x428>)
    9cc6:	4798      	blx	r3
		break;
    9cc8:	e01b      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case GPIO_ADDR:
		sysclk_enable_pbc_module(SYSCLK_GPIO);
    9cca:	2004      	movs	r0, #4
    9ccc:	4b11      	ldr	r3, [pc, #68]	; (9d14 <sysclk_enable_peripheral_clock+0x428>)
    9cce:	4798      	blx	r3
		break;
    9cd0:	e017      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case BPM_ADDR:
		sysclk_enable_pbd_module(SYSCLK_BPM);
    9cd2:	2000      	movs	r0, #0
    9cd4:	4b10      	ldr	r3, [pc, #64]	; (9d18 <sysclk_enable_peripheral_clock+0x42c>)
    9cd6:	4798      	blx	r3
		break;
    9cd8:	e013      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case BSCIF_ADDR:
		sysclk_enable_pbd_module(SYSCLK_BSCIF);
    9cda:	2001      	movs	r0, #1
    9cdc:	4b0e      	ldr	r3, [pc, #56]	; (9d18 <sysclk_enable_peripheral_clock+0x42c>)
    9cde:	4798      	blx	r3
		break;
    9ce0:	e00f      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case AST_ADDR:
		sysclk_enable_pbd_module(SYSCLK_AST);
    9ce2:	2002      	movs	r0, #2
    9ce4:	4b0c      	ldr	r3, [pc, #48]	; (9d18 <sysclk_enable_peripheral_clock+0x42c>)
    9ce6:	4798      	blx	r3
		break;
    9ce8:	e00b      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case WDT_ADDR:
		sysclk_enable_pbd_module(SYSCLK_WDT);
    9cea:	2003      	movs	r0, #3
    9cec:	4b0a      	ldr	r3, [pc, #40]	; (9d18 <sysclk_enable_peripheral_clock+0x42c>)
    9cee:	4798      	blx	r3
		break;
    9cf0:	e007      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case EIC_ADDR:
		sysclk_enable_pbd_module(SYSCLK_EIC);
    9cf2:	2004      	movs	r0, #4
    9cf4:	4b08      	ldr	r3, [pc, #32]	; (9d18 <sysclk_enable_peripheral_clock+0x42c>)
    9cf6:	4798      	blx	r3
		break;
    9cf8:	e003      	b.n	9d02 <sysclk_enable_peripheral_clock+0x416>

	case PICOUART_ADDR:
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
    9cfa:	2005      	movs	r0, #5
    9cfc:	4b06      	ldr	r3, [pc, #24]	; (9d18 <sysclk_enable_peripheral_clock+0x42c>)
    9cfe:	4798      	blx	r3
		break;
    9d00:	bf00      	nop

	default:
		Assert(false);
		return;
	}
}
    9d02:	3708      	adds	r7, #8
    9d04:	46bd      	mov	sp, r7
    9d06:	bd80      	pop	{r7, pc}
    9d08:	00009571 	.word	0x00009571
    9d0c:	00009391 	.word	0x00009391
    9d10:	000095f9 	.word	0x000095f9
    9d14:	000093c9 	.word	0x000093c9
    9d18:	00009401 	.word	0x00009401

00009d1c <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    9d1c:	b580      	push	{r7, lr}
    9d1e:	b082      	sub	sp, #8
    9d20:	af00      	add	r7, sp, #0
    9d22:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    9d24:	687b      	ldr	r3, [r7, #4]
    9d26:	4aa7      	ldr	r2, [pc, #668]	; (9fc4 <sysclk_disable_peripheral_clock+0x2a8>)
    9d28:	4293      	cmp	r3, r2
    9d2a:	f000 8134 	beq.w	9f96 <sysclk_disable_peripheral_clock+0x27a>
    9d2e:	4aa5      	ldr	r2, [pc, #660]	; (9fc4 <sysclk_disable_peripheral_clock+0x2a8>)
    9d30:	4293      	cmp	r3, r2
    9d32:	d86c      	bhi.n	9e0e <sysclk_disable_peripheral_clock+0xf2>
    9d34:	4aa4      	ldr	r2, [pc, #656]	; (9fc8 <sysclk_disable_peripheral_clock+0x2ac>)
    9d36:	4293      	cmp	r3, r2
    9d38:	f000 8101 	beq.w	9f3e <sysclk_disable_peripheral_clock+0x222>
    9d3c:	4aa2      	ldr	r2, [pc, #648]	; (9fc8 <sysclk_disable_peripheral_clock+0x2ac>)
    9d3e:	4293      	cmp	r3, r2
    9d40:	d830      	bhi.n	9da4 <sysclk_disable_peripheral_clock+0x88>
    9d42:	4aa2      	ldr	r2, [pc, #648]	; (9fcc <sysclk_disable_peripheral_clock+0x2b0>)
    9d44:	4293      	cmp	r3, r2
    9d46:	f000 80e6 	beq.w	9f16 <sysclk_disable_peripheral_clock+0x1fa>
    9d4a:	4aa0      	ldr	r2, [pc, #640]	; (9fcc <sysclk_disable_peripheral_clock+0x2b0>)
    9d4c:	4293      	cmp	r3, r2
    9d4e:	d814      	bhi.n	9d7a <sysclk_disable_peripheral_clock+0x5e>
    9d50:	4a9f      	ldr	r2, [pc, #636]	; (9fd0 <sysclk_disable_peripheral_clock+0x2b4>)
    9d52:	4293      	cmp	r3, r2
    9d54:	f000 80d3 	beq.w	9efe <sysclk_disable_peripheral_clock+0x1e2>
    9d58:	4a9d      	ldr	r2, [pc, #628]	; (9fd0 <sysclk_disable_peripheral_clock+0x2b4>)
    9d5a:	4293      	cmp	r3, r2
    9d5c:	d804      	bhi.n	9d68 <sysclk_disable_peripheral_clock+0x4c>
    9d5e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    9d62:	f000 80c8 	beq.w	9ef6 <sysclk_disable_peripheral_clock+0x1da>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9d66:	e1d7      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9d68:	4a9a      	ldr	r2, [pc, #616]	; (9fd4 <sysclk_disable_peripheral_clock+0x2b8>)
    9d6a:	4293      	cmp	r3, r2
    9d6c:	f000 80cb 	beq.w	9f06 <sysclk_disable_peripheral_clock+0x1ea>
    9d70:	4a99      	ldr	r2, [pc, #612]	; (9fd8 <sysclk_disable_peripheral_clock+0x2bc>)
    9d72:	4293      	cmp	r3, r2
    9d74:	f000 80cb 	beq.w	9f0e <sysclk_disable_peripheral_clock+0x1f2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9d78:	e1ce      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9d7a:	4a98      	ldr	r2, [pc, #608]	; (9fdc <sysclk_disable_peripheral_clock+0x2c0>)
    9d7c:	4293      	cmp	r3, r2
    9d7e:	f000 80d2 	beq.w	9f26 <sysclk_disable_peripheral_clock+0x20a>
    9d82:	4a96      	ldr	r2, [pc, #600]	; (9fdc <sysclk_disable_peripheral_clock+0x2c0>)
    9d84:	4293      	cmp	r3, r2
    9d86:	d804      	bhi.n	9d92 <sysclk_disable_peripheral_clock+0x76>
    9d88:	4a95      	ldr	r2, [pc, #596]	; (9fe0 <sysclk_disable_peripheral_clock+0x2c4>)
    9d8a:	4293      	cmp	r3, r2
    9d8c:	f000 80c7 	beq.w	9f1e <sysclk_disable_peripheral_clock+0x202>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9d90:	e1c2      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9d92:	4a94      	ldr	r2, [pc, #592]	; (9fe4 <sysclk_disable_peripheral_clock+0x2c8>)
    9d94:	4293      	cmp	r3, r2
    9d96:	f000 80ca 	beq.w	9f2e <sysclk_disable_peripheral_clock+0x212>
    9d9a:	4a93      	ldr	r2, [pc, #588]	; (9fe8 <sysclk_disable_peripheral_clock+0x2cc>)
    9d9c:	4293      	cmp	r3, r2
    9d9e:	f000 80ca 	beq.w	9f36 <sysclk_disable_peripheral_clock+0x21a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9da2:	e1b9      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9da4:	4a91      	ldr	r2, [pc, #580]	; (9fec <sysclk_disable_peripheral_clock+0x2d0>)
    9da6:	4293      	cmp	r3, r2
    9da8:	f000 80dd 	beq.w	9f66 <sysclk_disable_peripheral_clock+0x24a>
    9dac:	4a8f      	ldr	r2, [pc, #572]	; (9fec <sysclk_disable_peripheral_clock+0x2d0>)
    9dae:	4293      	cmp	r3, r2
    9db0:	d814      	bhi.n	9ddc <sysclk_disable_peripheral_clock+0xc0>
    9db2:	4a8f      	ldr	r2, [pc, #572]	; (9ff0 <sysclk_disable_peripheral_clock+0x2d4>)
    9db4:	4293      	cmp	r3, r2
    9db6:	f000 80ca 	beq.w	9f4e <sysclk_disable_peripheral_clock+0x232>
    9dba:	4a8d      	ldr	r2, [pc, #564]	; (9ff0 <sysclk_disable_peripheral_clock+0x2d4>)
    9dbc:	4293      	cmp	r3, r2
    9dbe:	d804      	bhi.n	9dca <sysclk_disable_peripheral_clock+0xae>
    9dc0:	4a8c      	ldr	r2, [pc, #560]	; (9ff4 <sysclk_disable_peripheral_clock+0x2d8>)
    9dc2:	4293      	cmp	r3, r2
    9dc4:	f000 80bf 	beq.w	9f46 <sysclk_disable_peripheral_clock+0x22a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9dc8:	e1a6      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9dca:	4a8b      	ldr	r2, [pc, #556]	; (9ff8 <sysclk_disable_peripheral_clock+0x2dc>)
    9dcc:	4293      	cmp	r3, r2
    9dce:	f000 80c2 	beq.w	9f56 <sysclk_disable_peripheral_clock+0x23a>
    9dd2:	4a8a      	ldr	r2, [pc, #552]	; (9ffc <sysclk_disable_peripheral_clock+0x2e0>)
    9dd4:	4293      	cmp	r3, r2
    9dd6:	f000 80c2 	beq.w	9f5e <sysclk_disable_peripheral_clock+0x242>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9dda:	e19d      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9ddc:	4a88      	ldr	r2, [pc, #544]	; (a000 <sysclk_disable_peripheral_clock+0x2e4>)
    9dde:	4293      	cmp	r3, r2
    9de0:	f000 80cd 	beq.w	9f7e <sysclk_disable_peripheral_clock+0x262>
    9de4:	4a86      	ldr	r2, [pc, #536]	; (a000 <sysclk_disable_peripheral_clock+0x2e4>)
    9de6:	4293      	cmp	r3, r2
    9de8:	d808      	bhi.n	9dfc <sysclk_disable_peripheral_clock+0xe0>
    9dea:	4a86      	ldr	r2, [pc, #536]	; (a004 <sysclk_disable_peripheral_clock+0x2e8>)
    9dec:	4293      	cmp	r3, r2
    9dee:	f000 80be 	beq.w	9f6e <sysclk_disable_peripheral_clock+0x252>
    9df2:	4a85      	ldr	r2, [pc, #532]	; (a008 <sysclk_disable_peripheral_clock+0x2ec>)
    9df4:	4293      	cmp	r3, r2
    9df6:	f000 80be 	beq.w	9f76 <sysclk_disable_peripheral_clock+0x25a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9dfa:	e18d      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9dfc:	4a83      	ldr	r2, [pc, #524]	; (a00c <sysclk_disable_peripheral_clock+0x2f0>)
    9dfe:	4293      	cmp	r3, r2
    9e00:	f000 80c1 	beq.w	9f86 <sysclk_disable_peripheral_clock+0x26a>
    9e04:	4a82      	ldr	r2, [pc, #520]	; (a010 <sysclk_disable_peripheral_clock+0x2f4>)
    9e06:	4293      	cmp	r3, r2
    9e08:	f000 80c1 	beq.w	9f8e <sysclk_disable_peripheral_clock+0x272>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9e0c:	e184      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9e0e:	4a81      	ldr	r2, [pc, #516]	; (a014 <sysclk_disable_peripheral_clock+0x2f8>)
    9e10:	4293      	cmp	r3, r2
    9e12:	f000 814c 	beq.w	a0ae <sysclk_disable_peripheral_clock+0x392>
    9e16:	4a7f      	ldr	r2, [pc, #508]	; (a014 <sysclk_disable_peripheral_clock+0x2f8>)
    9e18:	4293      	cmp	r3, r2
    9e1a:	d833      	bhi.n	9e84 <sysclk_disable_peripheral_clock+0x168>
    9e1c:	4a7e      	ldr	r2, [pc, #504]	; (a018 <sysclk_disable_peripheral_clock+0x2fc>)
    9e1e:	4293      	cmp	r3, r2
    9e20:	f000 8128 	beq.w	a074 <sysclk_disable_peripheral_clock+0x358>
    9e24:	4a7c      	ldr	r2, [pc, #496]	; (a018 <sysclk_disable_peripheral_clock+0x2fc>)
    9e26:	4293      	cmp	r3, r2
    9e28:	d814      	bhi.n	9e54 <sysclk_disable_peripheral_clock+0x138>
    9e2a:	4a7c      	ldr	r2, [pc, #496]	; (a01c <sysclk_disable_peripheral_clock+0x300>)
    9e2c:	4293      	cmp	r3, r2
    9e2e:	f000 80ba 	beq.w	9fa6 <sysclk_disable_peripheral_clock+0x28a>
    9e32:	4a7a      	ldr	r2, [pc, #488]	; (a01c <sysclk_disable_peripheral_clock+0x300>)
    9e34:	4293      	cmp	r3, r2
    9e36:	d804      	bhi.n	9e42 <sysclk_disable_peripheral_clock+0x126>
    9e38:	4a79      	ldr	r2, [pc, #484]	; (a020 <sysclk_disable_peripheral_clock+0x304>)
    9e3a:	4293      	cmp	r3, r2
    9e3c:	f000 80af 	beq.w	9f9e <sysclk_disable_peripheral_clock+0x282>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9e40:	e16a      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9e42:	4a78      	ldr	r2, [pc, #480]	; (a024 <sysclk_disable_peripheral_clock+0x308>)
    9e44:	4293      	cmp	r3, r2
    9e46:	f000 80b2 	beq.w	9fae <sysclk_disable_peripheral_clock+0x292>
    9e4a:	4a77      	ldr	r2, [pc, #476]	; (a028 <sysclk_disable_peripheral_clock+0x30c>)
    9e4c:	4293      	cmp	r3, r2
    9e4e:	f000 80b2 	beq.w	9fb6 <sysclk_disable_peripheral_clock+0x29a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9e52:	e161      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9e54:	4a75      	ldr	r2, [pc, #468]	; (a02c <sysclk_disable_peripheral_clock+0x310>)
    9e56:	4293      	cmp	r3, r2
    9e58:	f000 811e 	beq.w	a098 <sysclk_disable_peripheral_clock+0x37c>
    9e5c:	4a73      	ldr	r2, [pc, #460]	; (a02c <sysclk_disable_peripheral_clock+0x310>)
    9e5e:	4293      	cmp	r3, r2
    9e60:	d808      	bhi.n	9e74 <sysclk_disable_peripheral_clock+0x158>
    9e62:	4a73      	ldr	r2, [pc, #460]	; (a030 <sysclk_disable_peripheral_clock+0x314>)
    9e64:	4293      	cmp	r3, r2
    9e66:	f000 8109 	beq.w	a07c <sysclk_disable_peripheral_clock+0x360>
    9e6a:	4a72      	ldr	r2, [pc, #456]	; (a034 <sysclk_disable_peripheral_clock+0x318>)
    9e6c:	4293      	cmp	r3, r2
    9e6e:	f000 810c 	beq.w	a08a <sysclk_disable_peripheral_clock+0x36e>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9e72:	e151      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9e74:	4a70      	ldr	r2, [pc, #448]	; (a038 <sysclk_disable_peripheral_clock+0x31c>)
    9e76:	4293      	cmp	r3, r2
    9e78:	f000 8115 	beq.w	a0a6 <sysclk_disable_peripheral_clock+0x38a>
    9e7c:	4a6f      	ldr	r2, [pc, #444]	; (a03c <sysclk_disable_peripheral_clock+0x320>)
    9e7e:	4293      	cmp	r3, r2
    9e80:	d035      	beq.n	9eee <sysclk_disable_peripheral_clock+0x1d2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9e82:	e149      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9e84:	4a6e      	ldr	r2, [pc, #440]	; (a040 <sysclk_disable_peripheral_clock+0x324>)
    9e86:	4293      	cmp	r3, r2
    9e88:	f000 8125 	beq.w	a0d6 <sysclk_disable_peripheral_clock+0x3ba>
    9e8c:	4a6c      	ldr	r2, [pc, #432]	; (a040 <sysclk_disable_peripheral_clock+0x324>)
    9e8e:	4293      	cmp	r3, r2
    9e90:	d814      	bhi.n	9ebc <sysclk_disable_peripheral_clock+0x1a0>
    9e92:	4a6c      	ldr	r2, [pc, #432]	; (a044 <sysclk_disable_peripheral_clock+0x328>)
    9e94:	4293      	cmp	r3, r2
    9e96:	f000 8112 	beq.w	a0be <sysclk_disable_peripheral_clock+0x3a2>
    9e9a:	4a6a      	ldr	r2, [pc, #424]	; (a044 <sysclk_disable_peripheral_clock+0x328>)
    9e9c:	4293      	cmp	r3, r2
    9e9e:	d804      	bhi.n	9eaa <sysclk_disable_peripheral_clock+0x18e>
    9ea0:	4a69      	ldr	r2, [pc, #420]	; (a048 <sysclk_disable_peripheral_clock+0x32c>)
    9ea2:	4293      	cmp	r3, r2
    9ea4:	f000 8107 	beq.w	a0b6 <sysclk_disable_peripheral_clock+0x39a>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9ea8:	e136      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9eaa:	4a68      	ldr	r2, [pc, #416]	; (a04c <sysclk_disable_peripheral_clock+0x330>)
    9eac:	4293      	cmp	r3, r2
    9eae:	f000 810a 	beq.w	a0c6 <sysclk_disable_peripheral_clock+0x3aa>
    9eb2:	4a67      	ldr	r2, [pc, #412]	; (a050 <sysclk_disable_peripheral_clock+0x334>)
    9eb4:	4293      	cmp	r3, r2
    9eb6:	f000 810a 	beq.w	a0ce <sysclk_disable_peripheral_clock+0x3b2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9eba:	e12d      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9ebc:	4a65      	ldr	r2, [pc, #404]	; (a054 <sysclk_disable_peripheral_clock+0x338>)
    9ebe:	4293      	cmp	r3, r2
    9ec0:	f000 8115 	beq.w	a0ee <sysclk_disable_peripheral_clock+0x3d2>
    9ec4:	4a63      	ldr	r2, [pc, #396]	; (a054 <sysclk_disable_peripheral_clock+0x338>)
    9ec6:	4293      	cmp	r3, r2
    9ec8:	d808      	bhi.n	9edc <sysclk_disable_peripheral_clock+0x1c0>
    9eca:	4a63      	ldr	r2, [pc, #396]	; (a058 <sysclk_disable_peripheral_clock+0x33c>)
    9ecc:	4293      	cmp	r3, r2
    9ece:	f000 8106 	beq.w	a0de <sysclk_disable_peripheral_clock+0x3c2>
    9ed2:	4a62      	ldr	r2, [pc, #392]	; (a05c <sysclk_disable_peripheral_clock+0x340>)
    9ed4:	4293      	cmp	r3, r2
    9ed6:	f000 8106 	beq.w	a0e6 <sysclk_disable_peripheral_clock+0x3ca>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9eda:	e11d      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
    9edc:	4a60      	ldr	r2, [pc, #384]	; (a060 <sysclk_disable_peripheral_clock+0x344>)
    9ede:	4293      	cmp	r3, r2
    9ee0:	f000 8109 	beq.w	a0f6 <sysclk_disable_peripheral_clock+0x3da>
    9ee4:	4a5f      	ldr	r2, [pc, #380]	; (a064 <sysclk_disable_peripheral_clock+0x348>)
    9ee6:	4293      	cmp	r3, r2
    9ee8:	f000 8109 	beq.w	a0fe <sysclk_disable_peripheral_clock+0x3e2>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    9eec:	e114      	b.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
{
	switch ((uintptr_t)module) {

	#if !SAM4LS
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
    9eee:	2009      	movs	r0, #9
    9ef0:	4b5d      	ldr	r3, [pc, #372]	; (a068 <sysclk_disable_peripheral_clock+0x34c>)
    9ef2:	4798      	blx	r3
		break;
    9ef4:	e107      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>
	#endif

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    9ef6:	2000      	movs	r0, #0
    9ef8:	4b5c      	ldr	r3, [pc, #368]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9efa:	4798      	blx	r3
		break;
    9efc:	e103      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    9efe:	2001      	movs	r0, #1
    9f00:	4b5a      	ldr	r3, [pc, #360]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f02:	4798      	blx	r3
		break;
    9f04:	e0ff      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    9f06:	2002      	movs	r0, #2
    9f08:	4b58      	ldr	r3, [pc, #352]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f0a:	4798      	blx	r3
		break;
    9f0c:	e0fb      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    9f0e:	2003      	movs	r0, #3
    9f10:	4b56      	ldr	r3, [pc, #344]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f12:	4798      	blx	r3
		break;
    9f14:	e0f7      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    9f16:	2004      	movs	r0, #4
    9f18:	4b54      	ldr	r3, [pc, #336]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f1a:	4798      	blx	r3
		break;
    9f1c:	e0f3      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    9f1e:	2005      	movs	r0, #5
    9f20:	4b52      	ldr	r3, [pc, #328]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f22:	4798      	blx	r3
		break;
    9f24:	e0ef      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    9f26:	2006      	movs	r0, #6
    9f28:	4b50      	ldr	r3, [pc, #320]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f2a:	4798      	blx	r3
		break;
    9f2c:	e0eb      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    9f2e:	2007      	movs	r0, #7
    9f30:	4b4e      	ldr	r3, [pc, #312]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f32:	4798      	blx	r3
		break;
    9f34:	e0e7      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    9f36:	2008      	movs	r0, #8
    9f38:	4b4c      	ldr	r3, [pc, #304]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f3a:	4798      	blx	r3
		break;
    9f3c:	e0e3      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    9f3e:	2009      	movs	r0, #9
    9f40:	4b4a      	ldr	r3, [pc, #296]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f42:	4798      	blx	r3
		break;
    9f44:	e0df      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    9f46:	200a      	movs	r0, #10
    9f48:	4b48      	ldr	r3, [pc, #288]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f4a:	4798      	blx	r3
		break;
    9f4c:	e0db      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    9f4e:	200b      	movs	r0, #11
    9f50:	4b46      	ldr	r3, [pc, #280]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f52:	4798      	blx	r3
		break;
    9f54:	e0d7      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    9f56:	200c      	movs	r0, #12
    9f58:	4b44      	ldr	r3, [pc, #272]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f5a:	4798      	blx	r3
		break;
    9f5c:	e0d3      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    9f5e:	200d      	movs	r0, #13
    9f60:	4b42      	ldr	r3, [pc, #264]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f62:	4798      	blx	r3
		break;
    9f64:	e0cf      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    9f66:	200e      	movs	r0, #14
    9f68:	4b40      	ldr	r3, [pc, #256]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f6a:	4798      	blx	r3
		break;
    9f6c:	e0cb      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    9f6e:	200f      	movs	r0, #15
    9f70:	4b3e      	ldr	r3, [pc, #248]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f72:	4798      	blx	r3
		break;
    9f74:	e0c7      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    9f76:	2010      	movs	r0, #16
    9f78:	4b3c      	ldr	r3, [pc, #240]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f7a:	4798      	blx	r3
		break;
    9f7c:	e0c3      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    9f7e:	2011      	movs	r0, #17
    9f80:	4b3a      	ldr	r3, [pc, #232]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f82:	4798      	blx	r3
		break;
    9f84:	e0bf      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    9f86:	2012      	movs	r0, #18
    9f88:	4b38      	ldr	r3, [pc, #224]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f8a:	4798      	blx	r3
		break;
    9f8c:	e0bb      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    9f8e:	2013      	movs	r0, #19
    9f90:	4b36      	ldr	r3, [pc, #216]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f92:	4798      	blx	r3
		break;
    9f94:	e0b7      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    9f96:	2015      	movs	r0, #21
    9f98:	4b34      	ldr	r3, [pc, #208]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9f9a:	4798      	blx	r3
		break;
    9f9c:	e0b3      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    9f9e:	2016      	movs	r0, #22
    9fa0:	4b32      	ldr	r3, [pc, #200]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9fa2:	4798      	blx	r3
		break;
    9fa4:	e0af      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    9fa6:	2017      	movs	r0, #23
    9fa8:	4b30      	ldr	r3, [pc, #192]	; (a06c <sysclk_disable_peripheral_clock+0x350>)
    9faa:	4798      	blx	r3
		break;
    9fac:	e0ab      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>
	#endif

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    9fae:	2000      	movs	r0, #0
    9fb0:	4b2f      	ldr	r3, [pc, #188]	; (a070 <sysclk_disable_peripheral_clock+0x354>)
    9fb2:	4798      	blx	r3
		break;
    9fb4:	e0a7      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
    9fb6:	2002      	movs	r0, #2
    9fb8:	4b2b      	ldr	r3, [pc, #172]	; (a068 <sysclk_disable_peripheral_clock+0x34c>)
    9fba:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    9fbc:	2001      	movs	r0, #1
    9fbe:	4b2c      	ldr	r3, [pc, #176]	; (a070 <sysclk_disable_peripheral_clock+0x354>)
    9fc0:	4798      	blx	r3
		break;
    9fc2:	e0a0      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>
    9fc4:	40078000 	.word	0x40078000
    9fc8:	40028000 	.word	0x40028000
    9fcc:	40018000 	.word	0x40018000
    9fd0:	40008000 	.word	0x40008000
    9fd4:	40010000 	.word	0x40010000
    9fd8:	40014000 	.word	0x40014000
    9fdc:	4001c000 	.word	0x4001c000
    9fe0:	40018400 	.word	0x40018400
    9fe4:	4001c400 	.word	0x4001c400
    9fe8:	40024000 	.word	0x40024000
    9fec:	40040000 	.word	0x40040000
    9ff0:	40030000 	.word	0x40030000
    9ff4:	4002c000 	.word	0x4002c000
    9ff8:	40038000 	.word	0x40038000
    9ffc:	4003c000 	.word	0x4003c000
    a000:	40068000 	.word	0x40068000
    a004:	40060000 	.word	0x40060000
    a008:	40064000 	.word	0x40064000
    a00c:	4006c000 	.word	0x4006c000
    a010:	40070000 	.word	0x40070000
    a014:	400e0000 	.word	0x400e0000
    a018:	400a1000 	.word	0x400a1000
    a01c:	40080000 	.word	0x40080000
    a020:	4007c000 	.word	0x4007c000
    a024:	400a0000 	.word	0x400a0000
    a028:	400a0400 	.word	0x400a0400
    a02c:	400a5000 	.word	0x400a5000
    a030:	400a2000 	.word	0x400a2000
    a034:	400a4000 	.word	0x400a4000
    a038:	400a6000 	.word	0x400a6000
    a03c:	400b0000 	.word	0x400b0000
    a040:	400f0000 	.word	0x400f0000
    a044:	400e0800 	.word	0x400e0800
    a048:	400e0400 	.word	0x400e0400
    a04c:	400e0c00 	.word	0x400e0c00
    a050:	400e1000 	.word	0x400e1000
    a054:	400f0c00 	.word	0x400f0c00
    a058:	400f0400 	.word	0x400f0400
    a05c:	400f0800 	.word	0x400f0800
    a060:	400f1000 	.word	0x400f1000
    a064:	400f1400 	.word	0x400f1400
    a068:	000093ad 	.word	0x000093ad
    a06c:	000095b5 	.word	0x000095b5
    a070:	0000963d 	.word	0x0000963d

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    a074:	2002      	movs	r0, #2
    a076:	4b2a      	ldr	r3, [pc, #168]	; (a120 <sysclk_disable_peripheral_clock+0x404>)
    a078:	4798      	blx	r3
		break;
    a07a:	e044      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
    a07c:	2000      	movs	r0, #0
    a07e:	4b29      	ldr	r3, [pc, #164]	; (a124 <sysclk_disable_peripheral_clock+0x408>)
    a080:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    a082:	2003      	movs	r0, #3
    a084:	4b26      	ldr	r3, [pc, #152]	; (a120 <sysclk_disable_peripheral_clock+0x404>)
    a086:	4798      	blx	r3
		break;
    a088:	e03d      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
    a08a:	2004      	movs	r0, #4
    a08c:	4b25      	ldr	r3, [pc, #148]	; (a124 <sysclk_disable_peripheral_clock+0x408>)
    a08e:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    a090:	2004      	movs	r0, #4
    a092:	4b23      	ldr	r3, [pc, #140]	; (a120 <sysclk_disable_peripheral_clock+0x404>)
    a094:	4798      	blx	r3
		break;
    a096:	e036      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
    a098:	2003      	movs	r0, #3
    a09a:	4b22      	ldr	r3, [pc, #136]	; (a124 <sysclk_disable_peripheral_clock+0x408>)
    a09c:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    a09e:	2005      	movs	r0, #5
    a0a0:	4b1f      	ldr	r3, [pc, #124]	; (a120 <sysclk_disable_peripheral_clock+0x404>)
    a0a2:	4798      	blx	r3
		break;
    a0a4:	e02f      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    a0a6:	2006      	movs	r0, #6
    a0a8:	4b1d      	ldr	r3, [pc, #116]	; (a120 <sysclk_disable_peripheral_clock+0x404>)
    a0aa:	4798      	blx	r3
		break;
    a0ac:	e02b      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case PM_ADDR:
		sysclk_disable_pbc_module(SYSCLK_PM);
    a0ae:	2000      	movs	r0, #0
    a0b0:	4b1d      	ldr	r3, [pc, #116]	; (a128 <sysclk_disable_peripheral_clock+0x40c>)
    a0b2:	4798      	blx	r3
		break;
    a0b4:	e027      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case CHIPID_ADDR:
		sysclk_disable_pbc_module(SYSCLK_CHIPID);
    a0b6:	2001      	movs	r0, #1
    a0b8:	4b1b      	ldr	r3, [pc, #108]	; (a128 <sysclk_disable_peripheral_clock+0x40c>)
    a0ba:	4798      	blx	r3
		break;
    a0bc:	e023      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case SCIF_ADDR:
		sysclk_disable_pbc_module(SYSCLK_SCIF);
    a0be:	2002      	movs	r0, #2
    a0c0:	4b19      	ldr	r3, [pc, #100]	; (a128 <sysclk_disable_peripheral_clock+0x40c>)
    a0c2:	4798      	blx	r3
		break;
    a0c4:	e01f      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case FREQM_ADDR:
		sysclk_disable_pbc_module(SYSCLK_FREQM);
    a0c6:	2003      	movs	r0, #3
    a0c8:	4b17      	ldr	r3, [pc, #92]	; (a128 <sysclk_disable_peripheral_clock+0x40c>)
    a0ca:	4798      	blx	r3
		break;
    a0cc:	e01b      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case GPIO_ADDR:
		sysclk_disable_pbc_module(SYSCLK_GPIO);
    a0ce:	2004      	movs	r0, #4
    a0d0:	4b15      	ldr	r3, [pc, #84]	; (a128 <sysclk_disable_peripheral_clock+0x40c>)
    a0d2:	4798      	blx	r3
		break;
    a0d4:	e017      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case BPM_ADDR:
		sysclk_disable_pbd_module(SYSCLK_BPM);
    a0d6:	2000      	movs	r0, #0
    a0d8:	4b14      	ldr	r3, [pc, #80]	; (a12c <sysclk_disable_peripheral_clock+0x410>)
    a0da:	4798      	blx	r3
		break;
    a0dc:	e013      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case BSCIF_ADDR:
		sysclk_disable_pbd_module(SYSCLK_BSCIF);
    a0de:	2001      	movs	r0, #1
    a0e0:	4b12      	ldr	r3, [pc, #72]	; (a12c <sysclk_disable_peripheral_clock+0x410>)
    a0e2:	4798      	blx	r3
		break;
    a0e4:	e00f      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case AST_ADDR:
		sysclk_disable_pbd_module(SYSCLK_AST);
    a0e6:	2002      	movs	r0, #2
    a0e8:	4b10      	ldr	r3, [pc, #64]	; (a12c <sysclk_disable_peripheral_clock+0x410>)
    a0ea:	4798      	blx	r3
		break;
    a0ec:	e00b      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case WDT_ADDR:
		sysclk_disable_pbd_module(SYSCLK_WDT);
    a0ee:	2003      	movs	r0, #3
    a0f0:	4b0e      	ldr	r3, [pc, #56]	; (a12c <sysclk_disable_peripheral_clock+0x410>)
    a0f2:	4798      	blx	r3
		break;
    a0f4:	e007      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case EIC_ADDR:
		sysclk_disable_pbd_module(SYSCLK_EIC);
    a0f6:	2004      	movs	r0, #4
    a0f8:	4b0c      	ldr	r3, [pc, #48]	; (a12c <sysclk_disable_peripheral_clock+0x410>)
    a0fa:	4798      	blx	r3
		break;
    a0fc:	e003      	b.n	a106 <sysclk_disable_peripheral_clock+0x3ea>

	case PICOUART_ADDR:
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
    a0fe:	2005      	movs	r0, #5
    a100:	4b0a      	ldr	r3, [pc, #40]	; (a12c <sysclk_disable_peripheral_clock+0x410>)
    a102:	4798      	blx	r3
		break;
    a104:	bf00      	nop
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    a106:	4b0a      	ldr	r3, [pc, #40]	; (a130 <sysclk_disable_peripheral_clock+0x414>)
    a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a10a:	f003 030b 	and.w	r3, r3, #11
    a10e:	2b00      	cmp	r3, #0
    a110:	d102      	bne.n	a118 <sysclk_disable_peripheral_clock+0x3fc>
		sysclk_disable_pba_divmask(PBA_DIVMASK_Msk);
    a112:	207f      	movs	r0, #127	; 0x7f
    a114:	4b07      	ldr	r3, [pc, #28]	; (a134 <sysclk_disable_peripheral_clock+0x418>)
    a116:	4798      	blx	r3
	}
}
    a118:	3708      	adds	r7, #8
    a11a:	46bd      	mov	sp, r7
    a11c:	bd80      	pop	{r7, pc}
    a11e:	bf00      	nop
    a120:	0000963d 	.word	0x0000963d
    a124:	000093ad 	.word	0x000093ad
    a128:	000093e5 	.word	0x000093e5
    a12c:	0000941d 	.word	0x0000941d
    a130:	400e0000 	.word	0x400e0000
    a134:	0000946d 	.word	0x0000946d

0000a138 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint32_t src)
{
    a138:	b580      	push	{r7, lr}
    a13a:	b084      	sub	sp, #16
    a13c:	af00      	add	r7, sp, #0
    a13e:	6078      	str	r0, [r7, #4]
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
    a140:	4b07      	ldr	r3, [pc, #28]	; (a160 <sysclk_set_source+0x28>)
    a142:	4798      	blx	r3
    a144:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    a146:	4b07      	ldr	r3, [pc, #28]	; (a164 <sysclk_set_source+0x2c>)
    a148:	f04f 422a 	mov.w	r2, #2852126720	; 0xaa000000
    a14c:	659a      	str	r2, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    a14e:	4b05      	ldr	r3, [pc, #20]	; (a164 <sysclk_set_source+0x2c>)
    a150:	687a      	ldr	r2, [r7, #4]
    a152:	601a      	str	r2, [r3, #0]
	cpu_irq_restore(flags);
    a154:	68f8      	ldr	r0, [r7, #12]
    a156:	4b04      	ldr	r3, [pc, #16]	; (a168 <sysclk_set_source+0x30>)
    a158:	4798      	blx	r3
}
    a15a:	3710      	adds	r7, #16
    a15c:	46bd      	mov	sp, r7
    a15e:	bd80      	pop	{r7, pc}
    a160:	00009205 	.word	0x00009205
    a164:	400e0000 	.word	0x400e0000
    a168:	0000925d 	.word	0x0000925d

0000a16c <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    a16c:	b580      	push	{r7, lr}
    a16e:	b086      	sub	sp, #24
    a170:	af00      	add	r7, sp, #0
	uint32_t ps_value = 0;
    a172:	2300      	movs	r3, #0
    a174:	617b      	str	r3, [r7, #20]
	bool is_fwu_enabled = false;
    a176:	2300      	movs	r3, #0
    a178:	74fb      	strb	r3, [r7, #19]

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    a17a:	482b      	ldr	r0, [pc, #172]	; (a228 <sysclk_init+0xbc>)
    a17c:	4b2b      	ldr	r3, [pc, #172]	; (a22c <sysclk_init+0xc0>)
    a17e:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    a180:	4b29      	ldr	r3, [pc, #164]	; (a228 <sysclk_init+0xbc>)
    a182:	2201      	movs	r2, #1
    a184:	609a      	str	r2, [r3, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    a186:	bf00      	nop
    a188:	4b27      	ldr	r3, [pc, #156]	; (a228 <sysclk_init+0xbc>)
    a18a:	68db      	ldr	r3, [r3, #12]
    a18c:	f003 0301 	and.w	r3, r3, #1
    a190:	2b00      	cmp	r3, #0
    a192:	d0f9      	beq.n	a188 <sysclk_init+0x1c>
	/* Automatically select best power scaling mode */
#ifdef CONFIG_FLASH_READ_MODE_HIGH_SPEED_ENABLE
	ps_value = BPM_PS_2;
	is_fwu_enabled = false;
#else
	if (sysclk_get_cpu_hz() <= FLASH_FREQ_PS1_FWS_1_MAX_FREQ) {
    a194:	4b26      	ldr	r3, [pc, #152]	; (a230 <sysclk_init+0xc4>)
    a196:	4798      	blx	r3
    a198:	4602      	mov	r2, r0
    a19a:	4b26      	ldr	r3, [pc, #152]	; (a234 <sysclk_init+0xc8>)
    a19c:	429a      	cmp	r2, r3
    a19e:	d80d      	bhi.n	a1bc <sysclk_init+0x50>
		ps_value = BPM_PS_1;
    a1a0:	2301      	movs	r3, #1
    a1a2:	617b      	str	r3, [r7, #20]
		if (sysclk_get_cpu_hz() > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) {
    a1a4:	4b22      	ldr	r3, [pc, #136]	; (a230 <sysclk_init+0xc4>)
    a1a6:	4798      	blx	r3
    a1a8:	4602      	mov	r2, r0
    a1aa:	4b23      	ldr	r3, [pc, #140]	; (a238 <sysclk_init+0xcc>)
    a1ac:	429a      	cmp	r2, r3
    a1ae:	d907      	bls.n	a1c0 <sysclk_init+0x54>
			bpm_enable_fast_wakeup(BPM);
    a1b0:	4822      	ldr	r0, [pc, #136]	; (a23c <sysclk_init+0xd0>)
    a1b2:	4b23      	ldr	r3, [pc, #140]	; (a240 <sysclk_init+0xd4>)
    a1b4:	4798      	blx	r3
			is_fwu_enabled = true;
    a1b6:	2301      	movs	r3, #1
    a1b8:	74fb      	strb	r3, [r7, #19]
    a1ba:	e001      	b.n	a1c0 <sysclk_init+0x54>
		}
	} else {
		ps_value = BPM_PS_0;
    a1bc:	2300      	movs	r3, #0
    a1be:	617b      	str	r3, [r7, #20]
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    a1c0:	2000      	movs	r0, #0
    a1c2:	4b20      	ldr	r3, [pc, #128]	; (a244 <sysclk_init+0xd8>)
    a1c4:	4798      	blx	r3
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    a1c6:	4b1a      	ldr	r3, [pc, #104]	; (a230 <sysclk_init+0xc4>)
    a1c8:	4798      	blx	r3
    a1ca:	4602      	mov	r2, r0
    a1cc:	7cfb      	ldrb	r3, [r7, #19]
    a1ce:	4610      	mov	r0, r2
    a1d0:	6979      	ldr	r1, [r7, #20]
    a1d2:	461a      	mov	r2, r3
    a1d4:	4b1c      	ldr	r3, [pc, #112]	; (a248 <sysclk_init+0xdc>)
    a1d6:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_DFLL);
    a1d8:	2003      	movs	r0, #3
    a1da:	4b1c      	ldr	r3, [pc, #112]	; (a24c <sysclk_init+0xe0>)
    a1dc:	4798      	blx	r3
    a1de:	4b17      	ldr	r3, [pc, #92]	; (a23c <sysclk_init+0xd0>)
    a1e0:	60bb      	str	r3, [r7, #8]
    a1e2:	697b      	ldr	r3, [r7, #20]
    a1e4:	607b      	str	r3, [r7, #4]
    a1e6:	2301      	movs	r3, #1
    a1e8:	603b      	str	r3, [r7, #0]
 * \return true if no error.
 */
__always_inline static
bool bpm_configure_power_scaling(Bpm *bpm, uint32_t ps_value, uint32_t no_halt)
{
	if (!no_halt) {
    a1ea:	683b      	ldr	r3, [r7, #0]
    a1ec:	2b00      	cmp	r3, #0
    a1ee:	d104      	bne.n	a1fa <sysclk_init+0x8e>
		bpm_power_scaling_cpu(bpm, ps_value);
    a1f0:	68b8      	ldr	r0, [r7, #8]
    a1f2:	6879      	ldr	r1, [r7, #4]
    a1f4:	4b16      	ldr	r3, [pc, #88]	; (a250 <sysclk_init+0xe4>)
    a1f6:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    a1f8:	e004      	b.n	a204 <sysclk_init+0x98>
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    a1fa:	68b8      	ldr	r0, [r7, #8]
    a1fc:	6879      	ldr	r1, [r7, #4]
    a1fe:	4a15      	ldr	r2, [pc, #84]	; (a254 <sysclk_init+0xe8>)
    a200:	4b15      	ldr	r3, [pc, #84]	; (a258 <sysclk_init+0xec>)
    a202:	4798      	blx	r3
    a204:	bf00      	nop
    a206:	480d      	ldr	r0, [pc, #52]	; (a23c <sysclk_init+0xd0>)
    a208:	4b14      	ldr	r3, [pc, #80]	; (a25c <sysclk_init+0xf0>)
    a20a:	4798      	blx	r3
    a20c:	4603      	mov	r3, r0
    a20e:	f003 0301 	and.w	r3, r3, #1
    a212:	2b00      	cmp	r3, #0
    a214:	d0f7      	beq.n	a206 <sysclk_init+0x9a>

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
    a216:	4b12      	ldr	r3, [pc, #72]	; (a260 <sysclk_init+0xf4>)
    a218:	4798      	blx	r3
    a21a:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDMASK - (uint32_t)PM);
	PM->PM_PBDMASK = SYSCLK_INIT_MINIMAL_PBDMASK | CONFIG_SYSCLK_INIT_PBDMASK;
#endif

	cpu_irq_restore(flags);
    a21c:	68f8      	ldr	r0, [r7, #12]
    a21e:	4b11      	ldr	r3, [pc, #68]	; (a264 <sysclk_init+0xf8>)
    a220:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    a222:	3718      	adds	r7, #24
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	400a0400 	.word	0x400a0400
    a22c:	000098ed 	.word	0x000098ed
    a230:	0000932d 	.word	0x0000932d
    a234:	00b71b00 	.word	0x00b71b00
    a238:	007a1200 	.word	0x007a1200
    a23c:	400f0000 	.word	0x400f0000
    a240:	0000a7a1 	.word	0x0000a7a1
    a244:	00008f79 	.word	0x00008f79
    a248:	0000a819 	.word	0x0000a819
    a24c:	0000a139 	.word	0x0000a139
    a250:	0000a749 	.word	0x0000a749
    a254:	0003a980 	.word	0x0003a980
    a258:	0000a6a5 	.word	0x0000a6a5
    a25c:	0000a7d1 	.word	0x0000a7d1
    a260:	00009205 	.word	0x00009205
    a264:	0000925d 	.word	0x0000925d

0000a268 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
    a268:	b580      	push	{r7, lr}
    a26a:	af00      	add	r7, sp, #0
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    a26c:	4801      	ldr	r0, [pc, #4]	; (a274 <ioport_init+0xc>)
    a26e:	4b02      	ldr	r3, [pc, #8]	; (a278 <ioport_init+0x10>)
    a270:	4798      	blx	r3
	arch_ioport_init();
}
    a272:	bd80      	pop	{r7, pc}
    a274:	400e1000 	.word	0x400e1000
    a278:	000098ed 	.word	0x000098ed

0000a27c <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
    a27c:	b480      	push	{r7}
    a27e:	b089      	sub	sp, #36	; 0x24
    a280:	af00      	add	r7, sp, #0
    a282:	6078      	str	r0, [r7, #4]
    a284:	687b      	ldr	r3, [r7, #4]
    a286:	61fb      	str	r3, [r7, #28]
    a288:	69fb      	ldr	r3, [r7, #28]
    a28a:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a28c:	69bb      	ldr	r3, [r7, #24]
    a28e:	095a      	lsrs	r2, r3, #5
    a290:	69fb      	ldr	r3, [r7, #28]
    a292:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a294:	697b      	ldr	r3, [r7, #20]
    a296:	f003 031f 	and.w	r3, r3, #31
    a29a:	2101      	movs	r1, #1
    a29c:	fa01 f303 	lsl.w	r3, r1, r3
    a2a0:	613a      	str	r2, [r7, #16]
    a2a2:	60fb      	str	r3, [r7, #12]
    a2a4:	693b      	ldr	r3, [r7, #16]
    a2a6:	60bb      	str	r3, [r7, #8]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a2a8:	68bb      	ldr	r3, [r7, #8]
    a2aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a2ae:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a2b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    a2b4:	68fa      	ldr	r2, [r7, #12]
    a2b6:	609a      	str	r2, [r3, #8]
	arch_ioport_disable_pin(pin);
}
    a2b8:	3724      	adds	r7, #36	; 0x24
    a2ba:	46bd      	mov	sp, r7
    a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2c0:	4770      	bx	lr
    a2c2:	bf00      	nop

0000a2c4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    a2c4:	b480      	push	{r7}
    a2c6:	b08d      	sub	sp, #52	; 0x34
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	6078      	str	r0, [r7, #4]
    a2cc:	6039      	str	r1, [r7, #0]
    a2ce:	687b      	ldr	r3, [r7, #4]
    a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    a2d2:	683b      	ldr	r3, [r7, #0]
    a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
    a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2d8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2dc:	095a      	lsrs	r2, r3, #5
    a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2e0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a2e2:	6a3b      	ldr	r3, [r7, #32]
    a2e4:	f003 031f 	and.w	r3, r3, #31
    a2e8:	2101      	movs	r1, #1
    a2ea:	fa01 f303 	lsl.w	r3, r1, r3
    a2ee:	61fa      	str	r2, [r7, #28]
    a2f0:	61bb      	str	r3, [r7, #24]
    a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a2f4:	617b      	str	r3, [r7, #20]
    a2f6:	69fb      	ldr	r3, [r7, #28]
    a2f8:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a2fa:	693b      	ldr	r3, [r7, #16]
    a2fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a300:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a304:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    a306:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    a308:	697b      	ldr	r3, [r7, #20]
    a30a:	f003 0308 	and.w	r3, r3, #8
    a30e:	2b00      	cmp	r3, #0
    a310:	d003      	beq.n	a31a <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    a312:	68fb      	ldr	r3, [r7, #12]
    a314:	69ba      	ldr	r2, [r7, #24]
    a316:	675a      	str	r2, [r3, #116]	; 0x74
    a318:	e002      	b.n	a320 <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    a31a:	68fb      	ldr	r3, [r7, #12]
    a31c:	69ba      	ldr	r2, [r7, #24]
    a31e:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    a320:	697b      	ldr	r3, [r7, #20]
    a322:	f003 0310 	and.w	r3, r3, #16
    a326:	2b00      	cmp	r3, #0
    a328:	d004      	beq.n	a334 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    a32a:	68fb      	ldr	r3, [r7, #12]
    a32c:	69ba      	ldr	r2, [r7, #24]
    a32e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    a332:	e003      	b.n	a33c <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    a334:	68fb      	ldr	r3, [r7, #12]
    a336:	69ba      	ldr	r2, [r7, #24]
    a338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    a33c:	697b      	ldr	r3, [r7, #20]
    a33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a342:	2b00      	cmp	r3, #0
    a344:	d004      	beq.n	a350 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    a346:	68fb      	ldr	r3, [r7, #12]
    a348:	69ba      	ldr	r2, [r7, #24]
    a34a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    a34e:	e003      	b.n	a358 <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    a350:	68fb      	ldr	r3, [r7, #12]
    a352:	69ba      	ldr	r2, [r7, #24]
    a354:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    a358:	697b      	ldr	r3, [r7, #20]
    a35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a35e:	2b00      	cmp	r3, #0
    a360:	d004      	beq.n	a36c <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    a362:	68fb      	ldr	r3, [r7, #12]
    a364:	69ba      	ldr	r2, [r7, #24]
    a366:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    a36a:	e003      	b.n	a374 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    a36c:	68fb      	ldr	r3, [r7, #12]
    a36e:	69ba      	ldr	r2, [r7, #24]
    a370:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    a374:	697b      	ldr	r3, [r7, #20]
    a376:	f003 0301 	and.w	r3, r3, #1
    a37a:	2b00      	cmp	r3, #0
    a37c:	d003      	beq.n	a386 <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    a37e:	68fb      	ldr	r3, [r7, #12]
    a380:	69ba      	ldr	r2, [r7, #24]
    a382:	615a      	str	r2, [r3, #20]
    a384:	e002      	b.n	a38c <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    a386:	68fb      	ldr	r3, [r7, #12]
    a388:	69ba      	ldr	r2, [r7, #24]
    a38a:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    a38c:	697b      	ldr	r3, [r7, #20]
    a38e:	f003 0302 	and.w	r3, r3, #2
    a392:	2b00      	cmp	r3, #0
    a394:	d003      	beq.n	a39e <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    a396:	68fb      	ldr	r3, [r7, #12]
    a398:	69ba      	ldr	r2, [r7, #24]
    a39a:	625a      	str	r2, [r3, #36]	; 0x24
    a39c:	e002      	b.n	a3a4 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    a39e:	68fb      	ldr	r3, [r7, #12]
    a3a0:	69ba      	ldr	r2, [r7, #24]
    a3a2:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    a3a4:	697b      	ldr	r3, [r7, #20]
    a3a6:	f003 0304 	and.w	r3, r3, #4
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d003      	beq.n	a3b6 <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    a3ae:	68fb      	ldr	r3, [r7, #12]
    a3b0:	69ba      	ldr	r2, [r7, #24]
    a3b2:	635a      	str	r2, [r3, #52]	; 0x34
    a3b4:	e002      	b.n	a3bc <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    a3b6:	68fb      	ldr	r3, [r7, #12]
    a3b8:	69ba      	ldr	r2, [r7, #24]
    a3ba:	639a      	str	r2, [r3, #56]	; 0x38
	arch_ioport_set_pin_mode(pin, mode);
}
    a3bc:	3734      	adds	r7, #52	; 0x34
    a3be:	46bd      	mov	sp, r7
    a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3c4:	4770      	bx	lr
    a3c6:	bf00      	nop

0000a3c8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    a3c8:	b480      	push	{r7}
    a3ca:	b095      	sub	sp, #84	; 0x54
    a3cc:	af00      	add	r7, sp, #0
    a3ce:	6078      	str	r0, [r7, #4]
    a3d0:	460b      	mov	r3, r1
    a3d2:	70fb      	strb	r3, [r7, #3]
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    a3d8:	78fb      	ldrb	r3, [r7, #3]
    a3da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    a3de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	d12d      	bne.n	a442 <ioport_set_pin_dir+0x7a>
    a3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a3e8:	647b      	str	r3, [r7, #68]	; 0x44
    a3ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    a3ec:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a3f0:	095b      	lsrs	r3, r3, #5
    a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a3f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a3fa:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a3fe:	025b      	lsls	r3, r3, #9
    a400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a402:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a404:	6bba      	ldr	r2, [r7, #56]	; 0x38
    a406:	f002 021f 	and.w	r2, r2, #31
    a40a:	2101      	movs	r1, #1
    a40c:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    a410:	645a      	str	r2, [r3, #68]	; 0x44
    a412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a414:	637b      	str	r3, [r7, #52]	; 0x34
    a416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a418:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a41c:	095b      	lsrs	r3, r3, #5
    a41e:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a422:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a426:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a42a:	025b      	lsls	r3, r3, #9
    a42c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a42e:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a430:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a432:	f002 021f 	and.w	r2, r2, #31
    a436:	2101      	movs	r1, #1
    a438:	fa01 f202 	lsl.w	r2, r1, r2
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    a43c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    a440:	e030      	b.n	a4a4 <ioport_set_pin_dir+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
    a442:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    a446:	2b00      	cmp	r3, #0
    a448:	d12c      	bne.n	a4a4 <ioport_set_pin_dir+0xdc>
    a44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a44c:	627b      	str	r3, [r7, #36]	; 0x24
    a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a450:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a452:	6a3b      	ldr	r3, [r7, #32]
    a454:	095b      	lsrs	r3, r3, #5
    a456:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a458:	69fb      	ldr	r3, [r7, #28]
    a45a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a45e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a462:	025b      	lsls	r3, r3, #9
    a464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a466:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a468:	69ba      	ldr	r2, [r7, #24]
    a46a:	f002 021f 	and.w	r2, r2, #31
    a46e:	2101      	movs	r1, #1
    a470:	fa01 f202 	lsl.w	r2, r1, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    a474:	649a      	str	r2, [r3, #72]	; 0x48
    a476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a478:	617b      	str	r3, [r7, #20]
    a47a:	697b      	ldr	r3, [r7, #20]
    a47c:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a47e:	693b      	ldr	r3, [r7, #16]
    a480:	095b      	lsrs	r3, r3, #5
    a482:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a484:	68fb      	ldr	r3, [r7, #12]
    a486:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a48a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a48e:	025b      	lsls	r3, r3, #9
    a490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a492:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a494:	68ba      	ldr	r2, [r7, #8]
    a496:	f002 021f 	and.w	r2, r2, #31
    a49a:	2101      	movs	r1, #1
    a49c:	fa01 f202 	lsl.w	r2, r1, r2
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    a4a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	arch_ioport_set_pin_dir(pin, dir);
}
    a4a4:	3754      	adds	r7, #84	; 0x54
    a4a6:	46bd      	mov	sp, r7
    a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ac:	4770      	bx	lr
    a4ae:	bf00      	nop

0000a4b0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    a4b0:	b480      	push	{r7}
    a4b2:	b08d      	sub	sp, #52	; 0x34
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	6078      	str	r0, [r7, #4]
    a4b8:	460b      	mov	r3, r1
    a4ba:	70fb      	strb	r3, [r7, #3]
    a4bc:	687b      	ldr	r3, [r7, #4]
    a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4c0:	78fb      	ldrb	r3, [r7, #3]
    a4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    a4c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d016      	beq.n	a4fc <ioport_set_pin_level+0x4c>
    a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4d0:	627b      	str	r3, [r7, #36]	; 0x24
    a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a4d4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a4d6:	6a3b      	ldr	r3, [r7, #32]
    a4d8:	095b      	lsrs	r3, r3, #5
    a4da:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a4dc:	69fb      	ldr	r3, [r7, #28]
    a4de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a4e2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a4e6:	025b      	lsls	r3, r3, #9
    a4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a4ea:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a4ec:	69ba      	ldr	r2, [r7, #24]
    a4ee:	f002 021f 	and.w	r2, r2, #31
    a4f2:	2101      	movs	r1, #1
    a4f4:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    a4f8:	655a      	str	r2, [r3, #84]	; 0x54
    a4fa:	e015      	b.n	a528 <ioport_set_pin_level+0x78>
    a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4fe:	617b      	str	r3, [r7, #20]
    a500:	697b      	ldr	r3, [r7, #20]
    a502:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    a504:	693b      	ldr	r3, [r7, #16]
    a506:	095b      	lsrs	r3, r3, #5
    a508:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    a50a:	68fb      	ldr	r3, [r7, #12]
    a50c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    a510:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    a514:	025b      	lsls	r3, r3, #9
    a516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a518:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    a51a:	68ba      	ldr	r2, [r7, #8]
    a51c:	f002 021f 	and.w	r2, r2, #31
    a520:	2101      	movs	r1, #1
    a522:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    a526:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(pin, level);
}
    a528:	3734      	adds	r7, #52	; 0x34
    a52a:	46bd      	mov	sp, r7
    a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a530:	4770      	bx	lr
    a532:	bf00      	nop

0000a534 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    a534:	b580      	push	{r7, lr}
    a536:	b086      	sub	sp, #24
    a538:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    a53a:	463b      	mov	r3, r7
    a53c:	4618      	mov	r0, r3
    a53e:	4b2e      	ldr	r3, [pc, #184]	; (a5f8 <board_init+0xc4>)
    a540:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    a542:	f107 0210 	add.w	r2, r7, #16
    a546:	463b      	mov	r3, r7
    a548:	4610      	mov	r0, r2
    a54a:	492c      	ldr	r1, [pc, #176]	; (a5fc <board_init+0xc8>)
    a54c:	461a      	mov	r2, r3
    a54e:	4b2c      	ldr	r3, [pc, #176]	; (a600 <board_init+0xcc>)
    a550:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    a552:	f107 0310 	add.w	r3, r7, #16
    a556:	4618      	mov	r0, r3
    a558:	4b2a      	ldr	r3, [pc, #168]	; (a604 <board_init+0xd0>)
    a55a:	4798      	blx	r3
#endif

	/* Initialize IOPORT */
	ioport_init();
    a55c:	4b2a      	ldr	r3, [pc, #168]	; (a608 <board_init+0xd4>)
    a55e:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
    a560:	2047      	movs	r0, #71	; 0x47
    a562:	2101      	movs	r1, #1
    a564:	4b29      	ldr	r3, [pc, #164]	; (a60c <board_init+0xd8>)
    a566:	4798      	blx	r3
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
    a568:	2047      	movs	r0, #71	; 0x47
    a56a:	2101      	movs	r1, #1
    a56c:	4b28      	ldr	r3, [pc, #160]	; (a610 <board_init+0xdc>)
    a56e:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
    a570:	2058      	movs	r0, #88	; 0x58
    a572:	2100      	movs	r1, #0
    a574:	4b25      	ldr	r3, [pc, #148]	; (a60c <board_init+0xd8>)
    a576:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
    a578:	2058      	movs	r0, #88	; 0x58
    a57a:	2108      	movs	r1, #8
    a57c:	4b25      	ldr	r3, [pc, #148]	; (a614 <board_init+0xe0>)
    a57e:	4798      	blx	r3
	ioport_set_pin_dir(LCD_BL_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LCD_BL_GPIO, LCD_BL_INACTIVE_LEVEL);
#endif

#if defined (CONF_BOARD_COM_PORT)
	ioport_set_pin_peripheral_mode(COM_PORT_RX_PIN, COM_PORT_RX_MUX);
    a580:	205a      	movs	r0, #90	; 0x5a
    a582:	2100      	movs	r1, #0
    a584:	4b23      	ldr	r3, [pc, #140]	; (a614 <board_init+0xe0>)
    a586:	4798      	blx	r3
    a588:	205a      	movs	r0, #90	; 0x5a
    a58a:	4b23      	ldr	r3, [pc, #140]	; (a618 <board_init+0xe4>)
    a58c:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(COM_PORT_TX_PIN, COM_PORT_TX_MUX);
    a58e:	205b      	movs	r0, #91	; 0x5b
    a590:	2100      	movs	r1, #0
    a592:	4b20      	ldr	r3, [pc, #128]	; (a614 <board_init+0xe0>)
    a594:	4798      	blx	r3
    a596:	205b      	movs	r0, #91	; 0x5b
    a598:	4b1f      	ldr	r3, [pc, #124]	; (a618 <board_init+0xe4>)
    a59a:	4798      	blx	r3
#endif	

#endif

#if defined(CONF_BOARD_SPI) || defined(CONF_BOARD_SD_MMC_SPI)
	ioport_set_pin_peripheral_mode(PIN_PA21A_SPI_MISO, MUX_PA21A_SPI_MISO);
    a59c:	2015      	movs	r0, #21
    a59e:	2100      	movs	r1, #0
    a5a0:	4b1c      	ldr	r3, [pc, #112]	; (a614 <board_init+0xe0>)
    a5a2:	4798      	blx	r3
    a5a4:	2015      	movs	r0, #21
    a5a6:	4b1c      	ldr	r3, [pc, #112]	; (a618 <board_init+0xe4>)
    a5a8:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PA22A_SPI_MOSI, MUX_PA22A_SPI_MOSI);
    a5aa:	2016      	movs	r0, #22
    a5ac:	2100      	movs	r1, #0
    a5ae:	4b19      	ldr	r3, [pc, #100]	; (a614 <board_init+0xe0>)
    a5b0:	4798      	blx	r3
    a5b2:	2016      	movs	r0, #22
    a5b4:	4b18      	ldr	r3, [pc, #96]	; (a618 <board_init+0xe4>)
    a5b6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PC30B_SPI_SCK, MUX_PC30B_SPI_SCK);
    a5b8:	205e      	movs	r0, #94	; 0x5e
    a5ba:	2101      	movs	r1, #1
    a5bc:	4b15      	ldr	r3, [pc, #84]	; (a614 <board_init+0xe0>)
    a5be:	4798      	blx	r3
    a5c0:	205e      	movs	r0, #94	; 0x5e
    a5c2:	4b15      	ldr	r3, [pc, #84]	; (a618 <board_init+0xe4>)
    a5c4:	4798      	blx	r3

	#ifdef CONF_BOARD_SD_MMC_SPI
		/* Setting SD detection pin */
		ioport_set_pin_dir(SD_MMC_0_CD_GPIO, IOPORT_DIR_INPUT);
    a5c6:	202d      	movs	r0, #45	; 0x2d
    a5c8:	2100      	movs	r1, #0
    a5ca:	4b10      	ldr	r3, [pc, #64]	; (a60c <board_init+0xd8>)
    a5cc:	4798      	blx	r3
		ioport_set_pin_mode(SD_MMC_0_CD_GPIO, IOPORT_MODE_PULLUP);
    a5ce:	202d      	movs	r0, #45	; 0x2d
    a5d0:	2108      	movs	r1, #8
    a5d2:	4b10      	ldr	r3, [pc, #64]	; (a614 <board_init+0xe0>)
    a5d4:	4798      	blx	r3

		/* Setting SD CS pin */
		ioport_set_pin_peripheral_mode(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
    a5d6:	2043      	movs	r0, #67	; 0x43
    a5d8:	2100      	movs	r1, #0
    a5da:	4b0e      	ldr	r3, [pc, #56]	; (a614 <board_init+0xe0>)
    a5dc:	4798      	blx	r3
    a5de:	2043      	movs	r0, #67	; 0x43
    a5e0:	4b0d      	ldr	r3, [pc, #52]	; (a618 <board_init+0xe4>)
    a5e2:	4798      	blx	r3
	#endif
	#ifdef CONF_BOARD_SPI_NPCS0
		ioport_set_pin_peripheral_mode(PIN_PC03A_SPI_NPCS0,
    a5e4:	2043      	movs	r0, #67	; 0x43
    a5e6:	2100      	movs	r1, #0
    a5e8:	4b0a      	ldr	r3, [pc, #40]	; (a614 <board_init+0xe0>)
    a5ea:	4798      	blx	r3
    a5ec:	2043      	movs	r0, #67	; 0x43
    a5ee:	4b0a      	ldr	r3, [pc, #40]	; (a618 <board_init+0xe4>)
    a5f0:	4798      	blx	r3
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    a5f2:	3718      	adds	r7, #24
    a5f4:	46bd      	mov	sp, r7
    a5f6:	bd80      	pop	{r7, pc}
    a5f8:	0000aad1 	.word	0x0000aad1
    a5fc:	400f0c00 	.word	0x400f0c00
    a600:	0000ab0d 	.word	0x0000ab0d
    a604:	0000ac0d 	.word	0x0000ac0d
    a608:	0000a269 	.word	0x0000a269
    a60c:	0000a3c9 	.word	0x0000a3c9
    a610:	0000a4b1 	.word	0x0000a4b1
    a614:	0000a2c5 	.word	0x0000a2c5
    a618:	0000a27d 	.word	0x0000a27d

0000a61c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    a61c:	b480      	push	{r7}
    a61e:	b083      	sub	sp, #12
    a620:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a622:	f3ef 8310 	mrs	r3, PRIMASK
    a626:	603b      	str	r3, [r7, #0]
  return(result);
    a628:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    a62a:	2b00      	cmp	r3, #0
    a62c:	bf14      	ite	ne
    a62e:	2300      	movne	r3, #0
    a630:	2301      	moveq	r3, #1
    a632:	b2db      	uxtb	r3, r3
    a634:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    a636:	b672      	cpsid	i
    a638:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a63c:	4b04      	ldr	r3, [pc, #16]	; (a650 <cpu_irq_save+0x34>)
    a63e:	2200      	movs	r2, #0
    a640:	701a      	strb	r2, [r3, #0]
	return flags;
    a642:	687b      	ldr	r3, [r7, #4]
}
    a644:	4618      	mov	r0, r3
    a646:	370c      	adds	r7, #12
    a648:	46bd      	mov	sp, r7
    a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a64e:	4770      	bx	lr
    a650:	200004b0 	.word	0x200004b0

0000a654 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    a654:	b480      	push	{r7}
    a656:	b083      	sub	sp, #12
    a658:	af00      	add	r7, sp, #0
    a65a:	6078      	str	r0, [r7, #4]
	return (flags);
    a65c:	687b      	ldr	r3, [r7, #4]
    a65e:	2b00      	cmp	r3, #0
    a660:	bf0c      	ite	eq
    a662:	2300      	moveq	r3, #0
    a664:	2301      	movne	r3, #1
    a666:	b2db      	uxtb	r3, r3
}
    a668:	4618      	mov	r0, r3
    a66a:	370c      	adds	r7, #12
    a66c:	46bd      	mov	sp, r7
    a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a672:	4770      	bx	lr

0000a674 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    a674:	b580      	push	{r7, lr}
    a676:	b082      	sub	sp, #8
    a678:	af00      	add	r7, sp, #0
    a67a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    a67c:	6878      	ldr	r0, [r7, #4]
    a67e:	4b07      	ldr	r3, [pc, #28]	; (a69c <cpu_irq_restore+0x28>)
    a680:	4798      	blx	r3
    a682:	4603      	mov	r3, r0
    a684:	2b00      	cmp	r3, #0
    a686:	d005      	beq.n	a694 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    a688:	4b05      	ldr	r3, [pc, #20]	; (a6a0 <cpu_irq_restore+0x2c>)
    a68a:	2201      	movs	r2, #1
    a68c:	701a      	strb	r2, [r3, #0]
    a68e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    a692:	b662      	cpsie	i
}
    a694:	3708      	adds	r7, #8
    a696:	46bd      	mov	sp, r7
    a698:	bd80      	pop	{r7, pc}
    a69a:	bf00      	nop
    a69c:	0000a655 	.word	0x0000a655
    a6a0:	200004b0 	.word	0x200004b0

0000a6a4 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    a6a4:	b580      	push	{r7, lr}
    a6a6:	b08a      	sub	sp, #40	; 0x28
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	60f8      	str	r0, [r7, #12]
    a6ac:	60b9      	str	r1, [r7, #8]
    a6ae:	607a      	str	r2, [r7, #4]
	uint32_t pmcon = 0;
    a6b0:	2300      	movs	r3, #0
    a6b2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    a6b4:	68fb      	ldr	r3, [r7, #12]
    a6b6:	69db      	ldr	r3, [r3, #28]
    a6b8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a6bc:	f023 0303 	bic.w	r3, r3, #3
    a6c0:	627b      	str	r3, [r7, #36]	; 0x24
	pmcon |= BPM_PMCON_PS(ps_value);
    a6c2:	68bb      	ldr	r3, [r7, #8]
    a6c4:	f003 0303 	and.w	r3, r3, #3
    a6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a6ca:	4313      	orrs	r3, r2
    a6cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set PSCM Value: PS change no halt */
	pmcon |= BPM_PMCON_PSCM;
    a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a6d0:	f043 0308 	orr.w	r3, r3, #8
    a6d4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a6d8:	f043 0304 	orr.w	r3, r3, #4
    a6dc:	627b      	str	r3, [r7, #36]	; 0x24
	/* Execute power scaling no halt in RAM */
	irqflags_t flags;
	bool b_psok;
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();
    a6de:	4b16      	ldr	r3, [pc, #88]	; (a738 <bpm_power_scaling_cpu_failsafe+0x94>)
    a6e0:	4798      	blx	r3
    a6e2:	6238      	str	r0, [r7, #32]

	/* Save SysTick */
	val = SysTick->VAL;
    a6e4:	4b15      	ldr	r3, [pc, #84]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a6e6:	689b      	ldr	r3, [r3, #8]
    a6e8:	61fb      	str	r3, [r7, #28]
	ctrl = SysTick->CTRL;
    a6ea:	4b14      	ldr	r3, [pc, #80]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a6ec:	681b      	ldr	r3, [r3, #0]
    a6ee:	61bb      	str	r3, [r7, #24]
	load = SysTick->LOAD;
    a6f0:	4b12      	ldr	r3, [pc, #72]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a6f2:	685b      	ldr	r3, [r3, #4]
    a6f4:	617b      	str	r3, [r7, #20]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    a6f6:	4b11      	ldr	r3, [pc, #68]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a6f8:	687a      	ldr	r2, [r7, #4]
    a6fa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    a6fc:	4b0f      	ldr	r3, [pc, #60]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a6fe:	2205      	movs	r2, #5
    a700:	601a      	str	r2, [r3, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    a702:	68f8      	ldr	r0, [r7, #12]
    a704:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a706:	4b0e      	ldr	r3, [pc, #56]	; (a740 <bpm_power_scaling_cpu_failsafe+0x9c>)
    a708:	4798      	blx	r3
    a70a:	4603      	mov	r3, r0
    a70c:	74fb      	strb	r3, [r7, #19]

	/* Restore SysTick */
	SysTick->CTRL = 0;
    a70e:	4b0b      	ldr	r3, [pc, #44]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a710:	2200      	movs	r2, #0
    a712:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = load;
    a714:	4b09      	ldr	r3, [pc, #36]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a716:	697a      	ldr	r2, [r7, #20]
    a718:	605a      	str	r2, [r3, #4]
	SysTick->VAL = val;
    a71a:	4b08      	ldr	r3, [pc, #32]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a71c:	69fa      	ldr	r2, [r7, #28]
    a71e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = ctrl;
    a720:	4b06      	ldr	r3, [pc, #24]	; (a73c <bpm_power_scaling_cpu_failsafe+0x98>)
    a722:	69ba      	ldr	r2, [r7, #24]
    a724:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    a726:	6a38      	ldr	r0, [r7, #32]
    a728:	4b06      	ldr	r3, [pc, #24]	; (a744 <bpm_power_scaling_cpu_failsafe+0xa0>)
    a72a:	4798      	blx	r3
	return b_psok;
    a72c:	7cfb      	ldrb	r3, [r7, #19]
}
    a72e:	4618      	mov	r0, r3
    a730:	3728      	adds	r7, #40	; 0x28
    a732:	46bd      	mov	sp, r7
    a734:	bd80      	pop	{r7, pc}
    a736:	bf00      	nop
    a738:	0000a61d 	.word	0x0000a61d
    a73c:	e000e010 	.word	0xe000e010
    a740:	2000001d 	.word	0x2000001d
    a744:	0000a675 	.word	0x0000a675

0000a748 <bpm_power_scaling_cpu>:

void bpm_power_scaling_cpu(Bpm *bpm, uint32_t ps_value)
{
    a748:	b480      	push	{r7}
    a74a:	b085      	sub	sp, #20
    a74c:	af00      	add	r7, sp, #0
    a74e:	6078      	str	r0, [r7, #4]
    a750:	6039      	str	r1, [r7, #0]
	uint32_t pmcon = 0;
    a752:	2300      	movs	r3, #0
    a754:	60fb      	str	r3, [r7, #12]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    a756:	687b      	ldr	r3, [r7, #4]
    a758:	69db      	ldr	r3, [r3, #28]
    a75a:	60fb      	str	r3, [r7, #12]
	/* Clear last PS Value */
	pmcon &= ~BPM_PMCON_PS_Msk;
    a75c:	68fb      	ldr	r3, [r7, #12]
    a75e:	f023 0303 	bic.w	r3, r3, #3
    a762:	60fb      	str	r3, [r7, #12]
	/* Write new PS Value */
	pmcon |= BPM_PMCON_PS(ps_value);
    a764:	683b      	ldr	r3, [r7, #0]
    a766:	f003 0303 	and.w	r3, r3, #3
    a76a:	68fa      	ldr	r2, [r7, #12]
    a76c:	4313      	orrs	r3, r2
    a76e:	60fb      	str	r3, [r7, #12]
	/* PSCM: without CPU halt */
	pmcon |= BPM_PMCON_PSCM;
    a770:	68fb      	ldr	r3, [r7, #12]
    a772:	f043 0308 	orr.w	r3, r3, #8
    a776:	60fb      	str	r3, [r7, #12]
	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    a778:	68fb      	ldr	r3, [r7, #12]
    a77a:	f043 0304 	orr.w	r3, r3, #4
    a77e:	60fb      	str	r3, [r7, #12]
	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    a780:	4b05      	ldr	r3, [pc, #20]	; (a798 <bpm_power_scaling_cpu+0x50>)
    a782:	4a06      	ldr	r2, [pc, #24]	; (a79c <bpm_power_scaling_cpu+0x54>)
    a784:	619a      	str	r2, [r3, #24]
	/* Write back PM_CON value */
	bpm->BPM_PMCON = pmcon;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	68fa      	ldr	r2, [r7, #12]
    a78a:	61da      	str	r2, [r3, #28]
}
    a78c:	3714      	adds	r7, #20
    a78e:	46bd      	mov	sp, r7
    a790:	f85d 7b04 	ldr.w	r7, [sp], #4
    a794:	4770      	bx	lr
    a796:	bf00      	nop
    a798:	400f0000 	.word	0x400f0000
    a79c:	aa00001c 	.word	0xaa00001c

0000a7a0 <bpm_enable_fast_wakeup>:

void bpm_enable_fast_wakeup(Bpm *bpm)
{
    a7a0:	b480      	push	{r7}
    a7a2:	b085      	sub	sp, #20
    a7a4:	af00      	add	r7, sp, #0
    a7a6:	6078      	str	r0, [r7, #4]
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	69db      	ldr	r3, [r3, #28]
    a7ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    a7b0:	60fb      	str	r3, [r7, #12]
	BPM_UNLOCK(PMCON);
    a7b2:	4b05      	ldr	r3, [pc, #20]	; (a7c8 <bpm_enable_fast_wakeup+0x28>)
    a7b4:	4a05      	ldr	r2, [pc, #20]	; (a7cc <bpm_enable_fast_wakeup+0x2c>)
    a7b6:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	68fa      	ldr	r2, [r7, #12]
    a7bc:	61da      	str	r2, [r3, #28]
}
    a7be:	3714      	adds	r7, #20
    a7c0:	46bd      	mov	sp, r7
    a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7c6:	4770      	bx	lr
    a7c8:	400f0000 	.word	0x400f0000
    a7cc:	aa00001c 	.word	0xaa00001c

0000a7d0 <bpm_get_status>:
{
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
    a7d0:	b480      	push	{r7}
    a7d2:	b083      	sub	sp, #12
    a7d4:	af00      	add	r7, sp, #0
    a7d6:	6078      	str	r0, [r7, #4]
	return bpm->BPM_SR;
    a7d8:	687b      	ldr	r3, [r7, #4]
    a7da:	695b      	ldr	r3, [r3, #20]
}
    a7dc:	4618      	mov	r0, r3
    a7de:	370c      	adds	r7, #12
    a7e0:	46bd      	mov	sp, r7
    a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7e6:	4770      	bx	lr

0000a7e8 <flashcalw_set_wait_state>:
 *
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
    a7e8:	b480      	push	{r7}
    a7ea:	b083      	sub	sp, #12
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	6078      	str	r0, [r7, #4]
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    a7f0:	4a08      	ldr	r2, [pc, #32]	; (a814 <flashcalw_set_wait_state+0x2c>)
    a7f2:	4b08      	ldr	r3, [pc, #32]	; (a814 <flashcalw_set_wait_state+0x2c>)
    a7f4:	681b      	ldr	r3, [r3, #0]
    a7f6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d001      	beq.n	a804 <flashcalw_set_wait_state+0x1c>
    a800:	2340      	movs	r3, #64	; 0x40
    a802:	e000      	b.n	a806 <flashcalw_set_wait_state+0x1e>
    a804:	2300      	movs	r3, #0
    a806:	430b      	orrs	r3, r1
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    a808:	6013      	str	r3, [r2, #0]
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
			FLASHCALW_FCR_FWS_0);
}
    a80a:	370c      	adds	r7, #12
    a80c:	46bd      	mov	sp, r7
    a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a812:	4770      	bx	lr
    a814:	400a0000 	.word	0x400a0000

0000a818 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    a818:	b580      	push	{r7, lr}
    a81a:	b084      	sub	sp, #16
    a81c:	af00      	add	r7, sp, #0
    a81e:	60f8      	str	r0, [r7, #12]
    a820:	60b9      	str	r1, [r7, #8]
    a822:	4613      	mov	r3, r2
    a824:	71fb      	strb	r3, [r7, #7]
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    a826:	68bb      	ldr	r3, [r7, #8]
    a828:	2b00      	cmp	r3, #0
    a82a:	d132      	bne.n	a892 <flashcalw_set_flash_waitstate_and_readmode+0x7a>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    a82c:	68fa      	ldr	r2, [r7, #12]
    a82e:	4b22      	ldr	r3, [pc, #136]	; (a8b8 <flashcalw_set_flash_waitstate_and_readmode+0xa0>)
    a830:	429a      	cmp	r2, r3
    a832:	d915      	bls.n	a860 <flashcalw_set_flash_waitstate_and_readmode+0x48>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    a834:	68fa      	ldr	r2, [r7, #12]
    a836:	4b21      	ldr	r3, [pc, #132]	; (a8bc <flashcalw_set_flash_waitstate_and_readmode+0xa4>)
    a838:	429a      	cmp	r2, r3
    a83a:	d808      	bhi.n	a84e <flashcalw_set_flash_waitstate_and_readmode+0x36>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    a83c:	2001      	movs	r0, #1
    a83e:	4b20      	ldr	r3, [pc, #128]	; (a8c0 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    a840:	4798      	blx	r3
				flashcalw_issue_command(
    a842:	2011      	movs	r0, #17
    a844:	f04f 31ff 	mov.w	r1, #4294967295
    a848:	4b1e      	ldr	r3, [pc, #120]	; (a8c4 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    a84a:	4798      	blx	r3
    a84c:	e031      	b.n	a8b2 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    a84e:	2001      	movs	r0, #1
    a850:	4b1b      	ldr	r3, [pc, #108]	; (a8c0 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    a852:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    a854:	2010      	movs	r0, #16
    a856:	f04f 31ff 	mov.w	r1, #4294967295
    a85a:	4b1a      	ldr	r3, [pc, #104]	; (a8c4 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    a85c:	4798      	blx	r3
    a85e:	e028      	b.n	a8b2 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    a860:	79fb      	ldrb	r3, [r7, #7]
    a862:	2b00      	cmp	r3, #0
    a864:	d00c      	beq.n	a880 <flashcalw_set_flash_waitstate_and_readmode+0x68>
    a866:	68fa      	ldr	r2, [r7, #12]
    a868:	4b17      	ldr	r3, [pc, #92]	; (a8c8 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    a86a:	429a      	cmp	r2, r3
    a86c:	d808      	bhi.n	a880 <flashcalw_set_flash_waitstate_and_readmode+0x68>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    a86e:	2001      	movs	r0, #1
    a870:	4b13      	ldr	r3, [pc, #76]	; (a8c0 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    a872:	4798      	blx	r3
				flashcalw_issue_command(
    a874:	2011      	movs	r0, #17
    a876:	f04f 31ff 	mov.w	r1, #4294967295
    a87a:	4b12      	ldr	r3, [pc, #72]	; (a8c4 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    a87c:	4798      	blx	r3
    a87e:	e018      	b.n	a8b2 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    a880:	2000      	movs	r0, #0
    a882:	4b0f      	ldr	r3, [pc, #60]	; (a8c0 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    a884:	4798      	blx	r3
				flashcalw_issue_command(
    a886:	2011      	movs	r0, #17
    a888:	f04f 31ff 	mov.w	r1, #4294967295
    a88c:	4b0d      	ldr	r3, [pc, #52]	; (a8c4 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    a88e:	4798      	blx	r3
    a890:	e00f      	b.n	a8b2 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    a892:	68fa      	ldr	r2, [r7, #12]
    a894:	4b0d      	ldr	r3, [pc, #52]	; (a8cc <flashcalw_set_flash_waitstate_and_readmode+0xb4>)
    a896:	429a      	cmp	r2, r3
    a898:	d903      	bls.n	a8a2 <flashcalw_set_flash_waitstate_and_readmode+0x8a>
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    a89a:	2001      	movs	r0, #1
    a89c:	4b08      	ldr	r3, [pc, #32]	; (a8c0 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    a89e:	4798      	blx	r3
    a8a0:	e002      	b.n	a8a8 <flashcalw_set_flash_waitstate_and_readmode+0x90>
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    a8a2:	2000      	movs	r0, #0
    a8a4:	4b06      	ldr	r3, [pc, #24]	; (a8c0 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    a8a6:	4798      	blx	r3
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    a8a8:	2011      	movs	r0, #17
    a8aa:	f04f 31ff 	mov.w	r1, #4294967295
    a8ae:	4b05      	ldr	r3, [pc, #20]	; (a8c4 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    a8b0:	4798      	blx	r3
	}
#endif
}
    a8b2:	3710      	adds	r7, #16
    a8b4:	46bd      	mov	sp, r7
    a8b6:	bd80      	pop	{r7, pc}
    a8b8:	0112a880 	.word	0x0112a880
    a8bc:	02255100 	.word	0x02255100
    a8c0:	0000a7e9 	.word	0x0000a7e9
    a8c4:	0000a92d 	.word	0x0000a92d
    a8c8:	00b71b00 	.word	0x00b71b00
    a8cc:	007a1200 	.word	0x007a1200

0000a8d0 <flashcalw_is_ready>:
/*! \brief Tells whether the FLASHCALW is ready to run a new command.
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
    a8d0:	b480      	push	{r7}
    a8d2:	af00      	add	r7, sp, #0
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    a8d4:	4b06      	ldr	r3, [pc, #24]	; (a8f0 <flashcalw_is_ready+0x20>)
    a8d6:	689b      	ldr	r3, [r3, #8]
    a8d8:	f003 0301 	and.w	r3, r3, #1
    a8dc:	2b00      	cmp	r3, #0
    a8de:	bf0c      	ite	eq
    a8e0:	2300      	moveq	r3, #0
    a8e2:	2301      	movne	r3, #1
    a8e4:	b2db      	uxtb	r3, r3
}
    a8e6:	4618      	mov	r0, r3
    a8e8:	46bd      	mov	sp, r7
    a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8ee:	4770      	bx	lr
    a8f0:	400a0000 	.word	0x400a0000

0000a8f4 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    a8f4:	b580      	push	{r7, lr}
    a8f6:	af00      	add	r7, sp, #0
	while (!flashcalw_is_ready()) {
    a8f8:	bf00      	nop
    a8fa:	4b04      	ldr	r3, [pc, #16]	; (a90c <flashcalw_default_wait_until_ready+0x18>)
    a8fc:	4798      	blx	r3
    a8fe:	4603      	mov	r3, r0
    a900:	f083 0301 	eor.w	r3, r3, #1
    a904:	b2db      	uxtb	r3, r3
    a906:	2b00      	cmp	r3, #0
    a908:	d1f7      	bne.n	a8fa <flashcalw_default_wait_until_ready+0x6>
	}
}
    a90a:	bd80      	pop	{r7, pc}
    a90c:	0000a8d1 	.word	0x0000a8d1

0000a910 <flashcalw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
    a910:	b480      	push	{r7}
    a912:	af00      	add	r7, sp, #0
	return HFLASHC->FLASHCALW_FSR &
    a914:	4b04      	ldr	r3, [pc, #16]	; (a928 <flashcalw_get_error_status+0x18>)
    a916:	689b      	ldr	r3, [r3, #8]
    a918:	f003 030c 	and.w	r3, r3, #12
	       (FLASHCALW_FSR_LOCKE | FLASHCALW_FSR_PROGE);
}
    a91c:	4618      	mov	r0, r3
    a91e:	46bd      	mov	sp, r7
    a920:	f85d 7b04 	ldr.w	r7, [sp], #4
    a924:	4770      	bx	lr
    a926:	bf00      	nop
    a928:	400a0000 	.word	0x400a0000

0000a92c <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    a92c:	b580      	push	{r7, lr}
    a92e:	b084      	sub	sp, #16
    a930:	af00      	add	r7, sp, #0
    a932:	6078      	str	r0, [r7, #4]
    a934:	6039      	str	r1, [r7, #0]
	uint32_t tempo;

	flashcalw_wait_until_ready();
    a936:	4b16      	ldr	r3, [pc, #88]	; (a990 <flashcalw_issue_command+0x64>)
    a938:	681b      	ldr	r3, [r3, #0]
    a93a:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    a93c:	4b15      	ldr	r3, [pc, #84]	; (a994 <flashcalw_issue_command+0x68>)
    a93e:	685b      	ldr	r3, [r3, #4]
    a940:	60fb      	str	r3, [r7, #12]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    a942:	68fb      	ldr	r3, [r7, #12]
    a944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    a948:	60fb      	str	r3, [r7, #12]
	if (page_number >= 0) {
    a94a:	683b      	ldr	r3, [r7, #0]
    a94c:	2b00      	cmp	r3, #0
    a94e:	db0b      	blt.n	a968 <flashcalw_issue_command+0x3c>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    a950:	683b      	ldr	r3, [r7, #0]
    a952:	021b      	lsls	r3, r3, #8
    a954:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a958:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a95c:	687a      	ldr	r2, [r7, #4]
    a95e:	4313      	orrs	r3, r2
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    a960:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    a964:	60fb      	str	r3, [r7, #12]
    a966:	e005      	b.n	a974 <flashcalw_issue_command+0x48>
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    a968:	687a      	ldr	r2, [r7, #4]
    a96a:	68fb      	ldr	r3, [r7, #12]
    a96c:	4313      	orrs	r3, r2
    a96e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    a972:	60fb      	str	r3, [r7, #12]
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    a974:	4b07      	ldr	r3, [pc, #28]	; (a994 <flashcalw_issue_command+0x68>)
    a976:	68fa      	ldr	r2, [r7, #12]
    a978:	605a      	str	r2, [r3, #4]
	flashcalw_error_status = flashcalw_get_error_status();
    a97a:	4b07      	ldr	r3, [pc, #28]	; (a998 <flashcalw_issue_command+0x6c>)
    a97c:	4798      	blx	r3
    a97e:	4602      	mov	r2, r0
    a980:	4b06      	ldr	r3, [pc, #24]	; (a99c <flashcalw_issue_command+0x70>)
    a982:	601a      	str	r2, [r3, #0]
	flashcalw_wait_until_ready();
    a984:	4b02      	ldr	r3, [pc, #8]	; (a990 <flashcalw_issue_command+0x64>)
    a986:	681b      	ldr	r3, [r3, #0]
    a988:	4798      	blx	r3
}
    a98a:	3710      	adds	r7, #16
    a98c:	46bd      	mov	sp, r7
    a98e:	bd80      	pop	{r7, pc}
    a990:	200004b4 	.word	0x200004b4
    a994:	400a0000 	.word	0x400a0000
    a998:	0000a911 	.word	0x0000a911
    a99c:	20000e24 	.word	0x20000e24

0000a9a0 <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    a9a0:	b480      	push	{r7}
    a9a2:	b083      	sub	sp, #12
    a9a4:	af00      	add	r7, sp, #0
    a9a6:	4603      	mov	r3, r0
    a9a8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    a9aa:	79fb      	ldrb	r3, [r7, #7]
    a9ac:	2b0d      	cmp	r3, #13
    a9ae:	d82b      	bhi.n	aa08 <dfll_priv_get_source_hz+0x68>
    a9b0:	a201      	add	r2, pc, #4	; (adr r2, a9b8 <dfll_priv_get_source_hz+0x18>)
    a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a9b6:	bf00      	nop
    a9b8:	0000a9f1 	.word	0x0000a9f1
    a9bc:	0000a9f5 	.word	0x0000a9f5
    a9c0:	0000aa09 	.word	0x0000aa09
    a9c4:	0000a9fb 	.word	0x0000a9fb
    a9c8:	0000a9ff 	.word	0x0000a9ff
    a9cc:	0000aa09 	.word	0x0000aa09
    a9d0:	0000aa09 	.word	0x0000aa09
    a9d4:	0000aa09 	.word	0x0000aa09
    a9d8:	0000aa09 	.word	0x0000aa09
    a9dc:	0000aa09 	.word	0x0000aa09
    a9e0:	0000aa09 	.word	0x0000aa09
    a9e4:	0000aa09 	.word	0x0000aa09
    a9e8:	0000aa09 	.word	0x0000aa09
    a9ec:	0000aa03 	.word	0x0000aa03
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    a9f0:	4b09      	ldr	r3, [pc, #36]	; (aa18 <dfll_priv_get_source_hz+0x78>)
    a9f2:	e00a      	b.n	aa0a <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    a9f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    a9f8:	e007      	b.n	aa0a <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    a9fa:	4b08      	ldr	r3, [pc, #32]	; (aa1c <dfll_priv_get_source_hz+0x7c>)
    a9fc:	e005      	b.n	aa0a <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    a9fe:	4b08      	ldr	r3, [pc, #32]	; (aa20 <dfll_priv_get_source_hz+0x80>)
    aa00:	e003      	b.n	aa0a <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    aa02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    aa06:	e000      	b.n	aa0a <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    aa08:	2300      	movs	r3, #0
	}
}
    aa0a:	4618      	mov	r0, r3
    aa0c:	370c      	adds	r7, #12
    aa0e:	46bd      	mov	sp, r7
    aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa14:	4770      	bx	lr
    aa16:	bf00      	nop
    aa18:	0001c138 	.word	0x0001c138
    aa1c:	00b71b00 	.word	0x00b71b00
    aa20:	04c4b400 	.word	0x04c4b400

0000aa24 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    aa24:	b580      	push	{r7, lr}
    aa26:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    aa28:	2001      	movs	r0, #1
    aa2a:	4b04      	ldr	r3, [pc, #16]	; (aa3c <sysclk_get_main_hz+0x18>)
    aa2c:	4798      	blx	r3
    aa2e:	4603      	mov	r3, r0
    aa30:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    aa34:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    aa38:	4618      	mov	r0, r3
    aa3a:	bd80      	pop	{r7, pc}
    aa3c:	0000a9a1 	.word	0x0000a9a1

0000aa40 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    aa40:	b580      	push	{r7, lr}
    aa42:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    aa44:	4b02      	ldr	r3, [pc, #8]	; (aa50 <sysclk_get_cpu_hz+0x10>)
    aa46:	4798      	blx	r3
    aa48:	4603      	mov	r3, r0
}
    aa4a:	4618      	mov	r0, r3
    aa4c:	bd80      	pop	{r7, pc}
    aa4e:	bf00      	nop
    aa50:	0000aa25 	.word	0x0000aa25

0000aa54 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    aa54:	b580      	push	{r7, lr}
    aa56:	b084      	sub	sp, #16
    aa58:	af00      	add	r7, sp, #0
    aa5a:	6078      	str	r0, [r7, #4]
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    aa5c:	4b19      	ldr	r3, [pc, #100]	; (aac4 <wdt_set_ctrl+0x70>)
    aa5e:	681b      	ldr	r3, [r3, #0]
    aa60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    aa64:	2b00      	cmp	r3, #0
    aa66:	d10e      	bne.n	aa86 <wdt_set_ctrl+0x32>
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    aa68:	4b17      	ldr	r3, [pc, #92]	; (aac8 <wdt_set_ctrl+0x74>)
    aa6a:	4798      	blx	r3
    aa6c:	4603      	mov	r3, r0
    aa6e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    aa72:	339c      	adds	r3, #156	; 0x9c
    aa74:	005b      	lsls	r3, r3, #1
    aa76:	3b01      	subs	r3, #1
    aa78:	08da      	lsrs	r2, r3, #3
    aa7a:	4b14      	ldr	r3, [pc, #80]	; (aacc <wdt_set_ctrl+0x78>)
    aa7c:	fba3 1302 	umull	r1, r3, r3, r2
    aa80:	0a5b      	lsrs	r3, r3, #9
    aa82:	60fb      	str	r3, [r7, #12]
    aa84:	e008      	b.n	aa98 <wdt_set_ctrl+0x44>
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    aa86:	4b10      	ldr	r3, [pc, #64]	; (aac8 <wdt_set_ctrl+0x74>)
    aa88:	4798      	blx	r3
    aa8a:	4603      	mov	r3, r0
    aa8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    aa90:	005b      	lsls	r3, r3, #1
    aa92:	3b01      	subs	r3, #1
    aa94:	0bdb      	lsrs	r3, r3, #15
    aa96:	60fb      	str	r3, [r7, #12]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    aa98:	68fb      	ldr	r3, [r7, #12]
    aa9a:	08db      	lsrs	r3, r3, #3
    aa9c:	60fb      	str	r3, [r7, #12]
	while(dly--);
    aa9e:	bf00      	nop
    aaa0:	68fb      	ldr	r3, [r7, #12]
    aaa2:	1e5a      	subs	r2, r3, #1
    aaa4:	60fa      	str	r2, [r7, #12]
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d1fa      	bne.n	aaa0 <wdt_set_ctrl+0x4c>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    aaaa:	4b06      	ldr	r3, [pc, #24]	; (aac4 <wdt_set_ctrl+0x70>)
    aaac:	687a      	ldr	r2, [r7, #4]
    aaae:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
    aab2:	601a      	str	r2, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    aab4:	4b03      	ldr	r3, [pc, #12]	; (aac4 <wdt_set_ctrl+0x70>)
    aab6:	687a      	ldr	r2, [r7, #4]
    aab8:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
    aabc:	601a      	str	r2, [r3, #0]
}
    aabe:	3710      	adds	r7, #16
    aac0:	46bd      	mov	sp, r7
    aac2:	bd80      	pop	{r7, pc}
    aac4:	400f0c00 	.word	0x400f0c00
    aac8:	0000aa41 	.word	0x0000aa41
    aacc:	091e38ab 	.word	0x091e38ab

0000aad0 <wdt_get_config_defaults>:
 *  - No window period, so that the watchdog count can be reset at any time.
 *
 *  \param cfg    Configuration structure to initialize to default values.
 */
void wdt_get_config_defaults(struct wdt_config *const cfg)
{
    aad0:	b480      	push	{r7}
    aad2:	b083      	sub	sp, #12
    aad4:	af00      	add	r7, sp, #0
    aad6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    aad8:	687b      	ldr	r3, [r7, #4]
    aada:	2200      	movs	r2, #0
    aadc:	601a      	str	r2, [r3, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    aade:	687b      	ldr	r3, [r7, #4]
    aae0:	2200      	movs	r2, #0
    aae2:	605a      	str	r2, [r3, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    aae4:	687b      	ldr	r3, [r7, #4]
    aae6:	2210      	movs	r2, #16
    aae8:	721a      	strb	r2, [r3, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	2200      	movs	r2, #0
    aaee:	725a      	strb	r2, [r3, #9]
	cfg->disable_flash_cali = true;
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	2201      	movs	r2, #1
    aaf4:	729a      	strb	r2, [r3, #10]
	cfg->disable_wdt_after_reset = true;
    aaf6:	687b      	ldr	r3, [r7, #4]
    aaf8:	2201      	movs	r2, #1
    aafa:	72da      	strb	r2, [r3, #11]
	cfg->always_on = false;
    aafc:	687b      	ldr	r3, [r7, #4]
    aafe:	2200      	movs	r2, #0
    ab00:	731a      	strb	r2, [r3, #12]
}
    ab02:	370c      	adds	r7, #12
    ab04:	46bd      	mov	sp, r7
    ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab0a:	4770      	bx	lr

0000ab0c <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    ab0c:	b580      	push	{r7, lr}
    ab0e:	b084      	sub	sp, #16
    ab10:	af00      	add	r7, sp, #0
    ab12:	60f8      	str	r0, [r7, #12]
    ab14:	60b9      	str	r1, [r7, #8]
    ab16:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    ab18:	68fb      	ldr	r3, [r7, #12]
    ab1a:	68ba      	ldr	r2, [r7, #8]
    ab1c:	601a      	str	r2, [r3, #0]
	dev_inst->wdt_cfg = cfg;
    ab1e:	68fb      	ldr	r3, [r7, #12]
    ab20:	687a      	ldr	r2, [r7, #4]
    ab22:	605a      	str	r2, [r3, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    ab24:	68b8      	ldr	r0, [r7, #8]
    ab26:	4b36      	ldr	r3, [pc, #216]	; (ac00 <wdt_init+0xf4>)
    ab28:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    ab2a:	68bb      	ldr	r3, [r7, #8]
    ab2c:	681b      	ldr	r3, [r3, #0]
    ab2e:	f003 0308 	and.w	r3, r3, #8
    ab32:	2b00      	cmp	r3, #0
    ab34:	d001      	beq.n	ab3a <wdt_init+0x2e>
		return false;
    ab36:	2300      	movs	r3, #0
    ab38:	e05d      	b.n	abf6 <wdt_init+0xea>
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    ab3a:	68bb      	ldr	r3, [r7, #8]
    ab3c:	681b      	ldr	r3, [r3, #0]
    ab3e:	f003 0301 	and.w	r3, r3, #1
    ab42:	2b00      	cmp	r3, #0
    ab44:	d00d      	beq.n	ab62 <wdt_init+0x56>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    ab46:	68bb      	ldr	r3, [r7, #8]
    ab48:	681b      	ldr	r3, [r3, #0]
    ab4a:	f023 0301 	bic.w	r3, r3, #1
    ab4e:	4618      	mov	r0, r3
    ab50:	4b2c      	ldr	r3, [pc, #176]	; (ac04 <wdt_init+0xf8>)
    ab52:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    ab54:	bf00      	nop
    ab56:	68bb      	ldr	r3, [r7, #8]
    ab58:	681b      	ldr	r3, [r3, #0]
    ab5a:	f003 0301 	and.w	r3, r3, #1
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d1f9      	bne.n	ab56 <wdt_init+0x4a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    ab62:	68bb      	ldr	r3, [r7, #8]
    ab64:	681b      	ldr	r3, [r3, #0]
    ab66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d00d      	beq.n	ab8a <wdt_init+0x7e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    ab6e:	68bb      	ldr	r3, [r7, #8]
    ab70:	681b      	ldr	r3, [r3, #0]
    ab72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ab76:	4618      	mov	r0, r3
    ab78:	4b22      	ldr	r3, [pc, #136]	; (ac04 <wdt_init+0xf8>)
    ab7a:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    ab7c:	bf00      	nop
    ab7e:	68bb      	ldr	r3, [r7, #8]
    ab80:	681b      	ldr	r3, [r3, #0]
    ab82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    ab86:	2b00      	cmp	r3, #0
    ab88:	d1f9      	bne.n	ab7e <wdt_init+0x72>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    ab8a:	687b      	ldr	r3, [r7, #4]
    ab8c:	681a      	ldr	r2, [r3, #0]
			cfg->wdt_mode |
    ab8e:	687b      	ldr	r3, [r7, #4]
    ab90:	685b      	ldr	r3, [r3, #4]
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    ab92:	431a      	orrs	r2, r3
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	7a1b      	ldrb	r3, [r3, #8]
    ab98:	021b      	lsls	r3, r3, #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    ab9a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    ab9e:	431a      	orrs	r2, r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    aba0:	687b      	ldr	r3, [r7, #4]
    aba2:	7a5b      	ldrb	r3, [r3, #9]
    aba4:	049b      	lsls	r3, r3, #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    aba6:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
    abaa:	431a      	orrs	r2, r3
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	7a9b      	ldrb	r3, [r3, #10]

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    abb0:	2b00      	cmp	r3, #0
    abb2:	d001      	beq.n	abb8 <wdt_init+0xac>
    abb4:	2380      	movs	r3, #128	; 0x80
    abb6:	e000      	b.n	abba <wdt_init+0xae>
    abb8:	2300      	movs	r3, #0
    abba:	431a      	orrs	r2, r3
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
    abbc:	687b      	ldr	r3, [r7, #4]
    abbe:	7adb      	ldrb	r3, [r3, #11]
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    abc0:	2b00      	cmp	r3, #0
    abc2:	d001      	beq.n	abc8 <wdt_init+0xbc>
    abc4:	2302      	movs	r3, #2
    abc6:	e000      	b.n	abca <wdt_init+0xbe>
    abc8:	2300      	movs	r3, #0
    abca:	4313      	orrs	r3, r2
    abcc:	4618      	mov	r0, r3
    abce:	4b0d      	ldr	r3, [pc, #52]	; (ac04 <wdt_init+0xf8>)
    abd0:	4798      	blx	r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    abd2:	68bb      	ldr	r3, [r7, #8]
    abd4:	681b      	ldr	r3, [r3, #0]
    abd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    abda:	4618      	mov	r0, r3
    abdc:	4b09      	ldr	r3, [pc, #36]	; (ac04 <wdt_init+0xf8>)
    abde:	4798      	blx	r3
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    abe0:	bf00      	nop
    abe2:	68bb      	ldr	r3, [r7, #8]
    abe4:	681b      	ldr	r3, [r3, #0]
    abe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    abea:	2b00      	cmp	r3, #0
    abec:	d0f9      	beq.n	abe2 <wdt_init+0xd6>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    abee:	68b8      	ldr	r0, [r7, #8]
    abf0:	4b05      	ldr	r3, [pc, #20]	; (ac08 <wdt_init+0xfc>)
    abf2:	4798      	blx	r3

	return true;
    abf4:	2301      	movs	r3, #1
}
    abf6:	4618      	mov	r0, r3
    abf8:	3710      	adds	r7, #16
    abfa:	46bd      	mov	sp, r7
    abfc:	bd80      	pop	{r7, pc}
    abfe:	bf00      	nop
    ac00:	000098ed 	.word	0x000098ed
    ac04:	0000aa55 	.word	0x0000aa55
    ac08:	00009d1d 	.word	0x00009d1d

0000ac0c <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    ac0c:	b580      	push	{r7, lr}
    ac0e:	b084      	sub	sp, #16
    ac10:	af00      	add	r7, sp, #0
    ac12:	6078      	str	r0, [r7, #4]
	Wdt *wdt = dev_inst->hw_dev;
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	681b      	ldr	r3, [r3, #0]
    ac18:	60fb      	str	r3, [r7, #12]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    ac1a:	68fb      	ldr	r3, [r7, #12]
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	f023 0301 	bic.w	r3, r3, #1
    ac22:	4618      	mov	r0, r3
    ac24:	4b07      	ldr	r3, [pc, #28]	; (ac44 <wdt_disable+0x38>)
    ac26:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    ac28:	bf00      	nop
    ac2a:	68fb      	ldr	r3, [r7, #12]
    ac2c:	681b      	ldr	r3, [r3, #0]
    ac2e:	f003 0301 	and.w	r3, r3, #1
    ac32:	2b00      	cmp	r3, #0
    ac34:	d1f9      	bne.n	ac2a <wdt_disable+0x1e>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    ac36:	68f8      	ldr	r0, [r7, #12]
    ac38:	4b03      	ldr	r3, [pc, #12]	; (ac48 <wdt_disable+0x3c>)
    ac3a:	4798      	blx	r3
}
    ac3c:	3710      	adds	r7, #16
    ac3e:	46bd      	mov	sp, r7
    ac40:	bd80      	pop	{r7, pc}
    ac42:	bf00      	nop
    ac44:	0000aa55 	.word	0x0000aa55
    ac48:	00009d1d 	.word	0x00009d1d

0000ac4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    ac4c:	b480      	push	{r7}
    ac4e:	af00      	add	r7, sp, #0
	while (1) {
	}
    ac50:	e7fe      	b.n	ac50 <Dummy_Handler+0x4>
    ac52:	bf00      	nop

0000ac54 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    ac54:	b580      	push	{r7, lr}
    ac56:	b082      	sub	sp, #8
    ac58:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
    ac5a:	4b16      	ldr	r3, [pc, #88]	; (acb4 <Reset_Handler+0x60>)
    ac5c:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
    ac5e:	4b16      	ldr	r3, [pc, #88]	; (acb8 <Reset_Handler+0x64>)
    ac60:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
    ac62:	687a      	ldr	r2, [r7, #4]
    ac64:	683b      	ldr	r3, [r7, #0]
    ac66:	429a      	cmp	r2, r3
    ac68:	d00c      	beq.n	ac84 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
    ac6a:	e007      	b.n	ac7c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
    ac6c:	683b      	ldr	r3, [r7, #0]
    ac6e:	1d1a      	adds	r2, r3, #4
    ac70:	603a      	str	r2, [r7, #0]
    ac72:	687a      	ldr	r2, [r7, #4]
    ac74:	1d11      	adds	r1, r2, #4
    ac76:	6079      	str	r1, [r7, #4]
    ac78:	6812      	ldr	r2, [r2, #0]
    ac7a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    ac7c:	683a      	ldr	r2, [r7, #0]
    ac7e:	4b0f      	ldr	r3, [pc, #60]	; (acbc <Reset_Handler+0x68>)
    ac80:	429a      	cmp	r2, r3
    ac82:	d3f3      	bcc.n	ac6c <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    ac84:	4b0e      	ldr	r3, [pc, #56]	; (acc0 <Reset_Handler+0x6c>)
    ac86:	603b      	str	r3, [r7, #0]
    ac88:	e004      	b.n	ac94 <Reset_Handler+0x40>
		*pDest++ = 0;
    ac8a:	683b      	ldr	r3, [r7, #0]
    ac8c:	1d1a      	adds	r2, r3, #4
    ac8e:	603a      	str	r2, [r7, #0]
    ac90:	2200      	movs	r2, #0
    ac92:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    ac94:	683a      	ldr	r2, [r7, #0]
    ac96:	4b0b      	ldr	r3, [pc, #44]	; (acc4 <Reset_Handler+0x70>)
    ac98:	429a      	cmp	r2, r3
    ac9a:	d3f6      	bcc.n	ac8a <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
    ac9c:	4b0a      	ldr	r3, [pc, #40]	; (acc8 <Reset_Handler+0x74>)
    ac9e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    aca0:	4b0a      	ldr	r3, [pc, #40]	; (accc <Reset_Handler+0x78>)
    aca2:	687a      	ldr	r2, [r7, #4]
    aca4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    aca8:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
    acaa:	4b09      	ldr	r3, [pc, #36]	; (acd0 <Reset_Handler+0x7c>)
    acac:	4798      	blx	r3

	/* Branch to main function */
	main();
    acae:	4b09      	ldr	r3, [pc, #36]	; (acd4 <Reset_Handler+0x80>)
    acb0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
    acb2:	e7fe      	b.n	acb2 <Reset_Handler+0x5e>
    acb4:	000131b4 	.word	0x000131b4
    acb8:	20000000 	.word	0x20000000
    acbc:	20000d80 	.word	0x20000d80
    acc0:	20000d80 	.word	0x20000d80
    acc4:	2000149c 	.word	0x2000149c
    acc8:	00000000 	.word	0x00000000
    accc:	e000ed00 	.word	0xe000ed00
    acd0:	0000d6b9 	.word	0x0000d6b9
    acd4:	0000b9d9 	.word	0x0000b9d9

0000acd8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    acd8:	b480      	push	{r7}
    acda:	b085      	sub	sp, #20
    acdc:	af00      	add	r7, sp, #0
    acde:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
    ace0:	4b10      	ldr	r3, [pc, #64]	; (ad24 <_sbrk+0x4c>)
    ace2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
    ace4:	4b10      	ldr	r3, [pc, #64]	; (ad28 <_sbrk+0x50>)
    ace6:	681b      	ldr	r3, [r3, #0]
    ace8:	2b00      	cmp	r3, #0
    acea:	d102      	bne.n	acf2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
    acec:	4b0e      	ldr	r3, [pc, #56]	; (ad28 <_sbrk+0x50>)
    acee:	4a0f      	ldr	r2, [pc, #60]	; (ad2c <_sbrk+0x54>)
    acf0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    acf2:	4b0d      	ldr	r3, [pc, #52]	; (ad28 <_sbrk+0x50>)
    acf4:	681b      	ldr	r3, [r3, #0]
    acf6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
    acf8:	68ba      	ldr	r2, [r7, #8]
    acfa:	687b      	ldr	r3, [r7, #4]
    acfc:	441a      	add	r2, r3
    acfe:	68fb      	ldr	r3, [r7, #12]
    ad00:	429a      	cmp	r2, r3
    ad02:	dd02      	ble.n	ad0a <_sbrk+0x32>
		return (caddr_t) -1;	
    ad04:	f04f 33ff 	mov.w	r3, #4294967295
    ad08:	e006      	b.n	ad18 <_sbrk+0x40>
	}

	heap += incr;
    ad0a:	4b07      	ldr	r3, [pc, #28]	; (ad28 <_sbrk+0x50>)
    ad0c:	681a      	ldr	r2, [r3, #0]
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	441a      	add	r2, r3
    ad12:	4b05      	ldr	r3, [pc, #20]	; (ad28 <_sbrk+0x50>)
    ad14:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    ad16:	68bb      	ldr	r3, [r7, #8]
}
    ad18:	4618      	mov	r0, r3
    ad1a:	3714      	adds	r7, #20
    ad1c:	46bd      	mov	sp, r7
    ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad22:	4770      	bx	lr
    ad24:	20007ffc 	.word	0x20007ffc
    ad28:	20000e28 	.word	0x20000e28
    ad2c:	200024a0 	.word	0x200024a0

0000ad30 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    ad30:	b480      	push	{r7}
    ad32:	b083      	sub	sp, #12
    ad34:	af00      	add	r7, sp, #0
    ad36:	6078      	str	r0, [r7, #4]
	return -1;
    ad38:	f04f 33ff 	mov.w	r3, #4294967295
}
    ad3c:	4618      	mov	r0, r3
    ad3e:	370c      	adds	r7, #12
    ad40:	46bd      	mov	sp, r7
    ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad46:	4770      	bx	lr

0000ad48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    ad48:	b480      	push	{r7}
    ad4a:	b083      	sub	sp, #12
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	6078      	str	r0, [r7, #4]
    ad50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    ad52:	683b      	ldr	r3, [r7, #0]
    ad54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    ad58:	605a      	str	r2, [r3, #4]

	return 0;
    ad5a:	2300      	movs	r3, #0
}
    ad5c:	4618      	mov	r0, r3
    ad5e:	370c      	adds	r7, #12
    ad60:	46bd      	mov	sp, r7
    ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad66:	4770      	bx	lr

0000ad68 <_isatty>:

extern int _isatty(int file)
{
    ad68:	b480      	push	{r7}
    ad6a:	b083      	sub	sp, #12
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	6078      	str	r0, [r7, #4]
	return 1;
    ad70:	2301      	movs	r3, #1
}
    ad72:	4618      	mov	r0, r3
    ad74:	370c      	adds	r7, #12
    ad76:	46bd      	mov	sp, r7
    ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad7c:	4770      	bx	lr
    ad7e:	bf00      	nop

0000ad80 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    ad80:	b480      	push	{r7}
    ad82:	b085      	sub	sp, #20
    ad84:	af00      	add	r7, sp, #0
    ad86:	60f8      	str	r0, [r7, #12]
    ad88:	60b9      	str	r1, [r7, #8]
    ad8a:	607a      	str	r2, [r7, #4]
	return 0;
    ad8c:	2300      	movs	r3, #0
}
    ad8e:	4618      	mov	r0, r3
    ad90:	3714      	adds	r7, #20
    ad92:	46bd      	mov	sp, r7
    ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad98:	4770      	bx	lr
    ad9a:	bf00      	nop

0000ad9c <dfll_priv_get_source_hz>:
	cfg->ssg = 0;
}
#endif

static inline uint32_t dfll_priv_get_source_hz(dfll_refclk_t src)
{
    ad9c:	b480      	push	{r7}
    ad9e:	b083      	sub	sp, #12
    ada0:	af00      	add	r7, sp, #0
    ada2:	4603      	mov	r3, r0
    ada4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Only handle the cases that actually make sense as a DFLL
	 * source. The DFLL itself is obviously not one of those cases.
	 */
	switch (src) {
    ada6:	79fb      	ldrb	r3, [r7, #7]
    ada8:	2b0d      	cmp	r3, #13
    adaa:	d82b      	bhi.n	ae04 <dfll_priv_get_source_hz+0x68>
    adac:	a201      	add	r2, pc, #4	; (adr r2, adb4 <dfll_priv_get_source_hz+0x18>)
    adae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    adb2:	bf00      	nop
    adb4:	0000aded 	.word	0x0000aded
    adb8:	0000adf1 	.word	0x0000adf1
    adbc:	0000ae05 	.word	0x0000ae05
    adc0:	0000adf7 	.word	0x0000adf7
    adc4:	0000adfb 	.word	0x0000adfb
    adc8:	0000ae05 	.word	0x0000ae05
    adcc:	0000ae05 	.word	0x0000ae05
    add0:	0000ae05 	.word	0x0000ae05
    add4:	0000ae05 	.word	0x0000ae05
    add8:	0000ae05 	.word	0x0000ae05
    addc:	0000ae05 	.word	0x0000ae05
    ade0:	0000ae05 	.word	0x0000ae05
    ade4:	0000ae05 	.word	0x0000ae05
    ade8:	0000adff 	.word	0x0000adff
	case GENCLK_SRC_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
    adec:	4b09      	ldr	r3, [pc, #36]	; (ae14 <dfll_priv_get_source_hz+0x78>)
    adee:	e00a      	b.n	ae06 <dfll_priv_get_source_hz+0x6a>

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		return BOARD_OSC32_HZ;
    adf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    adf4:	e007      	b.n	ae06 <dfll_priv_get_source_hz+0x6a>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
    adf6:	4b08      	ldr	r3, [pc, #32]	; (ae18 <dfll_priv_get_source_hz+0x7c>)
    adf8:	e005      	b.n	ae06 <dfll_priv_get_source_hz+0x6a>
#endif

	case GENCLK_SRC_RC80M:
		return OSC_RC80M_NOMINAL_HZ;
    adfa:	4b08      	ldr	r3, [pc, #32]	; (ae1c <dfll_priv_get_source_hz+0x80>)
    adfc:	e003      	b.n	ae06 <dfll_priv_get_source_hz+0x6a>

	case GENCLK_SRC_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
    adfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ae02:	e000      	b.n	ae06 <dfll_priv_get_source_hz+0x6a>

	default:
		/* unhandled_case(src) */
		return 0;
    ae04:	2300      	movs	r3, #0
	}
}
    ae06:	4618      	mov	r0, r3
    ae08:	370c      	adds	r7, #12
    ae0a:	46bd      	mov	sp, r7
    ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae10:	4770      	bx	lr
    ae12:	bf00      	nop
    ae14:	0001c138 	.word	0x0001c138
    ae18:	00b71b00 	.word	0x00b71b00
    ae1c:	04c4b400 	.word	0x04c4b400

0000ae20 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    ae20:	b580      	push	{r7, lr}
    ae22:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    ae24:	2001      	movs	r0, #1
    ae26:	4b04      	ldr	r3, [pc, #16]	; (ae38 <sysclk_get_main_hz+0x18>)
    ae28:	4798      	blx	r3
    ae2a:	4603      	mov	r3, r0
    ae2c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
    ae30:	fb02 f303 	mul.w	r3, r2, r3

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    ae34:	4618      	mov	r0, r3
    ae36:	bd80      	pop	{r7, pc}
    ae38:	0000ad9d 	.word	0x0000ad9d

0000ae3c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    ae3c:	b580      	push	{r7, lr}
    ae3e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    ae40:	4b02      	ldr	r3, [pc, #8]	; (ae4c <sysclk_get_cpu_hz+0x10>)
    ae42:	4798      	blx	r3
    ae44:	4603      	mov	r3, r0
}
    ae46:	4618      	mov	r0, r3
    ae48:	bd80      	pop	{r7, pc}
    ae4a:	bf00      	nop
    ae4c:	0000ae21 	.word	0x0000ae21

0000ae50 <adc_enable_interrupt>:
 * \param interrupt_source interrupt source.
 *
 */
static inline void adc_enable_interrupt(struct adc_dev_inst *const dev_inst,
		const adc_interrupt_source_t interrupt_source)
{
    ae50:	b480      	push	{r7}
    ae52:	b083      	sub	sp, #12
    ae54:	af00      	add	r7, sp, #0
    ae56:	6078      	str	r0, [r7, #4]
    ae58:	460b      	mov	r3, r1
    ae5a:	70fb      	strb	r3, [r7, #3]
	dev_inst->hw_dev->ADCIFE_IER = interrupt_source;
    ae5c:	687b      	ldr	r3, [r7, #4]
    ae5e:	681b      	ldr	r3, [r3, #0]
    ae60:	78fa      	ldrb	r2, [r7, #3]
    ae62:	631a      	str	r2, [r3, #48]	; 0x30
}
    ae64:	370c      	adds	r7, #12
    ae66:	46bd      	mov	sp, r7
    ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae6c:	4770      	bx	lr
    ae6e:	bf00      	nop

0000ae70 <adc_disable_interrupt>:
 * \param interrupt_source interrupt source.
 *
 */
static inline void adc_disable_interrupt(struct adc_dev_inst *const dev_inst,
		const adc_interrupt_source_t interrupt_source)
{
    ae70:	b480      	push	{r7}
    ae72:	b083      	sub	sp, #12
    ae74:	af00      	add	r7, sp, #0
    ae76:	6078      	str	r0, [r7, #4]
    ae78:	460b      	mov	r3, r1
    ae7a:	70fb      	strb	r3, [r7, #3]
	dev_inst->hw_dev->ADCIFE_IDR = interrupt_source;
    ae7c:	687b      	ldr	r3, [r7, #4]
    ae7e:	681b      	ldr	r3, [r3, #0]
    ae80:	78fa      	ldrb	r2, [r7, #3]
    ae82:	635a      	str	r2, [r3, #52]	; 0x34
}
    ae84:	370c      	adds	r7, #12
    ae86:	46bd      	mov	sp, r7
    ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae8c:	4770      	bx	lr
    ae8e:	bf00      	nop

0000ae90 <ast_is_busy>:
 * \param ast Base address of the AST.
 *
 * \return 1 If AST is busy, else it will return 0.
 */
static inline bool ast_is_busy(Ast *ast)
{
    ae90:	b480      	push	{r7}
    ae92:	b083      	sub	sp, #12
    ae94:	af00      	add	r7, sp, #0
    ae96:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
    ae98:	687b      	ldr	r3, [r7, #4]
    ae9a:	689b      	ldr	r3, [r3, #8]
    ae9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    aea0:	2b00      	cmp	r3, #0
    aea2:	bf0c      	ite	eq
    aea4:	2300      	moveq	r3, #0
    aea6:	2301      	movne	r3, #1
    aea8:	b2db      	uxtb	r3, r3
}
    aeaa:	4618      	mov	r0, r3
    aeac:	370c      	adds	r7, #12
    aeae:	46bd      	mov	sp, r7
    aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeb4:	4770      	bx	lr
    aeb6:	bf00      	nop

0000aeb8 <ast_start>:
 * \brief Start AST counter.
 *
 * \param ast  Base address of the AST.
 */
static inline void ast_start(Ast *ast)
{
    aeb8:	b580      	push	{r7, lr}
    aeba:	b082      	sub	sp, #8
    aebc:	af00      	add	r7, sp, #0
    aebe:	6078      	str	r0, [r7, #4]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    aec0:	bf00      	nop
    aec2:	6878      	ldr	r0, [r7, #4]
    aec4:	4b06      	ldr	r3, [pc, #24]	; (aee0 <ast_start+0x28>)
    aec6:	4798      	blx	r3
    aec8:	4603      	mov	r3, r0
    aeca:	2b00      	cmp	r3, #0
    aecc:	d1f9      	bne.n	aec2 <ast_start+0xa>
	}
	ast->AST_CR |= AST_CR_EN;
    aece:	687b      	ldr	r3, [r7, #4]
    aed0:	681b      	ldr	r3, [r3, #0]
    aed2:	f043 0201 	orr.w	r2, r3, #1
    aed6:	687b      	ldr	r3, [r7, #4]
    aed8:	601a      	str	r2, [r3, #0]
}
    aeda:	3708      	adds	r7, #8
    aedc:	46bd      	mov	sp, r7
    aede:	bd80      	pop	{r7, pc}
    aee0:	0000ae91 	.word	0x0000ae91

0000aee4 <ast_stop>:
 * \brief Stop AST counter.
 *
 * \param ast  Base address of the AST.
 */
static inline void ast_stop(Ast *ast)
{
    aee4:	b580      	push	{r7, lr}
    aee6:	b082      	sub	sp, #8
    aee8:	af00      	add	r7, sp, #0
    aeea:	6078      	str	r0, [r7, #4]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    aeec:	bf00      	nop
    aeee:	6878      	ldr	r0, [r7, #4]
    aef0:	4b06      	ldr	r3, [pc, #24]	; (af0c <ast_stop+0x28>)
    aef2:	4798      	blx	r3
    aef4:	4603      	mov	r3, r0
    aef6:	2b00      	cmp	r3, #0
    aef8:	d1f9      	bne.n	aeee <ast_stop+0xa>
	}
	ast->AST_CR &= ~(AST_CR_EN);
    aefa:	687b      	ldr	r3, [r7, #4]
    aefc:	681b      	ldr	r3, [r3, #0]
    aefe:	f023 0201 	bic.w	r2, r3, #1
    af02:	687b      	ldr	r3, [r7, #4]
    af04:	601a      	str	r2, [r3, #0]
}
    af06:	3708      	adds	r7, #8
    af08:	46bd      	mov	sp, r7
    af0a:	bd80      	pop	{r7, pc}
    af0c:	0000ae91 	.word	0x0000ae91

0000af10 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    af10:	b480      	push	{r7}
    af12:	b095      	sub	sp, #84	; 0x54
    af14:	af00      	add	r7, sp, #0
    af16:	6078      	str	r0, [r7, #4]
    af18:	460b      	mov	r3, r1
    af1a:	70fb      	strb	r3, [r7, #3]
    af1c:	687b      	ldr	r3, [r7, #4]
    af1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    af20:	78fb      	ldrb	r3, [r7, #3]
    af22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    af26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    af2a:	2b01      	cmp	r3, #1
    af2c:	d12d      	bne.n	af8a <ioport_set_pin_dir+0x7a>
    af2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af30:	647b      	str	r3, [r7, #68]	; 0x44
    af32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    af34:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    af36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    af38:	095b      	lsrs	r3, r3, #5
    af3a:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    af3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    af42:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    af46:	025b      	lsls	r3, r3, #9
    af48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    af4a:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    af4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    af4e:	f002 021f 	and.w	r2, r2, #31
    af52:	2101      	movs	r1, #1
    af54:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    af58:	645a      	str	r2, [r3, #68]	; 0x44
    af5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af5c:	637b      	str	r3, [r7, #52]	; 0x34
    af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    af60:	633b      	str	r3, [r7, #48]	; 0x30
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af64:	095b      	lsrs	r3, r3, #5
    af66:	62fb      	str	r3, [r7, #44]	; 0x2c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    af6e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    af72:	025b      	lsls	r3, r3, #9
    af74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    af76:	62ba      	str	r2, [r7, #40]	; 0x28
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    af78:	6aba      	ldr	r2, [r7, #40]	; 0x28
    af7a:	f002 021f 	and.w	r2, r2, #31
    af7e:	2101      	movs	r1, #1
    af80:	fa01 f202 	lsl.w	r2, r1, r2
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    af84:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    af88:	e030      	b.n	afec <ioport_set_pin_dir+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
    af8a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    af8e:	2b00      	cmp	r3, #0
    af90:	d12c      	bne.n	afec <ioport_set_pin_dir+0xdc>
    af92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af94:	627b      	str	r3, [r7, #36]	; 0x24
    af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af98:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    af9a:	6a3b      	ldr	r3, [r7, #32]
    af9c:	095b      	lsrs	r3, r3, #5
    af9e:	61fb      	str	r3, [r7, #28]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    afa0:	69fb      	ldr	r3, [r7, #28]
    afa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    afa6:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    afaa:	025b      	lsls	r3, r3, #9
    afac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afae:	61ba      	str	r2, [r7, #24]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    afb0:	69ba      	ldr	r2, [r7, #24]
    afb2:	f002 021f 	and.w	r2, r2, #31
    afb6:	2101      	movs	r1, #1
    afb8:	fa01 f202 	lsl.w	r2, r1, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    afbc:	649a      	str	r2, [r3, #72]	; 0x48
    afbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afc0:	617b      	str	r3, [r7, #20]
    afc2:	697b      	ldr	r3, [r7, #20]
    afc4:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    afc6:	693b      	ldr	r3, [r7, #16]
    afc8:	095b      	lsrs	r3, r3, #5
    afca:	60fb      	str	r3, [r7, #12]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    afcc:	68fb      	ldr	r3, [r7, #12]
    afce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    afd2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    afd6:	025b      	lsls	r3, r3, #9
    afd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afda:	60ba      	str	r2, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    afdc:	68ba      	ldr	r2, [r7, #8]
    afde:	f002 021f 	and.w	r2, r2, #31
    afe2:	2101      	movs	r1, #1
    afe4:	fa01 f202 	lsl.w	r2, r1, r2
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    afe8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	arch_ioport_set_pin_dir(pin, dir);
}
    afec:	3754      	adds	r7, #84	; 0x54
    afee:	46bd      	mov	sp, r7
    aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aff4:	4770      	bx	lr
    aff6:	bf00      	nop

0000aff8 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    aff8:	b480      	push	{r7}
    affa:	b089      	sub	sp, #36	; 0x24
    affc:	af00      	add	r7, sp, #0
    affe:	6078      	str	r0, [r7, #4]
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	61fb      	str	r3, [r7, #28]
    b004:	69fb      	ldr	r3, [r7, #28]
    b006:	61bb      	str	r3, [r7, #24]
    b008:	69bb      	ldr	r3, [r7, #24]
    b00a:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b00c:	697b      	ldr	r3, [r7, #20]
    b00e:	095b      	lsrs	r3, r3, #5
    b010:	613b      	str	r3, [r7, #16]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b012:	693b      	ldr	r3, [r7, #16]
    b014:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b018:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b01c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    b01e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b020:	69fb      	ldr	r3, [r7, #28]
    b022:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b024:	68fb      	ldr	r3, [r7, #12]
    b026:	f003 031f 	and.w	r3, r3, #31
    b02a:	2101      	movs	r1, #1
    b02c:	fa01 f303 	lsl.w	r3, r1, r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    b030:	4013      	ands	r3, r2
    b032:	2b00      	cmp	r3, #0
    b034:	bf0c      	ite	eq
    b036:	2300      	moveq	r3, #0
    b038:	2301      	movne	r3, #1
    b03a:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
    b03c:	4618      	mov	r0, r3
    b03e:	3724      	adds	r7, #36	; 0x24
    b040:	46bd      	mov	sp, r7
    b042:	f85d 7b04 	ldr.w	r7, [sp], #4
    b046:	4770      	bx	lr

0000b048 <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
    b048:	b480      	push	{r7}
    b04a:	b085      	sub	sp, #20
    b04c:	af00      	add	r7, sp, #0
    b04e:	6078      	str	r0, [r7, #4]
    b050:	687b      	ldr	r3, [r7, #4]
    b052:	60fb      	str	r3, [r7, #12]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b054:	68fb      	ldr	r3, [r7, #12]
    b056:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
}
    b058:	4618      	mov	r0, r3
    b05a:	3714      	adds	r7, #20
    b05c:	46bd      	mov	sp, r7
    b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b062:	4770      	bx	lr

0000b064 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    b064:	b480      	push	{r7}
    b066:	b085      	sub	sp, #20
    b068:	af00      	add	r7, sp, #0
    b06a:	6078      	str	r0, [r7, #4]
    b06c:	687b      	ldr	r3, [r7, #4]
    b06e:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b070:	68fb      	ldr	r3, [r7, #12]
    b072:	f003 031f 	and.w	r3, r3, #31
    b076:	2201      	movs	r2, #1
    b078:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
}
    b07c:	4618      	mov	r0, r3
    b07e:	3714      	adds	r7, #20
    b080:	46bd      	mov	sp, r7
    b082:	f85d 7b04 	ldr.w	r7, [sp], #4
    b086:	4770      	bx	lr

0000b088 <gpio_enable_pin_interrupt>:
 * \brief Enable the interrupt of a pin.
 *
 * \param pin The pin number.
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
    b088:	b580      	push	{r7, lr}
    b08a:	b084      	sub	sp, #16
    b08c:	af00      	add	r7, sp, #0
    b08e:	6078      	str	r0, [r7, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
    b090:	6878      	ldr	r0, [r7, #4]
    b092:	4b09      	ldr	r3, [pc, #36]	; (b0b8 <gpio_enable_pin_interrupt+0x30>)
    b094:	4798      	blx	r3
    b096:	4603      	mov	r3, r0
    b098:	025b      	lsls	r3, r3, #9
    b09a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b09e:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    b0a2:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    b0a4:	6878      	ldr	r0, [r7, #4]
    b0a6:	4b05      	ldr	r3, [pc, #20]	; (b0bc <gpio_enable_pin_interrupt+0x34>)
    b0a8:	4798      	blx	r3
    b0aa:	4602      	mov	r2, r0
    b0ac:	68fb      	ldr	r3, [r7, #12]
    b0ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    b0b2:	3710      	adds	r7, #16
    b0b4:	46bd      	mov	sp, r7
    b0b6:	bd80      	pop	{r7, pc}
    b0b8:	0000b049 	.word	0x0000b049
    b0bc:	0000b065 	.word	0x0000b065

0000b0c0 <gpio_disable_pin_interrupt>:
 * \brief Disable the interrupt of a pin.
 *
 * \param pin The pin number.
 */
static inline void gpio_disable_pin_interrupt(ioport_pin_t pin)
{
    b0c0:	b580      	push	{r7, lr}
    b0c2:	b084      	sub	sp, #16
    b0c4:	af00      	add	r7, sp, #0
    b0c6:	6078      	str	r0, [r7, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
    b0c8:	6878      	ldr	r0, [r7, #4]
    b0ca:	4b09      	ldr	r3, [pc, #36]	; (b0f0 <gpio_disable_pin_interrupt+0x30>)
    b0cc:	4798      	blx	r3
    b0ce:	4603      	mov	r3, r0
    b0d0:	025b      	lsls	r3, r3, #9
    b0d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b0d6:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    b0da:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IERC = ioport_pin_to_mask(pin);
    b0dc:	6878      	ldr	r0, [r7, #4]
    b0de:	4b05      	ldr	r3, [pc, #20]	; (b0f4 <gpio_disable_pin_interrupt+0x34>)
    b0e0:	4798      	blx	r3
    b0e2:	4602      	mov	r2, r0
    b0e4:	68fb      	ldr	r3, [r7, #12]
    b0e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    b0ea:	3710      	adds	r7, #16
    b0ec:	46bd      	mov	sp, r7
    b0ee:	bd80      	pop	{r7, pc}
    b0f0:	0000b049 	.word	0x0000b049
    b0f4:	0000b065 	.word	0x0000b065

0000b0f8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    b0f8:	b5b0      	push	{r4, r5, r7, lr}
    b0fa:	b08e      	sub	sp, #56	; 0x38
    b0fc:	af00      	add	r7, sp, #0
    b0fe:	4603      	mov	r3, r0
    b100:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    b102:	2311      	movs	r3, #17
    b104:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    b106:	f107 030c 	add.w	r3, r7, #12
    b10a:	4839      	ldr	r0, [pc, #228]	; (b1f0 <ssd1306_write_command+0xf8>)
    b10c:	4619      	mov	r1, r3
    b10e:	4b39      	ldr	r3, [pc, #228]	; (b1f4 <ssd1306_write_command+0xfc>)
    b110:	4798      	blx	r3
    b112:	234f      	movs	r3, #79	; 0x4f
    b114:	637b      	str	r3, [r7, #52]	; 0x34
    b116:	2300      	movs	r3, #0
    b118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    b11c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    b120:	2b00      	cmp	r3, #0
    b122:	d016      	beq.n	b152 <ssd1306_write_command+0x5a>
    b124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b126:	62fb      	str	r3, [r7, #44]	; 0x2c
    b128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b12a:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b12e:	095b      	lsrs	r3, r3, #5
    b130:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b134:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b138:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b13c:	025b      	lsls	r3, r3, #9
    b13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b140:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b142:	6a3a      	ldr	r2, [r7, #32]
    b144:	f002 021f 	and.w	r2, r2, #31
    b148:	2101      	movs	r1, #1
    b14a:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    b14e:	655a      	str	r2, [r3, #84]	; 0x54
    b150:	e015      	b.n	b17e <ssd1306_write_command+0x86>
    b152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b154:	61fb      	str	r3, [r7, #28]
    b156:	69fb      	ldr	r3, [r7, #28]
    b158:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b15a:	69bb      	ldr	r3, [r7, #24]
    b15c:	095b      	lsrs	r3, r3, #5
    b15e:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b160:	697b      	ldr	r3, [r7, #20]
    b162:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b166:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b16a:	025b      	lsls	r3, r3, #9
    b16c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b16e:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b170:	693a      	ldr	r2, [r7, #16]
    b172:	f002 021f 	and.w	r2, r2, #31
    b176:	2101      	movs	r1, #1
    b178:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    b17c:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_cmd();
	usart_spi_write_single(SSD1306_USART_SPI, command);
    b17e:	79fb      	ldrb	r3, [r7, #7]
    b180:	481b      	ldr	r0, [pc, #108]	; (b1f0 <ssd1306_write_command+0xf8>)
    b182:	4619      	mov	r1, r3
    b184:	4b1c      	ldr	r3, [pc, #112]	; (b1f8 <ssd1306_write_command+0x100>)
    b186:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
    b188:	4b1c      	ldr	r3, [pc, #112]	; (b1fc <ssd1306_write_command+0x104>)
    b18a:	4798      	blx	r3
    b18c:	4603      	mov	r3, r0
    b18e:	4618      	mov	r0, r3
    b190:	f04f 0100 	mov.w	r1, #0
    b194:	4602      	mov	r2, r0
    b196:	460b      	mov	r3, r1
    b198:	009d      	lsls	r5, r3, #2
    b19a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    b19e:	0094      	lsls	r4, r2, #2
    b1a0:	4622      	mov	r2, r4
    b1a2:	462b      	mov	r3, r5
    b1a4:	1880      	adds	r0, r0, r2
    b1a6:	eb41 0103 	adc.w	r1, r1, r3
    b1aa:	a30f      	add	r3, pc, #60	; (adr r3, b1e8 <ssd1306_write_command+0xf0>)
    b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1b0:	1812      	adds	r2, r2, r0
    b1b2:	eb43 0301 	adc.w	r3, r3, r1
    b1b6:	4c12      	ldr	r4, [pc, #72]	; (b200 <ssd1306_write_command+0x108>)
    b1b8:	4610      	mov	r0, r2
    b1ba:	4619      	mov	r1, r3
    b1bc:	4a11      	ldr	r2, [pc, #68]	; (b204 <ssd1306_write_command+0x10c>)
    b1be:	f04f 0300 	mov.w	r3, #0
    b1c2:	47a0      	blx	r4
    b1c4:	4602      	mov	r2, r0
    b1c6:	460b      	mov	r3, r1
    b1c8:	4613      	mov	r3, r2
    b1ca:	4618      	mov	r0, r3
    b1cc:	4b0e      	ldr	r3, [pc, #56]	; (b208 <ssd1306_write_command+0x110>)
    b1ce:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    b1d0:	f107 030c 	add.w	r3, r7, #12
    b1d4:	4806      	ldr	r0, [pc, #24]	; (b1f0 <ssd1306_write_command+0xf8>)
    b1d6:	4619      	mov	r1, r3
    b1d8:	4b0c      	ldr	r3, [pc, #48]	; (b20c <ssd1306_write_command+0x114>)
    b1da:	4798      	blx	r3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    b1dc:	3738      	adds	r7, #56	; 0x38
    b1de:	46bd      	mov	sp, r7
    b1e0:	bdb0      	pop	{r4, r5, r7, pc}
    b1e2:	bf00      	nop
    b1e4:	f3af 8000 	nop.w
    b1e8:	00d59f7f 	.word	0x00d59f7f
    b1ec:	00000000 	.word	0x00000000
    b1f0:	4002c000 	.word	0x4002c000
    b1f4:	0000590d 	.word	0x0000590d
    b1f8:	000058ed 	.word	0x000058ed
    b1fc:	0000ae3d 	.word	0x0000ae3d
    b200:	0000d0c9 	.word	0x0000d0c9
    b204:	00d59f80 	.word	0x00d59f80
    b208:	20000001 	.word	0x20000001
    b20c:	00005929 	.word	0x00005929

0000b210 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
    b210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b214:	b099      	sub	sp, #100	; 0x64
    b216:	af00      	add	r7, sp, #0
    b218:	4603      	mov	r3, r0
    b21a:	71fb      	strb	r3, [r7, #7]
#if defined(SSD1306_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = SSD1306_CS_PIN};
    b21c:	2311      	movs	r3, #17
    b21e:	733b      	strb	r3, [r7, #12]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
    b220:	f107 030c 	add.w	r3, r7, #12
    b224:	4866      	ldr	r0, [pc, #408]	; (b3c0 <ssd1306_write_data+0x1b0>)
    b226:	4619      	mov	r1, r3
    b228:	4b66      	ldr	r3, [pc, #408]	; (b3c4 <ssd1306_write_data+0x1b4>)
    b22a:	4798      	blx	r3
    b22c:	234f      	movs	r3, #79	; 0x4f
    b22e:	65fb      	str	r3, [r7, #92]	; 0x5c
    b230:	2301      	movs	r3, #1
    b232:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    b236:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    b23a:	2b00      	cmp	r3, #0
    b23c:	d016      	beq.n	b26c <ssd1306_write_data+0x5c>
    b23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b240:	657b      	str	r3, [r7, #84]	; 0x54
    b242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    b244:	653b      	str	r3, [r7, #80]	; 0x50
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b248:	095b      	lsrs	r3, r3, #5
    b24a:	64fb      	str	r3, [r7, #76]	; 0x4c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b24e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b252:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b256:	025b      	lsls	r3, r3, #9
    b258:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b25a:	64ba      	str	r2, [r7, #72]	; 0x48
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b25c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b25e:	f002 021f 	and.w	r2, r2, #31
    b262:	2101      	movs	r1, #1
    b264:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    b268:	655a      	str	r2, [r3, #84]	; 0x54
    b26a:	e015      	b.n	b298 <ssd1306_write_data+0x88>
    b26c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b26e:	647b      	str	r3, [r7, #68]	; 0x44
    b270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b272:	643b      	str	r3, [r7, #64]	; 0x40
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b276:	095b      	lsrs	r3, r3, #5
    b278:	63fb      	str	r3, [r7, #60]	; 0x3c

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b27c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b280:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b284:	025b      	lsls	r3, r3, #9
    b286:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b288:	63ba      	str	r2, [r7, #56]	; 0x38
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b28c:	f002 021f 	and.w	r2, r2, #31
    b290:	2101      	movs	r1, #1
    b292:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    b296:	659a      	str	r2, [r3, #88]	; 0x58
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    b298:	4b4b      	ldr	r3, [pc, #300]	; (b3c8 <ssd1306_write_data+0x1b8>)
    b29a:	4798      	blx	r3
    b29c:	4603      	mov	r3, r0
    b29e:	4618      	mov	r0, r3
    b2a0:	f04f 0100 	mov.w	r1, #0
    b2a4:	4602      	mov	r2, r0
    b2a6:	460b      	mov	r3, r1
    b2a8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    b2ac:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    b2b0:	ea4f 0882 	mov.w	r8, r2, lsl #2
    b2b4:	4642      	mov	r2, r8
    b2b6:	464b      	mov	r3, r9
    b2b8:	1880      	adds	r0, r0, r2
    b2ba:	eb41 0103 	adc.w	r1, r1, r3
    b2be:	a33e      	add	r3, pc, #248	; (adr r3, b3b8 <ssd1306_write_data+0x1a8>)
    b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2c4:	1812      	adds	r2, r2, r0
    b2c6:	eb43 0301 	adc.w	r3, r3, r1
    b2ca:	4e40      	ldr	r6, [pc, #256]	; (b3cc <ssd1306_write_data+0x1bc>)
    b2cc:	4610      	mov	r0, r2
    b2ce:	4619      	mov	r1, r3
    b2d0:	4a3f      	ldr	r2, [pc, #252]	; (b3d0 <ssd1306_write_data+0x1c0>)
    b2d2:	f04f 0300 	mov.w	r3, #0
    b2d6:	47b0      	blx	r6
    b2d8:	4602      	mov	r2, r0
    b2da:	460b      	mov	r3, r1
    b2dc:	4613      	mov	r3, r2
    b2de:	4618      	mov	r0, r3
    b2e0:	4b3c      	ldr	r3, [pc, #240]	; (b3d4 <ssd1306_write_data+0x1c4>)
    b2e2:	4798      	blx	r3
	usart_spi_write_single(SSD1306_USART_SPI, data);
    b2e4:	79fb      	ldrb	r3, [r7, #7]
    b2e6:	4836      	ldr	r0, [pc, #216]	; (b3c0 <ssd1306_write_data+0x1b0>)
    b2e8:	4619      	mov	r1, r3
    b2ea:	4b3b      	ldr	r3, [pc, #236]	; (b3d8 <ssd1306_write_data+0x1c8>)
    b2ec:	4798      	blx	r3
    b2ee:	234f      	movs	r3, #79	; 0x4f
    b2f0:	637b      	str	r3, [r7, #52]	; 0x34
    b2f2:	2301      	movs	r3, #1
    b2f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    b2f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d016      	beq.n	b32e <ssd1306_write_data+0x11e>
    b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b302:	62fb      	str	r3, [r7, #44]	; 0x2c
    b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b306:	62bb      	str	r3, [r7, #40]	; 0x28
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b30a:	095b      	lsrs	r3, r3, #5
    b30c:	627b      	str	r3, [r7, #36]	; 0x24

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b310:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b314:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b318:	025b      	lsls	r3, r3, #9
    b31a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b31c:	623a      	str	r2, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b31e:	6a3a      	ldr	r2, [r7, #32]
    b320:	f002 021f 	and.w	r2, r2, #31
    b324:	2101      	movs	r1, #1
    b326:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    b32a:	655a      	str	r2, [r3, #84]	; 0x54
    b32c:	e015      	b.n	b35a <ssd1306_write_data+0x14a>
    b32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b330:	61fb      	str	r3, [r7, #28]
    b332:	69fb      	ldr	r3, [r7, #28]
    b334:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    b336:	69bb      	ldr	r3, [r7, #24]
    b338:	095b      	lsrs	r3, r3, #5
    b33a:	617b      	str	r3, [r7, #20]

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    b33c:	697b      	ldr	r3, [r7, #20]
    b33e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    b342:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    b346:	025b      	lsls	r3, r3, #9
    b348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b34a:	613a      	str	r2, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    b34c:	693a      	ldr	r2, [r7, #16]
    b34e:	f002 021f 	and.w	r2, r2, #31
    b352:	2101      	movs	r1, #1
    b354:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    b358:	659a      	str	r2, [r3, #88]	; 0x58
	ssd1306_sel_data();
	delay_us(SSD1306_LATENCY); // At least 3us
    b35a:	4b1b      	ldr	r3, [pc, #108]	; (b3c8 <ssd1306_write_data+0x1b8>)
    b35c:	4798      	blx	r3
    b35e:	4603      	mov	r3, r0
    b360:	4618      	mov	r0, r3
    b362:	f04f 0100 	mov.w	r1, #0
    b366:	4602      	mov	r2, r0
    b368:	460b      	mov	r3, r1
    b36a:	009d      	lsls	r5, r3, #2
    b36c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    b370:	0094      	lsls	r4, r2, #2
    b372:	4622      	mov	r2, r4
    b374:	462b      	mov	r3, r5
    b376:	1880      	adds	r0, r0, r2
    b378:	eb41 0103 	adc.w	r1, r1, r3
    b37c:	a30e      	add	r3, pc, #56	; (adr r3, b3b8 <ssd1306_write_data+0x1a8>)
    b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b382:	1812      	adds	r2, r2, r0
    b384:	eb43 0301 	adc.w	r3, r3, r1
    b388:	4c10      	ldr	r4, [pc, #64]	; (b3cc <ssd1306_write_data+0x1bc>)
    b38a:	4610      	mov	r0, r2
    b38c:	4619      	mov	r1, r3
    b38e:	4a10      	ldr	r2, [pc, #64]	; (b3d0 <ssd1306_write_data+0x1c0>)
    b390:	f04f 0300 	mov.w	r3, #0
    b394:	47a0      	blx	r4
    b396:	4602      	mov	r2, r0
    b398:	460b      	mov	r3, r1
    b39a:	4613      	mov	r3, r2
    b39c:	4618      	mov	r0, r3
    b39e:	4b0d      	ldr	r3, [pc, #52]	; (b3d4 <ssd1306_write_data+0x1c4>)
    b3a0:	4798      	blx	r3
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
    b3a2:	f107 030c 	add.w	r3, r7, #12
    b3a6:	4806      	ldr	r0, [pc, #24]	; (b3c0 <ssd1306_write_data+0x1b0>)
    b3a8:	4619      	mov	r1, r3
    b3aa:	4b0c      	ldr	r3, [pc, #48]	; (b3dc <ssd1306_write_data+0x1cc>)
    b3ac:	4798      	blx	r3
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
#endif
}
    b3ae:	3764      	adds	r7, #100	; 0x64
    b3b0:	46bd      	mov	sp, r7
    b3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b3b6:	bf00      	nop
    b3b8:	00d59f7f 	.word	0x00d59f7f
    b3bc:	00000000 	.word	0x00000000
    b3c0:	4002c000 	.word	0x4002c000
    b3c4:	0000590d 	.word	0x0000590d
    b3c8:	0000ae3d 	.word	0x0000ae3d
    b3cc:	0000d0c9 	.word	0x0000d0c9
    b3d0:	00d59f80 	.word	0x00d59f80
    b3d4:	20000001 	.word	0x20000001
    b3d8:	000058ed 	.word	0x000058ed
    b3dc:	00005929 	.word	0x00005929

0000b3e0 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
    b3e0:	b580      	push	{r7, lr}
    b3e2:	b082      	sub	sp, #8
    b3e4:	af00      	add	r7, sp, #0
    b3e6:	4603      	mov	r3, r0
    b3e8:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    b3ea:	79fb      	ldrb	r3, [r7, #7]
    b3ec:	f003 030f 	and.w	r3, r3, #15
    b3f0:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    b3f2:	79fb      	ldrb	r3, [r7, #7]
    b3f4:	f003 0307 	and.w	r3, r3, #7
    b3f8:	b2db      	uxtb	r3, r3
    b3fa:	f063 034f 	orn	r3, r3, #79	; 0x4f
    b3fe:	b2db      	uxtb	r3, r3
    b400:	b2db      	uxtb	r3, r3
    b402:	4618      	mov	r0, r3
    b404:	4b02      	ldr	r3, [pc, #8]	; (b410 <ssd1306_set_page_address+0x30>)
    b406:	4798      	blx	r3
}
    b408:	3708      	adds	r7, #8
    b40a:	46bd      	mov	sp, r7
    b40c:	bd80      	pop	{r7, pc}
    b40e:	bf00      	nop
    b410:	0000b0f9 	.word	0x0000b0f9

0000b414 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
    b414:	b580      	push	{r7, lr}
    b416:	b082      	sub	sp, #8
    b418:	af00      	add	r7, sp, #0
    b41a:	4603      	mov	r3, r0
    b41c:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
    b41e:	79fb      	ldrb	r3, [r7, #7]
    b420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b424:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    b426:	79fb      	ldrb	r3, [r7, #7]
    b428:	091b      	lsrs	r3, r3, #4
    b42a:	b2db      	uxtb	r3, r3
    b42c:	f043 0310 	orr.w	r3, r3, #16
    b430:	b2db      	uxtb	r3, r3
    b432:	4618      	mov	r0, r3
    b434:	4b05      	ldr	r3, [pc, #20]	; (b44c <ssd1306_set_column_address+0x38>)
    b436:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    b438:	79fb      	ldrb	r3, [r7, #7]
    b43a:	f003 030f 	and.w	r3, r3, #15
    b43e:	b2db      	uxtb	r3, r3
    b440:	4618      	mov	r0, r3
    b442:	4b02      	ldr	r3, [pc, #8]	; (b44c <ssd1306_set_column_address+0x38>)
    b444:	4798      	blx	r3
}
    b446:	3708      	adds	r7, #8
    b448:	46bd      	mov	sp, r7
    b44a:	bd80      	pop	{r7, pc}
    b44c:	0000b0f9 	.word	0x0000b0f9

0000b450 <ssd1306_clear>:
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
}

static inline void ssd1306_clear(void)
{
    b450:	b580      	push	{r7, lr}
    b452:	b082      	sub	sp, #8
    b454:	af00      	add	r7, sp, #0
	uint8_t page = 0;
    b456:	2300      	movs	r3, #0
    b458:	71fb      	strb	r3, [r7, #7]
	uint8_t col = 0;
    b45a:	2300      	movs	r3, #0
    b45c:	71bb      	strb	r3, [r7, #6]

	for (page = 0; page < 4; ++page)
    b45e:	2300      	movs	r3, #0
    b460:	71fb      	strb	r3, [r7, #7]
    b462:	e016      	b.n	b492 <ssd1306_clear+0x42>
	{
		ssd1306_set_page_address(page);
    b464:	79fb      	ldrb	r3, [r7, #7]
    b466:	4618      	mov	r0, r3
    b468:	4b0d      	ldr	r3, [pc, #52]	; (b4a0 <ssd1306_clear+0x50>)
    b46a:	4798      	blx	r3
		ssd1306_set_column_address(0);
    b46c:	2000      	movs	r0, #0
    b46e:	4b0d      	ldr	r3, [pc, #52]	; (b4a4 <ssd1306_clear+0x54>)
    b470:	4798      	blx	r3
		for (col = 0; col < 128; ++col)
    b472:	2300      	movs	r3, #0
    b474:	71bb      	strb	r3, [r7, #6]
    b476:	e005      	b.n	b484 <ssd1306_clear+0x34>
		{
			ssd1306_write_data(0x00);
    b478:	2000      	movs	r0, #0
    b47a:	4b0b      	ldr	r3, [pc, #44]	; (b4a8 <ssd1306_clear+0x58>)
    b47c:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    b47e:	79bb      	ldrb	r3, [r7, #6]
    b480:	3301      	adds	r3, #1
    b482:	71bb      	strb	r3, [r7, #6]
    b484:	79bb      	ldrb	r3, [r7, #6]
    b486:	b25b      	sxtb	r3, r3
    b488:	2b00      	cmp	r3, #0
    b48a:	daf5      	bge.n	b478 <ssd1306_clear+0x28>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    b48c:	79fb      	ldrb	r3, [r7, #7]
    b48e:	3301      	adds	r3, #1
    b490:	71fb      	strb	r3, [r7, #7]
    b492:	79fb      	ldrb	r3, [r7, #7]
    b494:	2b03      	cmp	r3, #3
    b496:	d9e5      	bls.n	b464 <ssd1306_clear+0x14>
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
		}
	}
}
    b498:	3708      	adds	r7, #8
    b49a:	46bd      	mov	sp, r7
    b49c:	bd80      	pop	{r7, pc}
    b49e:	bf00      	nop
    b4a0:	0000b3e1 	.word	0x0000b3e1
    b4a4:	0000b415 	.word	0x0000b415
    b4a8:	0000b211 	.word	0x0000b211

0000b4ac <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
    b4ac:	b580      	push	{r7, lr}
    b4ae:	b088      	sub	sp, #32
    b4b0:	af00      	add	r7, sp, #0
    b4b2:	6078      	str	r0, [r7, #4]
    b4b4:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    b4b6:	683b      	ldr	r3, [r7, #0]
    b4b8:	681b      	ldr	r3, [r3, #0]
    b4ba:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
    b4bc:	683b      	ldr	r3, [r7, #0]
    b4be:	685b      	ldr	r3, [r3, #4]
    b4c0:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
    b4c2:	683b      	ldr	r3, [r7, #0]
    b4c4:	689b      	ldr	r3, [r3, #8]
    b4c6:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
    b4c8:	683b      	ldr	r3, [r7, #0]
    b4ca:	7b1b      	ldrb	r3, [r3, #12]
    b4cc:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    b4ce:	2300      	movs	r3, #0
    b4d0:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    b4d2:	687a      	ldr	r2, [r7, #4]
    b4d4:	4b30      	ldr	r3, [pc, #192]	; (b598 <usart_serial_init+0xec>)
    b4d6:	429a      	cmp	r2, r3
    b4d8:	d113      	bne.n	b502 <usart_serial_init+0x56>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    b4da:	6878      	ldr	r0, [r7, #4]
    b4dc:	4b2f      	ldr	r3, [pc, #188]	; (b59c <usart_serial_init+0xf0>)
    b4de:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    b4e0:	6878      	ldr	r0, [r7, #4]
    b4e2:	4b2f      	ldr	r3, [pc, #188]	; (b5a0 <usart_serial_init+0xf4>)
    b4e4:	4798      	blx	r3
    b4e6:	4603      	mov	r3, r0
    b4e8:	f107 0208 	add.w	r2, r7, #8
    b4ec:	6878      	ldr	r0, [r7, #4]
    b4ee:	4611      	mov	r1, r2
    b4f0:	461a      	mov	r2, r3
    b4f2:	4b2c      	ldr	r3, [pc, #176]	; (b5a4 <usart_serial_init+0xf8>)
    b4f4:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    b4f6:	6878      	ldr	r0, [r7, #4]
    b4f8:	4b2b      	ldr	r3, [pc, #172]	; (b5a8 <usart_serial_init+0xfc>)
    b4fa:	4798      	blx	r3
		usart_enable_rx(p_usart);
    b4fc:	6878      	ldr	r0, [r7, #4]
    b4fe:	4b2b      	ldr	r3, [pc, #172]	; (b5ac <usart_serial_init+0x100>)
    b500:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    b502:	687a      	ldr	r2, [r7, #4]
    b504:	4b2a      	ldr	r3, [pc, #168]	; (b5b0 <usart_serial_init+0x104>)
    b506:	429a      	cmp	r2, r3
    b508:	d113      	bne.n	b532 <usart_serial_init+0x86>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    b50a:	6878      	ldr	r0, [r7, #4]
    b50c:	4b23      	ldr	r3, [pc, #140]	; (b59c <usart_serial_init+0xf0>)
    b50e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    b510:	6878      	ldr	r0, [r7, #4]
    b512:	4b23      	ldr	r3, [pc, #140]	; (b5a0 <usart_serial_init+0xf4>)
    b514:	4798      	blx	r3
    b516:	4603      	mov	r3, r0
    b518:	f107 0208 	add.w	r2, r7, #8
    b51c:	6878      	ldr	r0, [r7, #4]
    b51e:	4611      	mov	r1, r2
    b520:	461a      	mov	r2, r3
    b522:	4b20      	ldr	r3, [pc, #128]	; (b5a4 <usart_serial_init+0xf8>)
    b524:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    b526:	6878      	ldr	r0, [r7, #4]
    b528:	4b1f      	ldr	r3, [pc, #124]	; (b5a8 <usart_serial_init+0xfc>)
    b52a:	4798      	blx	r3
		usart_enable_rx(p_usart);
    b52c:	6878      	ldr	r0, [r7, #4]
    b52e:	4b1f      	ldr	r3, [pc, #124]	; (b5ac <usart_serial_init+0x100>)
    b530:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    b532:	687a      	ldr	r2, [r7, #4]
    b534:	4b1f      	ldr	r3, [pc, #124]	; (b5b4 <usart_serial_init+0x108>)
    b536:	429a      	cmp	r2, r3
    b538:	d113      	bne.n	b562 <usart_serial_init+0xb6>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    b53a:	6878      	ldr	r0, [r7, #4]
    b53c:	4b17      	ldr	r3, [pc, #92]	; (b59c <usart_serial_init+0xf0>)
    b53e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    b540:	6878      	ldr	r0, [r7, #4]
    b542:	4b17      	ldr	r3, [pc, #92]	; (b5a0 <usart_serial_init+0xf4>)
    b544:	4798      	blx	r3
    b546:	4603      	mov	r3, r0
    b548:	f107 0208 	add.w	r2, r7, #8
    b54c:	6878      	ldr	r0, [r7, #4]
    b54e:	4611      	mov	r1, r2
    b550:	461a      	mov	r2, r3
    b552:	4b14      	ldr	r3, [pc, #80]	; (b5a4 <usart_serial_init+0xf8>)
    b554:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    b556:	6878      	ldr	r0, [r7, #4]
    b558:	4b13      	ldr	r3, [pc, #76]	; (b5a8 <usart_serial_init+0xfc>)
    b55a:	4798      	blx	r3
		usart_enable_rx(p_usart);
    b55c:	6878      	ldr	r0, [r7, #4]
    b55e:	4b13      	ldr	r3, [pc, #76]	; (b5ac <usart_serial_init+0x100>)
    b560:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    b562:	687a      	ldr	r2, [r7, #4]
    b564:	4b14      	ldr	r3, [pc, #80]	; (b5b8 <usart_serial_init+0x10c>)
    b566:	429a      	cmp	r2, r3
    b568:	d113      	bne.n	b592 <usart_serial_init+0xe6>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    b56a:	6878      	ldr	r0, [r7, #4]
    b56c:	4b0b      	ldr	r3, [pc, #44]	; (b59c <usart_serial_init+0xf0>)
    b56e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    b570:	6878      	ldr	r0, [r7, #4]
    b572:	4b0b      	ldr	r3, [pc, #44]	; (b5a0 <usart_serial_init+0xf4>)
    b574:	4798      	blx	r3
    b576:	4603      	mov	r3, r0
    b578:	f107 0208 	add.w	r2, r7, #8
    b57c:	6878      	ldr	r0, [r7, #4]
    b57e:	4611      	mov	r1, r2
    b580:	461a      	mov	r2, r3
    b582:	4b08      	ldr	r3, [pc, #32]	; (b5a4 <usart_serial_init+0xf8>)
    b584:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    b586:	6878      	ldr	r0, [r7, #4]
    b588:	4b07      	ldr	r3, [pc, #28]	; (b5a8 <usart_serial_init+0xfc>)
    b58a:	4798      	blx	r3
		usart_enable_rx(p_usart);
    b58c:	6878      	ldr	r0, [r7, #4]
    b58e:	4b07      	ldr	r3, [pc, #28]	; (b5ac <usart_serial_init+0x100>)
    b590:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
    b592:	3720      	adds	r7, #32
    b594:	46bd      	mov	sp, r7
    b596:	bd80      	pop	{r7, pc}
    b598:	40024000 	.word	0x40024000
    b59c:	000098ed 	.word	0x000098ed
    b5a0:	00009681 	.word	0x00009681
    b5a4:	00007f75 	.word	0x00007f75
    b5a8:	00008109 	.word	0x00008109
    b5ac:	00008139 	.word	0x00008139
    b5b0:	40028000 	.word	0x40028000
    b5b4:	4002c000 	.word	0x4002c000
    b5b8:	40030000 	.word	0x40030000

0000b5bc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    b5bc:	b580      	push	{r7, lr}
    b5be:	b082      	sub	sp, #8
    b5c0:	af00      	add	r7, sp, #0
    b5c2:	6078      	str	r0, [r7, #4]
    b5c4:	460b      	mov	r3, r1
    b5c6:	70fb      	strb	r3, [r7, #3]
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    b5c8:	687a      	ldr	r2, [r7, #4]
    b5ca:	4b20      	ldr	r3, [pc, #128]	; (b64c <usart_serial_putchar+0x90>)
    b5cc:	429a      	cmp	r2, r3
    b5ce:	d10a      	bne.n	b5e6 <usart_serial_putchar+0x2a>
		while (usart_write(p_usart, c)!=0);
    b5d0:	bf00      	nop
    b5d2:	78fb      	ldrb	r3, [r7, #3]
    b5d4:	6878      	ldr	r0, [r7, #4]
    b5d6:	4619      	mov	r1, r3
    b5d8:	4b1d      	ldr	r3, [pc, #116]	; (b650 <usart_serial_putchar+0x94>)
    b5da:	4798      	blx	r3
    b5dc:	4603      	mov	r3, r0
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d1f7      	bne.n	b5d2 <usart_serial_putchar+0x16>
		return 1;
    b5e2:	2301      	movs	r3, #1
    b5e4:	e02d      	b.n	b642 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    b5e6:	687a      	ldr	r2, [r7, #4]
    b5e8:	4b1a      	ldr	r3, [pc, #104]	; (b654 <usart_serial_putchar+0x98>)
    b5ea:	429a      	cmp	r2, r3
    b5ec:	d10a      	bne.n	b604 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
    b5ee:	bf00      	nop
    b5f0:	78fb      	ldrb	r3, [r7, #3]
    b5f2:	6878      	ldr	r0, [r7, #4]
    b5f4:	4619      	mov	r1, r3
    b5f6:	4b16      	ldr	r3, [pc, #88]	; (b650 <usart_serial_putchar+0x94>)
    b5f8:	4798      	blx	r3
    b5fa:	4603      	mov	r3, r0
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d1f7      	bne.n	b5f0 <usart_serial_putchar+0x34>
		return 1;
    b600:	2301      	movs	r3, #1
    b602:	e01e      	b.n	b642 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    b604:	687a      	ldr	r2, [r7, #4]
    b606:	4b14      	ldr	r3, [pc, #80]	; (b658 <usart_serial_putchar+0x9c>)
    b608:	429a      	cmp	r2, r3
    b60a:	d10a      	bne.n	b622 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
    b60c:	bf00      	nop
    b60e:	78fb      	ldrb	r3, [r7, #3]
    b610:	6878      	ldr	r0, [r7, #4]
    b612:	4619      	mov	r1, r3
    b614:	4b0e      	ldr	r3, [pc, #56]	; (b650 <usart_serial_putchar+0x94>)
    b616:	4798      	blx	r3
    b618:	4603      	mov	r3, r0
    b61a:	2b00      	cmp	r3, #0
    b61c:	d1f7      	bne.n	b60e <usart_serial_putchar+0x52>
		return 1;
    b61e:	2301      	movs	r3, #1
    b620:	e00f      	b.n	b642 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    b622:	687a      	ldr	r2, [r7, #4]
    b624:	4b0d      	ldr	r3, [pc, #52]	; (b65c <usart_serial_putchar+0xa0>)
    b626:	429a      	cmp	r2, r3
    b628:	d10a      	bne.n	b640 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
    b62a:	bf00      	nop
    b62c:	78fb      	ldrb	r3, [r7, #3]
    b62e:	6878      	ldr	r0, [r7, #4]
    b630:	4619      	mov	r1, r3
    b632:	4b07      	ldr	r3, [pc, #28]	; (b650 <usart_serial_putchar+0x94>)
    b634:	4798      	blx	r3
    b636:	4603      	mov	r3, r0
    b638:	2b00      	cmp	r3, #0
    b63a:	d1f7      	bne.n	b62c <usart_serial_putchar+0x70>
		return 1;
    b63c:	2301      	movs	r3, #1
    b63e:	e000      	b.n	b642 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    b640:	2300      	movs	r3, #0
}
    b642:	4618      	mov	r0, r3
    b644:	3708      	adds	r7, #8
    b646:	46bd      	mov	sp, r7
    b648:	bd80      	pop	{r7, pc}
    b64a:	bf00      	nop
    b64c:	40024000 	.word	0x40024000
    b650:	000081f5 	.word	0x000081f5
    b654:	40028000 	.word	0x40028000
    b658:	4002c000 	.word	0x4002c000
    b65c:	40030000 	.word	0x40030000

0000b660 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    b660:	b580      	push	{r7, lr}
    b662:	b084      	sub	sp, #16
    b664:	af00      	add	r7, sp, #0
    b666:	6078      	str	r0, [r7, #4]
    b668:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
    b66a:	2300      	movs	r3, #0
    b66c:	60fb      	str	r3, [r7, #12]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    b66e:	687a      	ldr	r2, [r7, #4]
    b670:	4b24      	ldr	r3, [pc, #144]	; (b704 <usart_serial_getchar+0xa4>)
    b672:	429a      	cmp	r2, r3
    b674:	d10d      	bne.n	b692 <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
    b676:	bf00      	nop
    b678:	f107 030c 	add.w	r3, r7, #12
    b67c:	6878      	ldr	r0, [r7, #4]
    b67e:	4619      	mov	r1, r3
    b680:	4b21      	ldr	r3, [pc, #132]	; (b708 <usart_serial_getchar+0xa8>)
    b682:	4798      	blx	r3
    b684:	4603      	mov	r3, r0
    b686:	2b00      	cmp	r3, #0
    b688:	d1f6      	bne.n	b678 <usart_serial_getchar+0x18>
		*data = (uint8_t)(val & 0xFF);
    b68a:	68fb      	ldr	r3, [r7, #12]
    b68c:	b2da      	uxtb	r2, r3
    b68e:	683b      	ldr	r3, [r7, #0]
    b690:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    b692:	687a      	ldr	r2, [r7, #4]
    b694:	4b1d      	ldr	r3, [pc, #116]	; (b70c <usart_serial_getchar+0xac>)
    b696:	429a      	cmp	r2, r3
    b698:	d10d      	bne.n	b6b6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
    b69a:	bf00      	nop
    b69c:	f107 030c 	add.w	r3, r7, #12
    b6a0:	6878      	ldr	r0, [r7, #4]
    b6a2:	4619      	mov	r1, r3
    b6a4:	4b18      	ldr	r3, [pc, #96]	; (b708 <usart_serial_getchar+0xa8>)
    b6a6:	4798      	blx	r3
    b6a8:	4603      	mov	r3, r0
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d1f6      	bne.n	b69c <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
    b6ae:	68fb      	ldr	r3, [r7, #12]
    b6b0:	b2da      	uxtb	r2, r3
    b6b2:	683b      	ldr	r3, [r7, #0]
    b6b4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    b6b6:	687a      	ldr	r2, [r7, #4]
    b6b8:	4b15      	ldr	r3, [pc, #84]	; (b710 <usart_serial_getchar+0xb0>)
    b6ba:	429a      	cmp	r2, r3
    b6bc:	d10d      	bne.n	b6da <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
    b6be:	bf00      	nop
    b6c0:	f107 030c 	add.w	r3, r7, #12
    b6c4:	6878      	ldr	r0, [r7, #4]
    b6c6:	4619      	mov	r1, r3
    b6c8:	4b0f      	ldr	r3, [pc, #60]	; (b708 <usart_serial_getchar+0xa8>)
    b6ca:	4798      	blx	r3
    b6cc:	4603      	mov	r3, r0
    b6ce:	2b00      	cmp	r3, #0
    b6d0:	d1f6      	bne.n	b6c0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
    b6d2:	68fb      	ldr	r3, [r7, #12]
    b6d4:	b2da      	uxtb	r2, r3
    b6d6:	683b      	ldr	r3, [r7, #0]
    b6d8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    b6da:	687a      	ldr	r2, [r7, #4]
    b6dc:	4b0d      	ldr	r3, [pc, #52]	; (b714 <usart_serial_getchar+0xb4>)
    b6de:	429a      	cmp	r2, r3
    b6e0:	d10d      	bne.n	b6fe <usart_serial_getchar+0x9e>
		while (usart_read(p_usart, &val));
    b6e2:	bf00      	nop
    b6e4:	f107 030c 	add.w	r3, r7, #12
    b6e8:	6878      	ldr	r0, [r7, #4]
    b6ea:	4619      	mov	r1, r3
    b6ec:	4b06      	ldr	r3, [pc, #24]	; (b708 <usart_serial_getchar+0xa8>)
    b6ee:	4798      	blx	r3
    b6f0:	4603      	mov	r3, r0
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d1f6      	bne.n	b6e4 <usart_serial_getchar+0x84>
		*data = (uint8_t)(val & 0xFF);
    b6f6:	68fb      	ldr	r3, [r7, #12]
    b6f8:	b2da      	uxtb	r2, r3
    b6fa:	683b      	ldr	r3, [r7, #0]
    b6fc:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    b6fe:	3710      	adds	r7, #16
    b700:	46bd      	mov	sp, r7
    b702:	bd80      	pop	{r7, pc}
    b704:	40024000 	.word	0x40024000
    b708:	00008259 	.word	0x00008259
    b70c:	40028000 	.word	0x40028000
    b710:	4002c000 	.word	0x4002c000
    b714:	40030000 	.word	0x40030000

0000b718 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
    b718:	b580      	push	{r7, lr}
    b71a:	b082      	sub	sp, #8
    b71c:	af00      	add	r7, sp, #0
    b71e:	6078      	str	r0, [r7, #4]
    b720:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
    b722:	4b0f      	ldr	r3, [pc, #60]	; (b760 <stdio_serial_init+0x48>)
    b724:	687a      	ldr	r2, [r7, #4]
    b726:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    b728:	4b0e      	ldr	r3, [pc, #56]	; (b764 <stdio_serial_init+0x4c>)
    b72a:	4a0f      	ldr	r2, [pc, #60]	; (b768 <stdio_serial_init+0x50>)
    b72c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    b72e:	4b0f      	ldr	r3, [pc, #60]	; (b76c <stdio_serial_init+0x54>)
    b730:	4a0f      	ldr	r2, [pc, #60]	; (b770 <stdio_serial_init+0x58>)
    b732:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
    b734:	6878      	ldr	r0, [r7, #4]
    b736:	6839      	ldr	r1, [r7, #0]
    b738:	4b0e      	ldr	r3, [pc, #56]	; (b774 <stdio_serial_init+0x5c>)
    b73a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    b73c:	4b0e      	ldr	r3, [pc, #56]	; (b778 <stdio_serial_init+0x60>)
    b73e:	681b      	ldr	r3, [r3, #0]
    b740:	689b      	ldr	r3, [r3, #8]
    b742:	4618      	mov	r0, r3
    b744:	2100      	movs	r1, #0
    b746:	4b0d      	ldr	r3, [pc, #52]	; (b77c <stdio_serial_init+0x64>)
    b748:	4798      	blx	r3
	setbuf(stdin, NULL);
    b74a:	4b0b      	ldr	r3, [pc, #44]	; (b778 <stdio_serial_init+0x60>)
    b74c:	681b      	ldr	r3, [r3, #0]
    b74e:	685b      	ldr	r3, [r3, #4]
    b750:	4618      	mov	r0, r3
    b752:	2100      	movs	r1, #0
    b754:	4b09      	ldr	r3, [pc, #36]	; (b77c <stdio_serial_init+0x64>)
    b756:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
    b758:	3708      	adds	r7, #8
    b75a:	46bd      	mov	sp, r7
    b75c:	bd80      	pop	{r7, pc}
    b75e:	bf00      	nop
    b760:	20001010 	.word	0x20001010
    b764:	2000100c 	.word	0x2000100c
    b768:	0000b5bd 	.word	0x0000b5bd
    b76c:	20001008 	.word	0x20001008
    b770:	0000b661 	.word	0x0000b661
    b774:	0000b4ad 	.word	0x0000b4ad
    b778:	200004c0 	.word	0x200004c0
    b77c:	0000dbad 	.word	0x0000dbad

0000b780 <OLED_BUTTON1_handler>:

bool update_replay; // update data when moving cursor...

// mode changing button
void OLED_BUTTON1_handler(void)
{
    b780:	b590      	push	{r4, r7, lr}
    b782:	b083      	sub	sp, #12
    b784:	af02      	add	r7, sp, #8
	if( mode == SAMPLING_MODE)
    b786:	4b22      	ldr	r3, [pc, #136]	; (b810 <OLED_BUTTON1_handler+0x90>)
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	2b01      	cmp	r3, #1
    b78c:	d106      	bne.n	b79c <OLED_BUTTON1_handler+0x1c>
	{
		mode = REPLAY_MODE;
    b78e:	4b20      	ldr	r3, [pc, #128]	; (b810 <OLED_BUTTON1_handler+0x90>)
    b790:	2202      	movs	r2, #2
    b792:	701a      	strb	r2, [r3, #0]
		mode_changing = 1;
    b794:	4b1f      	ldr	r3, [pc, #124]	; (b814 <OLED_BUTTON1_handler+0x94>)
    b796:	2201      	movs	r2, #1
    b798:	701a      	strb	r2, [r3, #0]
    b79a:	e032      	b.n	b802 <OLED_BUTTON1_handler+0x82>
	}
	else if(mode == REPLAY_MODE)
    b79c:	4b1c      	ldr	r3, [pc, #112]	; (b810 <OLED_BUTTON1_handler+0x90>)
    b79e:	781b      	ldrb	r3, [r3, #0]
    b7a0:	2b02      	cmp	r3, #2
    b7a2:	d117      	bne.n	b7d4 <OLED_BUTTON1_handler+0x54>
	{
		mode = SAMPLING_MODE;
    b7a4:	4b1a      	ldr	r3, [pc, #104]	; (b810 <OLED_BUTTON1_handler+0x90>)
    b7a6:	2201      	movs	r2, #1
    b7a8:	701a      	strb	r2, [r3, #0]
		mode_changing = 1;
    b7aa:	4b1a      	ldr	r3, [pc, #104]	; (b814 <OLED_BUTTON1_handler+0x94>)
    b7ac:	2201      	movs	r2, #1
    b7ae:	701a      	strb	r2, [r3, #0]
		start_adc();
    b7b0:	4b19      	ldr	r3, [pc, #100]	; (b818 <OLED_BUTTON1_handler+0x98>)
    b7b2:	4798      	blx	r3
		
		// Draw rolling graph
		ssd1306_draw_graph(1, 1, DISPLAY_BUFFER_SIZE, 3, &current, CURRENT_BUFFER_SIZE - DISPLAY_BUFFER_SIZE - cursor);		
    b7b4:	4b19      	ldr	r3, [pc, #100]	; (b81c <OLED_BUTTON1_handler+0x9c>)
    b7b6:	881b      	ldrh	r3, [r3, #0]
    b7b8:	b21b      	sxth	r3, r3
    b7ba:	f5c3 735a 	rsb	r3, r3, #872	; 0x368
    b7be:	3301      	adds	r3, #1
    b7c0:	4a17      	ldr	r2, [pc, #92]	; (b820 <OLED_BUTTON1_handler+0xa0>)
    b7c2:	9200      	str	r2, [sp, #0]
    b7c4:	9301      	str	r3, [sp, #4]
    b7c6:	2001      	movs	r0, #1
    b7c8:	2101      	movs	r1, #1
    b7ca:	227f      	movs	r2, #127	; 0x7f
    b7cc:	2303      	movs	r3, #3
    b7ce:	4c15      	ldr	r4, [pc, #84]	; (b824 <OLED_BUTTON1_handler+0xa4>)
    b7d0:	47a0      	blx	r4
    b7d2:	e016      	b.n	b802 <OLED_BUTTON1_handler+0x82>
	}
		
	else
	{
		mode = SAMPLING_MODE;
    b7d4:	4b0e      	ldr	r3, [pc, #56]	; (b810 <OLED_BUTTON1_handler+0x90>)
    b7d6:	2201      	movs	r2, #1
    b7d8:	701a      	strb	r2, [r3, #0]
		mode_changing = 1;
    b7da:	4b0e      	ldr	r3, [pc, #56]	; (b814 <OLED_BUTTON1_handler+0x94>)
    b7dc:	2201      	movs	r2, #1
    b7de:	701a      	strb	r2, [r3, #0]
		start_adc();
    b7e0:	4b0d      	ldr	r3, [pc, #52]	; (b818 <OLED_BUTTON1_handler+0x98>)
    b7e2:	4798      	blx	r3
		
		// Draw rolling graph
		ssd1306_draw_graph(1, 1, DISPLAY_BUFFER_SIZE, 3, &current, CURRENT_BUFFER_SIZE - DISPLAY_BUFFER_SIZE - cursor);		
    b7e4:	4b0d      	ldr	r3, [pc, #52]	; (b81c <OLED_BUTTON1_handler+0x9c>)
    b7e6:	881b      	ldrh	r3, [r3, #0]
    b7e8:	b21b      	sxth	r3, r3
    b7ea:	f5c3 735a 	rsb	r3, r3, #872	; 0x368
    b7ee:	3301      	adds	r3, #1
    b7f0:	4a0b      	ldr	r2, [pc, #44]	; (b820 <OLED_BUTTON1_handler+0xa0>)
    b7f2:	9200      	str	r2, [sp, #0]
    b7f4:	9301      	str	r3, [sp, #4]
    b7f6:	2001      	movs	r0, #1
    b7f8:	2101      	movs	r1, #1
    b7fa:	227f      	movs	r2, #127	; 0x7f
    b7fc:	2303      	movs	r3, #3
    b7fe:	4c09      	ldr	r4, [pc, #36]	; (b824 <OLED_BUTTON1_handler+0xa4>)
    b800:	47a0      	blx	r4
	}
		
	// wait for button to be released before allowing another interrupt	
	gpio_disable_pin_interrupt(OLED_BUTTON1);
    b802:	2006      	movs	r0, #6
    b804:	4b08      	ldr	r3, [pc, #32]	; (b828 <OLED_BUTTON1_handler+0xa8>)
    b806:	4798      	blx	r3
}
    b808:	3704      	adds	r7, #4
    b80a:	46bd      	mov	sp, r7
    b80c:	bd90      	pop	{r4, r7, pc}
    b80e:	bf00      	nop
    b810:	2000109d 	.word	0x2000109d
    b814:	2000109c 	.word	0x2000109c
    b818:	000004c1 	.word	0x000004c1
    b81c:	2000109e 	.word	0x2000109e
    b820:	200010a0 	.word	0x200010a0
    b824:	00007219 	.word	0x00007219
    b828:	0000b0c1 	.word	0x0000b0c1

0000b82c <OLED_BUTTON2_handler>:

// move cursor left button
void OLED_BUTTON2_handler(void)
{
    b82c:	b580      	push	{r7, lr}
    b82e:	af00      	add	r7, sp, #0
	update_replay = true; // update display
    b830:	4b04      	ldr	r3, [pc, #16]	; (b844 <OLED_BUTTON2_handler+0x18>)
    b832:	2201      	movs	r2, #1
    b834:	701a      	strb	r2, [r3, #0]
	cursor_speed_up = 0; // reset speedup "timer"
    b836:	4b04      	ldr	r3, [pc, #16]	; (b848 <OLED_BUTTON2_handler+0x1c>)
    b838:	2200      	movs	r2, #0
    b83a:	801a      	strh	r2, [r3, #0]
		
	// wait for button to be released before allowing another interrupt		
	gpio_disable_pin_interrupt(OLED_BUTTON2);
    b83c:	2023      	movs	r0, #35	; 0x23
    b83e:	4b03      	ldr	r3, [pc, #12]	; (b84c <OLED_BUTTON2_handler+0x20>)
    b840:	4798      	blx	r3
}
    b842:	bd80      	pop	{r7, pc}
    b844:	20001494 	.word	0x20001494
    b848:	20001488 	.word	0x20001488
    b84c:	0000b0c1 	.word	0x0000b0c1

0000b850 <OLED_BUTTON3_handler>:

// move cursor right button
void OLED_BUTTON3_handler(void)
{
    b850:	b580      	push	{r7, lr}
    b852:	af00      	add	r7, sp, #0
	update_replay = true; // update display
    b854:	4b04      	ldr	r3, [pc, #16]	; (b868 <OLED_BUTTON3_handler+0x18>)
    b856:	2201      	movs	r2, #1
    b858:	701a      	strb	r2, [r3, #0]
	cursor_speed_up = 0; // reset speedup "timer"
    b85a:	4b04      	ldr	r3, [pc, #16]	; (b86c <OLED_BUTTON3_handler+0x1c>)
    b85c:	2200      	movs	r2, #0
    b85e:	801a      	strh	r2, [r3, #0]
	
 	// wait for button to be released before allowing another interrupt
	gpio_disable_pin_interrupt(OLED_BUTTON3);
    b860:	2024      	movs	r0, #36	; 0x24
    b862:	4b03      	ldr	r3, [pc, #12]	; (b870 <OLED_BUTTON3_handler+0x20>)
    b864:	4798      	blx	r3
}
    b866:	bd80      	pop	{r7, pc}
    b868:	20001494 	.word	0x20001494
    b86c:	20001488 	.word	0x20001488
    b870:	0000b0c1 	.word	0x0000b0c1

0000b874 <configure_OLED_pins>:

static int configure_OLED_pins(void)
{
    b874:	b580      	push	{r7, lr}
    b876:	af00      	add	r7, sp, #0
	/* Configure Button1 interrupt*/
	gpio_enable_pin_interrupt(OLED_BUTTON1);
    b878:	2006      	movs	r0, #6
    b87a:	4b0d      	ldr	r3, [pc, #52]	; (b8b0 <configure_OLED_pins+0x3c>)
    b87c:	4798      	blx	r3
	gpio_set_pin_callback(OLED_BUTTON1, OLED_BUTTON1_handler, 3);
    b87e:	2006      	movs	r0, #6
    b880:	490c      	ldr	r1, [pc, #48]	; (b8b4 <configure_OLED_pins+0x40>)
    b882:	2203      	movs	r2, #3
    b884:	4b0c      	ldr	r3, [pc, #48]	; (b8b8 <configure_OLED_pins+0x44>)
    b886:	4798      	blx	r3
	
	/* Configure Button2 interrupt*/
	gpio_enable_pin_interrupt(OLED_BUTTON2);
    b888:	2023      	movs	r0, #35	; 0x23
    b88a:	4b09      	ldr	r3, [pc, #36]	; (b8b0 <configure_OLED_pins+0x3c>)
    b88c:	4798      	blx	r3
	gpio_set_pin_callback(OLED_BUTTON2, OLED_BUTTON2_handler, 3);
    b88e:	2023      	movs	r0, #35	; 0x23
    b890:	490a      	ldr	r1, [pc, #40]	; (b8bc <configure_OLED_pins+0x48>)
    b892:	2203      	movs	r2, #3
    b894:	4b08      	ldr	r3, [pc, #32]	; (b8b8 <configure_OLED_pins+0x44>)
    b896:	4798      	blx	r3
	
	/* Configure Button3 interrupt*/
	gpio_enable_pin_interrupt(OLED_BUTTON3);
    b898:	2024      	movs	r0, #36	; 0x24
    b89a:	4b05      	ldr	r3, [pc, #20]	; (b8b0 <configure_OLED_pins+0x3c>)
    b89c:	4798      	blx	r3
	gpio_set_pin_callback(OLED_BUTTON3, OLED_BUTTON3_handler, 3);
    b89e:	2024      	movs	r0, #36	; 0x24
    b8a0:	4907      	ldr	r1, [pc, #28]	; (b8c0 <configure_OLED_pins+0x4c>)
    b8a2:	2203      	movs	r2, #3
    b8a4:	4b04      	ldr	r3, [pc, #16]	; (b8b8 <configure_OLED_pins+0x44>)
    b8a6:	4798      	blx	r3
	
	return 0;
    b8a8:	2300      	movs	r3, #0
}
    b8aa:	4618      	mov	r0, r3
    b8ac:	bd80      	pop	{r7, pc}
    b8ae:	bf00      	nop
    b8b0:	0000b089 	.word	0x0000b089
    b8b4:	0000b781 	.word	0x0000b781
    b8b8:	00001de9 	.word	0x00001de9
    b8bc:	0000b82d 	.word	0x0000b82d
    b8c0:	0000b851 	.word	0x0000b851

0000b8c4 <ast_per_callback>:
/**
 * AST interrupt handler
 * Asynchronous timer, used to generate the time measurement
 */
void ast_per_callback(void)
{
    b8c4:	b590      	push	{r4, r7, lr}
    b8c6:	b085      	sub	sp, #20
    b8c8:	af02      	add	r7, sp, #8
	// stop timer	
	//ast_stop(AST);
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_PER);	
    b8ca:	4815      	ldr	r0, [pc, #84]	; (b920 <ast_per_callback+0x5c>)
    b8cc:	2101      	movs	r1, #1
    b8ce:	4b15      	ldr	r3, [pc, #84]	; (b924 <ast_per_callback+0x60>)
    b8d0:	4798      	blx	r3
	
	timer++;
    b8d2:	4b15      	ldr	r3, [pc, #84]	; (b928 <ast_per_callback+0x64>)
    b8d4:	881b      	ldrh	r3, [r3, #0]
    b8d6:	3301      	adds	r3, #1
    b8d8:	b29a      	uxth	r2, r3
    b8da:	4b13      	ldr	r3, [pc, #76]	; (b928 <ast_per_callback+0x64>)
    b8dc:	801a      	strh	r2, [r3, #0]
	
	// Draw rolling graph
	ssd1306_draw_graph(1, 1, DISPLAY_BUFFER_SIZE, 3, &current, CURRENT_BUFFER_SIZE - DISPLAY_BUFFER_SIZE);
    b8de:	4b13      	ldr	r3, [pc, #76]	; (b92c <ast_per_callback+0x68>)
    b8e0:	9300      	str	r3, [sp, #0]
    b8e2:	f240 3369 	movw	r3, #873	; 0x369
    b8e6:	9301      	str	r3, [sp, #4]
    b8e8:	2001      	movs	r0, #1
    b8ea:	2101      	movs	r1, #1
    b8ec:	227f      	movs	r2, #127	; 0x7f
    b8ee:	2303      	movs	r3, #3
    b8f0:	4c0f      	ldr	r4, [pc, #60]	; (b930 <ast_per_callback+0x6c>)
    b8f2:	47a0      	blx	r4
		
	/*Shift buffer.*/
	for (int i = 0; i < (CURRENT_BUFFER_SIZE - 1); ++i)
    b8f4:	2300      	movs	r3, #0
    b8f6:	607b      	str	r3, [r7, #4]
    b8f8:	e00a      	b.n	b910 <ast_per_callback+0x4c>
	{
		current[i] = current[i + 1];
    b8fa:	687b      	ldr	r3, [r7, #4]
    b8fc:	3301      	adds	r3, #1
    b8fe:	4a0b      	ldr	r2, [pc, #44]	; (b92c <ast_per_callback+0x68>)
    b900:	5cd2      	ldrb	r2, [r2, r3]
    b902:	490a      	ldr	r1, [pc, #40]	; (b92c <ast_per_callback+0x68>)
    b904:	687b      	ldr	r3, [r7, #4]
    b906:	440b      	add	r3, r1
    b908:	701a      	strb	r2, [r3, #0]
	
	// Draw rolling graph
	ssd1306_draw_graph(1, 1, DISPLAY_BUFFER_SIZE, 3, &current, CURRENT_BUFFER_SIZE - DISPLAY_BUFFER_SIZE);
		
	/*Shift buffer.*/
	for (int i = 0; i < (CURRENT_BUFFER_SIZE - 1); ++i)
    b90a:	687b      	ldr	r3, [r7, #4]
    b90c:	3301      	adds	r3, #1
    b90e:	607b      	str	r3, [r7, #4]
    b910:	687a      	ldr	r2, [r7, #4]
    b912:	f240 33e6 	movw	r3, #998	; 0x3e6
    b916:	429a      	cmp	r2, r3
    b918:	ddef      	ble.n	b8fa <ast_per_callback+0x36>
	{
		current[i] = current[i + 1];
	}
	
}
    b91a:	370c      	adds	r7, #12
    b91c:	46bd      	mov	sp, r7
    b91e:	bd90      	pop	{r4, r7, pc}
    b920:	400f0800 	.word	0x400f0800
    b924:	000050a1 	.word	0x000050a1
    b928:	20001074 	.word	0x20001074
    b92c:	200010a0 	.word	0x200010a0
    b930:	00007219 	.word	0x00007219

0000b934 <configure_console>:

// console for debugging purpose
void configure_console(void)
{
    b934:	b590      	push	{r4, r7, lr}
    b936:	b085      	sub	sp, #20
    b938:	af00      	add	r7, sp, #0

	const usart_serial_options_t usart_serial_options = {
    b93a:	4b06      	ldr	r3, [pc, #24]	; (b954 <configure_console+0x20>)
    b93c:	463c      	mov	r4, r7
    b93e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    b940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.charlength = CONSOLE_USART_CHAR_LENGTH,
		.paritytype = CONSOLE_USART_PARITY,
		.stopbits = CONSOLE_USART_STOP_BITS,
	};

	stdio_serial_init(CONSOLE_USART, &usart_serial_options);
    b944:	463b      	mov	r3, r7
    b946:	4804      	ldr	r0, [pc, #16]	; (b958 <configure_console+0x24>)
    b948:	4619      	mov	r1, r3
    b94a:	4b04      	ldr	r3, [pc, #16]	; (b95c <configure_console+0x28>)
    b94c:	4798      	blx	r3
}
    b94e:	3714      	adds	r7, #20
    b950:	46bd      	mov	sp, r7
    b952:	bd90      	pop	{r4, r7, pc}
    b954:	00012cb8 	.word	0x00012cb8
    b958:	40028000 	.word	0x40028000
    b95c:	0000b719 	.word	0x0000b719

0000b960 <data_to_csv>:

// converts raw data to comma separated value
char* data_to_csv(int8_t* data, uint32_t size)
{
    b960:	b590      	push	{r4, r7, lr}
    b962:	b085      	sub	sp, #20
    b964:	af00      	add	r7, sp, #0
    b966:	6078      	str	r0, [r7, #4]
    b968:	6039      	str	r1, [r7, #0]
	char* csv_string = malloc(size*4 + 1);
    b96a:	683b      	ldr	r3, [r7, #0]
    b96c:	009b      	lsls	r3, r3, #2
    b96e:	3301      	adds	r3, #1
    b970:	4618      	mov	r0, r3
    b972:	4b14      	ldr	r3, [pc, #80]	; (b9c4 <data_to_csv+0x64>)
    b974:	4798      	blx	r3
    b976:	4603      	mov	r3, r0
    b978:	60bb      	str	r3, [r7, #8]
	
	memset(csv_string, 0, size*4 + 1);
    b97a:	683b      	ldr	r3, [r7, #0]
    b97c:	009b      	lsls	r3, r3, #2
    b97e:	3301      	adds	r3, #1
    b980:	68b8      	ldr	r0, [r7, #8]
    b982:	2100      	movs	r1, #0
    b984:	461a      	mov	r2, r3
    b986:	4b10      	ldr	r3, [pc, #64]	; (b9c8 <data_to_csv+0x68>)
    b988:	4798      	blx	r3
	
	for(int a = (CURRENT_BUFFER_SIZE - timer); a < CURRENT_BUFFER_SIZE; a++)
    b98a:	4b10      	ldr	r3, [pc, #64]	; (b9cc <data_to_csv+0x6c>)
    b98c:	881b      	ldrh	r3, [r3, #0]
    b98e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
    b992:	60fb      	str	r3, [r7, #12]
    b994:	e00c      	b.n	b9b0 <data_to_csv+0x50>
	{
		sprintf(csv_string, "%s%d,", csv_string, data[a]);
    b996:	68fb      	ldr	r3, [r7, #12]
    b998:	687a      	ldr	r2, [r7, #4]
    b99a:	4413      	add	r3, r2
    b99c:	781b      	ldrb	r3, [r3, #0]
    b99e:	b25b      	sxtb	r3, r3
    b9a0:	68b8      	ldr	r0, [r7, #8]
    b9a2:	490b      	ldr	r1, [pc, #44]	; (b9d0 <data_to_csv+0x70>)
    b9a4:	68ba      	ldr	r2, [r7, #8]
    b9a6:	4c0b      	ldr	r4, [pc, #44]	; (b9d4 <data_to_csv+0x74>)
    b9a8:	47a0      	blx	r4
{
	char* csv_string = malloc(size*4 + 1);
	
	memset(csv_string, 0, size*4 + 1);
	
	for(int a = (CURRENT_BUFFER_SIZE - timer); a < CURRENT_BUFFER_SIZE; a++)
    b9aa:	68fb      	ldr	r3, [r7, #12]
    b9ac:	3301      	adds	r3, #1
    b9ae:	60fb      	str	r3, [r7, #12]
    b9b0:	68fb      	ldr	r3, [r7, #12]
    b9b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    b9b6:	dbee      	blt.n	b996 <data_to_csv+0x36>
		sprintf(csv_string, "%s%d,", csv_string, data[a]);
	}
	
	sprintf(csv_string, "%s\0", csv_string);
		
	return csv_string;
    b9b8:	68bb      	ldr	r3, [r7, #8]
}
    b9ba:	4618      	mov	r0, r3
    b9bc:	3714      	adds	r7, #20
    b9be:	46bd      	mov	sp, r7
    b9c0:	bd90      	pop	{r4, r7, pc}
    b9c2:	bf00      	nop
    b9c4:	0000d745 	.word	0x0000d745
    b9c8:	0000db79 	.word	0x0000db79
    b9cc:	20001074 	.word	0x20001074
    b9d0:	00012cc8 	.word	0x00012cc8
    b9d4:	0000dce5 	.word	0x0000dce5

0000b9d8 <main>:


int main (void)
{
    b9d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    b9dc:	b0a0      	sub	sp, #128	; 0x80
    b9de:	af02      	add	r7, sp, #8
	// Initiate clocks
	sysclk_init();
    b9e0:	4b3f      	ldr	r3, [pc, #252]	; (bae0 <main+0x108>)
    b9e2:	4798      	blx	r3
	
	// Board init
	board_init();
    b9e4:	4b3f      	ldr	r3, [pc, #252]	; (bae4 <main+0x10c>)
    b9e6:	4798      	blx	r3
	custom_init();
    b9e8:	4b3f      	ldr	r3, [pc, #252]	; (bae8 <main+0x110>)
    b9ea:	4798      	blx	r3
	
	configure_console();
    b9ec:	4b3f      	ldr	r3, [pc, #252]	; (baec <main+0x114>)
    b9ee:	4798      	blx	r3
	printf( STRING_HEADER );
    b9f0:	483f      	ldr	r0, [pc, #252]	; (baf0 <main+0x118>)
    b9f2:	4b40      	ldr	r3, [pc, #256]	; (baf4 <main+0x11c>)
    b9f4:	4798      	blx	r3
	
	printf("Configuring OLED button pins...");	
    b9f6:	4840      	ldr	r0, [pc, #256]	; (baf8 <main+0x120>)
    b9f8:	4b3e      	ldr	r3, [pc, #248]	; (baf4 <main+0x11c>)
    b9fa:	4798      	blx	r3
	if( configure_OLED_pins() == 0)
    b9fc:	4b3f      	ldr	r3, [pc, #252]	; (bafc <main+0x124>)
    b9fe:	4798      	blx	r3
    ba00:	4603      	mov	r3, r0
    ba02:	2b00      	cmp	r3, #0
    ba04:	d103      	bne.n	ba0e <main+0x36>
		printf("OK\n\r");
    ba06:	483e      	ldr	r0, [pc, #248]	; (bb00 <main+0x128>)
    ba08:	4b3a      	ldr	r3, [pc, #232]	; (baf4 <main+0x11c>)
    ba0a:	4798      	blx	r3
    ba0c:	e002      	b.n	ba14 <main+0x3c>
	else
		printf("Error when configuring OLED button pins\n\r");	
    ba0e:	483d      	ldr	r0, [pc, #244]	; (bb04 <main+0x12c>)
    ba10:	4b38      	ldr	r3, [pc, #224]	; (baf4 <main+0x11c>)
    ba12:	4798      	blx	r3
	
	printf("Configuring ssd1306 pins... ");
    ba14:	483c      	ldr	r0, [pc, #240]	; (bb08 <main+0x130>)
    ba16:	4b37      	ldr	r3, [pc, #220]	; (baf4 <main+0x11c>)
    ba18:	4798      	blx	r3
	if( ssd1306_custom_init() == 0)
    ba1a:	4b3c      	ldr	r3, [pc, #240]	; (bb0c <main+0x134>)
    ba1c:	4798      	blx	r3
    ba1e:	4603      	mov	r3, r0
    ba20:	2b00      	cmp	r3, #0
    ba22:	d103      	bne.n	ba2c <main+0x54>
		printf("OK\n\r");
    ba24:	4836      	ldr	r0, [pc, #216]	; (bb00 <main+0x128>)
    ba26:	4b33      	ldr	r3, [pc, #204]	; (baf4 <main+0x11c>)
    ba28:	4798      	blx	r3
    ba2a:	e002      	b.n	ba32 <main+0x5a>
	else
		printf("Error when configuring ssd1306 pins\n\r");
    ba2c:	4838      	ldr	r0, [pc, #224]	; (bb10 <main+0x138>)
    ba2e:	4b31      	ldr	r3, [pc, #196]	; (baf4 <main+0x11c>)
    ba30:	4798      	blx	r3
	
	printf("Configuring ssd1306 display...");
    ba32:	4838      	ldr	r0, [pc, #224]	; (bb14 <main+0x13c>)
    ba34:	4b2f      	ldr	r3, [pc, #188]	; (baf4 <main+0x11c>)
    ba36:	4798      	blx	r3
	ssd1306_init();
    ba38:	4b37      	ldr	r3, [pc, #220]	; (bb18 <main+0x140>)
    ba3a:	4798      	blx	r3
	printf("OK\n\r");
    ba3c:	4830      	ldr	r0, [pc, #192]	; (bb00 <main+0x128>)
    ba3e:	4b2d      	ldr	r3, [pc, #180]	; (baf4 <main+0x11c>)
    ba40:	4798      	blx	r3
	
	delay_us(100);
    ba42:	4b36      	ldr	r3, [pc, #216]	; (bb1c <main+0x144>)
    ba44:	4798      	blx	r3
    ba46:	4603      	mov	r3, r0
    ba48:	4618      	mov	r0, r3
    ba4a:	f04f 0100 	mov.w	r1, #0
    ba4e:	4602      	mov	r2, r0
    ba50:	460b      	mov	r3, r1
    ba52:	1892      	adds	r2, r2, r2
    ba54:	eb43 0303 	adc.w	r3, r3, r3
    ba58:	1812      	adds	r2, r2, r0
    ba5a:	eb43 0301 	adc.w	r3, r3, r1
    ba5e:	015d      	lsls	r5, r3, #5
    ba60:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    ba64:	0154      	lsls	r4, r2, #5
    ba66:	1912      	adds	r2, r2, r4
    ba68:	eb43 0305 	adc.w	r3, r3, r5
    ba6c:	1880      	adds	r0, r0, r2
    ba6e:	eb41 0103 	adc.w	r1, r1, r3
    ba72:	a319      	add	r3, pc, #100	; (adr r3, bad8 <main+0x100>)
    ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba78:	1812      	adds	r2, r2, r0
    ba7a:	eb43 0301 	adc.w	r3, r3, r1
    ba7e:	4c28      	ldr	r4, [pc, #160]	; (bb20 <main+0x148>)
    ba80:	4610      	mov	r0, r2
    ba82:	4619      	mov	r1, r3
    ba84:	4a27      	ldr	r2, [pc, #156]	; (bb24 <main+0x14c>)
    ba86:	f04f 0300 	mov.w	r3, #0
    ba8a:	47a0      	blx	r4
    ba8c:	4602      	mov	r2, r0
    ba8e:	460b      	mov	r3, r1
    ba90:	4613      	mov	r3, r2
    ba92:	4618      	mov	r0, r3
    ba94:	4b24      	ldr	r3, [pc, #144]	; (bb28 <main+0x150>)
    ba96:	4798      	blx	r3
	ssd1306_clear();
    ba98:	4b24      	ldr	r3, [pc, #144]	; (bb2c <main+0x154>)
    ba9a:	4798      	blx	r3
	
	printf("Initiating analog to digital converter... ");
    ba9c:	4824      	ldr	r0, [pc, #144]	; (bb30 <main+0x158>)
    ba9e:	4b15      	ldr	r3, [pc, #84]	; (baf4 <main+0x11c>)
    baa0:	4798      	blx	r3
	if( init_adc() == 0)
    baa2:	4b24      	ldr	r3, [pc, #144]	; (bb34 <main+0x15c>)
    baa4:	4798      	blx	r3
    baa6:	4603      	mov	r3, r0
    baa8:	2b00      	cmp	r3, #0
    baaa:	d103      	bne.n	bab4 <main+0xdc>
		printf("OK\n\r");
    baac:	4814      	ldr	r0, [pc, #80]	; (bb00 <main+0x128>)
    baae:	4b11      	ldr	r3, [pc, #68]	; (baf4 <main+0x11c>)
    bab0:	4798      	blx	r3
    bab2:	e002      	b.n	baba <main+0xe2>
	else
		printf("Error when initiating ADC\n\r");
    bab4:	4820      	ldr	r0, [pc, #128]	; (bb38 <main+0x160>)
    bab6:	4b0f      	ldr	r3, [pc, #60]	; (baf4 <main+0x11c>)
    bab8:	4798      	blx	r3
	
	printf("Initiating asynchronous timer... ");
    baba:	4820      	ldr	r0, [pc, #128]	; (bb3c <main+0x164>)
    babc:	4b0d      	ldr	r3, [pc, #52]	; (baf4 <main+0x11c>)
    babe:	4798      	blx	r3
	if( config_ast() == 0)
    bac0:	4b1f      	ldr	r3, [pc, #124]	; (bb40 <main+0x168>)
    bac2:	4798      	blx	r3
    bac4:	4603      	mov	r3, r0
    bac6:	2b00      	cmp	r3, #0
    bac8:	d13c      	bne.n	bb44 <main+0x16c>
		printf("OK\n\r");
    baca:	480d      	ldr	r0, [pc, #52]	; (bb00 <main+0x128>)
    bacc:	4b09      	ldr	r3, [pc, #36]	; (baf4 <main+0x11c>)
    bace:	4798      	blx	r3
    bad0:	e03b      	b.n	bb4a <main+0x172>
    bad2:	bf00      	nop
    bad4:	f3af 8000 	nop.w
    bad8:	00d59f7f 	.word	0x00d59f7f
    badc:	00000000 	.word	0x00000000
    bae0:	0000a16d 	.word	0x0000a16d
    bae4:	0000a535 	.word	0x0000a535
    bae8:	000067d1 	.word	0x000067d1
    baec:	0000b935 	.word	0x0000b935
    baf0:	00012cd0 	.word	0x00012cd0
    baf4:	0000d705 	.word	0x0000d705
    baf8:	00012d28 	.word	0x00012d28
    bafc:	0000b875 	.word	0x0000b875
    bb00:	00012d48 	.word	0x00012d48
    bb04:	00012d50 	.word	0x00012d50
    bb08:	00012d7c 	.word	0x00012d7c
    bb0c:	00007205 	.word	0x00007205
    bb10:	00012d9c 	.word	0x00012d9c
    bb14:	00012dc4 	.word	0x00012dc4
    bb18:	0000886d 	.word	0x0000886d
    bb1c:	0000ae3d 	.word	0x0000ae3d
    bb20:	0000d0c9 	.word	0x0000d0c9
    bb24:	00d59f80 	.word	0x00d59f80
    bb28:	20000001 	.word	0x20000001
    bb2c:	0000b451 	.word	0x0000b451
    bb30:	00012de4 	.word	0x00012de4
    bb34:	00000471 	.word	0x00000471
    bb38:	00012e10 	.word	0x00012e10
    bb3c:	00012e2c 	.word	0x00012e2c
    bb40:	000064b5 	.word	0x000064b5
	else
		printf("Error when initiating Asynchronous timer\n\r");
    bb44:	4896      	ldr	r0, [pc, #600]	; (bda0 <main+0x3c8>)
    bb46:	4b97      	ldr	r3, [pc, #604]	; (bda4 <main+0x3cc>)
    bb48:	4798      	blx	r3
		
	timer = 0; 
    bb4a:	4a97      	ldr	r2, [pc, #604]	; (bda8 <main+0x3d0>)
    bb4c:	2300      	movs	r3, #0
    bb4e:	8013      	strh	r3, [r2, #0]
	cursor = 0;
    bb50:	4a96      	ldr	r2, [pc, #600]	; (bdac <main+0x3d4>)
    bb52:	2300      	movs	r3, #0
    bb54:	8013      	strh	r3, [r2, #0]
	update_replay = false;
    bb56:	4a96      	ldr	r2, [pc, #600]	; (bdb0 <main+0x3d8>)
    bb58:	2300      	movs	r3, #0
    bb5a:	7013      	strb	r3, [r2, #0]

	static uint32_t count = 0;
	
	mode = STARTUP_MODE;
    bb5c:	4a95      	ldr	r2, [pc, #596]	; (bdb4 <main+0x3dc>)
    bb5e:	2303      	movs	r3, #3
    bb60:	7013      	strb	r3, [r2, #0]
	mode_changing = 1;
    bb62:	4a95      	ldr	r2, [pc, #596]	; (bdb8 <main+0x3e0>)
    bb64:	2301      	movs	r3, #1
    bb66:	7013      	strb	r3, [r2, #0]
	
 	irq_initialize_vectors();
 	cpu_irq_enable();
    bb68:	4a94      	ldr	r2, [pc, #592]	; (bdbc <main+0x3e4>)
    bb6a:	2301      	movs	r3, #1
    bb6c:	7013      	strb	r3, [r2, #0]
    bb6e:	f3bf 8f5f 	dmb	sy
    bb72:	b662      	cpsie	i
	
	printf("Initiating SD MMC... ");
    bb74:	4892      	ldr	r0, [pc, #584]	; (bdc0 <main+0x3e8>)
    bb76:	4b8b      	ldr	r3, [pc, #556]	; (bda4 <main+0x3cc>)
    bb78:	4798      	blx	r3
	sd_mmc_init();
    bb7a:	4b92      	ldr	r3, [pc, #584]	; (bdc4 <main+0x3ec>)
    bb7c:	4798      	blx	r3
	printf("OK\n\r");
    bb7e:	4892      	ldr	r0, [pc, #584]	; (bdc8 <main+0x3f0>)
    bb80:	4b88      	ldr	r3, [pc, #544]	; (bda4 <main+0x3cc>)
    bb82:	4798      	blx	r3
	
	ioport_set_pin_dir(PIN_PA16, IOPORT_DIR_OUTPUT);
    bb84:	2010      	movs	r0, #16
    bb86:	2101      	movs	r1, #1
    bb88:	4b90      	ldr	r3, [pc, #576]	; (bdcc <main+0x3f4>)
    bb8a:	4798      	blx	r3
	ioport_set_pin_dir(PIN_PA15, IOPORT_DIR_OUTPUT);
    bb8c:	200f      	movs	r0, #15
    bb8e:	2101      	movs	r1, #1
    bb90:	4b8e      	ldr	r3, [pc, #568]	; (bdcc <main+0x3f4>)
    bb92:	4798      	blx	r3
		
	while (1) {
		
		// Is OLEDbutton1 released?
		if (ioport_get_pin_level(OLED_BUTTON1) == 1) {
    bb94:	2006      	movs	r0, #6
    bb96:	4b8e      	ldr	r3, [pc, #568]	; (bdd0 <main+0x3f8>)
    bb98:	4798      	blx	r3
    bb9a:	4603      	mov	r3, r0
    bb9c:	2b00      	cmp	r3, #0
    bb9e:	d002      	beq.n	bba6 <main+0x1ce>
			// Yes, so turn interrupt back on.
			gpio_enable_pin_interrupt(OLED_BUTTON1);
    bba0:	2006      	movs	r0, #6
    bba2:	4b8c      	ldr	r3, [pc, #560]	; (bdd4 <main+0x3fc>)
    bba4:	4798      	blx	r3
		}
		
		// Is OLEDbutton2 released?
		if (ioport_get_pin_level(OLED_BUTTON2) == 1) {
    bba6:	2023      	movs	r0, #35	; 0x23
    bba8:	4b89      	ldr	r3, [pc, #548]	; (bdd0 <main+0x3f8>)
    bbaa:	4798      	blx	r3
    bbac:	4603      	mov	r3, r0
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d002      	beq.n	bbb8 <main+0x1e0>
			// Yes, so turn interrupt back on.
			gpio_enable_pin_interrupt(OLED_BUTTON2);
    bbb2:	2023      	movs	r0, #35	; 0x23
    bbb4:	4b87      	ldr	r3, [pc, #540]	; (bdd4 <main+0x3fc>)
    bbb6:	4798      	blx	r3
		}
		
		// Is OLEDbutton3 released?
		if (ioport_get_pin_level(OLED_BUTTON3) == 1) {
    bbb8:	2024      	movs	r0, #36	; 0x24
    bbba:	4b85      	ldr	r3, [pc, #532]	; (bdd0 <main+0x3f8>)
    bbbc:	4798      	blx	r3
    bbbe:	4603      	mov	r3, r0
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d002      	beq.n	bbca <main+0x1f2>
			// Yes, so turn interrupt back on.
			gpio_enable_pin_interrupt(OLED_BUTTON3);
    bbc4:	2024      	movs	r0, #36	; 0x24
    bbc6:	4b83      	ldr	r3, [pc, #524]	; (bdd4 <main+0x3fc>)
    bbc8:	4798      	blx	r3
		}
		
		if( mode == SAMPLING_MODE)
    bbca:	4b7a      	ldr	r3, [pc, #488]	; (bdb4 <main+0x3dc>)
    bbcc:	781b      	ldrb	r3, [r3, #0]
    bbce:	2b01      	cmp	r3, #1
    bbd0:	f040 80b1 	bne.w	bd36 <main+0x35e>
		{
			if(mode_changing == 1)
    bbd4:	4b78      	ldr	r3, [pc, #480]	; (bdb8 <main+0x3e0>)
    bbd6:	781b      	ldrb	r3, [r3, #0]
    bbd8:	2b01      	cmp	r3, #1
    bbda:	d111      	bne.n	bc00 <main+0x228>
			{			
				printf("Initiating Sampling Mode... ");
    bbdc:	487e      	ldr	r0, [pc, #504]	; (bdd8 <main+0x400>)
    bbde:	4b71      	ldr	r3, [pc, #452]	; (bda4 <main+0x3cc>)
    bbe0:	4798      	blx	r3
				
				mode_changing = 0;
    bbe2:	4a75      	ldr	r2, [pc, #468]	; (bdb8 <main+0x3e0>)
    bbe4:	2300      	movs	r3, #0
    bbe6:	7013      	strb	r3, [r2, #0]
				
				adc_enable_interrupt(&adc_instance, ADC_SEQ_SEOC);
    bbe8:	487c      	ldr	r0, [pc, #496]	; (bddc <main+0x404>)
    bbea:	2101      	movs	r1, #1
    bbec:	4b7c      	ldr	r3, [pc, #496]	; (bde0 <main+0x408>)
    bbee:	4798      	blx	r3
			
				ssd1306_clear();
    bbf0:	4b7c      	ldr	r3, [pc, #496]	; (bde4 <main+0x40c>)
    bbf2:	4798      	blx	r3
				ast_start(AST);
    bbf4:	487c      	ldr	r0, [pc, #496]	; (bde8 <main+0x410>)
    bbf6:	4b7d      	ldr	r3, [pc, #500]	; (bdec <main+0x414>)
    bbf8:	4798      	blx	r3
			
				printf("OK\n\r");
    bbfa:	4873      	ldr	r0, [pc, #460]	; (bdc8 <main+0x3f0>)
    bbfc:	4b69      	ldr	r3, [pc, #420]	; (bda4 <main+0x3cc>)
    bbfe:	4798      	blx	r3
			}		
									
			adc_disable_interrupt(&adc_instance, ADC_SEQ_SEOC);
    bc00:	4876      	ldr	r0, [pc, #472]	; (bddc <main+0x404>)
    bc02:	2101      	movs	r1, #1
    bc04:	4b7a      	ldr	r3, [pc, #488]	; (bdf0 <main+0x418>)
    bc06:	4798      	blx	r3
			ast_disable_interrupt(AST, AST_INTERRUPT_PER);
    bc08:	4877      	ldr	r0, [pc, #476]	; (bde8 <main+0x410>)
    bc0a:	2101      	movs	r1, #1
    bc0c:	4b79      	ldr	r3, [pc, #484]	; (bdf4 <main+0x41c>)
    bc0e:	4798      	blx	r3
					
			char buffer[40];
		
			ssd1306_set_column_address(0);
    bc10:	2000      	movs	r0, #0
    bc12:	4b79      	ldr	r3, [pc, #484]	; (bdf8 <main+0x420>)
    bc14:	4798      	blx	r3
			ssd1306_set_page_address(0);	// row
    bc16:	2000      	movs	r0, #0
    bc18:	4b78      	ldr	r3, [pc, #480]	; (bdfc <main+0x424>)
    bc1a:	4798      	blx	r3
	
			sprintf(buffer, "Sampling %0.2gA     %3dm%2ds   ", (mean_sample - 2048.0)/102.4, timer/60, timer%60);
    bc1c:	4b78      	ldr	r3, [pc, #480]	; (be00 <main+0x428>)
    bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc22:	4c78      	ldr	r4, [pc, #480]	; (be04 <main+0x42c>)
    bc24:	4610      	mov	r0, r2
    bc26:	4619      	mov	r1, r3
    bc28:	47a0      	blx	r4
    bc2a:	4602      	mov	r2, r0
    bc2c:	460b      	mov	r3, r1
    bc2e:	4c76      	ldr	r4, [pc, #472]	; (be08 <main+0x430>)
    bc30:	4610      	mov	r0, r2
    bc32:	4619      	mov	r1, r3
    bc34:	f04f 0200 	mov.w	r2, #0
    bc38:	4b74      	ldr	r3, [pc, #464]	; (be0c <main+0x434>)
    bc3a:	47a0      	blx	r4
    bc3c:	4602      	mov	r2, r0
    bc3e:	460b      	mov	r3, r1
    bc40:	4c73      	ldr	r4, [pc, #460]	; (be10 <main+0x438>)
    bc42:	4610      	mov	r0, r2
    bc44:	4619      	mov	r1, r3
    bc46:	a354      	add	r3, pc, #336	; (adr r3, bd98 <main+0x3c0>)
    bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc4c:	47a0      	blx	r4
    bc4e:	4602      	mov	r2, r0
    bc50:	460b      	mov	r3, r1
    bc52:	4614      	mov	r4, r2
    bc54:	461d      	mov	r5, r3
    bc56:	4b54      	ldr	r3, [pc, #336]	; (bda8 <main+0x3d0>)
    bc58:	881a      	ldrh	r2, [r3, #0]
    bc5a:	4b6e      	ldr	r3, [pc, #440]	; (be14 <main+0x43c>)
    bc5c:	fba3 0302 	umull	r0, r3, r3, r2
    bc60:	095b      	lsrs	r3, r3, #5
    bc62:	b29b      	uxth	r3, r3
    bc64:	4618      	mov	r0, r3
    bc66:	4b50      	ldr	r3, [pc, #320]	; (bda8 <main+0x3d0>)
    bc68:	8819      	ldrh	r1, [r3, #0]
    bc6a:	4b6a      	ldr	r3, [pc, #424]	; (be14 <main+0x43c>)
    bc6c:	fba3 2301 	umull	r2, r3, r3, r1
    bc70:	095a      	lsrs	r2, r3, #5
    bc72:	4613      	mov	r3, r2
    bc74:	011b      	lsls	r3, r3, #4
    bc76:	1a9b      	subs	r3, r3, r2
    bc78:	009b      	lsls	r3, r3, #2
    bc7a:	1acb      	subs	r3, r1, r3
    bc7c:	b29b      	uxth	r3, r3
    bc7e:	461a      	mov	r2, r3
    bc80:	f107 0328 	add.w	r3, r7, #40	; 0x28
    bc84:	9000      	str	r0, [sp, #0]
    bc86:	9201      	str	r2, [sp, #4]
    bc88:	4618      	mov	r0, r3
    bc8a:	4963      	ldr	r1, [pc, #396]	; (be18 <main+0x440>)
    bc8c:	4622      	mov	r2, r4
    bc8e:	462b      	mov	r3, r5
    bc90:	4c62      	ldr	r4, [pc, #392]	; (be1c <main+0x444>)
    bc92:	47a0      	blx	r4
		
			ssd1306_write_text( buffer );
    bc94:	f107 0328 	add.w	r3, r7, #40	; 0x28
    bc98:	4618      	mov	r0, r3
    bc9a:	4b61      	ldr	r3, [pc, #388]	; (be20 <main+0x448>)
    bc9c:	4798      	blx	r3
			
			adc_enable_interrupt(&adc_instance, ADC_SEQ_SEOC);
    bc9e:	484f      	ldr	r0, [pc, #316]	; (bddc <main+0x404>)
    bca0:	2101      	movs	r1, #1
    bca2:	4b4f      	ldr	r3, [pc, #316]	; (bde0 <main+0x408>)
    bca4:	4798      	blx	r3
			ast_enable_interrupt(AST, AST_INTERRUPT_PER);
    bca6:	4850      	ldr	r0, [pc, #320]	; (bde8 <main+0x410>)
    bca8:	2101      	movs	r1, #1
    bcaa:	4b5e      	ldr	r3, [pc, #376]	; (be24 <main+0x44c>)
    bcac:	4798      	blx	r3
			
			delay_ms(300);			
    bcae:	4b5e      	ldr	r3, [pc, #376]	; (be28 <main+0x450>)
    bcb0:	4798      	blx	r3
    bcb2:	4603      	mov	r3, r0
    bcb4:	461a      	mov	r2, r3
    bcb6:	f04f 0300 	mov.w	r3, #0
    bcba:	009c      	lsls	r4, r3, #2
    bcbc:	627c      	str	r4, [r7, #36]	; 0x24
    bcbe:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    bcc0:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    bcc4:	627d      	str	r5, [r7, #36]	; 0x24
    bcc6:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    bcca:	f8c7 c020 	str.w	ip, [r7, #32]
    bcce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    bcd2:	0098      	lsls	r0, r3, #2
    bcd4:	61f8      	str	r0, [r7, #28]
    bcd6:	69f9      	ldr	r1, [r7, #28]
    bcd8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    bcdc:	61f9      	str	r1, [r7, #28]
    bcde:	0094      	lsls	r4, r2, #2
    bce0:	61bc      	str	r4, [r7, #24]
    bce2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
    bce6:	1912      	adds	r2, r2, r4
    bce8:	eb43 0305 	adc.w	r3, r3, r5
    bcec:	011d      	lsls	r5, r3, #4
    bcee:	617d      	str	r5, [r7, #20]
    bcf0:	f8d7 c014 	ldr.w	ip, [r7, #20]
    bcf4:	ea4c 7c12 	orr.w	ip, ip, r2, lsr #28
    bcf8:	f8c7 c014 	str.w	ip, [r7, #20]
    bcfc:	0110      	lsls	r0, r2, #4
    bcfe:	6138      	str	r0, [r7, #16]
    bd00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    bd04:	1a80      	subs	r0, r0, r2
    bd06:	eb61 0103 	sbc.w	r1, r1, r3
    bd0a:	f243 62af 	movw	r2, #13999	; 0x36af
    bd0e:	f04f 0300 	mov.w	r3, #0
    bd12:	1812      	adds	r2, r2, r0
    bd14:	eb43 0301 	adc.w	r3, r3, r1
    bd18:	4c44      	ldr	r4, [pc, #272]	; (be2c <main+0x454>)
    bd1a:	4610      	mov	r0, r2
    bd1c:	4619      	mov	r1, r3
    bd1e:	f243 62b0 	movw	r2, #14000	; 0x36b0
    bd22:	f04f 0300 	mov.w	r3, #0
    bd26:	47a0      	blx	r4
    bd28:	4602      	mov	r2, r0
    bd2a:	460b      	mov	r3, r1
    bd2c:	4613      	mov	r3, r2
    bd2e:	4618      	mov	r0, r3
    bd30:	4b3f      	ldr	r3, [pc, #252]	; (be30 <main+0x458>)
    bd32:	4798      	blx	r3
    bd34:	e2a2      	b.n	c27c <main+0x8a4>
		}
		
		// in replay mode, the current sampled can be viewed by moving the cursor with button 2 and 3	
		else if( mode == REPLAY_MODE)
    bd36:	4b1f      	ldr	r3, [pc, #124]	; (bdb4 <main+0x3dc>)
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	2b02      	cmp	r3, #2
    bd3c:	f040 825e 	bne.w	c1fc <main+0x824>
		{
			// Only when changing from sampling to replay mode
			if(mode_changing == 1)
    bd40:	4b1d      	ldr	r3, [pc, #116]	; (bdb8 <main+0x3e0>)
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	2b01      	cmp	r3, #1
    bd46:	f040 80ce 	bne.w	bee6 <main+0x50e>
			{			
				printf("Initiating Replay Mode... ");
    bd4a:	483a      	ldr	r0, [pc, #232]	; (be34 <main+0x45c>)
    bd4c:	4b15      	ldr	r3, [pc, #84]	; (bda4 <main+0x3cc>)
    bd4e:	4798      	blx	r3
					
				// stop timer	
				ast_stop(AST);
    bd50:	4825      	ldr	r0, [pc, #148]	; (bde8 <main+0x410>)
    bd52:	4b39      	ldr	r3, [pc, #228]	; (be38 <main+0x460>)
    bd54:	4798      	blx	r3
				
				// disable adc interrupt (TODO disable ADC?)
				adc_disable_interrupt(&adc_instance, ADC_SEQ_SEOC);
    bd56:	4821      	ldr	r0, [pc, #132]	; (bddc <main+0x404>)
    bd58:	2101      	movs	r1, #1
    bd5a:	4b25      	ldr	r3, [pc, #148]	; (bdf0 <main+0x418>)
    bd5c:	4798      	blx	r3
				
				// clear oled display
				ssd1306_clear();	
    bd5e:	4b21      	ldr	r3, [pc, #132]	; (bde4 <main+0x40c>)
    bd60:	4798      	blx	r3
				
				// set first column, first row
				ssd1306_set_column_address(0);
    bd62:	2000      	movs	r0, #0
    bd64:	4b24      	ldr	r3, [pc, #144]	; (bdf8 <main+0x420>)
    bd66:	4798      	blx	r3
				ssd1306_set_page_address(0);	// row
    bd68:	2000      	movs	r0, #0
    bd6a:	4b24      	ldr	r3, [pc, #144]	; (bdfc <main+0x424>)
    bd6c:	4798      	blx	r3
								
				// try to write data to SD card
				ssd1306_write_text("Writing data to SD card...");
    bd6e:	4833      	ldr	r0, [pc, #204]	; (be3c <main+0x464>)
    bd70:	4b2b      	ldr	r3, [pc, #172]	; (be20 <main+0x448>)
    bd72:	4798      	blx	r3
				
				if( write_log( data_to_csv( &current, timer), "current_data") == 0 )
    bd74:	4b0c      	ldr	r3, [pc, #48]	; (bda8 <main+0x3d0>)
    bd76:	881b      	ldrh	r3, [r3, #0]
    bd78:	4831      	ldr	r0, [pc, #196]	; (be40 <main+0x468>)
    bd7a:	4619      	mov	r1, r3
    bd7c:	4b31      	ldr	r3, [pc, #196]	; (be44 <main+0x46c>)
    bd7e:	4798      	blx	r3
    bd80:	4603      	mov	r3, r0
    bd82:	4618      	mov	r0, r3
    bd84:	4930      	ldr	r1, [pc, #192]	; (be48 <main+0x470>)
    bd86:	4b31      	ldr	r3, [pc, #196]	; (be4c <main+0x474>)
    bd88:	4798      	blx	r3
    bd8a:	4603      	mov	r3, r0
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d161      	bne.n	be54 <main+0x47c>
					ssd1306_write_text("OK");
    bd90:	482f      	ldr	r0, [pc, #188]	; (be50 <main+0x478>)
    bd92:	4b23      	ldr	r3, [pc, #140]	; (be20 <main+0x448>)
    bd94:	4798      	blx	r3
    bd96:	e060      	b.n	be5a <main+0x482>
    bd98:	9999999a 	.word	0x9999999a
    bd9c:	40599999 	.word	0x40599999
    bda0:	00012e50 	.word	0x00012e50
    bda4:	0000d705 	.word	0x0000d705
    bda8:	20001074 	.word	0x20001074
    bdac:	2000109e 	.word	0x2000109e
    bdb0:	20001494 	.word	0x20001494
    bdb4:	2000109d 	.word	0x2000109d
    bdb8:	2000109c 	.word	0x2000109c
    bdbc:	200004b0 	.word	0x200004b0
    bdc0:	00012e7c 	.word	0x00012e7c
    bdc4:	0000157d 	.word	0x0000157d
    bdc8:	00012d48 	.word	0x00012d48
    bdcc:	0000af11 	.word	0x0000af11
    bdd0:	0000aff9 	.word	0x0000aff9
    bdd4:	0000b089 	.word	0x0000b089
    bdd8:	00012e94 	.word	0x00012e94
    bddc:	2000148c 	.word	0x2000148c
    bde0:	0000ae51 	.word	0x0000ae51
    bde4:	0000b451 	.word	0x0000b451
    bde8:	400f0800 	.word	0x400f0800
    bdec:	0000aeb9 	.word	0x0000aeb9
    bdf0:	0000ae71 	.word	0x0000ae71
    bdf4:	00005019 	.word	0x00005019
    bdf8:	0000b415 	.word	0x0000b415
    bdfc:	0000b3e1 	.word	0x0000b3e1
    be00:	20000e30 	.word	0x20000e30
    be04:	0000cae9 	.word	0x0000cae9
    be08:	0000c7ed 	.word	0x0000c7ed
    be0c:	40a00000 	.word	0x40a00000
    be10:	0000cda9 	.word	0x0000cda9
    be14:	88888889 	.word	0x88888889
    be18:	00012eb4 	.word	0x00012eb4
    be1c:	0000dce5 	.word	0x0000dce5
    be20:	0000890d 	.word	0x0000890d
    be24:	00004f91 	.word	0x00004f91
    be28:	0000ae3d 	.word	0x0000ae3d
    be2c:	0000d0c9 	.word	0x0000d0c9
    be30:	20000001 	.word	0x20000001
    be34:	00012ed4 	.word	0x00012ed4
    be38:	0000aee5 	.word	0x0000aee5
    be3c:	00012ef0 	.word	0x00012ef0
    be40:	200010a0 	.word	0x200010a0
    be44:	0000b961 	.word	0x0000b961
    be48:	00012f0c 	.word	0x00012f0c
    be4c:	000068f9 	.word	0x000068f9
    be50:	00012f1c 	.word	0x00012f1c
				else
					ssd1306_write_text("FAIL");
    be54:	489a      	ldr	r0, [pc, #616]	; (c0c0 <main+0x6e8>)
    be56:	4b9b      	ldr	r3, [pc, #620]	; (c0c4 <main+0x6ec>)
    be58:	4798      	blx	r3
					
				// show if success or not 1 second so the user have time to see if it worked.	
				delay_ms(1000);
    be5a:	4b9b      	ldr	r3, [pc, #620]	; (c0c8 <main+0x6f0>)
    be5c:	4798      	blx	r3
    be5e:	4603      	mov	r3, r0
    be60:	4618      	mov	r0, r3
    be62:	f04f 0100 	mov.w	r1, #0
    be66:	4602      	mov	r2, r0
    be68:	460b      	mov	r3, r1
    be6a:	009c      	lsls	r4, r3, #2
    be6c:	60fc      	str	r4, [r7, #12]
    be6e:	68fd      	ldr	r5, [r7, #12]
    be70:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    be74:	60fd      	str	r5, [r7, #12]
    be76:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    be7a:	f8c7 c008 	str.w	ip, [r7, #8]
    be7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    be82:	ea4f 1943 	mov.w	r9, r3, lsl #5
    be86:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
    be8a:	ea4f 1842 	mov.w	r8, r2, lsl #5
    be8e:	ebb8 0802 	subs.w	r8, r8, r2
    be92:	eb69 0903 	sbc.w	r9, r9, r3
    be96:	eb18 0800 	adds.w	r8, r8, r0
    be9a:	eb49 0901 	adc.w	r9, r9, r1
    be9e:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    bea2:	ea4b 7b58 	orr.w	fp, fp, r8, lsr #29
    bea6:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
    beaa:	46d0      	mov	r8, sl
    beac:	46d9      	mov	r9, fp
    beae:	4640      	mov	r0, r8
    beb0:	4649      	mov	r1, r9
    beb2:	f243 62af 	movw	r2, #13999	; 0x36af
    beb6:	f04f 0300 	mov.w	r3, #0
    beba:	1812      	adds	r2, r2, r0
    bebc:	eb43 0301 	adc.w	r3, r3, r1
    bec0:	4c82      	ldr	r4, [pc, #520]	; (c0cc <main+0x6f4>)
    bec2:	4610      	mov	r0, r2
    bec4:	4619      	mov	r1, r3
    bec6:	f243 62b0 	movw	r2, #14000	; 0x36b0
    beca:	f04f 0300 	mov.w	r3, #0
    bece:	47a0      	blx	r4
    bed0:	4602      	mov	r2, r0
    bed2:	460b      	mov	r3, r1
    bed4:	4613      	mov	r3, r2
    bed6:	4618      	mov	r0, r3
    bed8:	4b7d      	ldr	r3, [pc, #500]	; (c0d0 <main+0x6f8>)
    beda:	4798      	blx	r3
				
				// clear oled display
				ssd1306_clear();	
    bedc:	4b7d      	ldr	r3, [pc, #500]	; (c0d4 <main+0x6fc>)
    bede:	4798      	blx	r3
				
				printf("OK\n\r");
    bee0:	487d      	ldr	r0, [pc, #500]	; (c0d8 <main+0x700>)
    bee2:	4b7e      	ldr	r3, [pc, #504]	; (c0dc <main+0x704>)
    bee4:	4798      	blx	r3
			}
			
			// following runs when changing from sampling to replay mode AND also when pressing a cursor button
			if( (mode_changing == 1) || update_replay )
    bee6:	4b7e      	ldr	r3, [pc, #504]	; (c0e0 <main+0x708>)
    bee8:	781b      	ldrb	r3, [r3, #0]
    beea:	2b01      	cmp	r3, #1
    beec:	d003      	beq.n	bef6 <main+0x51e>
    beee:	4b7d      	ldr	r3, [pc, #500]	; (c0e4 <main+0x70c>)
    bef0:	781b      	ldrb	r3, [r3, #0]
    bef2:	2b00      	cmp	r3, #0
    bef4:	d07b      	beq.n	bfee <main+0x616>
			{
				mode_changing = 0;
    bef6:	4a7a      	ldr	r2, [pc, #488]	; (c0e0 <main+0x708>)
    bef8:	2300      	movs	r3, #0
    befa:	7013      	strb	r3, [r2, #0]
							
				update_replay = false;
    befc:	4a79      	ldr	r2, [pc, #484]	; (c0e4 <main+0x70c>)
    befe:	2300      	movs	r3, #0
    bf00:	7013      	strb	r3, [r2, #0]
			
				char buffer[80];
		
				ssd1306_set_column_address(0);
    bf02:	2000      	movs	r0, #0
    bf04:	4b78      	ldr	r3, [pc, #480]	; (c0e8 <main+0x710>)
    bf06:	4798      	blx	r3
				ssd1306_set_page_address(0);	// row
    bf08:	2000      	movs	r0, #0
    bf0a:	4b78      	ldr	r3, [pc, #480]	; (c0ec <main+0x714>)
    bf0c:	4798      	blx	r3
	
				// display current value
				sprintf(buffer, "Replaying %0.2fA   ", current[CURRENT_BUFFER_SIZE - 1 - cursor] / 127.0 * 20.0);
    bf0e:	4b78      	ldr	r3, [pc, #480]	; (c0f0 <main+0x718>)
    bf10:	881b      	ldrh	r3, [r3, #0]
    bf12:	b21b      	sxth	r3, r3
    bf14:	f5c3 7279 	rsb	r2, r3, #996	; 0x3e4
    bf18:	3203      	adds	r2, #3
    bf1a:	4b76      	ldr	r3, [pc, #472]	; (c0f4 <main+0x71c>)
    bf1c:	5c9b      	ldrb	r3, [r3, r2]
    bf1e:	b25a      	sxtb	r2, r3
    bf20:	4b75      	ldr	r3, [pc, #468]	; (c0f8 <main+0x720>)
    bf22:	4610      	mov	r0, r2
    bf24:	4798      	blx	r3
    bf26:	4602      	mov	r2, r0
    bf28:	460b      	mov	r3, r1
    bf2a:	4c74      	ldr	r4, [pc, #464]	; (c0fc <main+0x724>)
    bf2c:	4610      	mov	r0, r2
    bf2e:	4619      	mov	r1, r3
    bf30:	a361      	add	r3, pc, #388	; (adr r3, c0b8 <main+0x6e0>)
    bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
    bf36:	47a0      	blx	r4
    bf38:	4602      	mov	r2, r0
    bf3a:	460b      	mov	r3, r1
    bf3c:	4c70      	ldr	r4, [pc, #448]	; (c100 <main+0x728>)
    bf3e:	4610      	mov	r0, r2
    bf40:	4619      	mov	r1, r3
    bf42:	f04f 0200 	mov.w	r2, #0
    bf46:	4b6f      	ldr	r3, [pc, #444]	; (c104 <main+0x72c>)
    bf48:	47a0      	blx	r4
    bf4a:	4602      	mov	r2, r0
    bf4c:	460b      	mov	r3, r1
    bf4e:	4614      	mov	r4, r2
    bf50:	461d      	mov	r5, r3
    bf52:	f107 0328 	add.w	r3, r7, #40	; 0x28
    bf56:	4618      	mov	r0, r3
    bf58:	496b      	ldr	r1, [pc, #428]	; (c108 <main+0x730>)
    bf5a:	4622      	mov	r2, r4
    bf5c:	462b      	mov	r3, r5
    bf5e:	4c6b      	ldr	r4, [pc, #428]	; (c10c <main+0x734>)
    bf60:	47a0      	blx	r4
				ssd1306_write_text( buffer );
    bf62:	f107 0328 	add.w	r3, r7, #40	; 0x28
    bf66:	4618      	mov	r0, r3
    bf68:	4b56      	ldr	r3, [pc, #344]	; (c0c4 <main+0x6ec>)
    bf6a:	4798      	blx	r3
			
				// display time
				ssd1306_set_column_address(85);
    bf6c:	2055      	movs	r0, #85	; 0x55
    bf6e:	4b5e      	ldr	r3, [pc, #376]	; (c0e8 <main+0x710>)
    bf70:	4798      	blx	r3
				sprintf(buffer, " %3dm%2ds", (timer - cursor)/60, (timer - cursor)%60);
    bf72:	4b67      	ldr	r3, [pc, #412]	; (c110 <main+0x738>)
    bf74:	881b      	ldrh	r3, [r3, #0]
    bf76:	461a      	mov	r2, r3
    bf78:	4b5d      	ldr	r3, [pc, #372]	; (c0f0 <main+0x718>)
    bf7a:	881b      	ldrh	r3, [r3, #0]
    bf7c:	b21b      	sxth	r3, r3
    bf7e:	1ad2      	subs	r2, r2, r3
    bf80:	4b64      	ldr	r3, [pc, #400]	; (c114 <main+0x73c>)
    bf82:	fb83 0302 	smull	r0, r3, r3, r2
    bf86:	4413      	add	r3, r2
    bf88:	1159      	asrs	r1, r3, #5
    bf8a:	17d3      	asrs	r3, r2, #31
    bf8c:	1acd      	subs	r5, r1, r3
    bf8e:	4b60      	ldr	r3, [pc, #384]	; (c110 <main+0x738>)
    bf90:	881b      	ldrh	r3, [r3, #0]
    bf92:	461a      	mov	r2, r3
    bf94:	4b56      	ldr	r3, [pc, #344]	; (c0f0 <main+0x718>)
    bf96:	881b      	ldrh	r3, [r3, #0]
    bf98:	b21b      	sxth	r3, r3
    bf9a:	1ad1      	subs	r1, r2, r3
    bf9c:	4b5d      	ldr	r3, [pc, #372]	; (c114 <main+0x73c>)
    bf9e:	fb83 2301 	smull	r2, r3, r3, r1
    bfa2:	440b      	add	r3, r1
    bfa4:	115a      	asrs	r2, r3, #5
    bfa6:	17cb      	asrs	r3, r1, #31
    bfa8:	1ad4      	subs	r4, r2, r3
    bfaa:	4623      	mov	r3, r4
    bfac:	011b      	lsls	r3, r3, #4
    bfae:	1b1b      	subs	r3, r3, r4
    bfb0:	009b      	lsls	r3, r3, #2
    bfb2:	1acc      	subs	r4, r1, r3
    bfb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
    bfb8:	4618      	mov	r0, r3
    bfba:	4957      	ldr	r1, [pc, #348]	; (c118 <main+0x740>)
    bfbc:	462a      	mov	r2, r5
    bfbe:	4623      	mov	r3, r4
    bfc0:	4c52      	ldr	r4, [pc, #328]	; (c10c <main+0x734>)
    bfc2:	47a0      	blx	r4
			
				ssd1306_write_text( buffer );
    bfc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
    bfc8:	4618      	mov	r0, r3
    bfca:	4b3e      	ldr	r3, [pc, #248]	; (c0c4 <main+0x6ec>)
    bfcc:	4798      	blx	r3
			
				// Draw rolling graph
				ssd1306_draw_graph(1, 1, DISPLAY_BUFFER_SIZE, 3, &current, CURRENT_BUFFER_SIZE - DISPLAY_BUFFER_SIZE - cursor);	
    bfce:	4b48      	ldr	r3, [pc, #288]	; (c0f0 <main+0x718>)
    bfd0:	881b      	ldrh	r3, [r3, #0]
    bfd2:	b21b      	sxth	r3, r3
    bfd4:	f5c3 735a 	rsb	r3, r3, #872	; 0x368
    bfd8:	3301      	adds	r3, #1
    bfda:	461a      	mov	r2, r3
    bfdc:	4b45      	ldr	r3, [pc, #276]	; (c0f4 <main+0x71c>)
    bfde:	9300      	str	r3, [sp, #0]
    bfe0:	9201      	str	r2, [sp, #4]
    bfe2:	2001      	movs	r0, #1
    bfe4:	2101      	movs	r1, #1
    bfe6:	227f      	movs	r2, #127	; 0x7f
    bfe8:	2303      	movs	r3, #3
    bfea:	4c4c      	ldr	r4, [pc, #304]	; (c11c <main+0x744>)
    bfec:	47a0      	blx	r4
				
			}	
			
			delay_ms(100);
    bfee:	4b36      	ldr	r3, [pc, #216]	; (c0c8 <main+0x6f0>)
    bff0:	4798      	blx	r3
    bff2:	4603      	mov	r3, r0
    bff4:	4618      	mov	r0, r3
    bff6:	f04f 0100 	mov.w	r1, #0
    bffa:	4602      	mov	r2, r0
    bffc:	460b      	mov	r3, r1
    bffe:	1892      	adds	r2, r2, r2
    c000:	eb43 0303 	adc.w	r3, r3, r3
    c004:	1812      	adds	r2, r2, r0
    c006:	eb43 0301 	adc.w	r3, r3, r1
    c00a:	015c      	lsls	r4, r3, #5
    c00c:	607c      	str	r4, [r7, #4]
    c00e:	687d      	ldr	r5, [r7, #4]
    c010:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    c014:	607d      	str	r5, [r7, #4]
    c016:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    c01a:	f8c7 c000 	str.w	ip, [r7]
    c01e:	e9d7 4500 	ldrd	r4, r5, [r7]
    c022:	1912      	adds	r2, r2, r4
    c024:	eb43 0305 	adc.w	r3, r3, r5
    c028:	1880      	adds	r0, r0, r2
    c02a:	eb41 0103 	adc.w	r1, r1, r3
    c02e:	f243 62af 	movw	r2, #13999	; 0x36af
    c032:	f04f 0300 	mov.w	r3, #0
    c036:	1812      	adds	r2, r2, r0
    c038:	eb43 0301 	adc.w	r3, r3, r1
    c03c:	4c23      	ldr	r4, [pc, #140]	; (c0cc <main+0x6f4>)
    c03e:	4610      	mov	r0, r2
    c040:	4619      	mov	r1, r3
    c042:	f243 62b0 	movw	r2, #14000	; 0x36b0
    c046:	f04f 0300 	mov.w	r3, #0
    c04a:	47a0      	blx	r4
    c04c:	4602      	mov	r2, r0
    c04e:	460b      	mov	r3, r1
    c050:	4613      	mov	r3, r2
    c052:	4618      	mov	r0, r3
    c054:	4b1e      	ldr	r3, [pc, #120]	; (c0d0 <main+0x6f8>)
    c056:	4798      	blx	r3
			
			if( ioport_get_pin_level(OLED_BUTTON2) == 0)
    c058:	2023      	movs	r0, #35	; 0x23
    c05a:	4b31      	ldr	r3, [pc, #196]	; (c120 <main+0x748>)
    c05c:	4798      	blx	r3
    c05e:	4603      	mov	r3, r0
    c060:	f083 0301 	eor.w	r3, r3, #1
    c064:	b2db      	uxtb	r3, r3
    c066:	2b00      	cmp	r3, #0
    c068:	d07f      	beq.n	c16a <main+0x792>
			{
				// move cursor left
				if( cursor <= timer)
    c06a:	4b21      	ldr	r3, [pc, #132]	; (c0f0 <main+0x718>)
    c06c:	881b      	ldrh	r3, [r3, #0]
    c06e:	b21a      	sxth	r2, r3
    c070:	4b27      	ldr	r3, [pc, #156]	; (c110 <main+0x738>)
    c072:	881b      	ldrh	r3, [r3, #0]
    c074:	429a      	cmp	r2, r3
    c076:	dc78      	bgt.n	c16a <main+0x792>
				{
					if(cursor_speed_up < 10)
    c078:	4b2a      	ldr	r3, [pc, #168]	; (c124 <main+0x74c>)
    c07a:	881b      	ldrh	r3, [r3, #0]
    c07c:	2b09      	cmp	r3, #9
    c07e:	d807      	bhi.n	c090 <main+0x6b8>
						cursor++;
    c080:	4b1b      	ldr	r3, [pc, #108]	; (c0f0 <main+0x718>)
    c082:	881b      	ldrh	r3, [r3, #0]
    c084:	b29b      	uxth	r3, r3
    c086:	3301      	adds	r3, #1
    c088:	b29b      	uxth	r3, r3
    c08a:	4a19      	ldr	r2, [pc, #100]	; (c0f0 <main+0x718>)
    c08c:	8013      	strh	r3, [r2, #0]
    c08e:	e057      	b.n	c140 <main+0x768>
					else if( (cursor_speed_up >= 10) && (cursor_speed_up < 20) )
    c090:	4b24      	ldr	r3, [pc, #144]	; (c124 <main+0x74c>)
    c092:	881b      	ldrh	r3, [r3, #0]
    c094:	2b09      	cmp	r3, #9
    c096:	d947      	bls.n	c128 <main+0x750>
    c098:	4b22      	ldr	r3, [pc, #136]	; (c124 <main+0x74c>)
    c09a:	881b      	ldrh	r3, [r3, #0]
    c09c:	2b13      	cmp	r3, #19
    c09e:	d843      	bhi.n	c128 <main+0x750>
						cursor += 5;
    c0a0:	4b13      	ldr	r3, [pc, #76]	; (c0f0 <main+0x718>)
    c0a2:	881b      	ldrh	r3, [r3, #0]
    c0a4:	b29b      	uxth	r3, r3
    c0a6:	3305      	adds	r3, #5
    c0a8:	b29b      	uxth	r3, r3
    c0aa:	b29b      	uxth	r3, r3
    c0ac:	4a10      	ldr	r2, [pc, #64]	; (c0f0 <main+0x718>)
    c0ae:	8013      	strh	r3, [r2, #0]
    c0b0:	e046      	b.n	c140 <main+0x768>
    c0b2:	bf00      	nop
    c0b4:	f3af 8000 	nop.w
    c0b8:	00000000 	.word	0x00000000
    c0bc:	405fc000 	.word	0x405fc000
    c0c0:	00012f20 	.word	0x00012f20
    c0c4:	0000890d 	.word	0x0000890d
    c0c8:	0000ae3d 	.word	0x0000ae3d
    c0cc:	0000d0c9 	.word	0x0000d0c9
    c0d0:	20000001 	.word	0x20000001
    c0d4:	0000b451 	.word	0x0000b451
    c0d8:	00012d48 	.word	0x00012d48
    c0dc:	0000d705 	.word	0x0000d705
    c0e0:	2000109c 	.word	0x2000109c
    c0e4:	20001494 	.word	0x20001494
    c0e8:	0000b415 	.word	0x0000b415
    c0ec:	0000b3e1 	.word	0x0000b3e1
    c0f0:	2000109e 	.word	0x2000109e
    c0f4:	200010a0 	.word	0x200010a0
    c0f8:	0000ca89 	.word	0x0000ca89
    c0fc:	0000cda9 	.word	0x0000cda9
    c100:	0000cb55 	.word	0x0000cb55
    c104:	40340000 	.word	0x40340000
    c108:	00012f28 	.word	0x00012f28
    c10c:	0000dce5 	.word	0x0000dce5
    c110:	20001074 	.word	0x20001074
    c114:	88888889 	.word	0x88888889
    c118:	00012f3c 	.word	0x00012f3c
    c11c:	00007219 	.word	0x00007219
    c120:	0000aff9 	.word	0x0000aff9
    c124:	20001488 	.word	0x20001488
					else if(cursor_speed_up > 20)
    c128:	4b55      	ldr	r3, [pc, #340]	; (c280 <main+0x8a8>)
    c12a:	881b      	ldrh	r3, [r3, #0]
    c12c:	2b14      	cmp	r3, #20
    c12e:	d907      	bls.n	c140 <main+0x768>
						cursor += 10;
    c130:	4b54      	ldr	r3, [pc, #336]	; (c284 <main+0x8ac>)
    c132:	881b      	ldrh	r3, [r3, #0]
    c134:	b29b      	uxth	r3, r3
    c136:	330a      	adds	r3, #10
    c138:	b29b      	uxth	r3, r3
    c13a:	b29b      	uxth	r3, r3
    c13c:	4a51      	ldr	r2, [pc, #324]	; (c284 <main+0x8ac>)
    c13e:	8013      	strh	r3, [r2, #0]
						
					cursor = min(cursor, timer);
    c140:	4b51      	ldr	r3, [pc, #324]	; (c288 <main+0x8b0>)
    c142:	881b      	ldrh	r3, [r3, #0]
    c144:	461a      	mov	r2, r3
    c146:	4b4f      	ldr	r3, [pc, #316]	; (c284 <main+0x8ac>)
    c148:	881b      	ldrh	r3, [r3, #0]
    c14a:	b21b      	sxth	r3, r3
    c14c:	429a      	cmp	r2, r3
    c14e:	bfb8      	it	lt
    c150:	4613      	movlt	r3, r2
    c152:	b29b      	uxth	r3, r3
    c154:	4a4b      	ldr	r2, [pc, #300]	; (c284 <main+0x8ac>)
    c156:	8013      	strh	r3, [r2, #0]
						
					cursor_speed_up++;
    c158:	4b49      	ldr	r3, [pc, #292]	; (c280 <main+0x8a8>)
    c15a:	881b      	ldrh	r3, [r3, #0]
    c15c:	3301      	adds	r3, #1
    c15e:	b29b      	uxth	r3, r3
    c160:	4a47      	ldr	r2, [pc, #284]	; (c280 <main+0x8a8>)
    c162:	8013      	strh	r3, [r2, #0]
					
					update_replay = true;
    c164:	4a49      	ldr	r2, [pc, #292]	; (c28c <main+0x8b4>)
    c166:	2301      	movs	r3, #1
    c168:	7013      	strb	r3, [r2, #0]
				}
			}
			
			if( ioport_get_pin_level(OLED_BUTTON3) == 0)
    c16a:	2024      	movs	r0, #36	; 0x24
    c16c:	4b48      	ldr	r3, [pc, #288]	; (c290 <main+0x8b8>)
    c16e:	4798      	blx	r3
    c170:	4603      	mov	r3, r0
    c172:	f083 0301 	eor.w	r3, r3, #1
    c176:	b2db      	uxtb	r3, r3
    c178:	2b00      	cmp	r3, #0
    c17a:	d07f      	beq.n	c27c <main+0x8a4>
			{
				// move cursor right
				if(cursor > 0)
    c17c:	4b41      	ldr	r3, [pc, #260]	; (c284 <main+0x8ac>)
    c17e:	881b      	ldrh	r3, [r3, #0]
    c180:	b21b      	sxth	r3, r3
    c182:	2b00      	cmp	r3, #0
    c184:	dd7a      	ble.n	c27c <main+0x8a4>
				{
					if(cursor_speed_up < 10)
    c186:	4b3e      	ldr	r3, [pc, #248]	; (c280 <main+0x8a8>)
    c188:	881b      	ldrh	r3, [r3, #0]
    c18a:	2b09      	cmp	r3, #9
    c18c:	d807      	bhi.n	c19e <main+0x7c6>
						cursor--;
    c18e:	4b3d      	ldr	r3, [pc, #244]	; (c284 <main+0x8ac>)
    c190:	881b      	ldrh	r3, [r3, #0]
    c192:	b29b      	uxth	r3, r3
    c194:	3b01      	subs	r3, #1
    c196:	b29b      	uxth	r3, r3
    c198:	4a3a      	ldr	r2, [pc, #232]	; (c284 <main+0x8ac>)
    c19a:	8013      	strh	r3, [r2, #0]
    c19c:	e01c      	b.n	c1d8 <main+0x800>
					else if( (cursor_speed_up >= 10) && (cursor_speed_up < 20) )
    c19e:	4b38      	ldr	r3, [pc, #224]	; (c280 <main+0x8a8>)
    c1a0:	881b      	ldrh	r3, [r3, #0]
    c1a2:	2b09      	cmp	r3, #9
    c1a4:	d90c      	bls.n	c1c0 <main+0x7e8>
    c1a6:	4b36      	ldr	r3, [pc, #216]	; (c280 <main+0x8a8>)
    c1a8:	881b      	ldrh	r3, [r3, #0]
    c1aa:	2b13      	cmp	r3, #19
    c1ac:	d808      	bhi.n	c1c0 <main+0x7e8>
						cursor -= 5;
    c1ae:	4b35      	ldr	r3, [pc, #212]	; (c284 <main+0x8ac>)
    c1b0:	881b      	ldrh	r3, [r3, #0]
    c1b2:	b29b      	uxth	r3, r3
    c1b4:	3b05      	subs	r3, #5
    c1b6:	b29b      	uxth	r3, r3
    c1b8:	b29b      	uxth	r3, r3
    c1ba:	4a32      	ldr	r2, [pc, #200]	; (c284 <main+0x8ac>)
    c1bc:	8013      	strh	r3, [r2, #0]
    c1be:	e00b      	b.n	c1d8 <main+0x800>
					else if(cursor_speed_up > 20)
    c1c0:	4b2f      	ldr	r3, [pc, #188]	; (c280 <main+0x8a8>)
    c1c2:	881b      	ldrh	r3, [r3, #0]
    c1c4:	2b14      	cmp	r3, #20
    c1c6:	d907      	bls.n	c1d8 <main+0x800>
						cursor -= 10;
    c1c8:	4b2e      	ldr	r3, [pc, #184]	; (c284 <main+0x8ac>)
    c1ca:	881b      	ldrh	r3, [r3, #0]
    c1cc:	b29b      	uxth	r3, r3
    c1ce:	3b0a      	subs	r3, #10
    c1d0:	b29b      	uxth	r3, r3
    c1d2:	b29b      	uxth	r3, r3
    c1d4:	4a2b      	ldr	r2, [pc, #172]	; (c284 <main+0x8ac>)
    c1d6:	8013      	strh	r3, [r2, #0]
						
					cursor = max(cursor, 0);
    c1d8:	4b2a      	ldr	r3, [pc, #168]	; (c284 <main+0x8ac>)
    c1da:	881b      	ldrh	r3, [r3, #0]
    c1dc:	b21b      	sxth	r3, r3
    c1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c1e2:	b29b      	uxth	r3, r3
    c1e4:	4a27      	ldr	r2, [pc, #156]	; (c284 <main+0x8ac>)
    c1e6:	8013      	strh	r3, [r2, #0]
						
					cursor_speed_up++;						
    c1e8:	4b25      	ldr	r3, [pc, #148]	; (c280 <main+0x8a8>)
    c1ea:	881b      	ldrh	r3, [r3, #0]
    c1ec:	3301      	adds	r3, #1
    c1ee:	b29b      	uxth	r3, r3
    c1f0:	4a23      	ldr	r2, [pc, #140]	; (c280 <main+0x8a8>)
    c1f2:	8013      	strh	r3, [r2, #0]
					
					update_replay = true;
    c1f4:	4a25      	ldr	r2, [pc, #148]	; (c28c <main+0x8b4>)
    c1f6:	2301      	movs	r3, #1
    c1f8:	7013      	strb	r3, [r2, #0]
			}	
			
			
		}
	
	}
    c1fa:	e4cb      	b.n	bb94 <main+0x1bc>
			}
			
		}
		
		// Startup mode is only used when starting up
		else if( mode == STARTUP_MODE)
    c1fc:	4b25      	ldr	r3, [pc, #148]	; (c294 <main+0x8bc>)
    c1fe:	781b      	ldrb	r3, [r3, #0]
    c200:	2b03      	cmp	r3, #3
    c202:	d13b      	bne.n	c27c <main+0x8a4>
		{
			if(mode_changing == 1)
    c204:	4b24      	ldr	r3, [pc, #144]	; (c298 <main+0x8c0>)
    c206:	781b      	ldrb	r3, [r3, #0]
    c208:	2b01      	cmp	r3, #1
    c20a:	d137      	bne.n	c27c <main+0x8a4>
			{
				mode_changing = 0;
    c20c:	4a22      	ldr	r2, [pc, #136]	; (c298 <main+0x8c0>)
    c20e:	2300      	movs	r3, #0
    c210:	7013      	strb	r3, [r2, #0]
				
				adc_disable_interrupt(&adc_instance, ADC_SEQ_SEOC);
    c212:	4822      	ldr	r0, [pc, #136]	; (c29c <main+0x8c4>)
    c214:	2101      	movs	r1, #1
    c216:	4b22      	ldr	r3, [pc, #136]	; (c2a0 <main+0x8c8>)
    c218:	4798      	blx	r3
				ssd1306_clear();
    c21a:	4b22      	ldr	r3, [pc, #136]	; (c2a4 <main+0x8cc>)
    c21c:	4798      	blx	r3
				
				ssd1306_set_column_address(0);
    c21e:	2000      	movs	r0, #0
    c220:	4b21      	ldr	r3, [pc, #132]	; (c2a8 <main+0x8d0>)
    c222:	4798      	blx	r3
				ssd1306_set_page_address(0);	// row
    c224:	2000      	movs	r0, #0
    c226:	4b21      	ldr	r3, [pc, #132]	; (c2ac <main+0x8d4>)
    c228:	4798      	blx	r3
				ssd1306_write_text("Current logger");
    c22a:	4821      	ldr	r0, [pc, #132]	; (c2b0 <main+0x8d8>)
    c22c:	4b21      	ldr	r3, [pc, #132]	; (c2b4 <main+0x8dc>)
    c22e:	4798      	blx	r3
			
				ssd1306_set_column_address(0);
    c230:	2000      	movs	r0, #0
    c232:	4b1d      	ldr	r3, [pc, #116]	; (c2a8 <main+0x8d0>)
    c234:	4798      	blx	r3
				ssd1306_set_page_address(1);	// row
    c236:	2001      	movs	r0, #1
    c238:	4b1c      	ldr	r3, [pc, #112]	; (c2ac <main+0x8d4>)
    c23a:	4798      	blx	r3
				ssd1306_write_text("Press Button 1 to start");
    c23c:	481e      	ldr	r0, [pc, #120]	; (c2b8 <main+0x8e0>)
    c23e:	4b1d      	ldr	r3, [pc, #116]	; (c2b4 <main+0x8dc>)
    c240:	4798      	blx	r3
			
				ssd1306_set_column_address(0);
    c242:	2000      	movs	r0, #0
    c244:	4b18      	ldr	r3, [pc, #96]	; (c2a8 <main+0x8d0>)
    c246:	4798      	blx	r3
				ssd1306_set_page_address(2);	// row
    c248:	2002      	movs	r0, #2
    c24a:	4b18      	ldr	r3, [pc, #96]	; (c2ac <main+0x8d4>)
    c24c:	4798      	blx	r3
				ssd1306_write_text("Display update rate: 1Hz");
    c24e:	481b      	ldr	r0, [pc, #108]	; (c2bc <main+0x8e4>)
    c250:	4b18      	ldr	r3, [pc, #96]	; (c2b4 <main+0x8dc>)
    c252:	4798      	blx	r3
				
				ssd1306_set_column_address(0);
    c254:	2000      	movs	r0, #0
    c256:	4b14      	ldr	r3, [pc, #80]	; (c2a8 <main+0x8d0>)
    c258:	4798      	blx	r3
				ssd1306_set_page_address(3);	// row
    c25a:	2003      	movs	r0, #3
    c25c:	4b13      	ldr	r3, [pc, #76]	; (c2ac <main+0x8d4>)
    c25e:	4798      	blx	r3
				char buffer[60];
				sprintf(buffer, "Sampling frequency: %dHz", SAMPLING_FREQUENCY);
    c260:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c264:	4618      	mov	r0, r3
    c266:	4916      	ldr	r1, [pc, #88]	; (c2c0 <main+0x8e8>)
    c268:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    c26c:	4b15      	ldr	r3, [pc, #84]	; (c2c4 <main+0x8ec>)
    c26e:	4798      	blx	r3
				ssd1306_write_text( buffer );
    c270:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c274:	4618      	mov	r0, r3
    c276:	4b0f      	ldr	r3, [pc, #60]	; (c2b4 <main+0x8dc>)
    c278:	4798      	blx	r3
			}	
			
			
		}
	
	}
    c27a:	e48b      	b.n	bb94 <main+0x1bc>
    c27c:	e48a      	b.n	bb94 <main+0x1bc>
    c27e:	bf00      	nop
    c280:	20001488 	.word	0x20001488
    c284:	2000109e 	.word	0x2000109e
    c288:	20001074 	.word	0x20001074
    c28c:	20001494 	.word	0x20001494
    c290:	0000aff9 	.word	0x0000aff9
    c294:	2000109d 	.word	0x2000109d
    c298:	2000109c 	.word	0x2000109c
    c29c:	2000148c 	.word	0x2000148c
    c2a0:	0000ae71 	.word	0x0000ae71
    c2a4:	0000b451 	.word	0x0000b451
    c2a8:	0000b415 	.word	0x0000b415
    c2ac:	0000b3e1 	.word	0x0000b3e1
    c2b0:	00012f48 	.word	0x00012f48
    c2b4:	0000890d 	.word	0x0000890d
    c2b8:	00012f58 	.word	0x00012f58
    c2bc:	00012f70 	.word	0x00012f70
    c2c0:	00012f8c 	.word	0x00012f8c
    c2c4:	0000dce5 	.word	0x0000dce5

0000c2c8 <log>:
    c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; c3a0 <log+0xd8>
    c2d0:	b08a      	sub	sp, #40	; 0x28
    c2d2:	4604      	mov	r4, r0
    c2d4:	460d      	mov	r5, r1
    c2d6:	f000 f867 	bl	c3a8 <__ieee754_log>
    c2da:	f998 3000 	ldrsb.w	r3, [r8]
    c2de:	3301      	adds	r3, #1
    c2e0:	4606      	mov	r6, r0
    c2e2:	460f      	mov	r7, r1
    c2e4:	d04e      	beq.n	c384 <log+0xbc>
    c2e6:	4620      	mov	r0, r4
    c2e8:	4629      	mov	r1, r5
    c2ea:	f000 fa51 	bl	c790 <__fpclassifyd>
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d048      	beq.n	c384 <log+0xbc>
    c2f2:	4620      	mov	r0, r4
    c2f4:	4629      	mov	r1, r5
    c2f6:	2200      	movs	r2, #0
    c2f8:	2300      	movs	r3, #0
    c2fa:	f000 febb 	bl	d074 <__aeabi_dcmpgt>
    c2fe:	2800      	cmp	r0, #0
    c300:	d140      	bne.n	c384 <log+0xbc>
    c302:	f898 6000 	ldrb.w	r6, [r8]
    c306:	4b22      	ldr	r3, [pc, #136]	; (c390 <log+0xc8>)
    c308:	9301      	str	r3, [sp, #4]
    c30a:	9008      	str	r0, [sp, #32]
    c30c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    c310:	e9cd 4504 	strd	r4, r5, [sp, #16]
    c314:	b91e      	cbnz	r6, c31e <log+0x56>
    c316:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    c31a:	4b1e      	ldr	r3, [pc, #120]	; (c394 <log+0xcc>)
    c31c:	e001      	b.n	c322 <log+0x5a>
    c31e:	4b1e      	ldr	r3, [pc, #120]	; (c398 <log+0xd0>)
    c320:	2200      	movs	r2, #0
    c322:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c326:	4620      	mov	r0, r4
    c328:	4629      	mov	r1, r5
    c32a:	2200      	movs	r2, #0
    c32c:	2300      	movs	r3, #0
    c32e:	f000 fe79 	bl	d024 <__aeabi_dcmpeq>
    c332:	b276      	sxtb	r6, r6
    c334:	b160      	cbz	r0, c350 <log+0x88>
    c336:	2302      	movs	r3, #2
    c338:	429e      	cmp	r6, r3
    c33a:	9300      	str	r3, [sp, #0]
    c33c:	d003      	beq.n	c346 <log+0x7e>
    c33e:	4668      	mov	r0, sp
    c340:	f000 fa48 	bl	c7d4 <matherr>
    c344:	b9a8      	cbnz	r0, c372 <log+0xaa>
    c346:	f001 f99b 	bl	d680 <__errno>
    c34a:	2322      	movs	r3, #34	; 0x22
    c34c:	6003      	str	r3, [r0, #0]
    c34e:	e010      	b.n	c372 <log+0xaa>
    c350:	2301      	movs	r3, #1
    c352:	2e02      	cmp	r6, #2
    c354:	9300      	str	r3, [sp, #0]
    c356:	d003      	beq.n	c360 <log+0x98>
    c358:	4668      	mov	r0, sp
    c35a:	f000 fa3b 	bl	c7d4 <matherr>
    c35e:	b918      	cbnz	r0, c368 <log+0xa0>
    c360:	f001 f98e 	bl	d680 <__errno>
    c364:	2321      	movs	r3, #33	; 0x21
    c366:	6003      	str	r3, [r0, #0]
    c368:	480c      	ldr	r0, [pc, #48]	; (c39c <log+0xd4>)
    c36a:	f000 fa35 	bl	c7d8 <nan>
    c36e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    c372:	9b08      	ldr	r3, [sp, #32]
    c374:	b11b      	cbz	r3, c37e <log+0xb6>
    c376:	f001 f983 	bl	d680 <__errno>
    c37a:	9b08      	ldr	r3, [sp, #32]
    c37c:	6003      	str	r3, [r0, #0]
    c37e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c382:	e001      	b.n	c388 <log+0xc0>
    c384:	4630      	mov	r0, r6
    c386:	4639      	mov	r1, r7
    c388:	b00a      	add	sp, #40	; 0x28
    c38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c38e:	bf00      	nop
    c390:	00012fa8 	.word	0x00012fa8
    c394:	c7efffff 	.word	0xc7efffff
    c398:	fff00000 	.word	0xfff00000
    c39c:	0001303a 	.word	0x0001303a
    c3a0:	200004b8 	.word	0x200004b8
    c3a4:	00000000 	.word	0x00000000

0000c3a8 <__ieee754_log>:
    c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c3b0:	b087      	sub	sp, #28
    c3b2:	4602      	mov	r2, r0
    c3b4:	460b      	mov	r3, r1
    c3b6:	460e      	mov	r6, r1
    c3b8:	da19      	bge.n	c3ee <__ieee754_log+0x46>
    c3ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    c3be:	4306      	orrs	r6, r0
    c3c0:	d102      	bne.n	c3c8 <__ieee754_log+0x20>
    c3c2:	2000      	movs	r0, #0
    c3c4:	49aa      	ldr	r1, [pc, #680]	; (c670 <__ieee754_log+0x2c8>)
    c3c6:	e003      	b.n	c3d0 <__ieee754_log+0x28>
    c3c8:	2900      	cmp	r1, #0
    c3ca:	da06      	bge.n	c3da <__ieee754_log+0x32>
    c3cc:	f000 fa0e 	bl	c7ec <__aeabi_dsub>
    c3d0:	2200      	movs	r2, #0
    c3d2:	2300      	movs	r3, #0
    c3d4:	f000 fce8 	bl	cda8 <__aeabi_ddiv>
    c3d8:	e1cc      	b.n	c774 <__ieee754_log+0x3cc>
    c3da:	2200      	movs	r2, #0
    c3dc:	4ba5      	ldr	r3, [pc, #660]	; (c674 <__ieee754_log+0x2cc>)
    c3de:	f000 fbb9 	bl	cb54 <__aeabi_dmul>
    c3e2:	460b      	mov	r3, r1
    c3e4:	460e      	mov	r6, r1
    c3e6:	4602      	mov	r2, r0
    c3e8:	f06f 0135 	mvn.w	r1, #53	; 0x35
    c3ec:	e000      	b.n	c3f0 <__ieee754_log+0x48>
    c3ee:	2100      	movs	r1, #0
    c3f0:	48a1      	ldr	r0, [pc, #644]	; (c678 <__ieee754_log+0x2d0>)
    c3f2:	4286      	cmp	r6, r0
    c3f4:	dd02      	ble.n	c3fc <__ieee754_log+0x54>
    c3f6:	4610      	mov	r0, r2
    c3f8:	4619      	mov	r1, r3
    c3fa:	e042      	b.n	c482 <__ieee754_log+0xda>
    c3fc:	ea4f 5826 	mov.w	r8, r6, asr #20
    c400:	f2a8 38ff 	subw	r8, r8, #1023	; 0x3ff
    c404:	f3c6 0613 	ubfx	r6, r6, #0, #20
    c408:	4488      	add	r8, r1
    c40a:	f506 2115 	add.w	r1, r6, #610304	; 0x95000
    c40e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    c412:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
    c416:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
    c41a:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    c41e:	ea41 0306 	orr.w	r3, r1, r6
    c422:	4610      	mov	r0, r2
    c424:	4619      	mov	r1, r3
    c426:	2200      	movs	r2, #0
    c428:	4b94      	ldr	r3, [pc, #592]	; (c67c <__ieee754_log+0x2d4>)
    c42a:	f000 f9df 	bl	c7ec <__aeabi_dsub>
    c42e:	1cb3      	adds	r3, r6, #2
    c430:	f3c3 0313 	ubfx	r3, r3, #0, #20
    c434:	2b02      	cmp	r3, #2
    c436:	eb08 5814 	add.w	r8, r8, r4, lsr #20
    c43a:	4682      	mov	sl, r0
    c43c:	468b      	mov	fp, r1
    c43e:	f04f 0200 	mov.w	r2, #0
    c442:	dc55      	bgt.n	c4f0 <__ieee754_log+0x148>
    c444:	2300      	movs	r3, #0
    c446:	f000 fded 	bl	d024 <__aeabi_dcmpeq>
    c44a:	b1e8      	cbz	r0, c488 <__ieee754_log+0xe0>
    c44c:	f1b8 0f00 	cmp.w	r8, #0
    c450:	f000 818e 	beq.w	c770 <__ieee754_log+0x3c8>
    c454:	4640      	mov	r0, r8
    c456:	f000 fb17 	bl	ca88 <__aeabi_i2d>
    c45a:	a371      	add	r3, pc, #452	; (adr r3, c620 <__ieee754_log+0x278>)
    c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c460:	4606      	mov	r6, r0
    c462:	460f      	mov	r7, r1
    c464:	f000 fb76 	bl	cb54 <__aeabi_dmul>
    c468:	a36f      	add	r3, pc, #444	; (adr r3, c628 <__ieee754_log+0x280>)
    c46a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c46e:	4604      	mov	r4, r0
    c470:	460d      	mov	r5, r1
    c472:	4630      	mov	r0, r6
    c474:	4639      	mov	r1, r7
    c476:	f000 fb6d 	bl	cb54 <__aeabi_dmul>
    c47a:	4602      	mov	r2, r0
    c47c:	460b      	mov	r3, r1
    c47e:	4620      	mov	r0, r4
    c480:	4629      	mov	r1, r5
    c482:	f000 f9b5 	bl	c7f0 <__adddf3>
    c486:	e175      	b.n	c774 <__ieee754_log+0x3cc>
    c488:	4652      	mov	r2, sl
    c48a:	465b      	mov	r3, fp
    c48c:	4650      	mov	r0, sl
    c48e:	4659      	mov	r1, fp
    c490:	f000 fb60 	bl	cb54 <__aeabi_dmul>
    c494:	a366      	add	r3, pc, #408	; (adr r3, c630 <__ieee754_log+0x288>)
    c496:	e9d3 2300 	ldrd	r2, r3, [r3]
    c49a:	4604      	mov	r4, r0
    c49c:	460d      	mov	r5, r1
    c49e:	4650      	mov	r0, sl
    c4a0:	4659      	mov	r1, fp
    c4a2:	f000 fb57 	bl	cb54 <__aeabi_dmul>
    c4a6:	4602      	mov	r2, r0
    c4a8:	460b      	mov	r3, r1
    c4aa:	2000      	movs	r0, #0
    c4ac:	4974      	ldr	r1, [pc, #464]	; (c680 <__ieee754_log+0x2d8>)
    c4ae:	f000 f99d 	bl	c7ec <__aeabi_dsub>
    c4b2:	4602      	mov	r2, r0
    c4b4:	460b      	mov	r3, r1
    c4b6:	4620      	mov	r0, r4
    c4b8:	4629      	mov	r1, r5
    c4ba:	f000 fb4b 	bl	cb54 <__aeabi_dmul>
    c4be:	4604      	mov	r4, r0
    c4c0:	460d      	mov	r5, r1
    c4c2:	f1b8 0f00 	cmp.w	r8, #0
    c4c6:	d104      	bne.n	c4d2 <__ieee754_log+0x12a>
    c4c8:	4650      	mov	r0, sl
    c4ca:	4659      	mov	r1, fp
    c4cc:	4622      	mov	r2, r4
    c4ce:	462b      	mov	r3, r5
    c4d0:	e14b      	b.n	c76a <__ieee754_log+0x3c2>
    c4d2:	4640      	mov	r0, r8
    c4d4:	f000 fad8 	bl	ca88 <__aeabi_i2d>
    c4d8:	a351      	add	r3, pc, #324	; (adr r3, c620 <__ieee754_log+0x278>)
    c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
    c4de:	4680      	mov	r8, r0
    c4e0:	4689      	mov	r9, r1
    c4e2:	f000 fb37 	bl	cb54 <__aeabi_dmul>
    c4e6:	4606      	mov	r6, r0
    c4e8:	460f      	mov	r7, r1
    c4ea:	4640      	mov	r0, r8
    c4ec:	4649      	mov	r1, r9
    c4ee:	e129      	b.n	c744 <__ieee754_log+0x39c>
    c4f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c4f4:	f000 f97c 	bl	c7f0 <__adddf3>
    c4f8:	4602      	mov	r2, r0
    c4fa:	460b      	mov	r3, r1
    c4fc:	4650      	mov	r0, sl
    c4fe:	4659      	mov	r1, fp
    c500:	f000 fc52 	bl	cda8 <__aeabi_ddiv>
    c504:	e9cd 0100 	strd	r0, r1, [sp]
    c508:	4640      	mov	r0, r8
    c50a:	f000 fabd 	bl	ca88 <__aeabi_i2d>
    c50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c512:	e9dd 0100 	ldrd	r0, r1, [sp]
    c516:	4602      	mov	r2, r0
    c518:	460b      	mov	r3, r1
    c51a:	f000 fb1b 	bl	cb54 <__aeabi_dmul>
    c51e:	4602      	mov	r2, r0
    c520:	460b      	mov	r3, r1
    c522:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c526:	f000 fb15 	bl	cb54 <__aeabi_dmul>
    c52a:	a343      	add	r3, pc, #268	; (adr r3, c638 <__ieee754_log+0x290>)
    c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c530:	4604      	mov	r4, r0
    c532:	460d      	mov	r5, r1
    c534:	f000 fb0e 	bl	cb54 <__aeabi_dmul>
    c538:	a341      	add	r3, pc, #260	; (adr r3, c640 <__ieee754_log+0x298>)
    c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c53e:	f000 f957 	bl	c7f0 <__adddf3>
    c542:	4602      	mov	r2, r0
    c544:	460b      	mov	r3, r1
    c546:	4620      	mov	r0, r4
    c548:	4629      	mov	r1, r5
    c54a:	f000 fb03 	bl	cb54 <__aeabi_dmul>
    c54e:	a33e      	add	r3, pc, #248	; (adr r3, c648 <__ieee754_log+0x2a0>)
    c550:	e9d3 2300 	ldrd	r2, r3, [r3]
    c554:	f000 f94c 	bl	c7f0 <__adddf3>
    c558:	4602      	mov	r2, r0
    c55a:	460b      	mov	r3, r1
    c55c:	4620      	mov	r0, r4
    c55e:	4629      	mov	r1, r5
    c560:	f000 faf8 	bl	cb54 <__aeabi_dmul>
    c564:	a33a      	add	r3, pc, #232	; (adr r3, c650 <__ieee754_log+0x2a8>)
    c566:	e9d3 2300 	ldrd	r2, r3, [r3]
    c56a:	f000 f941 	bl	c7f0 <__adddf3>
    c56e:	4602      	mov	r2, r0
    c570:	460b      	mov	r3, r1
    c572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c576:	f000 faed 	bl	cb54 <__aeabi_dmul>
    c57a:	a337      	add	r3, pc, #220	; (adr r3, c658 <__ieee754_log+0x2b0>)
    c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c580:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c584:	4620      	mov	r0, r4
    c586:	4629      	mov	r1, r5
    c588:	f000 fae4 	bl	cb54 <__aeabi_dmul>
    c58c:	a334      	add	r3, pc, #208	; (adr r3, c660 <__ieee754_log+0x2b8>)
    c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c592:	f000 f92d 	bl	c7f0 <__adddf3>
    c596:	4602      	mov	r2, r0
    c598:	460b      	mov	r3, r1
    c59a:	4620      	mov	r0, r4
    c59c:	4629      	mov	r1, r5
    c59e:	f000 fad9 	bl	cb54 <__aeabi_dmul>
    c5a2:	a331      	add	r3, pc, #196	; (adr r3, c668 <__ieee754_log+0x2c0>)
    c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5a8:	f000 f922 	bl	c7f0 <__adddf3>
    c5ac:	4602      	mov	r2, r0
    c5ae:	460b      	mov	r3, r1
    c5b0:	4620      	mov	r0, r4
    c5b2:	4629      	mov	r1, r5
    c5b4:	f000 face 	bl	cb54 <__aeabi_dmul>
    c5b8:	f5a6 27c2 	sub.w	r7, r6, #397312	; 0x61000
    c5bc:	4602      	mov	r2, r0
    c5be:	460b      	mov	r3, r1
    c5c0:	f5c6 26d7 	rsb	r6, r6, #440320	; 0x6b800
    c5c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c5c8:	f000 f912 	bl	c7f0 <__adddf3>
    c5cc:	f2a7 477a 	subw	r7, r7, #1146	; 0x47a
    c5d0:	3651      	adds	r6, #81	; 0x51
    c5d2:	433e      	orrs	r6, r7
    c5d4:	2e00      	cmp	r6, #0
    c5d6:	4604      	mov	r4, r0
    c5d8:	460d      	mov	r5, r1
    c5da:	f340 8086 	ble.w	c6ea <__ieee754_log+0x342>
    c5de:	2200      	movs	r2, #0
    c5e0:	4b27      	ldr	r3, [pc, #156]	; (c680 <__ieee754_log+0x2d8>)
    c5e2:	4650      	mov	r0, sl
    c5e4:	4659      	mov	r1, fp
    c5e6:	f000 fab5 	bl	cb54 <__aeabi_dmul>
    c5ea:	4652      	mov	r2, sl
    c5ec:	465b      	mov	r3, fp
    c5ee:	f000 fab1 	bl	cb54 <__aeabi_dmul>
    c5f2:	4606      	mov	r6, r0
    c5f4:	460f      	mov	r7, r1
    c5f6:	f1b8 0f00 	cmp.w	r8, #0
    c5fa:	d143      	bne.n	c684 <__ieee754_log+0x2dc>
    c5fc:	4622      	mov	r2, r4
    c5fe:	462b      	mov	r3, r5
    c600:	f000 f8f6 	bl	c7f0 <__adddf3>
    c604:	4602      	mov	r2, r0
    c606:	460b      	mov	r3, r1
    c608:	e9dd 0100 	ldrd	r0, r1, [sp]
    c60c:	f000 faa2 	bl	cb54 <__aeabi_dmul>
    c610:	4602      	mov	r2, r0
    c612:	460b      	mov	r3, r1
    c614:	4630      	mov	r0, r6
    c616:	4639      	mov	r1, r7
    c618:	f000 f8e8 	bl	c7ec <__aeabi_dsub>
    c61c:	e074      	b.n	c708 <__ieee754_log+0x360>
    c61e:	bf00      	nop
    c620:	fee00000 	.word	0xfee00000
    c624:	3fe62e42 	.word	0x3fe62e42
    c628:	35793c76 	.word	0x35793c76
    c62c:	3dea39ef 	.word	0x3dea39ef
    c630:	55555555 	.word	0x55555555
    c634:	3fd55555 	.word	0x3fd55555
    c638:	df3e5244 	.word	0xdf3e5244
    c63c:	3fc2f112 	.word	0x3fc2f112
    c640:	96cb03de 	.word	0x96cb03de
    c644:	3fc74664 	.word	0x3fc74664
    c648:	94229359 	.word	0x94229359
    c64c:	3fd24924 	.word	0x3fd24924
    c650:	55555593 	.word	0x55555593
    c654:	3fe55555 	.word	0x3fe55555
    c658:	d078c69f 	.word	0xd078c69f
    c65c:	3fc39a09 	.word	0x3fc39a09
    c660:	1d8e78af 	.word	0x1d8e78af
    c664:	3fcc71c5 	.word	0x3fcc71c5
    c668:	9997fa04 	.word	0x9997fa04
    c66c:	3fd99999 	.word	0x3fd99999
    c670:	c3500000 	.word	0xc3500000
    c674:	43500000 	.word	0x43500000
    c678:	7fefffff 	.word	0x7fefffff
    c67c:	3ff00000 	.word	0x3ff00000
    c680:	3fe00000 	.word	0x3fe00000
    c684:	a33e      	add	r3, pc, #248	; (adr r3, c780 <__ieee754_log+0x3d8>)
    c686:	e9d3 2300 	ldrd	r2, r3, [r3]
    c68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c68e:	f000 fa61 	bl	cb54 <__aeabi_dmul>
    c692:	4622      	mov	r2, r4
    c694:	462b      	mov	r3, r5
    c696:	4680      	mov	r8, r0
    c698:	4689      	mov	r9, r1
    c69a:	4630      	mov	r0, r6
    c69c:	4639      	mov	r1, r7
    c69e:	f000 f8a7 	bl	c7f0 <__adddf3>
    c6a2:	4602      	mov	r2, r0
    c6a4:	460b      	mov	r3, r1
    c6a6:	e9dd 0100 	ldrd	r0, r1, [sp]
    c6aa:	f000 fa53 	bl	cb54 <__aeabi_dmul>
    c6ae:	a336      	add	r3, pc, #216	; (adr r3, c788 <__ieee754_log+0x3e0>)
    c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6b4:	4604      	mov	r4, r0
    c6b6:	460d      	mov	r5, r1
    c6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c6bc:	f000 fa4a 	bl	cb54 <__aeabi_dmul>
    c6c0:	4602      	mov	r2, r0
    c6c2:	460b      	mov	r3, r1
    c6c4:	4620      	mov	r0, r4
    c6c6:	4629      	mov	r1, r5
    c6c8:	f000 f892 	bl	c7f0 <__adddf3>
    c6cc:	4602      	mov	r2, r0
    c6ce:	460b      	mov	r3, r1
    c6d0:	4630      	mov	r0, r6
    c6d2:	4639      	mov	r1, r7
    c6d4:	f000 f88a 	bl	c7ec <__aeabi_dsub>
    c6d8:	4652      	mov	r2, sl
    c6da:	465b      	mov	r3, fp
    c6dc:	f000 f886 	bl	c7ec <__aeabi_dsub>
    c6e0:	4602      	mov	r2, r0
    c6e2:	460b      	mov	r3, r1
    c6e4:	4640      	mov	r0, r8
    c6e6:	4649      	mov	r1, r9
    c6e8:	e03f      	b.n	c76a <__ieee754_log+0x3c2>
    c6ea:	f1b8 0f00 	cmp.w	r8, #0
    c6ee:	d110      	bne.n	c712 <__ieee754_log+0x36a>
    c6f0:	4622      	mov	r2, r4
    c6f2:	462b      	mov	r3, r5
    c6f4:	4650      	mov	r0, sl
    c6f6:	4659      	mov	r1, fp
    c6f8:	f000 f878 	bl	c7ec <__aeabi_dsub>
    c6fc:	4602      	mov	r2, r0
    c6fe:	460b      	mov	r3, r1
    c700:	e9dd 0100 	ldrd	r0, r1, [sp]
    c704:	f000 fa26 	bl	cb54 <__aeabi_dmul>
    c708:	4602      	mov	r2, r0
    c70a:	460b      	mov	r3, r1
    c70c:	4650      	mov	r0, sl
    c70e:	4659      	mov	r1, fp
    c710:	e02b      	b.n	c76a <__ieee754_log+0x3c2>
    c712:	a31b      	add	r3, pc, #108	; (adr r3, c780 <__ieee754_log+0x3d8>)
    c714:	e9d3 2300 	ldrd	r2, r3, [r3]
    c718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c71c:	f000 fa1a 	bl	cb54 <__aeabi_dmul>
    c720:	4622      	mov	r2, r4
    c722:	462b      	mov	r3, r5
    c724:	4606      	mov	r6, r0
    c726:	460f      	mov	r7, r1
    c728:	4650      	mov	r0, sl
    c72a:	4659      	mov	r1, fp
    c72c:	f000 f85e 	bl	c7ec <__aeabi_dsub>
    c730:	4602      	mov	r2, r0
    c732:	460b      	mov	r3, r1
    c734:	e9dd 0100 	ldrd	r0, r1, [sp]
    c738:	f000 fa0c 	bl	cb54 <__aeabi_dmul>
    c73c:	4604      	mov	r4, r0
    c73e:	460d      	mov	r5, r1
    c740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c744:	a310      	add	r3, pc, #64	; (adr r3, c788 <__ieee754_log+0x3e0>)
    c746:	e9d3 2300 	ldrd	r2, r3, [r3]
    c74a:	f000 fa03 	bl	cb54 <__aeabi_dmul>
    c74e:	4602      	mov	r2, r0
    c750:	460b      	mov	r3, r1
    c752:	4620      	mov	r0, r4
    c754:	4629      	mov	r1, r5
    c756:	f000 f849 	bl	c7ec <__aeabi_dsub>
    c75a:	4652      	mov	r2, sl
    c75c:	465b      	mov	r3, fp
    c75e:	f000 f845 	bl	c7ec <__aeabi_dsub>
    c762:	4602      	mov	r2, r0
    c764:	460b      	mov	r3, r1
    c766:	4630      	mov	r0, r6
    c768:	4639      	mov	r1, r7
    c76a:	f000 f83f 	bl	c7ec <__aeabi_dsub>
    c76e:	e001      	b.n	c774 <__ieee754_log+0x3cc>
    c770:	2000      	movs	r0, #0
    c772:	2100      	movs	r1, #0
    c774:	b007      	add	sp, #28
    c776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c77a:	bf00      	nop
    c77c:	f3af 8000 	nop.w
    c780:	fee00000 	.word	0xfee00000
    c784:	3fe62e42 	.word	0x3fe62e42
    c788:	35793c76 	.word	0x35793c76
    c78c:	3dea39ef 	.word	0x3dea39ef

0000c790 <__fpclassifyd>:
    c790:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    c794:	b510      	push	{r4, lr}
    c796:	d100      	bne.n	c79a <__fpclassifyd+0xa>
    c798:	b178      	cbz	r0, c7ba <__fpclassifyd+0x2a>
    c79a:	4a0c      	ldr	r2, [pc, #48]	; (c7cc <__fpclassifyd+0x3c>)
    c79c:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    c7a0:	4294      	cmp	r4, r2
    c7a2:	d90c      	bls.n	c7be <__fpclassifyd+0x2e>
    c7a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    c7a8:	d30b      	bcc.n	c7c2 <__fpclassifyd+0x32>
    c7aa:	4a09      	ldr	r2, [pc, #36]	; (c7d0 <__fpclassifyd+0x40>)
    c7ac:	4293      	cmp	r3, r2
    c7ae:	d10a      	bne.n	c7c6 <__fpclassifyd+0x36>
    c7b0:	f1d0 0001 	rsbs	r0, r0, #1
    c7b4:	bf38      	it	cc
    c7b6:	2000      	movcc	r0, #0
    c7b8:	bd10      	pop	{r4, pc}
    c7ba:	2002      	movs	r0, #2
    c7bc:	bd10      	pop	{r4, pc}
    c7be:	2004      	movs	r0, #4
    c7c0:	bd10      	pop	{r4, pc}
    c7c2:	2003      	movs	r0, #3
    c7c4:	bd10      	pop	{r4, pc}
    c7c6:	2000      	movs	r0, #0
    c7c8:	bd10      	pop	{r4, pc}
    c7ca:	bf00      	nop
    c7cc:	7fdfffff 	.word	0x7fdfffff
    c7d0:	7ff00000 	.word	0x7ff00000

0000c7d4 <matherr>:
    c7d4:	2000      	movs	r0, #0
    c7d6:	4770      	bx	lr

0000c7d8 <nan>:
    c7d8:	2000      	movs	r0, #0
    c7da:	4901      	ldr	r1, [pc, #4]	; (c7e0 <nan+0x8>)
    c7dc:	4770      	bx	lr
    c7de:	bf00      	nop
    c7e0:	7ff80000 	.word	0x7ff80000

0000c7e4 <__aeabi_drsub>:
    c7e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c7e8:	e002      	b.n	c7f0 <__adddf3>
    c7ea:	bf00      	nop

0000c7ec <__aeabi_dsub>:
    c7ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c7f0 <__adddf3>:
    c7f0:	b530      	push	{r4, r5, lr}
    c7f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c7f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c7fa:	ea94 0f05 	teq	r4, r5
    c7fe:	bf08      	it	eq
    c800:	ea90 0f02 	teqeq	r0, r2
    c804:	bf1f      	itttt	ne
    c806:	ea54 0c00 	orrsne.w	ip, r4, r0
    c80a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c80e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c812:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c816:	f000 80e2 	beq.w	c9de <__adddf3+0x1ee>
    c81a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c81e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c822:	bfb8      	it	lt
    c824:	426d      	neglt	r5, r5
    c826:	dd0c      	ble.n	c842 <__adddf3+0x52>
    c828:	442c      	add	r4, r5
    c82a:	ea80 0202 	eor.w	r2, r0, r2
    c82e:	ea81 0303 	eor.w	r3, r1, r3
    c832:	ea82 0000 	eor.w	r0, r2, r0
    c836:	ea83 0101 	eor.w	r1, r3, r1
    c83a:	ea80 0202 	eor.w	r2, r0, r2
    c83e:	ea81 0303 	eor.w	r3, r1, r3
    c842:	2d36      	cmp	r5, #54	; 0x36
    c844:	bf88      	it	hi
    c846:	bd30      	pophi	{r4, r5, pc}
    c848:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c84c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c850:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c854:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c858:	d002      	beq.n	c860 <__adddf3+0x70>
    c85a:	4240      	negs	r0, r0
    c85c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c860:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c864:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c868:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c86c:	d002      	beq.n	c874 <__adddf3+0x84>
    c86e:	4252      	negs	r2, r2
    c870:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c874:	ea94 0f05 	teq	r4, r5
    c878:	f000 80a7 	beq.w	c9ca <__adddf3+0x1da>
    c87c:	f1a4 0401 	sub.w	r4, r4, #1
    c880:	f1d5 0e20 	rsbs	lr, r5, #32
    c884:	db0d      	blt.n	c8a2 <__adddf3+0xb2>
    c886:	fa02 fc0e 	lsl.w	ip, r2, lr
    c88a:	fa22 f205 	lsr.w	r2, r2, r5
    c88e:	1880      	adds	r0, r0, r2
    c890:	f141 0100 	adc.w	r1, r1, #0
    c894:	fa03 f20e 	lsl.w	r2, r3, lr
    c898:	1880      	adds	r0, r0, r2
    c89a:	fa43 f305 	asr.w	r3, r3, r5
    c89e:	4159      	adcs	r1, r3
    c8a0:	e00e      	b.n	c8c0 <__adddf3+0xd0>
    c8a2:	f1a5 0520 	sub.w	r5, r5, #32
    c8a6:	f10e 0e20 	add.w	lr, lr, #32
    c8aa:	2a01      	cmp	r2, #1
    c8ac:	fa03 fc0e 	lsl.w	ip, r3, lr
    c8b0:	bf28      	it	cs
    c8b2:	f04c 0c02 	orrcs.w	ip, ip, #2
    c8b6:	fa43 f305 	asr.w	r3, r3, r5
    c8ba:	18c0      	adds	r0, r0, r3
    c8bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c8c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c8c4:	d507      	bpl.n	c8d6 <__adddf3+0xe6>
    c8c6:	f04f 0e00 	mov.w	lr, #0
    c8ca:	f1dc 0c00 	rsbs	ip, ip, #0
    c8ce:	eb7e 0000 	sbcs.w	r0, lr, r0
    c8d2:	eb6e 0101 	sbc.w	r1, lr, r1
    c8d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c8da:	d31b      	bcc.n	c914 <__adddf3+0x124>
    c8dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c8e0:	d30c      	bcc.n	c8fc <__adddf3+0x10c>
    c8e2:	0849      	lsrs	r1, r1, #1
    c8e4:	ea5f 0030 	movs.w	r0, r0, rrx
    c8e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c8ec:	f104 0401 	add.w	r4, r4, #1
    c8f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c8f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c8f8:	f080 809a 	bcs.w	ca30 <__adddf3+0x240>
    c8fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c900:	bf08      	it	eq
    c902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c906:	f150 0000 	adcs.w	r0, r0, #0
    c90a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c90e:	ea41 0105 	orr.w	r1, r1, r5
    c912:	bd30      	pop	{r4, r5, pc}
    c914:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c918:	4140      	adcs	r0, r0
    c91a:	eb41 0101 	adc.w	r1, r1, r1
    c91e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c922:	f1a4 0401 	sub.w	r4, r4, #1
    c926:	d1e9      	bne.n	c8fc <__adddf3+0x10c>
    c928:	f091 0f00 	teq	r1, #0
    c92c:	bf04      	itt	eq
    c92e:	4601      	moveq	r1, r0
    c930:	2000      	moveq	r0, #0
    c932:	fab1 f381 	clz	r3, r1
    c936:	bf08      	it	eq
    c938:	3320      	addeq	r3, #32
    c93a:	f1a3 030b 	sub.w	r3, r3, #11
    c93e:	f1b3 0220 	subs.w	r2, r3, #32
    c942:	da0c      	bge.n	c95e <__adddf3+0x16e>
    c944:	320c      	adds	r2, #12
    c946:	dd08      	ble.n	c95a <__adddf3+0x16a>
    c948:	f102 0c14 	add.w	ip, r2, #20
    c94c:	f1c2 020c 	rsb	r2, r2, #12
    c950:	fa01 f00c 	lsl.w	r0, r1, ip
    c954:	fa21 f102 	lsr.w	r1, r1, r2
    c958:	e00c      	b.n	c974 <__adddf3+0x184>
    c95a:	f102 0214 	add.w	r2, r2, #20
    c95e:	bfd8      	it	le
    c960:	f1c2 0c20 	rsble	ip, r2, #32
    c964:	fa01 f102 	lsl.w	r1, r1, r2
    c968:	fa20 fc0c 	lsr.w	ip, r0, ip
    c96c:	bfdc      	itt	le
    c96e:	ea41 010c 	orrle.w	r1, r1, ip
    c972:	4090      	lslle	r0, r2
    c974:	1ae4      	subs	r4, r4, r3
    c976:	bfa2      	ittt	ge
    c978:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c97c:	4329      	orrge	r1, r5
    c97e:	bd30      	popge	{r4, r5, pc}
    c980:	ea6f 0404 	mvn.w	r4, r4
    c984:	3c1f      	subs	r4, #31
    c986:	da1c      	bge.n	c9c2 <__adddf3+0x1d2>
    c988:	340c      	adds	r4, #12
    c98a:	dc0e      	bgt.n	c9aa <__adddf3+0x1ba>
    c98c:	f104 0414 	add.w	r4, r4, #20
    c990:	f1c4 0220 	rsb	r2, r4, #32
    c994:	fa20 f004 	lsr.w	r0, r0, r4
    c998:	fa01 f302 	lsl.w	r3, r1, r2
    c99c:	ea40 0003 	orr.w	r0, r0, r3
    c9a0:	fa21 f304 	lsr.w	r3, r1, r4
    c9a4:	ea45 0103 	orr.w	r1, r5, r3
    c9a8:	bd30      	pop	{r4, r5, pc}
    c9aa:	f1c4 040c 	rsb	r4, r4, #12
    c9ae:	f1c4 0220 	rsb	r2, r4, #32
    c9b2:	fa20 f002 	lsr.w	r0, r0, r2
    c9b6:	fa01 f304 	lsl.w	r3, r1, r4
    c9ba:	ea40 0003 	orr.w	r0, r0, r3
    c9be:	4629      	mov	r1, r5
    c9c0:	bd30      	pop	{r4, r5, pc}
    c9c2:	fa21 f004 	lsr.w	r0, r1, r4
    c9c6:	4629      	mov	r1, r5
    c9c8:	bd30      	pop	{r4, r5, pc}
    c9ca:	f094 0f00 	teq	r4, #0
    c9ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c9d2:	bf06      	itte	eq
    c9d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c9d8:	3401      	addeq	r4, #1
    c9da:	3d01      	subne	r5, #1
    c9dc:	e74e      	b.n	c87c <__adddf3+0x8c>
    c9de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c9e2:	bf18      	it	ne
    c9e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c9e8:	d029      	beq.n	ca3e <__adddf3+0x24e>
    c9ea:	ea94 0f05 	teq	r4, r5
    c9ee:	bf08      	it	eq
    c9f0:	ea90 0f02 	teqeq	r0, r2
    c9f4:	d005      	beq.n	ca02 <__adddf3+0x212>
    c9f6:	ea54 0c00 	orrs.w	ip, r4, r0
    c9fa:	bf04      	itt	eq
    c9fc:	4619      	moveq	r1, r3
    c9fe:	4610      	moveq	r0, r2
    ca00:	bd30      	pop	{r4, r5, pc}
    ca02:	ea91 0f03 	teq	r1, r3
    ca06:	bf1e      	ittt	ne
    ca08:	2100      	movne	r1, #0
    ca0a:	2000      	movne	r0, #0
    ca0c:	bd30      	popne	{r4, r5, pc}
    ca0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    ca12:	d105      	bne.n	ca20 <__adddf3+0x230>
    ca14:	0040      	lsls	r0, r0, #1
    ca16:	4149      	adcs	r1, r1
    ca18:	bf28      	it	cs
    ca1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ca1e:	bd30      	pop	{r4, r5, pc}
    ca20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    ca24:	bf3c      	itt	cc
    ca26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    ca2a:	bd30      	popcc	{r4, r5, pc}
    ca2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ca30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ca34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ca38:	f04f 0000 	mov.w	r0, #0
    ca3c:	bd30      	pop	{r4, r5, pc}
    ca3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ca42:	bf1a      	itte	ne
    ca44:	4619      	movne	r1, r3
    ca46:	4610      	movne	r0, r2
    ca48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ca4c:	bf1c      	itt	ne
    ca4e:	460b      	movne	r3, r1
    ca50:	4602      	movne	r2, r0
    ca52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ca56:	bf06      	itte	eq
    ca58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ca5c:	ea91 0f03 	teqeq	r1, r3
    ca60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    ca64:	bd30      	pop	{r4, r5, pc}
    ca66:	bf00      	nop

0000ca68 <__aeabi_ui2d>:
    ca68:	f090 0f00 	teq	r0, #0
    ca6c:	bf04      	itt	eq
    ca6e:	2100      	moveq	r1, #0
    ca70:	4770      	bxeq	lr
    ca72:	b530      	push	{r4, r5, lr}
    ca74:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ca78:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ca7c:	f04f 0500 	mov.w	r5, #0
    ca80:	f04f 0100 	mov.w	r1, #0
    ca84:	e750      	b.n	c928 <__adddf3+0x138>
    ca86:	bf00      	nop

0000ca88 <__aeabi_i2d>:
    ca88:	f090 0f00 	teq	r0, #0
    ca8c:	bf04      	itt	eq
    ca8e:	2100      	moveq	r1, #0
    ca90:	4770      	bxeq	lr
    ca92:	b530      	push	{r4, r5, lr}
    ca94:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ca98:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ca9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    caa0:	bf48      	it	mi
    caa2:	4240      	negmi	r0, r0
    caa4:	f04f 0100 	mov.w	r1, #0
    caa8:	e73e      	b.n	c928 <__adddf3+0x138>
    caaa:	bf00      	nop

0000caac <__aeabi_f2d>:
    caac:	0042      	lsls	r2, r0, #1
    caae:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cab2:	ea4f 0131 	mov.w	r1, r1, rrx
    cab6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    caba:	bf1f      	itttt	ne
    cabc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cac0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cac4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cac8:	4770      	bxne	lr
    caca:	f092 0f00 	teq	r2, #0
    cace:	bf14      	ite	ne
    cad0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cad4:	4770      	bxeq	lr
    cad6:	b530      	push	{r4, r5, lr}
    cad8:	f44f 7460 	mov.w	r4, #896	; 0x380
    cadc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cae4:	e720      	b.n	c928 <__adddf3+0x138>
    cae6:	bf00      	nop

0000cae8 <__aeabi_ul2d>:
    cae8:	ea50 0201 	orrs.w	r2, r0, r1
    caec:	bf08      	it	eq
    caee:	4770      	bxeq	lr
    caf0:	b530      	push	{r4, r5, lr}
    caf2:	f04f 0500 	mov.w	r5, #0
    caf6:	e00a      	b.n	cb0e <__aeabi_l2d+0x16>

0000caf8 <__aeabi_l2d>:
    caf8:	ea50 0201 	orrs.w	r2, r0, r1
    cafc:	bf08      	it	eq
    cafe:	4770      	bxeq	lr
    cb00:	b530      	push	{r4, r5, lr}
    cb02:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cb06:	d502      	bpl.n	cb0e <__aeabi_l2d+0x16>
    cb08:	4240      	negs	r0, r0
    cb0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb0e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb12:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb16:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cb1a:	f43f aedc 	beq.w	c8d6 <__adddf3+0xe6>
    cb1e:	f04f 0203 	mov.w	r2, #3
    cb22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cb26:	bf18      	it	ne
    cb28:	3203      	addne	r2, #3
    cb2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cb2e:	bf18      	it	ne
    cb30:	3203      	addne	r2, #3
    cb32:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cb36:	f1c2 0320 	rsb	r3, r2, #32
    cb3a:	fa00 fc03 	lsl.w	ip, r0, r3
    cb3e:	fa20 f002 	lsr.w	r0, r0, r2
    cb42:	fa01 fe03 	lsl.w	lr, r1, r3
    cb46:	ea40 000e 	orr.w	r0, r0, lr
    cb4a:	fa21 f102 	lsr.w	r1, r1, r2
    cb4e:	4414      	add	r4, r2
    cb50:	e6c1      	b.n	c8d6 <__adddf3+0xe6>
    cb52:	bf00      	nop

0000cb54 <__aeabi_dmul>:
    cb54:	b570      	push	{r4, r5, r6, lr}
    cb56:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cb5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cb5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cb62:	bf1d      	ittte	ne
    cb64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cb68:	ea94 0f0c 	teqne	r4, ip
    cb6c:	ea95 0f0c 	teqne	r5, ip
    cb70:	f000 f8de 	bleq	cd30 <__aeabi_dmul+0x1dc>
    cb74:	442c      	add	r4, r5
    cb76:	ea81 0603 	eor.w	r6, r1, r3
    cb7a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    cb7e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    cb82:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    cb86:	bf18      	it	ne
    cb88:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    cb8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cb90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cb94:	d038      	beq.n	cc08 <__aeabi_dmul+0xb4>
    cb96:	fba0 ce02 	umull	ip, lr, r0, r2
    cb9a:	f04f 0500 	mov.w	r5, #0
    cb9e:	fbe1 e502 	umlal	lr, r5, r1, r2
    cba2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    cba6:	fbe0 e503 	umlal	lr, r5, r0, r3
    cbaa:	f04f 0600 	mov.w	r6, #0
    cbae:	fbe1 5603 	umlal	r5, r6, r1, r3
    cbb2:	f09c 0f00 	teq	ip, #0
    cbb6:	bf18      	it	ne
    cbb8:	f04e 0e01 	orrne.w	lr, lr, #1
    cbbc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    cbc0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    cbc4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    cbc8:	d204      	bcs.n	cbd4 <__aeabi_dmul+0x80>
    cbca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    cbce:	416d      	adcs	r5, r5
    cbd0:	eb46 0606 	adc.w	r6, r6, r6
    cbd4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cbd8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cbdc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    cbe0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    cbe4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    cbe8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cbec:	bf88      	it	hi
    cbee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cbf2:	d81e      	bhi.n	cc32 <__aeabi_dmul+0xde>
    cbf4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    cbf8:	bf08      	it	eq
    cbfa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    cbfe:	f150 0000 	adcs.w	r0, r0, #0
    cc02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cc06:	bd70      	pop	{r4, r5, r6, pc}
    cc08:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    cc0c:	ea46 0101 	orr.w	r1, r6, r1
    cc10:	ea40 0002 	orr.w	r0, r0, r2
    cc14:	ea81 0103 	eor.w	r1, r1, r3
    cc18:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cc1c:	bfc2      	ittt	gt
    cc1e:	ebd4 050c 	rsbsgt	r5, r4, ip
    cc22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cc26:	bd70      	popgt	{r4, r5, r6, pc}
    cc28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc2c:	f04f 0e00 	mov.w	lr, #0
    cc30:	3c01      	subs	r4, #1
    cc32:	f300 80ab 	bgt.w	cd8c <__aeabi_dmul+0x238>
    cc36:	f114 0f36 	cmn.w	r4, #54	; 0x36
    cc3a:	bfde      	ittt	le
    cc3c:	2000      	movle	r0, #0
    cc3e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cc42:	bd70      	pople	{r4, r5, r6, pc}
    cc44:	f1c4 0400 	rsb	r4, r4, #0
    cc48:	3c20      	subs	r4, #32
    cc4a:	da35      	bge.n	ccb8 <__aeabi_dmul+0x164>
    cc4c:	340c      	adds	r4, #12
    cc4e:	dc1b      	bgt.n	cc88 <__aeabi_dmul+0x134>
    cc50:	f104 0414 	add.w	r4, r4, #20
    cc54:	f1c4 0520 	rsb	r5, r4, #32
    cc58:	fa00 f305 	lsl.w	r3, r0, r5
    cc5c:	fa20 f004 	lsr.w	r0, r0, r4
    cc60:	fa01 f205 	lsl.w	r2, r1, r5
    cc64:	ea40 0002 	orr.w	r0, r0, r2
    cc68:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cc6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cc70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cc74:	fa21 f604 	lsr.w	r6, r1, r4
    cc78:	eb42 0106 	adc.w	r1, r2, r6
    cc7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cc80:	bf08      	it	eq
    cc82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cc86:	bd70      	pop	{r4, r5, r6, pc}
    cc88:	f1c4 040c 	rsb	r4, r4, #12
    cc8c:	f1c4 0520 	rsb	r5, r4, #32
    cc90:	fa00 f304 	lsl.w	r3, r0, r4
    cc94:	fa20 f005 	lsr.w	r0, r0, r5
    cc98:	fa01 f204 	lsl.w	r2, r1, r4
    cc9c:	ea40 0002 	orr.w	r0, r0, r2
    cca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cca4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cca8:	f141 0100 	adc.w	r1, r1, #0
    ccac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ccb0:	bf08      	it	eq
    ccb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ccb6:	bd70      	pop	{r4, r5, r6, pc}
    ccb8:	f1c4 0520 	rsb	r5, r4, #32
    ccbc:	fa00 f205 	lsl.w	r2, r0, r5
    ccc0:	ea4e 0e02 	orr.w	lr, lr, r2
    ccc4:	fa20 f304 	lsr.w	r3, r0, r4
    ccc8:	fa01 f205 	lsl.w	r2, r1, r5
    cccc:	ea43 0302 	orr.w	r3, r3, r2
    ccd0:	fa21 f004 	lsr.w	r0, r1, r4
    ccd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ccd8:	fa21 f204 	lsr.w	r2, r1, r4
    ccdc:	ea20 0002 	bic.w	r0, r0, r2
    cce0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cce4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cce8:	bf08      	it	eq
    ccea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ccee:	bd70      	pop	{r4, r5, r6, pc}
    ccf0:	f094 0f00 	teq	r4, #0
    ccf4:	d10f      	bne.n	cd16 <__aeabi_dmul+0x1c2>
    ccf6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    ccfa:	0040      	lsls	r0, r0, #1
    ccfc:	eb41 0101 	adc.w	r1, r1, r1
    cd00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cd04:	bf08      	it	eq
    cd06:	3c01      	subeq	r4, #1
    cd08:	d0f7      	beq.n	ccfa <__aeabi_dmul+0x1a6>
    cd0a:	ea41 0106 	orr.w	r1, r1, r6
    cd0e:	f095 0f00 	teq	r5, #0
    cd12:	bf18      	it	ne
    cd14:	4770      	bxne	lr
    cd16:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cd1a:	0052      	lsls	r2, r2, #1
    cd1c:	eb43 0303 	adc.w	r3, r3, r3
    cd20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cd24:	bf08      	it	eq
    cd26:	3d01      	subeq	r5, #1
    cd28:	d0f7      	beq.n	cd1a <__aeabi_dmul+0x1c6>
    cd2a:	ea43 0306 	orr.w	r3, r3, r6
    cd2e:	4770      	bx	lr
    cd30:	ea94 0f0c 	teq	r4, ip
    cd34:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cd38:	bf18      	it	ne
    cd3a:	ea95 0f0c 	teqne	r5, ip
    cd3e:	d00c      	beq.n	cd5a <__aeabi_dmul+0x206>
    cd40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cd44:	bf18      	it	ne
    cd46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cd4a:	d1d1      	bne.n	ccf0 <__aeabi_dmul+0x19c>
    cd4c:	ea81 0103 	eor.w	r1, r1, r3
    cd50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd54:	f04f 0000 	mov.w	r0, #0
    cd58:	bd70      	pop	{r4, r5, r6, pc}
    cd5a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cd5e:	bf06      	itte	eq
    cd60:	4610      	moveq	r0, r2
    cd62:	4619      	moveq	r1, r3
    cd64:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cd68:	d019      	beq.n	cd9e <__aeabi_dmul+0x24a>
    cd6a:	ea94 0f0c 	teq	r4, ip
    cd6e:	d102      	bne.n	cd76 <__aeabi_dmul+0x222>
    cd70:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    cd74:	d113      	bne.n	cd9e <__aeabi_dmul+0x24a>
    cd76:	ea95 0f0c 	teq	r5, ip
    cd7a:	d105      	bne.n	cd88 <__aeabi_dmul+0x234>
    cd7c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cd80:	bf1c      	itt	ne
    cd82:	4610      	movne	r0, r2
    cd84:	4619      	movne	r1, r3
    cd86:	d10a      	bne.n	cd9e <__aeabi_dmul+0x24a>
    cd88:	ea81 0103 	eor.w	r1, r1, r3
    cd8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd90:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cd94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cd98:	f04f 0000 	mov.w	r0, #0
    cd9c:	bd70      	pop	{r4, r5, r6, pc}
    cd9e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cda2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    cda6:	bd70      	pop	{r4, r5, r6, pc}

0000cda8 <__aeabi_ddiv>:
    cda8:	b570      	push	{r4, r5, r6, lr}
    cdaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cdae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cdb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cdb6:	bf1d      	ittte	ne
    cdb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cdbc:	ea94 0f0c 	teqne	r4, ip
    cdc0:	ea95 0f0c 	teqne	r5, ip
    cdc4:	f000 f8a7 	bleq	cf16 <__aeabi_ddiv+0x16e>
    cdc8:	eba4 0405 	sub.w	r4, r4, r5
    cdcc:	ea81 0e03 	eor.w	lr, r1, r3
    cdd0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cdd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cdd8:	f000 8088 	beq.w	ceec <__aeabi_ddiv+0x144>
    cddc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cde0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cde4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    cde8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    cdec:	ea4f 2202 	mov.w	r2, r2, lsl #8
    cdf0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    cdf4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    cdf8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    cdfc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ce00:	429d      	cmp	r5, r3
    ce02:	bf08      	it	eq
    ce04:	4296      	cmpeq	r6, r2
    ce06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ce0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ce0e:	d202      	bcs.n	ce16 <__aeabi_ddiv+0x6e>
    ce10:	085b      	lsrs	r3, r3, #1
    ce12:	ea4f 0232 	mov.w	r2, r2, rrx
    ce16:	1ab6      	subs	r6, r6, r2
    ce18:	eb65 0503 	sbc.w	r5, r5, r3
    ce1c:	085b      	lsrs	r3, r3, #1
    ce1e:	ea4f 0232 	mov.w	r2, r2, rrx
    ce22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ce26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ce2a:	ebb6 0e02 	subs.w	lr, r6, r2
    ce2e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ce32:	bf22      	ittt	cs
    ce34:	1ab6      	subcs	r6, r6, r2
    ce36:	4675      	movcs	r5, lr
    ce38:	ea40 000c 	orrcs.w	r0, r0, ip
    ce3c:	085b      	lsrs	r3, r3, #1
    ce3e:	ea4f 0232 	mov.w	r2, r2, rrx
    ce42:	ebb6 0e02 	subs.w	lr, r6, r2
    ce46:	eb75 0e03 	sbcs.w	lr, r5, r3
    ce4a:	bf22      	ittt	cs
    ce4c:	1ab6      	subcs	r6, r6, r2
    ce4e:	4675      	movcs	r5, lr
    ce50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ce54:	085b      	lsrs	r3, r3, #1
    ce56:	ea4f 0232 	mov.w	r2, r2, rrx
    ce5a:	ebb6 0e02 	subs.w	lr, r6, r2
    ce5e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ce62:	bf22      	ittt	cs
    ce64:	1ab6      	subcs	r6, r6, r2
    ce66:	4675      	movcs	r5, lr
    ce68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ce6c:	085b      	lsrs	r3, r3, #1
    ce6e:	ea4f 0232 	mov.w	r2, r2, rrx
    ce72:	ebb6 0e02 	subs.w	lr, r6, r2
    ce76:	eb75 0e03 	sbcs.w	lr, r5, r3
    ce7a:	bf22      	ittt	cs
    ce7c:	1ab6      	subcs	r6, r6, r2
    ce7e:	4675      	movcs	r5, lr
    ce80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ce84:	ea55 0e06 	orrs.w	lr, r5, r6
    ce88:	d018      	beq.n	cebc <__aeabi_ddiv+0x114>
    ce8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ce8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ce92:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ce96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ce9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ce9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cea2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cea6:	d1c0      	bne.n	ce2a <__aeabi_ddiv+0x82>
    cea8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ceac:	d10b      	bne.n	cec6 <__aeabi_ddiv+0x11e>
    ceae:	ea41 0100 	orr.w	r1, r1, r0
    ceb2:	f04f 0000 	mov.w	r0, #0
    ceb6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ceba:	e7b6      	b.n	ce2a <__aeabi_ddiv+0x82>
    cebc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cec0:	bf04      	itt	eq
    cec2:	4301      	orreq	r1, r0
    cec4:	2000      	moveq	r0, #0
    cec6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ceca:	bf88      	it	hi
    cecc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ced0:	f63f aeaf 	bhi.w	cc32 <__aeabi_dmul+0xde>
    ced4:	ebb5 0c03 	subs.w	ip, r5, r3
    ced8:	bf04      	itt	eq
    ceda:	ebb6 0c02 	subseq.w	ip, r6, r2
    cede:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cee2:	f150 0000 	adcs.w	r0, r0, #0
    cee6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ceea:	bd70      	pop	{r4, r5, r6, pc}
    ceec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cef0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cef4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cef8:	bfc2      	ittt	gt
    cefa:	ebd4 050c 	rsbsgt	r5, r4, ip
    cefe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cf02:	bd70      	popgt	{r4, r5, r6, pc}
    cf04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cf08:	f04f 0e00 	mov.w	lr, #0
    cf0c:	3c01      	subs	r4, #1
    cf0e:	e690      	b.n	cc32 <__aeabi_dmul+0xde>
    cf10:	ea45 0e06 	orr.w	lr, r5, r6
    cf14:	e68d      	b.n	cc32 <__aeabi_dmul+0xde>
    cf16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cf1a:	ea94 0f0c 	teq	r4, ip
    cf1e:	bf08      	it	eq
    cf20:	ea95 0f0c 	teqeq	r5, ip
    cf24:	f43f af3b 	beq.w	cd9e <__aeabi_dmul+0x24a>
    cf28:	ea94 0f0c 	teq	r4, ip
    cf2c:	d10a      	bne.n	cf44 <__aeabi_ddiv+0x19c>
    cf2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cf32:	f47f af34 	bne.w	cd9e <__aeabi_dmul+0x24a>
    cf36:	ea95 0f0c 	teq	r5, ip
    cf3a:	f47f af25 	bne.w	cd88 <__aeabi_dmul+0x234>
    cf3e:	4610      	mov	r0, r2
    cf40:	4619      	mov	r1, r3
    cf42:	e72c      	b.n	cd9e <__aeabi_dmul+0x24a>
    cf44:	ea95 0f0c 	teq	r5, ip
    cf48:	d106      	bne.n	cf58 <__aeabi_ddiv+0x1b0>
    cf4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cf4e:	f43f aefd 	beq.w	cd4c <__aeabi_dmul+0x1f8>
    cf52:	4610      	mov	r0, r2
    cf54:	4619      	mov	r1, r3
    cf56:	e722      	b.n	cd9e <__aeabi_dmul+0x24a>
    cf58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cf5c:	bf18      	it	ne
    cf5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cf62:	f47f aec5 	bne.w	ccf0 <__aeabi_dmul+0x19c>
    cf66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    cf6a:	f47f af0d 	bne.w	cd88 <__aeabi_dmul+0x234>
    cf6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cf72:	f47f aeeb 	bne.w	cd4c <__aeabi_dmul+0x1f8>
    cf76:	e712      	b.n	cd9e <__aeabi_dmul+0x24a>

0000cf78 <__gedf2>:
    cf78:	f04f 3cff 	mov.w	ip, #4294967295
    cf7c:	e006      	b.n	cf8c <__cmpdf2+0x4>
    cf7e:	bf00      	nop

0000cf80 <__ledf2>:
    cf80:	f04f 0c01 	mov.w	ip, #1
    cf84:	e002      	b.n	cf8c <__cmpdf2+0x4>
    cf86:	bf00      	nop

0000cf88 <__cmpdf2>:
    cf88:	f04f 0c01 	mov.w	ip, #1
    cf8c:	f84d cd04 	str.w	ip, [sp, #-4]!
    cf90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cf94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cf98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cf9c:	bf18      	it	ne
    cf9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cfa2:	d01b      	beq.n	cfdc <__cmpdf2+0x54>
    cfa4:	b001      	add	sp, #4
    cfa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cfaa:	bf0c      	ite	eq
    cfac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cfb0:	ea91 0f03 	teqne	r1, r3
    cfb4:	bf02      	ittt	eq
    cfb6:	ea90 0f02 	teqeq	r0, r2
    cfba:	2000      	moveq	r0, #0
    cfbc:	4770      	bxeq	lr
    cfbe:	f110 0f00 	cmn.w	r0, #0
    cfc2:	ea91 0f03 	teq	r1, r3
    cfc6:	bf58      	it	pl
    cfc8:	4299      	cmppl	r1, r3
    cfca:	bf08      	it	eq
    cfcc:	4290      	cmpeq	r0, r2
    cfce:	bf2c      	ite	cs
    cfd0:	17d8      	asrcs	r0, r3, #31
    cfd2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cfd6:	f040 0001 	orr.w	r0, r0, #1
    cfda:	4770      	bx	lr
    cfdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cfe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cfe4:	d102      	bne.n	cfec <__cmpdf2+0x64>
    cfe6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cfea:	d107      	bne.n	cffc <__cmpdf2+0x74>
    cfec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cff0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cff4:	d1d6      	bne.n	cfa4 <__cmpdf2+0x1c>
    cff6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cffa:	d0d3      	beq.n	cfa4 <__cmpdf2+0x1c>
    cffc:	f85d 0b04 	ldr.w	r0, [sp], #4
    d000:	4770      	bx	lr
    d002:	bf00      	nop

0000d004 <__aeabi_cdrcmple>:
    d004:	4684      	mov	ip, r0
    d006:	4610      	mov	r0, r2
    d008:	4662      	mov	r2, ip
    d00a:	468c      	mov	ip, r1
    d00c:	4619      	mov	r1, r3
    d00e:	4663      	mov	r3, ip
    d010:	e000      	b.n	d014 <__aeabi_cdcmpeq>
    d012:	bf00      	nop

0000d014 <__aeabi_cdcmpeq>:
    d014:	b501      	push	{r0, lr}
    d016:	f7ff ffb7 	bl	cf88 <__cmpdf2>
    d01a:	2800      	cmp	r0, #0
    d01c:	bf48      	it	mi
    d01e:	f110 0f00 	cmnmi.w	r0, #0
    d022:	bd01      	pop	{r0, pc}

0000d024 <__aeabi_dcmpeq>:
    d024:	f84d ed08 	str.w	lr, [sp, #-8]!
    d028:	f7ff fff4 	bl	d014 <__aeabi_cdcmpeq>
    d02c:	bf0c      	ite	eq
    d02e:	2001      	moveq	r0, #1
    d030:	2000      	movne	r0, #0
    d032:	f85d fb08 	ldr.w	pc, [sp], #8
    d036:	bf00      	nop

0000d038 <__aeabi_dcmplt>:
    d038:	f84d ed08 	str.w	lr, [sp, #-8]!
    d03c:	f7ff ffea 	bl	d014 <__aeabi_cdcmpeq>
    d040:	bf34      	ite	cc
    d042:	2001      	movcc	r0, #1
    d044:	2000      	movcs	r0, #0
    d046:	f85d fb08 	ldr.w	pc, [sp], #8
    d04a:	bf00      	nop

0000d04c <__aeabi_dcmple>:
    d04c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d050:	f7ff ffe0 	bl	d014 <__aeabi_cdcmpeq>
    d054:	bf94      	ite	ls
    d056:	2001      	movls	r0, #1
    d058:	2000      	movhi	r0, #0
    d05a:	f85d fb08 	ldr.w	pc, [sp], #8
    d05e:	bf00      	nop

0000d060 <__aeabi_dcmpge>:
    d060:	f84d ed08 	str.w	lr, [sp, #-8]!
    d064:	f7ff ffce 	bl	d004 <__aeabi_cdrcmple>
    d068:	bf94      	ite	ls
    d06a:	2001      	movls	r0, #1
    d06c:	2000      	movhi	r0, #0
    d06e:	f85d fb08 	ldr.w	pc, [sp], #8
    d072:	bf00      	nop

0000d074 <__aeabi_dcmpgt>:
    d074:	f84d ed08 	str.w	lr, [sp, #-8]!
    d078:	f7ff ffc4 	bl	d004 <__aeabi_cdrcmple>
    d07c:	bf34      	ite	cc
    d07e:	2001      	movcc	r0, #1
    d080:	2000      	movcs	r0, #0
    d082:	f85d fb08 	ldr.w	pc, [sp], #8
    d086:	bf00      	nop

0000d088 <__aeabi_d2uiz>:
    d088:	004a      	lsls	r2, r1, #1
    d08a:	d211      	bcs.n	d0b0 <__aeabi_d2uiz+0x28>
    d08c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d090:	d211      	bcs.n	d0b6 <__aeabi_d2uiz+0x2e>
    d092:	d50d      	bpl.n	d0b0 <__aeabi_d2uiz+0x28>
    d094:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d098:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d09c:	d40e      	bmi.n	d0bc <__aeabi_d2uiz+0x34>
    d09e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d0a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d0a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d0aa:	fa23 f002 	lsr.w	r0, r3, r2
    d0ae:	4770      	bx	lr
    d0b0:	f04f 0000 	mov.w	r0, #0
    d0b4:	4770      	bx	lr
    d0b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d0ba:	d102      	bne.n	d0c2 <__aeabi_d2uiz+0x3a>
    d0bc:	f04f 30ff 	mov.w	r0, #4294967295
    d0c0:	4770      	bx	lr
    d0c2:	f04f 0000 	mov.w	r0, #0
    d0c6:	4770      	bx	lr

0000d0c8 <__aeabi_uldivmod>:
    d0c8:	b94b      	cbnz	r3, d0de <__aeabi_uldivmod+0x16>
    d0ca:	b942      	cbnz	r2, d0de <__aeabi_uldivmod+0x16>
    d0cc:	2900      	cmp	r1, #0
    d0ce:	bf08      	it	eq
    d0d0:	2800      	cmpeq	r0, #0
    d0d2:	d002      	beq.n	d0da <__aeabi_uldivmod+0x12>
    d0d4:	f04f 31ff 	mov.w	r1, #4294967295
    d0d8:	4608      	mov	r0, r1
    d0da:	f000 b83b 	b.w	d154 <__aeabi_idiv0>
    d0de:	b082      	sub	sp, #8
    d0e0:	46ec      	mov	ip, sp
    d0e2:	e92d 5000 	stmdb	sp!, {ip, lr}
    d0e6:	f000 f81d 	bl	d124 <__gnu_uldivmod_helper>
    d0ea:	f8dd e004 	ldr.w	lr, [sp, #4]
    d0ee:	b002      	add	sp, #8
    d0f0:	bc0c      	pop	{r2, r3}
    d0f2:	4770      	bx	lr

0000d0f4 <__gnu_ldivmod_helper>:
    d0f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d0f8:	9e06      	ldr	r6, [sp, #24]
    d0fa:	4614      	mov	r4, r2
    d0fc:	461d      	mov	r5, r3
    d0fe:	4680      	mov	r8, r0
    d100:	4689      	mov	r9, r1
    d102:	f000 f829 	bl	d158 <__divdi3>
    d106:	fb04 f301 	mul.w	r3, r4, r1
    d10a:	fb00 3305 	mla	r3, r0, r5, r3
    d10e:	fba4 4500 	umull	r4, r5, r4, r0
    d112:	441d      	add	r5, r3
    d114:	ebb8 0404 	subs.w	r4, r8, r4
    d118:	eb69 0505 	sbc.w	r5, r9, r5
    d11c:	e9c6 4500 	strd	r4, r5, [r6]
    d120:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0000d124 <__gnu_uldivmod_helper>:
    d124:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d128:	9e06      	ldr	r6, [sp, #24]
    d12a:	4614      	mov	r4, r2
    d12c:	4680      	mov	r8, r0
    d12e:	4689      	mov	r9, r1
    d130:	461d      	mov	r5, r3
    d132:	f000 f95d 	bl	d3f0 <__udivdi3>
    d136:	fb00 f505 	mul.w	r5, r0, r5
    d13a:	fb04 5301 	mla	r3, r4, r1, r5
    d13e:	fba0 4504 	umull	r4, r5, r0, r4
    d142:	441d      	add	r5, r3
    d144:	ebb8 0404 	subs.w	r4, r8, r4
    d148:	eb69 0505 	sbc.w	r5, r9, r5
    d14c:	e9c6 4500 	strd	r4, r5, [r6]
    d150:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0000d154 <__aeabi_idiv0>:
    d154:	4770      	bx	lr
    d156:	bf00      	nop

0000d158 <__divdi3>:
    d158:	2900      	cmp	r1, #0
    d15a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d15e:	f2c0 809f 	blt.w	d2a0 <__divdi3+0x148>
    d162:	2400      	movs	r4, #0
    d164:	2b00      	cmp	r3, #0
    d166:	f2c0 8096 	blt.w	d296 <__divdi3+0x13e>
    d16a:	4615      	mov	r5, r2
    d16c:	4606      	mov	r6, r0
    d16e:	460f      	mov	r7, r1
    d170:	2b00      	cmp	r3, #0
    d172:	d13e      	bne.n	d1f2 <__divdi3+0x9a>
    d174:	428a      	cmp	r2, r1
    d176:	d957      	bls.n	d228 <__divdi3+0xd0>
    d178:	fab2 f382 	clz	r3, r2
    d17c:	b14b      	cbz	r3, d192 <__divdi3+0x3a>
    d17e:	f1c3 0220 	rsb	r2, r3, #32
    d182:	fa01 f703 	lsl.w	r7, r1, r3
    d186:	fa20 f202 	lsr.w	r2, r0, r2
    d18a:	409d      	lsls	r5, r3
    d18c:	4317      	orrs	r7, r2
    d18e:	fa00 f603 	lsl.w	r6, r0, r3
    d192:	0c29      	lsrs	r1, r5, #16
    d194:	fbb7 f2f1 	udiv	r2, r7, r1
    d198:	0c33      	lsrs	r3, r6, #16
    d19a:	fb01 7c12 	mls	ip, r1, r2, r7
    d19e:	b2a8      	uxth	r0, r5
    d1a0:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
    d1a4:	fb00 f302 	mul.w	r3, r0, r2
    d1a8:	42bb      	cmp	r3, r7
    d1aa:	d909      	bls.n	d1c0 <__divdi3+0x68>
    d1ac:	197f      	adds	r7, r7, r5
    d1ae:	f102 3cff 	add.w	ip, r2, #4294967295
    d1b2:	f080 8101 	bcs.w	d3b8 <__divdi3+0x260>
    d1b6:	42bb      	cmp	r3, r7
    d1b8:	f240 80fe 	bls.w	d3b8 <__divdi3+0x260>
    d1bc:	3a02      	subs	r2, #2
    d1be:	442f      	add	r7, r5
    d1c0:	1aff      	subs	r7, r7, r3
    d1c2:	fbb7 f3f1 	udiv	r3, r7, r1
    d1c6:	b2b6      	uxth	r6, r6
    d1c8:	fb01 7113 	mls	r1, r1, r3, r7
    d1cc:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    d1d0:	fb00 f003 	mul.w	r0, r0, r3
    d1d4:	4288      	cmp	r0, r1
    d1d6:	d908      	bls.n	d1ea <__divdi3+0x92>
    d1d8:	1949      	adds	r1, r1, r5
    d1da:	f103 37ff 	add.w	r7, r3, #4294967295
    d1de:	f080 80ed 	bcs.w	d3bc <__divdi3+0x264>
    d1e2:	4288      	cmp	r0, r1
    d1e4:	f240 80ea 	bls.w	d3bc <__divdi3+0x264>
    d1e8:	3b02      	subs	r3, #2
    d1ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d1ee:	2300      	movs	r3, #0
    d1f0:	e003      	b.n	d1fa <__divdi3+0xa2>
    d1f2:	428b      	cmp	r3, r1
    d1f4:	d90a      	bls.n	d20c <__divdi3+0xb4>
    d1f6:	2300      	movs	r3, #0
    d1f8:	461a      	mov	r2, r3
    d1fa:	4610      	mov	r0, r2
    d1fc:	4619      	mov	r1, r3
    d1fe:	b114      	cbz	r4, d206 <__divdi3+0xae>
    d200:	4240      	negs	r0, r0
    d202:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d206:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d20a:	4770      	bx	lr
    d20c:	fab3 f883 	clz	r8, r3
    d210:	f1b8 0f00 	cmp.w	r8, #0
    d214:	f040 8084 	bne.w	d320 <__divdi3+0x1c8>
    d218:	428b      	cmp	r3, r1
    d21a:	d302      	bcc.n	d222 <__divdi3+0xca>
    d21c:	4282      	cmp	r2, r0
    d21e:	f200 80de 	bhi.w	d3de <__divdi3+0x286>
    d222:	2300      	movs	r3, #0
    d224:	2201      	movs	r2, #1
    d226:	e7e8      	b.n	d1fa <__divdi3+0xa2>
    d228:	b912      	cbnz	r2, d230 <__divdi3+0xd8>
    d22a:	2301      	movs	r3, #1
    d22c:	fbb3 f5f2 	udiv	r5, r3, r2
    d230:	fab5 f285 	clz	r2, r5
    d234:	2a00      	cmp	r2, #0
    d236:	d139      	bne.n	d2ac <__divdi3+0x154>
    d238:	1b7f      	subs	r7, r7, r5
    d23a:	0c28      	lsrs	r0, r5, #16
    d23c:	fa1f fc85 	uxth.w	ip, r5
    d240:	2301      	movs	r3, #1
    d242:	fbb7 f1f0 	udiv	r1, r7, r0
    d246:	0c32      	lsrs	r2, r6, #16
    d248:	fb00 7711 	mls	r7, r0, r1, r7
    d24c:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
    d250:	fb0c f201 	mul.w	r2, ip, r1
    d254:	42ba      	cmp	r2, r7
    d256:	d907      	bls.n	d268 <__divdi3+0x110>
    d258:	197f      	adds	r7, r7, r5
    d25a:	f101 38ff 	add.w	r8, r1, #4294967295
    d25e:	d202      	bcs.n	d266 <__divdi3+0x10e>
    d260:	42ba      	cmp	r2, r7
    d262:	f200 80c1 	bhi.w	d3e8 <__divdi3+0x290>
    d266:	4641      	mov	r1, r8
    d268:	1abf      	subs	r7, r7, r2
    d26a:	fbb7 f2f0 	udiv	r2, r7, r0
    d26e:	b2b6      	uxth	r6, r6
    d270:	fb00 7012 	mls	r0, r0, r2, r7
    d274:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    d278:	fb0c fc02 	mul.w	ip, ip, r2
    d27c:	4584      	cmp	ip, r0
    d27e:	d907      	bls.n	d290 <__divdi3+0x138>
    d280:	1940      	adds	r0, r0, r5
    d282:	f102 37ff 	add.w	r7, r2, #4294967295
    d286:	d202      	bcs.n	d28e <__divdi3+0x136>
    d288:	4584      	cmp	ip, r0
    d28a:	f200 80ab 	bhi.w	d3e4 <__divdi3+0x28c>
    d28e:	463a      	mov	r2, r7
    d290:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    d294:	e7b1      	b.n	d1fa <__divdi3+0xa2>
    d296:	43e4      	mvns	r4, r4
    d298:	4252      	negs	r2, r2
    d29a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d29e:	e764      	b.n	d16a <__divdi3+0x12>
    d2a0:	4240      	negs	r0, r0
    d2a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d2a6:	f04f 34ff 	mov.w	r4, #4294967295
    d2aa:	e75b      	b.n	d164 <__divdi3+0xc>
    d2ac:	4095      	lsls	r5, r2
    d2ae:	f1c2 0320 	rsb	r3, r2, #32
    d2b2:	fa27 f103 	lsr.w	r1, r7, r3
    d2b6:	0c28      	lsrs	r0, r5, #16
    d2b8:	fa26 f303 	lsr.w	r3, r6, r3
    d2bc:	4097      	lsls	r7, r2
    d2be:	fbb1 f8f0 	udiv	r8, r1, r0
    d2c2:	431f      	orrs	r7, r3
    d2c4:	0c3b      	lsrs	r3, r7, #16
    d2c6:	fb00 1118 	mls	r1, r0, r8, r1
    d2ca:	fa1f fc85 	uxth.w	ip, r5
    d2ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    d2d2:	fb0c f308 	mul.w	r3, ip, r8
    d2d6:	428b      	cmp	r3, r1
    d2d8:	fa06 f602 	lsl.w	r6, r6, r2
    d2dc:	d908      	bls.n	d2f0 <__divdi3+0x198>
    d2de:	1949      	adds	r1, r1, r5
    d2e0:	f108 32ff 	add.w	r2, r8, #4294967295
    d2e4:	d279      	bcs.n	d3da <__divdi3+0x282>
    d2e6:	428b      	cmp	r3, r1
    d2e8:	d977      	bls.n	d3da <__divdi3+0x282>
    d2ea:	f1a8 0802 	sub.w	r8, r8, #2
    d2ee:	4429      	add	r1, r5
    d2f0:	1ac9      	subs	r1, r1, r3
    d2f2:	fbb1 f3f0 	udiv	r3, r1, r0
    d2f6:	b2bf      	uxth	r7, r7
    d2f8:	fb00 1113 	mls	r1, r0, r3, r1
    d2fc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    d300:	fb0c f203 	mul.w	r2, ip, r3
    d304:	42ba      	cmp	r2, r7
    d306:	d907      	bls.n	d318 <__divdi3+0x1c0>
    d308:	197f      	adds	r7, r7, r5
    d30a:	f103 31ff 	add.w	r1, r3, #4294967295
    d30e:	d260      	bcs.n	d3d2 <__divdi3+0x27a>
    d310:	42ba      	cmp	r2, r7
    d312:	d95e      	bls.n	d3d2 <__divdi3+0x27a>
    d314:	3b02      	subs	r3, #2
    d316:	442f      	add	r7, r5
    d318:	1abf      	subs	r7, r7, r2
    d31a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    d31e:	e790      	b.n	d242 <__divdi3+0xea>
    d320:	f1c8 0220 	rsb	r2, r8, #32
    d324:	fa03 fc08 	lsl.w	ip, r3, r8
    d328:	fa25 f302 	lsr.w	r3, r5, r2
    d32c:	ea43 0c0c 	orr.w	ip, r3, ip
    d330:	ea4f 491c 	mov.w	r9, ip, lsr #16
    d334:	fa21 f302 	lsr.w	r3, r1, r2
    d338:	fa01 f708 	lsl.w	r7, r1, r8
    d33c:	fa20 f202 	lsr.w	r2, r0, r2
    d340:	fbb3 f1f9 	udiv	r1, r3, r9
    d344:	4317      	orrs	r7, r2
    d346:	fb09 3311 	mls	r3, r9, r1, r3
    d34a:	0c3a      	lsrs	r2, r7, #16
    d34c:	fa1f fb8c 	uxth.w	fp, ip
    d350:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    d354:	fb0b fa01 	mul.w	sl, fp, r1
    d358:	459a      	cmp	sl, r3
    d35a:	fa05 f008 	lsl.w	r0, r5, r8
    d35e:	d908      	bls.n	d372 <__divdi3+0x21a>
    d360:	eb13 030c 	adds.w	r3, r3, ip
    d364:	f101 32ff 	add.w	r2, r1, #4294967295
    d368:	d235      	bcs.n	d3d6 <__divdi3+0x27e>
    d36a:	459a      	cmp	sl, r3
    d36c:	d933      	bls.n	d3d6 <__divdi3+0x27e>
    d36e:	3902      	subs	r1, #2
    d370:	4463      	add	r3, ip
    d372:	ebca 0303 	rsb	r3, sl, r3
    d376:	fbb3 f2f9 	udiv	r2, r3, r9
    d37a:	fb09 3312 	mls	r3, r9, r2, r3
    d37e:	b2bf      	uxth	r7, r7
    d380:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    d384:	fb0b f902 	mul.w	r9, fp, r2
    d388:	45b9      	cmp	r9, r7
    d38a:	d908      	bls.n	d39e <__divdi3+0x246>
    d38c:	eb17 070c 	adds.w	r7, r7, ip
    d390:	f102 33ff 	add.w	r3, r2, #4294967295
    d394:	d21b      	bcs.n	d3ce <__divdi3+0x276>
    d396:	45b9      	cmp	r9, r7
    d398:	d919      	bls.n	d3ce <__divdi3+0x276>
    d39a:	3a02      	subs	r2, #2
    d39c:	4467      	add	r7, ip
    d39e:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
    d3a2:	fba5 0100 	umull	r0, r1, r5, r0
    d3a6:	ebc9 0707 	rsb	r7, r9, r7
    d3aa:	428f      	cmp	r7, r1
    d3ac:	f04f 0300 	mov.w	r3, #0
    d3b0:	d30a      	bcc.n	d3c8 <__divdi3+0x270>
    d3b2:	d005      	beq.n	d3c0 <__divdi3+0x268>
    d3b4:	462a      	mov	r2, r5
    d3b6:	e720      	b.n	d1fa <__divdi3+0xa2>
    d3b8:	4662      	mov	r2, ip
    d3ba:	e701      	b.n	d1c0 <__divdi3+0x68>
    d3bc:	463b      	mov	r3, r7
    d3be:	e714      	b.n	d1ea <__divdi3+0x92>
    d3c0:	fa06 f608 	lsl.w	r6, r6, r8
    d3c4:	4286      	cmp	r6, r0
    d3c6:	d2f5      	bcs.n	d3b4 <__divdi3+0x25c>
    d3c8:	1e6a      	subs	r2, r5, #1
    d3ca:	2300      	movs	r3, #0
    d3cc:	e715      	b.n	d1fa <__divdi3+0xa2>
    d3ce:	461a      	mov	r2, r3
    d3d0:	e7e5      	b.n	d39e <__divdi3+0x246>
    d3d2:	460b      	mov	r3, r1
    d3d4:	e7a0      	b.n	d318 <__divdi3+0x1c0>
    d3d6:	4611      	mov	r1, r2
    d3d8:	e7cb      	b.n	d372 <__divdi3+0x21a>
    d3da:	4690      	mov	r8, r2
    d3dc:	e788      	b.n	d2f0 <__divdi3+0x198>
    d3de:	4643      	mov	r3, r8
    d3e0:	4642      	mov	r2, r8
    d3e2:	e70a      	b.n	d1fa <__divdi3+0xa2>
    d3e4:	3a02      	subs	r2, #2
    d3e6:	e753      	b.n	d290 <__divdi3+0x138>
    d3e8:	3902      	subs	r1, #2
    d3ea:	442f      	add	r7, r5
    d3ec:	e73c      	b.n	d268 <__divdi3+0x110>
    d3ee:	bf00      	nop

0000d3f0 <__udivdi3>:
    d3f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d3f4:	4614      	mov	r4, r2
    d3f6:	4605      	mov	r5, r0
    d3f8:	460e      	mov	r6, r1
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d143      	bne.n	d486 <__udivdi3+0x96>
    d3fe:	428a      	cmp	r2, r1
    d400:	d953      	bls.n	d4aa <__udivdi3+0xba>
    d402:	fab2 f782 	clz	r7, r2
    d406:	b157      	cbz	r7, d41e <__udivdi3+0x2e>
    d408:	f1c7 0620 	rsb	r6, r7, #32
    d40c:	fa20 f606 	lsr.w	r6, r0, r6
    d410:	fa01 f307 	lsl.w	r3, r1, r7
    d414:	fa02 f407 	lsl.w	r4, r2, r7
    d418:	431e      	orrs	r6, r3
    d41a:	fa00 f507 	lsl.w	r5, r0, r7
    d41e:	0c21      	lsrs	r1, r4, #16
    d420:	fbb6 f2f1 	udiv	r2, r6, r1
    d424:	0c2b      	lsrs	r3, r5, #16
    d426:	fb01 6712 	mls	r7, r1, r2, r6
    d42a:	b2a0      	uxth	r0, r4
    d42c:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
    d430:	fb00 f302 	mul.w	r3, r0, r2
    d434:	42b3      	cmp	r3, r6
    d436:	d909      	bls.n	d44c <__udivdi3+0x5c>
    d438:	1936      	adds	r6, r6, r4
    d43a:	f102 37ff 	add.w	r7, r2, #4294967295
    d43e:	f080 80f6 	bcs.w	d62e <__udivdi3+0x23e>
    d442:	42b3      	cmp	r3, r6
    d444:	f240 80f3 	bls.w	d62e <__udivdi3+0x23e>
    d448:	3a02      	subs	r2, #2
    d44a:	4426      	add	r6, r4
    d44c:	1af6      	subs	r6, r6, r3
    d44e:	fbb6 f3f1 	udiv	r3, r6, r1
    d452:	b2ad      	uxth	r5, r5
    d454:	fb01 6113 	mls	r1, r1, r3, r6
    d458:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    d45c:	fb00 f003 	mul.w	r0, r0, r3
    d460:	4288      	cmp	r0, r1
    d462:	d908      	bls.n	d476 <__udivdi3+0x86>
    d464:	1909      	adds	r1, r1, r4
    d466:	f103 36ff 	add.w	r6, r3, #4294967295
    d46a:	f080 80e2 	bcs.w	d632 <__udivdi3+0x242>
    d46e:	4288      	cmp	r0, r1
    d470:	f240 80df 	bls.w	d632 <__udivdi3+0x242>
    d474:	3b02      	subs	r3, #2
    d476:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d47a:	2300      	movs	r3, #0
    d47c:	4610      	mov	r0, r2
    d47e:	4619      	mov	r1, r3
    d480:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d484:	4770      	bx	lr
    d486:	428b      	cmp	r3, r1
    d488:	d84a      	bhi.n	d520 <__udivdi3+0x130>
    d48a:	fab3 f683 	clz	r6, r3
    d48e:	2e00      	cmp	r6, #0
    d490:	d14d      	bne.n	d52e <__udivdi3+0x13e>
    d492:	428b      	cmp	r3, r1
    d494:	d302      	bcc.n	d49c <__udivdi3+0xac>
    d496:	4282      	cmp	r2, r0
    d498:	f200 80d6 	bhi.w	d648 <__udivdi3+0x258>
    d49c:	2300      	movs	r3, #0
    d49e:	2201      	movs	r2, #1
    d4a0:	4610      	mov	r0, r2
    d4a2:	4619      	mov	r1, r3
    d4a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d4a8:	4770      	bx	lr
    d4aa:	b912      	cbnz	r2, d4b2 <__udivdi3+0xc2>
    d4ac:	2401      	movs	r4, #1
    d4ae:	fbb4 f4f2 	udiv	r4, r4, r2
    d4b2:	fab4 f284 	clz	r2, r4
    d4b6:	2a00      	cmp	r2, #0
    d4b8:	d17c      	bne.n	d5b4 <__udivdi3+0x1c4>
    d4ba:	1b09      	subs	r1, r1, r4
    d4bc:	0c26      	lsrs	r6, r4, #16
    d4be:	b2a7      	uxth	r7, r4
    d4c0:	2301      	movs	r3, #1
    d4c2:	fbb1 f0f6 	udiv	r0, r1, r6
    d4c6:	0c2a      	lsrs	r2, r5, #16
    d4c8:	fb06 1110 	mls	r1, r6, r0, r1
    d4cc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    d4d0:	fb07 f200 	mul.w	r2, r7, r0
    d4d4:	428a      	cmp	r2, r1
    d4d6:	d907      	bls.n	d4e8 <__udivdi3+0xf8>
    d4d8:	1909      	adds	r1, r1, r4
    d4da:	f100 3cff 	add.w	ip, r0, #4294967295
    d4de:	d202      	bcs.n	d4e6 <__udivdi3+0xf6>
    d4e0:	428a      	cmp	r2, r1
    d4e2:	f200 80c3 	bhi.w	d66c <__udivdi3+0x27c>
    d4e6:	4660      	mov	r0, ip
    d4e8:	1a89      	subs	r1, r1, r2
    d4ea:	fbb1 f2f6 	udiv	r2, r1, r6
    d4ee:	b2ad      	uxth	r5, r5
    d4f0:	fb06 1112 	mls	r1, r6, r2, r1
    d4f4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    d4f8:	fb07 f702 	mul.w	r7, r7, r2
    d4fc:	42af      	cmp	r7, r5
    d4fe:	d908      	bls.n	d512 <__udivdi3+0x122>
    d500:	192c      	adds	r4, r5, r4
    d502:	f102 31ff 	add.w	r1, r2, #4294967295
    d506:	f080 8096 	bcs.w	d636 <__udivdi3+0x246>
    d50a:	42a7      	cmp	r7, r4
    d50c:	f240 8093 	bls.w	d636 <__udivdi3+0x246>
    d510:	3a02      	subs	r2, #2
    d512:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    d516:	4610      	mov	r0, r2
    d518:	4619      	mov	r1, r3
    d51a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d51e:	4770      	bx	lr
    d520:	2300      	movs	r3, #0
    d522:	461a      	mov	r2, r3
    d524:	4610      	mov	r0, r2
    d526:	4619      	mov	r1, r3
    d528:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    d52c:	4770      	bx	lr
    d52e:	f1c6 0520 	rsb	r5, r6, #32
    d532:	fa22 f405 	lsr.w	r4, r2, r5
    d536:	40b3      	lsls	r3, r6
    d538:	431c      	orrs	r4, r3
    d53a:	ea4f 4814 	mov.w	r8, r4, lsr #16
    d53e:	fa21 f305 	lsr.w	r3, r1, r5
    d542:	fa01 f706 	lsl.w	r7, r1, r6
    d546:	fa20 f505 	lsr.w	r5, r0, r5
    d54a:	fbb3 fcf8 	udiv	ip, r3, r8
    d54e:	432f      	orrs	r7, r5
    d550:	fb08 331c 	mls	r3, r8, ip, r3
    d554:	0c3d      	lsrs	r5, r7, #16
    d556:	fa1f fa84 	uxth.w	sl, r4
    d55a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    d55e:	fb0a f90c 	mul.w	r9, sl, ip
    d562:	4599      	cmp	r9, r3
    d564:	fa02 fb06 	lsl.w	fp, r2, r6
    d568:	d904      	bls.n	d574 <__udivdi3+0x184>
    d56a:	191b      	adds	r3, r3, r4
    d56c:	f10c 32ff 	add.w	r2, ip, #4294967295
    d570:	d36d      	bcc.n	d64e <__udivdi3+0x25e>
    d572:	4694      	mov	ip, r2
    d574:	ebc9 0303 	rsb	r3, r9, r3
    d578:	fbb3 f5f8 	udiv	r5, r3, r8
    d57c:	fb08 3315 	mls	r3, r8, r5, r3
    d580:	b2bf      	uxth	r7, r7
    d582:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    d586:	fb0a f805 	mul.w	r8, sl, r5
    d58a:	45b8      	cmp	r8, r7
    d58c:	d904      	bls.n	d598 <__udivdi3+0x1a8>
    d58e:	193f      	adds	r7, r7, r4
    d590:	f105 33ff 	add.w	r3, r5, #4294967295
    d594:	d361      	bcc.n	d65a <__udivdi3+0x26a>
    d596:	461d      	mov	r5, r3
    d598:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
    d59c:	fbac 230b 	umull	r2, r3, ip, fp
    d5a0:	ebc8 0707 	rsb	r7, r8, r7
    d5a4:	429f      	cmp	r7, r3
    d5a6:	f04f 0500 	mov.w	r5, #0
    d5aa:	d349      	bcc.n	d640 <__udivdi3+0x250>
    d5ac:	d045      	beq.n	d63a <__udivdi3+0x24a>
    d5ae:	4662      	mov	r2, ip
    d5b0:	462b      	mov	r3, r5
    d5b2:	e763      	b.n	d47c <__udivdi3+0x8c>
    d5b4:	4094      	lsls	r4, r2
    d5b6:	f1c2 0320 	rsb	r3, r2, #32
    d5ba:	fa21 fc03 	lsr.w	ip, r1, r3
    d5be:	0c26      	lsrs	r6, r4, #16
    d5c0:	fa20 f303 	lsr.w	r3, r0, r3
    d5c4:	fa01 f502 	lsl.w	r5, r1, r2
    d5c8:	fbbc f8f6 	udiv	r8, ip, r6
    d5cc:	ea43 0105 	orr.w	r1, r3, r5
    d5d0:	0c0b      	lsrs	r3, r1, #16
    d5d2:	fb06 cc18 	mls	ip, r6, r8, ip
    d5d6:	b2a7      	uxth	r7, r4
    d5d8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    d5dc:	fb07 f308 	mul.w	r3, r7, r8
    d5e0:	4563      	cmp	r3, ip
    d5e2:	fa00 f502 	lsl.w	r5, r0, r2
    d5e6:	d909      	bls.n	d5fc <__udivdi3+0x20c>
    d5e8:	eb1c 0c04 	adds.w	ip, ip, r4
    d5ec:	f108 32ff 	add.w	r2, r8, #4294967295
    d5f0:	d23a      	bcs.n	d668 <__udivdi3+0x278>
    d5f2:	4563      	cmp	r3, ip
    d5f4:	d938      	bls.n	d668 <__udivdi3+0x278>
    d5f6:	f1a8 0802 	sub.w	r8, r8, #2
    d5fa:	44a4      	add	ip, r4
    d5fc:	ebc3 0c0c 	rsb	ip, r3, ip
    d600:	fbbc f3f6 	udiv	r3, ip, r6
    d604:	b289      	uxth	r1, r1
    d606:	fb06 cc13 	mls	ip, r6, r3, ip
    d60a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    d60e:	fb07 f203 	mul.w	r2, r7, r3
    d612:	428a      	cmp	r2, r1
    d614:	d907      	bls.n	d626 <__udivdi3+0x236>
    d616:	1909      	adds	r1, r1, r4
    d618:	f103 30ff 	add.w	r0, r3, #4294967295
    d61c:	d222      	bcs.n	d664 <__udivdi3+0x274>
    d61e:	428a      	cmp	r2, r1
    d620:	d920      	bls.n	d664 <__udivdi3+0x274>
    d622:	3b02      	subs	r3, #2
    d624:	4421      	add	r1, r4
    d626:	1a89      	subs	r1, r1, r2
    d628:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    d62c:	e749      	b.n	d4c2 <__udivdi3+0xd2>
    d62e:	463a      	mov	r2, r7
    d630:	e70c      	b.n	d44c <__udivdi3+0x5c>
    d632:	4633      	mov	r3, r6
    d634:	e71f      	b.n	d476 <__udivdi3+0x86>
    d636:	460a      	mov	r2, r1
    d638:	e76b      	b.n	d512 <__udivdi3+0x122>
    d63a:	40b0      	lsls	r0, r6
    d63c:	4290      	cmp	r0, r2
    d63e:	d2b6      	bcs.n	d5ae <__udivdi3+0x1be>
    d640:	f10c 32ff 	add.w	r2, ip, #4294967295
    d644:	2300      	movs	r3, #0
    d646:	e719      	b.n	d47c <__udivdi3+0x8c>
    d648:	4633      	mov	r3, r6
    d64a:	4632      	mov	r2, r6
    d64c:	e716      	b.n	d47c <__udivdi3+0x8c>
    d64e:	4599      	cmp	r9, r3
    d650:	d98f      	bls.n	d572 <__udivdi3+0x182>
    d652:	f1ac 0c02 	sub.w	ip, ip, #2
    d656:	4423      	add	r3, r4
    d658:	e78c      	b.n	d574 <__udivdi3+0x184>
    d65a:	45b8      	cmp	r8, r7
    d65c:	d99b      	bls.n	d596 <__udivdi3+0x1a6>
    d65e:	3d02      	subs	r5, #2
    d660:	4427      	add	r7, r4
    d662:	e799      	b.n	d598 <__udivdi3+0x1a8>
    d664:	4603      	mov	r3, r0
    d666:	e7de      	b.n	d626 <__udivdi3+0x236>
    d668:	4690      	mov	r8, r2
    d66a:	e7c7      	b.n	d5fc <__udivdi3+0x20c>
    d66c:	3802      	subs	r0, #2
    d66e:	4421      	add	r1, r4
    d670:	e73a      	b.n	d4e8 <__udivdi3+0xf8>
    d672:	bf00      	nop

0000d674 <atexit>:
    d674:	4601      	mov	r1, r0
    d676:	2000      	movs	r0, #0
    d678:	4602      	mov	r2, r0
    d67a:	4603      	mov	r3, r0
    d67c:	f001 bfce 	b.w	f61c <__register_exitproc>

0000d680 <__errno>:
    d680:	4b01      	ldr	r3, [pc, #4]	; (d688 <__errno+0x8>)
    d682:	6818      	ldr	r0, [r3, #0]
    d684:	4770      	bx	lr
    d686:	bf00      	nop
    d688:	200004c0 	.word	0x200004c0

0000d68c <__libc_fini_array>:
    d68c:	b538      	push	{r3, r4, r5, lr}
    d68e:	4d08      	ldr	r5, [pc, #32]	; (d6b0 <__libc_fini_array+0x24>)
    d690:	4c08      	ldr	r4, [pc, #32]	; (d6b4 <__libc_fini_array+0x28>)
    d692:	1b64      	subs	r4, r4, r5
    d694:	10a4      	asrs	r4, r4, #2
    d696:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    d69a:	b124      	cbz	r4, d6a6 <__libc_fini_array+0x1a>
    d69c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    d6a0:	3c01      	subs	r4, #1
    d6a2:	4798      	blx	r3
    d6a4:	e7f9      	b.n	d69a <__libc_fini_array+0xe>
    d6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d6aa:	f005 bd77 	b.w	1319c <_fini>
    d6ae:	bf00      	nop
    d6b0:	000131a8 	.word	0x000131a8
    d6b4:	000131ac 	.word	0x000131ac

0000d6b8 <__libc_init_array>:
    d6b8:	b570      	push	{r4, r5, r6, lr}
    d6ba:	4b0e      	ldr	r3, [pc, #56]	; (d6f4 <__libc_init_array+0x3c>)
    d6bc:	4d0e      	ldr	r5, [pc, #56]	; (d6f8 <__libc_init_array+0x40>)
    d6be:	1aed      	subs	r5, r5, r3
    d6c0:	10ad      	asrs	r5, r5, #2
    d6c2:	2400      	movs	r4, #0
    d6c4:	461e      	mov	r6, r3
    d6c6:	42ac      	cmp	r4, r5
    d6c8:	d004      	beq.n	d6d4 <__libc_init_array+0x1c>
    d6ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    d6ce:	4790      	blx	r2
    d6d0:	3401      	adds	r4, #1
    d6d2:	e7f8      	b.n	d6c6 <__libc_init_array+0xe>
    d6d4:	f005 fd58 	bl	13188 <_init>
    d6d8:	4d08      	ldr	r5, [pc, #32]	; (d6fc <__libc_init_array+0x44>)
    d6da:	4b09      	ldr	r3, [pc, #36]	; (d700 <__libc_init_array+0x48>)
    d6dc:	1aed      	subs	r5, r5, r3
    d6de:	10ad      	asrs	r5, r5, #2
    d6e0:	2400      	movs	r4, #0
    d6e2:	461e      	mov	r6, r3
    d6e4:	42ac      	cmp	r4, r5
    d6e6:	d004      	beq.n	d6f2 <__libc_init_array+0x3a>
    d6e8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    d6ec:	4790      	blx	r2
    d6ee:	3401      	adds	r4, #1
    d6f0:	e7f8      	b.n	d6e4 <__libc_init_array+0x2c>
    d6f2:	bd70      	pop	{r4, r5, r6, pc}
    d6f4:	00013194 	.word	0x00013194
    d6f8:	00013194 	.word	0x00013194
    d6fc:	0001319c 	.word	0x0001319c
    d700:	00013194 	.word	0x00013194

0000d704 <iprintf>:
    d704:	b40f      	push	{r0, r1, r2, r3}
    d706:	b507      	push	{r0, r1, r2, lr}
    d708:	4906      	ldr	r1, [pc, #24]	; (d724 <iprintf+0x20>)
    d70a:	ab04      	add	r3, sp, #16
    d70c:	6808      	ldr	r0, [r1, #0]
    d70e:	f853 2b04 	ldr.w	r2, [r3], #4
    d712:	6881      	ldr	r1, [r0, #8]
    d714:	9301      	str	r3, [sp, #4]
    d716:	f001 fad2 	bl	ecbe <_vfiprintf_r>
    d71a:	b003      	add	sp, #12
    d71c:	f85d eb04 	ldr.w	lr, [sp], #4
    d720:	b004      	add	sp, #16
    d722:	4770      	bx	lr
    d724:	200004c0 	.word	0x200004c0

0000d728 <_iprintf_r>:
    d728:	b40e      	push	{r1, r2, r3}
    d72a:	b503      	push	{r0, r1, lr}
    d72c:	ab03      	add	r3, sp, #12
    d72e:	6881      	ldr	r1, [r0, #8]
    d730:	f853 2b04 	ldr.w	r2, [r3], #4
    d734:	9301      	str	r3, [sp, #4]
    d736:	f001 fac2 	bl	ecbe <_vfiprintf_r>
    d73a:	b002      	add	sp, #8
    d73c:	f85d eb04 	ldr.w	lr, [sp], #4
    d740:	b003      	add	sp, #12
    d742:	4770      	bx	lr

0000d744 <malloc>:
    d744:	4b02      	ldr	r3, [pc, #8]	; (d750 <malloc+0xc>)
    d746:	4601      	mov	r1, r0
    d748:	6818      	ldr	r0, [r3, #0]
    d74a:	f000 b80b 	b.w	d764 <_malloc_r>
    d74e:	bf00      	nop
    d750:	200004c0 	.word	0x200004c0

0000d754 <free>:
    d754:	4b02      	ldr	r3, [pc, #8]	; (d760 <free+0xc>)
    d756:	4601      	mov	r1, r0
    d758:	6818      	ldr	r0, [r3, #0]
    d75a:	f003 b84b 	b.w	107f4 <_free_r>
    d75e:	bf00      	nop
    d760:	200004c0 	.word	0x200004c0

0000d764 <_malloc_r>:
    d764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d768:	f101 040b 	add.w	r4, r1, #11
    d76c:	2c16      	cmp	r4, #22
    d76e:	4607      	mov	r7, r0
    d770:	d903      	bls.n	d77a <_malloc_r+0x16>
    d772:	f034 0407 	bics.w	r4, r4, #7
    d776:	d501      	bpl.n	d77c <_malloc_r+0x18>
    d778:	e002      	b.n	d780 <_malloc_r+0x1c>
    d77a:	2410      	movs	r4, #16
    d77c:	428c      	cmp	r4, r1
    d77e:	d202      	bcs.n	d786 <_malloc_r+0x22>
    d780:	230c      	movs	r3, #12
    d782:	603b      	str	r3, [r7, #0]
    d784:	e1e0      	b.n	db48 <_malloc_r+0x3e4>
    d786:	4638      	mov	r0, r7
    d788:	f000 f9fe 	bl	db88 <__malloc_lock>
    d78c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    d790:	4da4      	ldr	r5, [pc, #656]	; (da24 <_malloc_r+0x2c0>)
    d792:	d214      	bcs.n	d7be <_malloc_r+0x5a>
    d794:	08e2      	lsrs	r2, r4, #3
    d796:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    d79a:	68de      	ldr	r6, [r3, #12]
    d79c:	429e      	cmp	r6, r3
    d79e:	d106      	bne.n	d7ae <_malloc_r+0x4a>
    d7a0:	f106 0308 	add.w	r3, r6, #8
    d7a4:	6976      	ldr	r6, [r6, #20]
    d7a6:	429e      	cmp	r6, r3
    d7a8:	bf08      	it	eq
    d7aa:	3202      	addeq	r2, #2
    d7ac:	d043      	beq.n	d836 <_malloc_r+0xd2>
    d7ae:	6873      	ldr	r3, [r6, #4]
    d7b0:	68f2      	ldr	r2, [r6, #12]
    d7b2:	68b1      	ldr	r1, [r6, #8]
    d7b4:	f023 0303 	bic.w	r3, r3, #3
    d7b8:	60ca      	str	r2, [r1, #12]
    d7ba:	6091      	str	r1, [r2, #8]
    d7bc:	e05d      	b.n	d87a <_malloc_r+0x116>
    d7be:	0a62      	lsrs	r2, r4, #9
    d7c0:	d01a      	beq.n	d7f8 <_malloc_r+0x94>
    d7c2:	2a04      	cmp	r2, #4
    d7c4:	d802      	bhi.n	d7cc <_malloc_r+0x68>
    d7c6:	09a2      	lsrs	r2, r4, #6
    d7c8:	3238      	adds	r2, #56	; 0x38
    d7ca:	e018      	b.n	d7fe <_malloc_r+0x9a>
    d7cc:	2a14      	cmp	r2, #20
    d7ce:	d801      	bhi.n	d7d4 <_malloc_r+0x70>
    d7d0:	325b      	adds	r2, #91	; 0x5b
    d7d2:	e014      	b.n	d7fe <_malloc_r+0x9a>
    d7d4:	2a54      	cmp	r2, #84	; 0x54
    d7d6:	d802      	bhi.n	d7de <_malloc_r+0x7a>
    d7d8:	0b22      	lsrs	r2, r4, #12
    d7da:	326e      	adds	r2, #110	; 0x6e
    d7dc:	e00f      	b.n	d7fe <_malloc_r+0x9a>
    d7de:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    d7e2:	d802      	bhi.n	d7ea <_malloc_r+0x86>
    d7e4:	0be2      	lsrs	r2, r4, #15
    d7e6:	3277      	adds	r2, #119	; 0x77
    d7e8:	e009      	b.n	d7fe <_malloc_r+0x9a>
    d7ea:	f240 5354 	movw	r3, #1364	; 0x554
    d7ee:	429a      	cmp	r2, r3
    d7f0:	d804      	bhi.n	d7fc <_malloc_r+0x98>
    d7f2:	0ca2      	lsrs	r2, r4, #18
    d7f4:	327c      	adds	r2, #124	; 0x7c
    d7f6:	e002      	b.n	d7fe <_malloc_r+0x9a>
    d7f8:	223f      	movs	r2, #63	; 0x3f
    d7fa:	e000      	b.n	d7fe <_malloc_r+0x9a>
    d7fc:	227e      	movs	r2, #126	; 0x7e
    d7fe:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    d802:	68de      	ldr	r6, [r3, #12]
    d804:	429e      	cmp	r6, r3
    d806:	d015      	beq.n	d834 <_malloc_r+0xd0>
    d808:	6871      	ldr	r1, [r6, #4]
    d80a:	f021 0103 	bic.w	r1, r1, #3
    d80e:	1b08      	subs	r0, r1, r4
    d810:	280f      	cmp	r0, #15
    d812:	dd01      	ble.n	d818 <_malloc_r+0xb4>
    d814:	3a01      	subs	r2, #1
    d816:	e00d      	b.n	d834 <_malloc_r+0xd0>
    d818:	2800      	cmp	r0, #0
    d81a:	db09      	blt.n	d830 <_malloc_r+0xcc>
    d81c:	68f3      	ldr	r3, [r6, #12]
    d81e:	68b2      	ldr	r2, [r6, #8]
    d820:	60d3      	str	r3, [r2, #12]
    d822:	609a      	str	r2, [r3, #8]
    d824:	1873      	adds	r3, r6, r1
    d826:	685a      	ldr	r2, [r3, #4]
    d828:	f042 0201 	orr.w	r2, r2, #1
    d82c:	605a      	str	r2, [r3, #4]
    d82e:	e196      	b.n	db5e <_malloc_r+0x3fa>
    d830:	68f6      	ldr	r6, [r6, #12]
    d832:	e7e7      	b.n	d804 <_malloc_r+0xa0>
    d834:	3201      	adds	r2, #1
    d836:	497b      	ldr	r1, [pc, #492]	; (da24 <_malloc_r+0x2c0>)
    d838:	692e      	ldr	r6, [r5, #16]
    d83a:	f101 0008 	add.w	r0, r1, #8
    d83e:	4286      	cmp	r6, r0
    d840:	4686      	mov	lr, r0
    d842:	d06d      	beq.n	d920 <_malloc_r+0x1bc>
    d844:	6873      	ldr	r3, [r6, #4]
    d846:	f023 0303 	bic.w	r3, r3, #3
    d84a:	ebc4 0c03 	rsb	ip, r4, r3
    d84e:	f1bc 0f0f 	cmp.w	ip, #15
    d852:	dd0d      	ble.n	d870 <_malloc_r+0x10c>
    d854:	1933      	adds	r3, r6, r4
    d856:	f04c 0201 	orr.w	r2, ip, #1
    d85a:	f044 0401 	orr.w	r4, r4, #1
    d85e:	6074      	str	r4, [r6, #4]
    d860:	614b      	str	r3, [r1, #20]
    d862:	610b      	str	r3, [r1, #16]
    d864:	60d8      	str	r0, [r3, #12]
    d866:	6098      	str	r0, [r3, #8]
    d868:	605a      	str	r2, [r3, #4]
    d86a:	f843 c00c 	str.w	ip, [r3, ip]
    d86e:	e176      	b.n	db5e <_malloc_r+0x3fa>
    d870:	f1bc 0f00 	cmp.w	ip, #0
    d874:	6148      	str	r0, [r1, #20]
    d876:	6108      	str	r0, [r1, #16]
    d878:	db01      	blt.n	d87e <_malloc_r+0x11a>
    d87a:	4433      	add	r3, r6
    d87c:	e7d3      	b.n	d826 <_malloc_r+0xc2>
    d87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d882:	d211      	bcs.n	d8a8 <_malloc_r+0x144>
    d884:	08db      	lsrs	r3, r3, #3
    d886:	1098      	asrs	r0, r3, #2
    d888:	f04f 0c01 	mov.w	ip, #1
    d88c:	fa0c fc00 	lsl.w	ip, ip, r0
    d890:	6848      	ldr	r0, [r1, #4]
    d892:	ea4c 0000 	orr.w	r0, ip, r0
    d896:	6048      	str	r0, [r1, #4]
    d898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d89c:	688b      	ldr	r3, [r1, #8]
    d89e:	60b3      	str	r3, [r6, #8]
    d8a0:	60f1      	str	r1, [r6, #12]
    d8a2:	608e      	str	r6, [r1, #8]
    d8a4:	60de      	str	r6, [r3, #12]
    d8a6:	e03b      	b.n	d920 <_malloc_r+0x1bc>
    d8a8:	0a58      	lsrs	r0, r3, #9
    d8aa:	2804      	cmp	r0, #4
    d8ac:	d802      	bhi.n	d8b4 <_malloc_r+0x150>
    d8ae:	0998      	lsrs	r0, r3, #6
    d8b0:	3038      	adds	r0, #56	; 0x38
    d8b2:	e015      	b.n	d8e0 <_malloc_r+0x17c>
    d8b4:	2814      	cmp	r0, #20
    d8b6:	d801      	bhi.n	d8bc <_malloc_r+0x158>
    d8b8:	305b      	adds	r0, #91	; 0x5b
    d8ba:	e011      	b.n	d8e0 <_malloc_r+0x17c>
    d8bc:	2854      	cmp	r0, #84	; 0x54
    d8be:	d802      	bhi.n	d8c6 <_malloc_r+0x162>
    d8c0:	0b18      	lsrs	r0, r3, #12
    d8c2:	306e      	adds	r0, #110	; 0x6e
    d8c4:	e00c      	b.n	d8e0 <_malloc_r+0x17c>
    d8c6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    d8ca:	d802      	bhi.n	d8d2 <_malloc_r+0x16e>
    d8cc:	0bd8      	lsrs	r0, r3, #15
    d8ce:	3077      	adds	r0, #119	; 0x77
    d8d0:	e006      	b.n	d8e0 <_malloc_r+0x17c>
    d8d2:	f240 5154 	movw	r1, #1364	; 0x554
    d8d6:	4288      	cmp	r0, r1
    d8d8:	bf9a      	itte	ls
    d8da:	0c98      	lsrls	r0, r3, #18
    d8dc:	307c      	addls	r0, #124	; 0x7c
    d8de:	207e      	movhi	r0, #126	; 0x7e
    d8e0:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
    d8e4:	f8df 813c 	ldr.w	r8, [pc, #316]	; da24 <_malloc_r+0x2c0>
    d8e8:	f8dc 1008 	ldr.w	r1, [ip, #8]
    d8ec:	4561      	cmp	r1, ip
    d8ee:	d10d      	bne.n	d90c <_malloc_r+0x1a8>
    d8f0:	2301      	movs	r3, #1
    d8f2:	1080      	asrs	r0, r0, #2
    d8f4:	fa03 f000 	lsl.w	r0, r3, r0
    d8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d8fc:	4303      	orrs	r3, r0
    d8fe:	f8c8 3004 	str.w	r3, [r8, #4]
    d902:	460b      	mov	r3, r1
    d904:	e008      	b.n	d918 <_malloc_r+0x1b4>
    d906:	6889      	ldr	r1, [r1, #8]
    d908:	4561      	cmp	r1, ip
    d90a:	d004      	beq.n	d916 <_malloc_r+0x1b2>
    d90c:	6848      	ldr	r0, [r1, #4]
    d90e:	f020 0003 	bic.w	r0, r0, #3
    d912:	4283      	cmp	r3, r0
    d914:	d3f7      	bcc.n	d906 <_malloc_r+0x1a2>
    d916:	68cb      	ldr	r3, [r1, #12]
    d918:	60f3      	str	r3, [r6, #12]
    d91a:	60b1      	str	r1, [r6, #8]
    d91c:	609e      	str	r6, [r3, #8]
    d91e:	60ce      	str	r6, [r1, #12]
    d920:	2101      	movs	r1, #1
    d922:	1093      	asrs	r3, r2, #2
    d924:	fa01 f303 	lsl.w	r3, r1, r3
    d928:	6869      	ldr	r1, [r5, #4]
    d92a:	428b      	cmp	r3, r1
    d92c:	d85e      	bhi.n	d9ec <_malloc_r+0x288>
    d92e:	420b      	tst	r3, r1
    d930:	d106      	bne.n	d940 <_malloc_r+0x1dc>
    d932:	f022 0203 	bic.w	r2, r2, #3
    d936:	005b      	lsls	r3, r3, #1
    d938:	420b      	tst	r3, r1
    d93a:	f102 0204 	add.w	r2, r2, #4
    d93e:	d0fa      	beq.n	d936 <_malloc_r+0x1d2>
    d940:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
    d944:	4680      	mov	r8, r0
    d946:	4694      	mov	ip, r2
    d948:	f8d8 600c 	ldr.w	r6, [r8, #12]
    d94c:	4546      	cmp	r6, r8
    d94e:	d02d      	beq.n	d9ac <_malloc_r+0x248>
    d950:	6871      	ldr	r1, [r6, #4]
    d952:	f021 0903 	bic.w	r9, r1, #3
    d956:	ebc4 0109 	rsb	r1, r4, r9
    d95a:	290f      	cmp	r1, #15
    d95c:	dd13      	ble.n	d986 <_malloc_r+0x222>
    d95e:	1933      	adds	r3, r6, r4
    d960:	f044 0401 	orr.w	r4, r4, #1
    d964:	68f2      	ldr	r2, [r6, #12]
    d966:	6074      	str	r4, [r6, #4]
    d968:	f856 0f08 	ldr.w	r0, [r6, #8]!
    d96c:	60c2      	str	r2, [r0, #12]
    d96e:	6090      	str	r0, [r2, #8]
    d970:	f041 0201 	orr.w	r2, r1, #1
    d974:	616b      	str	r3, [r5, #20]
    d976:	612b      	str	r3, [r5, #16]
    d978:	f8c3 e00c 	str.w	lr, [r3, #12]
    d97c:	f8c3 e008 	str.w	lr, [r3, #8]
    d980:	605a      	str	r2, [r3, #4]
    d982:	5059      	str	r1, [r3, r1]
    d984:	e00c      	b.n	d9a0 <_malloc_r+0x23c>
    d986:	2900      	cmp	r1, #0
    d988:	db0e      	blt.n	d9a8 <_malloc_r+0x244>
    d98a:	eb06 0109 	add.w	r1, r6, r9
    d98e:	684b      	ldr	r3, [r1, #4]
    d990:	f043 0301 	orr.w	r3, r3, #1
    d994:	604b      	str	r3, [r1, #4]
    d996:	68f3      	ldr	r3, [r6, #12]
    d998:	f856 2f08 	ldr.w	r2, [r6, #8]!
    d99c:	60d3      	str	r3, [r2, #12]
    d99e:	609a      	str	r2, [r3, #8]
    d9a0:	4638      	mov	r0, r7
    d9a2:	f000 f8f2 	bl	db8a <__malloc_unlock>
    d9a6:	e0de      	b.n	db66 <_malloc_r+0x402>
    d9a8:	68f6      	ldr	r6, [r6, #12]
    d9aa:	e7cf      	b.n	d94c <_malloc_r+0x1e8>
    d9ac:	f10c 0c01 	add.w	ip, ip, #1
    d9b0:	f01c 0f03 	tst.w	ip, #3
    d9b4:	f108 0808 	add.w	r8, r8, #8
    d9b8:	d1c6      	bne.n	d948 <_malloc_r+0x1e4>
    d9ba:	0791      	lsls	r1, r2, #30
    d9bc:	d104      	bne.n	d9c8 <_malloc_r+0x264>
    d9be:	686a      	ldr	r2, [r5, #4]
    d9c0:	ea22 0203 	bic.w	r2, r2, r3
    d9c4:	606a      	str	r2, [r5, #4]
    d9c6:	e006      	b.n	d9d6 <_malloc_r+0x272>
    d9c8:	f1a0 0108 	sub.w	r1, r0, #8
    d9cc:	6800      	ldr	r0, [r0, #0]
    d9ce:	4288      	cmp	r0, r1
    d9d0:	f102 32ff 	add.w	r2, r2, #4294967295
    d9d4:	d0f1      	beq.n	d9ba <_malloc_r+0x256>
    d9d6:	6869      	ldr	r1, [r5, #4]
    d9d8:	005b      	lsls	r3, r3, #1
    d9da:	428b      	cmp	r3, r1
    d9dc:	d806      	bhi.n	d9ec <_malloc_r+0x288>
    d9de:	b12b      	cbz	r3, d9ec <_malloc_r+0x288>
    d9e0:	4662      	mov	r2, ip
    d9e2:	420b      	tst	r3, r1
    d9e4:	d1ac      	bne.n	d940 <_malloc_r+0x1dc>
    d9e6:	3204      	adds	r2, #4
    d9e8:	005b      	lsls	r3, r3, #1
    d9ea:	e7fa      	b.n	d9e2 <_malloc_r+0x27e>
    d9ec:	f8d5 9008 	ldr.w	r9, [r5, #8]
    d9f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d9f4:	f023 0b03 	bic.w	fp, r3, #3
    d9f8:	45a3      	cmp	fp, r4
    d9fa:	d304      	bcc.n	da06 <_malloc_r+0x2a2>
    d9fc:	ebc4 030b 	rsb	r3, r4, fp
    da00:	2b0f      	cmp	r3, #15
    da02:	f300 80a3 	bgt.w	db4c <_malloc_r+0x3e8>
    da06:	4908      	ldr	r1, [pc, #32]	; (da28 <_malloc_r+0x2c4>)
    da08:	680a      	ldr	r2, [r1, #0]
    da0a:	eb04 0a02 	add.w	sl, r4, r2
    da0e:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
    da12:	3201      	adds	r2, #1
    da14:	eb09 030b 	add.w	r3, r9, fp
    da18:	4688      	mov	r8, r1
    da1a:	d107      	bne.n	da2c <_malloc_r+0x2c8>
    da1c:	f10a 0a10 	add.w	sl, sl, #16
    da20:	e00c      	b.n	da3c <_malloc_r+0x2d8>
    da22:	bf00      	nop
    da24:	200008f0 	.word	0x200008f0
    da28:	20000e38 	.word	0x20000e38
    da2c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    da30:	f10a 0a0f 	add.w	sl, sl, #15
    da34:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    da38:	f02a 0a0f 	bic.w	sl, sl, #15
    da3c:	4638      	mov	r0, r7
    da3e:	4651      	mov	r1, sl
    da40:	9301      	str	r3, [sp, #4]
    da42:	f000 f8a3 	bl	db8c <_sbrk_r>
    da46:	1c42      	adds	r2, r0, #1
    da48:	4606      	mov	r6, r0
    da4a:	9b01      	ldr	r3, [sp, #4]
    da4c:	d06f      	beq.n	db2e <_malloc_r+0x3ca>
    da4e:	4298      	cmp	r0, r3
    da50:	d201      	bcs.n	da56 <_malloc_r+0x2f2>
    da52:	45a9      	cmp	r9, r5
    da54:	d16b      	bne.n	db2e <_malloc_r+0x3ca>
    da56:	f8d8 2004 	ldr.w	r2, [r8, #4]
    da5a:	429e      	cmp	r6, r3
    da5c:	4452      	add	r2, sl
    da5e:	f8c8 2004 	str.w	r2, [r8, #4]
    da62:	d108      	bne.n	da76 <_malloc_r+0x312>
    da64:	f3c6 010b 	ubfx	r1, r6, #0, #12
    da68:	b929      	cbnz	r1, da76 <_malloc_r+0x312>
    da6a:	68ab      	ldr	r3, [r5, #8]
    da6c:	44da      	add	sl, fp
    da6e:	f04a 0201 	orr.w	r2, sl, #1
    da72:	605a      	str	r2, [r3, #4]
    da74:	e04d      	b.n	db12 <_malloc_r+0x3ae>
    da76:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
    da7a:	3101      	adds	r1, #1
    da7c:	d103      	bne.n	da86 <_malloc_r+0x322>
    da7e:	4b3c      	ldr	r3, [pc, #240]	; (db70 <_malloc_r+0x40c>)
    da80:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
    da84:	e003      	b.n	da8e <_malloc_r+0x32a>
    da86:	1af3      	subs	r3, r6, r3
    da88:	441a      	add	r2, r3
    da8a:	f8c8 2004 	str.w	r2, [r8, #4]
    da8e:	f016 0307 	ands.w	r3, r6, #7
    da92:	bf1c      	itt	ne
    da94:	f1c3 0308 	rsbne	r3, r3, #8
    da98:	18f6      	addne	r6, r6, r3
    da9a:	44b2      	add	sl, r6
    da9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    daa0:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    daa4:	ebca 0a03 	rsb	sl, sl, r3
    daa8:	4651      	mov	r1, sl
    daaa:	4638      	mov	r0, r7
    daac:	f000 f86e 	bl	db8c <_sbrk_r>
    dab0:	1c43      	adds	r3, r0, #1
    dab2:	bf04      	itt	eq
    dab4:	4630      	moveq	r0, r6
    dab6:	f04f 0a00 	moveq.w	sl, #0
    daba:	f8d8 3004 	ldr.w	r3, [r8, #4]
    dabe:	60ae      	str	r6, [r5, #8]
    dac0:	1b80      	subs	r0, r0, r6
    dac2:	4450      	add	r0, sl
    dac4:	4453      	add	r3, sl
    dac6:	f040 0001 	orr.w	r0, r0, #1
    daca:	45a9      	cmp	r9, r5
    dacc:	f8c8 3004 	str.w	r3, [r8, #4]
    dad0:	6070      	str	r0, [r6, #4]
    dad2:	d01e      	beq.n	db12 <_malloc_r+0x3ae>
    dad4:	f1bb 0f0f 	cmp.w	fp, #15
    dad8:	d802      	bhi.n	dae0 <_malloc_r+0x37c>
    dada:	2301      	movs	r3, #1
    dadc:	6073      	str	r3, [r6, #4]
    dade:	e026      	b.n	db2e <_malloc_r+0x3ca>
    dae0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    dae4:	f1ab 0b0c 	sub.w	fp, fp, #12
    dae8:	f02b 0b07 	bic.w	fp, fp, #7
    daec:	f003 0301 	and.w	r3, r3, #1
    daf0:	ea4b 0303 	orr.w	r3, fp, r3
    daf4:	f8c9 3004 	str.w	r3, [r9, #4]
    daf8:	eb09 030b 	add.w	r3, r9, fp
    dafc:	2205      	movs	r2, #5
    dafe:	f1bb 0f0f 	cmp.w	fp, #15
    db02:	605a      	str	r2, [r3, #4]
    db04:	609a      	str	r2, [r3, #8]
    db06:	d904      	bls.n	db12 <_malloc_r+0x3ae>
    db08:	4638      	mov	r0, r7
    db0a:	f109 0108 	add.w	r1, r9, #8
    db0e:	f002 fe71 	bl	107f4 <_free_r>
    db12:	f8d8 3004 	ldr.w	r3, [r8, #4]
    db16:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    db1a:	4293      	cmp	r3, r2
    db1c:	bf84      	itt	hi
    db1e:	4a15      	ldrhi	r2, [pc, #84]	; (db74 <_malloc_r+0x410>)
    db20:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    db22:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    db26:	4293      	cmp	r3, r2
    db28:	bf84      	itt	hi
    db2a:	4a12      	ldrhi	r2, [pc, #72]	; (db74 <_malloc_r+0x410>)
    db2c:	6313      	strhi	r3, [r2, #48]	; 0x30
    db2e:	68ab      	ldr	r3, [r5, #8]
    db30:	685a      	ldr	r2, [r3, #4]
    db32:	f022 0203 	bic.w	r2, r2, #3
    db36:	42a2      	cmp	r2, r4
    db38:	ebc4 0302 	rsb	r3, r4, r2
    db3c:	d301      	bcc.n	db42 <_malloc_r+0x3de>
    db3e:	2b0f      	cmp	r3, #15
    db40:	dc04      	bgt.n	db4c <_malloc_r+0x3e8>
    db42:	4638      	mov	r0, r7
    db44:	f000 f821 	bl	db8a <__malloc_unlock>
    db48:	2600      	movs	r6, #0
    db4a:	e00c      	b.n	db66 <_malloc_r+0x402>
    db4c:	68ae      	ldr	r6, [r5, #8]
    db4e:	f044 0201 	orr.w	r2, r4, #1
    db52:	4434      	add	r4, r6
    db54:	f043 0301 	orr.w	r3, r3, #1
    db58:	6072      	str	r2, [r6, #4]
    db5a:	60ac      	str	r4, [r5, #8]
    db5c:	6063      	str	r3, [r4, #4]
    db5e:	4638      	mov	r0, r7
    db60:	f000 f813 	bl	db8a <__malloc_unlock>
    db64:	3608      	adds	r6, #8
    db66:	4630      	mov	r0, r6
    db68:	b003      	add	sp, #12
    db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db6e:	bf00      	nop
    db70:	200008f0 	.word	0x200008f0
    db74:	20000e38 	.word	0x20000e38

0000db78 <memset>:
    db78:	4402      	add	r2, r0
    db7a:	4603      	mov	r3, r0
    db7c:	4293      	cmp	r3, r2
    db7e:	d002      	beq.n	db86 <memset+0xe>
    db80:	f803 1b01 	strb.w	r1, [r3], #1
    db84:	e7fa      	b.n	db7c <memset+0x4>
    db86:	4770      	bx	lr

0000db88 <__malloc_lock>:
    db88:	4770      	bx	lr

0000db8a <__malloc_unlock>:
    db8a:	4770      	bx	lr

0000db8c <_sbrk_r>:
    db8c:	b538      	push	{r3, r4, r5, lr}
    db8e:	4c06      	ldr	r4, [pc, #24]	; (dba8 <_sbrk_r+0x1c>)
    db90:	2300      	movs	r3, #0
    db92:	4605      	mov	r5, r0
    db94:	4608      	mov	r0, r1
    db96:	6023      	str	r3, [r4, #0]
    db98:	f7fd f89e 	bl	acd8 <_sbrk>
    db9c:	1c43      	adds	r3, r0, #1
    db9e:	d102      	bne.n	dba6 <_sbrk_r+0x1a>
    dba0:	6823      	ldr	r3, [r4, #0]
    dba2:	b103      	cbz	r3, dba6 <_sbrk_r+0x1a>
    dba4:	602b      	str	r3, [r5, #0]
    dba6:	bd38      	pop	{r3, r4, r5, pc}
    dba8:	20001498 	.word	0x20001498

0000dbac <setbuf>:
    dbac:	2900      	cmp	r1, #0
    dbae:	bf0c      	ite	eq
    dbb0:	2202      	moveq	r2, #2
    dbb2:	2200      	movne	r2, #0
    dbb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    dbb8:	f000 b800 	b.w	dbbc <setvbuf>

0000dbbc <setvbuf>:
    dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbc0:	461d      	mov	r5, r3
    dbc2:	4b36      	ldr	r3, [pc, #216]	; (dc9c <setvbuf+0xe0>)
    dbc4:	681f      	ldr	r7, [r3, #0]
    dbc6:	4604      	mov	r4, r0
    dbc8:	460e      	mov	r6, r1
    dbca:	4690      	mov	r8, r2
    dbcc:	b127      	cbz	r7, dbd8 <setvbuf+0x1c>
    dbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dbd0:	b913      	cbnz	r3, dbd8 <setvbuf+0x1c>
    dbd2:	4638      	mov	r0, r7
    dbd4:	f002 fc8a 	bl	104ec <__sinit>
    dbd8:	f1b8 0f02 	cmp.w	r8, #2
    dbdc:	d859      	bhi.n	dc92 <setvbuf+0xd6>
    dbde:	2d00      	cmp	r5, #0
    dbe0:	db57      	blt.n	dc92 <setvbuf+0xd6>
    dbe2:	4638      	mov	r0, r7
    dbe4:	4621      	mov	r1, r4
    dbe6:	f002 fc37 	bl	10458 <_fflush_r>
    dbea:	2300      	movs	r3, #0
    dbec:	6063      	str	r3, [r4, #4]
    dbee:	61a3      	str	r3, [r4, #24]
    dbf0:	89a3      	ldrh	r3, [r4, #12]
    dbf2:	061b      	lsls	r3, r3, #24
    dbf4:	d503      	bpl.n	dbfe <setvbuf+0x42>
    dbf6:	4638      	mov	r0, r7
    dbf8:	6921      	ldr	r1, [r4, #16]
    dbfa:	f002 fdfb 	bl	107f4 <_free_r>
    dbfe:	89a3      	ldrh	r3, [r4, #12]
    dc00:	f1b8 0f02 	cmp.w	r8, #2
    dc04:	f023 0383 	bic.w	r3, r3, #131	; 0x83
    dc08:	81a3      	strh	r3, [r4, #12]
    dc0a:	d012      	beq.n	dc32 <setvbuf+0x76>
    dc0c:	bb36      	cbnz	r6, dc5c <setvbuf+0xa0>
    dc0e:	2d00      	cmp	r5, #0
    dc10:	bf08      	it	eq
    dc12:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    dc16:	4628      	mov	r0, r5
    dc18:	f7ff fd94 	bl	d744 <malloc>
    dc1c:	4606      	mov	r6, r0
    dc1e:	b9c8      	cbnz	r0, dc54 <setvbuf+0x98>
    dc20:	f44f 6080 	mov.w	r0, #1024	; 0x400
    dc24:	f7ff fd8e 	bl	d744 <malloc>
    dc28:	4606      	mov	r6, r0
    dc2a:	b988      	cbnz	r0, dc50 <setvbuf+0x94>
    dc2c:	f04f 30ff 	mov.w	r0, #4294967295
    dc30:	e000      	b.n	dc34 <setvbuf+0x78>
    dc32:	2000      	movs	r0, #0
    dc34:	89a3      	ldrh	r3, [r4, #12]
    dc36:	f043 0302 	orr.w	r3, r3, #2
    dc3a:	81a3      	strh	r3, [r4, #12]
    dc3c:	2300      	movs	r3, #0
    dc3e:	60a3      	str	r3, [r4, #8]
    dc40:	f104 0343 	add.w	r3, r4, #67	; 0x43
    dc44:	6023      	str	r3, [r4, #0]
    dc46:	6123      	str	r3, [r4, #16]
    dc48:	2301      	movs	r3, #1
    dc4a:	6163      	str	r3, [r4, #20]
    dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc50:	f44f 6580 	mov.w	r5, #1024	; 0x400
    dc54:	89a3      	ldrh	r3, [r4, #12]
    dc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dc5a:	81a3      	strh	r3, [r4, #12]
    dc5c:	f1b8 0f01 	cmp.w	r8, #1
    dc60:	d105      	bne.n	dc6e <setvbuf+0xb2>
    dc62:	89a3      	ldrh	r3, [r4, #12]
    dc64:	f043 0301 	orr.w	r3, r3, #1
    dc68:	81a3      	strh	r3, [r4, #12]
    dc6a:	426b      	negs	r3, r5
    dc6c:	61a3      	str	r3, [r4, #24]
    dc6e:	4b0c      	ldr	r3, [pc, #48]	; (dca0 <setvbuf+0xe4>)
    dc70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dc72:	89a3      	ldrh	r3, [r4, #12]
    dc74:	6026      	str	r6, [r4, #0]
    dc76:	f003 0008 	and.w	r0, r3, #8
    dc7a:	b280      	uxth	r0, r0
    dc7c:	6126      	str	r6, [r4, #16]
    dc7e:	6165      	str	r5, [r4, #20]
    dc80:	b148      	cbz	r0, dc96 <setvbuf+0xda>
    dc82:	f013 0f03 	tst.w	r3, #3
    dc86:	bf18      	it	ne
    dc88:	2500      	movne	r5, #0
    dc8a:	60a5      	str	r5, [r4, #8]
    dc8c:	2000      	movs	r0, #0
    dc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc92:	f04f 30ff 	mov.w	r0, #4294967295
    dc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc9a:	bf00      	nop
    dc9c:	200004c0 	.word	0x200004c0
    dca0:	000104a9 	.word	0x000104a9

0000dca4 <_sprintf_r>:
    dca4:	b40c      	push	{r2, r3}
    dca6:	b510      	push	{r4, lr}
    dca8:	b09c      	sub	sp, #112	; 0x70
    dcaa:	ab1e      	add	r3, sp, #120	; 0x78
    dcac:	9102      	str	r1, [sp, #8]
    dcae:	9106      	str	r1, [sp, #24]
    dcb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcb4:	9104      	str	r1, [sp, #16]
    dcb6:	9107      	str	r1, [sp, #28]
    dcb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcbc:	f853 2b04 	ldr.w	r2, [r3], #4
    dcc0:	f8ad 1016 	strh.w	r1, [sp, #22]
    dcc4:	f44f 7402 	mov.w	r4, #520	; 0x208
    dcc8:	a902      	add	r1, sp, #8
    dcca:	9301      	str	r3, [sp, #4]
    dccc:	f8ad 4014 	strh.w	r4, [sp, #20]
    dcd0:	f000 f82c 	bl	dd2c <_svfprintf_r>
    dcd4:	9b02      	ldr	r3, [sp, #8]
    dcd6:	2200      	movs	r2, #0
    dcd8:	701a      	strb	r2, [r3, #0]
    dcda:	b01c      	add	sp, #112	; 0x70
    dcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dce0:	b002      	add	sp, #8
    dce2:	4770      	bx	lr

0000dce4 <sprintf>:
    dce4:	b40e      	push	{r1, r2, r3}
    dce6:	b500      	push	{lr}
    dce8:	b09c      	sub	sp, #112	; 0x70
    dcea:	f44f 7102 	mov.w	r1, #520	; 0x208
    dcee:	f8ad 1014 	strh.w	r1, [sp, #20]
    dcf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcf6:	9104      	str	r1, [sp, #16]
    dcf8:	9107      	str	r1, [sp, #28]
    dcfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcfe:	ab1d      	add	r3, sp, #116	; 0x74
    dd00:	f8ad 1016 	strh.w	r1, [sp, #22]
    dd04:	4908      	ldr	r1, [pc, #32]	; (dd28 <sprintf+0x44>)
    dd06:	f853 2b04 	ldr.w	r2, [r3], #4
    dd0a:	9002      	str	r0, [sp, #8]
    dd0c:	9006      	str	r0, [sp, #24]
    dd0e:	6808      	ldr	r0, [r1, #0]
    dd10:	9301      	str	r3, [sp, #4]
    dd12:	a902      	add	r1, sp, #8
    dd14:	f000 f80a 	bl	dd2c <_svfprintf_r>
    dd18:	9b02      	ldr	r3, [sp, #8]
    dd1a:	2200      	movs	r2, #0
    dd1c:	701a      	strb	r2, [r3, #0]
    dd1e:	b01c      	add	sp, #112	; 0x70
    dd20:	f85d eb04 	ldr.w	lr, [sp], #4
    dd24:	b003      	add	sp, #12
    dd26:	4770      	bx	lr
    dd28:	200004c0 	.word	0x200004c0

0000dd2c <_svfprintf_r>:
    dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd30:	b0c3      	sub	sp, #268	; 0x10c
    dd32:	468b      	mov	fp, r1
    dd34:	4698      	mov	r8, r3
    dd36:	920b      	str	r2, [sp, #44]	; 0x2c
    dd38:	4682      	mov	sl, r0
    dd3a:	f002 ffc9 	bl	10cd0 <_localeconv_r>
    dd3e:	6800      	ldr	r0, [r0, #0]
    dd40:	9018      	str	r0, [sp, #96]	; 0x60
    dd42:	f003 fe50 	bl	119e6 <strlen>
    dd46:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    dd4a:	9010      	str	r0, [sp, #64]	; 0x40
    dd4c:	0619      	lsls	r1, r3, #24
    dd4e:	d515      	bpl.n	dd7c <_svfprintf_r+0x50>
    dd50:	f8db 3010 	ldr.w	r3, [fp, #16]
    dd54:	b993      	cbnz	r3, dd7c <_svfprintf_r+0x50>
    dd56:	4650      	mov	r0, sl
    dd58:	2140      	movs	r1, #64	; 0x40
    dd5a:	f7ff fd03 	bl	d764 <_malloc_r>
    dd5e:	f8cb 0000 	str.w	r0, [fp]
    dd62:	f8cb 0010 	str.w	r0, [fp, #16]
    dd66:	b930      	cbnz	r0, dd76 <_svfprintf_r+0x4a>
    dd68:	230c      	movs	r3, #12
    dd6a:	f8ca 3000 	str.w	r3, [sl]
    dd6e:	f04f 30ff 	mov.w	r0, #4294967295
    dd72:	f000 bf6c 	b.w	ec4e <_svfprintf_r+0xf22>
    dd76:	2340      	movs	r3, #64	; 0x40
    dd78:	f8cb 3014 	str.w	r3, [fp, #20]
    dd7c:	2400      	movs	r4, #0
    dd7e:	2500      	movs	r5, #0
    dd80:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    dd84:	2300      	movs	r3, #0
    dd86:	ae32      	add	r6, sp, #200	; 0xc8
    dd88:	9625      	str	r6, [sp, #148]	; 0x94
    dd8a:	9327      	str	r3, [sp, #156]	; 0x9c
    dd8c:	9326      	str	r3, [sp, #152]	; 0x98
    dd8e:	9309      	str	r3, [sp, #36]	; 0x24
    dd90:	931b      	str	r3, [sp, #108]	; 0x6c
    dd92:	931a      	str	r3, [sp, #104]	; 0x68
    dd94:	930f      	str	r3, [sp, #60]	; 0x3c
    dd96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd98:	461c      	mov	r4, r3
    dd9a:	f813 2b01 	ldrb.w	r2, [r3], #1
    dd9e:	b91a      	cbnz	r2, dda8 <_svfprintf_r+0x7c>
    dda0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dda2:	1a25      	subs	r5, r4, r0
    dda4:	d103      	bne.n	ddae <_svfprintf_r+0x82>
    dda6:	e01b      	b.n	dde0 <_svfprintf_r+0xb4>
    dda8:	2a25      	cmp	r2, #37	; 0x25
    ddaa:	d1f5      	bne.n	dd98 <_svfprintf_r+0x6c>
    ddac:	e7f8      	b.n	dda0 <_svfprintf_r+0x74>
    ddae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ddb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ddb2:	442b      	add	r3, r5
    ddb4:	9327      	str	r3, [sp, #156]	; 0x9c
    ddb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ddb8:	3301      	adds	r3, #1
    ddba:	2b07      	cmp	r3, #7
    ddbc:	e886 0022 	stmia.w	r6, {r1, r5}
    ddc0:	9326      	str	r3, [sp, #152]	; 0x98
    ddc2:	dc01      	bgt.n	ddc8 <_svfprintf_r+0x9c>
    ddc4:	3608      	adds	r6, #8
    ddc6:	e008      	b.n	ddda <_svfprintf_r+0xae>
    ddc8:	4650      	mov	r0, sl
    ddca:	4659      	mov	r1, fp
    ddcc:	aa25      	add	r2, sp, #148	; 0x94
    ddce:	f003 fe13 	bl	119f8 <__ssprint_r>
    ddd2:	2800      	cmp	r0, #0
    ddd4:	f040 8733 	bne.w	ec3e <_svfprintf_r+0xf12>
    ddd8:	ae32      	add	r6, sp, #200	; 0xc8
    ddda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dddc:	442a      	add	r2, r5
    ddde:	920f      	str	r2, [sp, #60]	; 0x3c
    dde0:	7823      	ldrb	r3, [r4, #0]
    dde2:	2b00      	cmp	r3, #0
    dde4:	f000 8724 	beq.w	ec30 <_svfprintf_r+0xf04>
    dde8:	2300      	movs	r3, #0
    ddea:	3401      	adds	r4, #1
    ddec:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    ddf0:	f04f 39ff 	mov.w	r9, #4294967295
    ddf4:	930e      	str	r3, [sp, #56]	; 0x38
    ddf6:	461f      	mov	r7, r3
    ddf8:	1c65      	adds	r5, r4, #1
    ddfa:	7824      	ldrb	r4, [r4, #0]
    ddfc:	950b      	str	r5, [sp, #44]	; 0x2c
    ddfe:	9408      	str	r4, [sp, #32]
    de00:	9c08      	ldr	r4, [sp, #32]
    de02:	f1a4 0220 	sub.w	r2, r4, #32
    de06:	2a58      	cmp	r2, #88	; 0x58
    de08:	f200 8384 	bhi.w	e514 <_svfprintf_r+0x7e8>
    de0c:	e8df f012 	tbh	[pc, r2, lsl #1]
    de10:	0382006d 	.word	0x0382006d
    de14:	00710382 	.word	0x00710382
    de18:	03820382 	.word	0x03820382
    de1c:	03820382 	.word	0x03820382
    de20:	03820382 	.word	0x03820382
    de24:	0059005b 	.word	0x0059005b
    de28:	00770382 	.word	0x00770382
    de2c:	0382007a 	.word	0x0382007a
    de30:	00a300a0 	.word	0x00a300a0
    de34:	00a300a3 	.word	0x00a300a3
    de38:	00a300a3 	.word	0x00a300a3
    de3c:	00a300a3 	.word	0x00a300a3
    de40:	00a300a3 	.word	0x00a300a3
    de44:	03820382 	.word	0x03820382
    de48:	03820382 	.word	0x03820382
    de4c:	03820382 	.word	0x03820382
    de50:	03820382 	.word	0x03820382
    de54:	03820382 	.word	0x03820382
    de58:	00ff00d4 	.word	0x00ff00d4
    de5c:	00ff0382 	.word	0x00ff0382
    de60:	03820382 	.word	0x03820382
    de64:	03820382 	.word	0x03820382
    de68:	038200b7 	.word	0x038200b7
    de6c:	026a0382 	.word	0x026a0382
    de70:	03820382 	.word	0x03820382
    de74:	03820382 	.word	0x03820382
    de78:	02ba0382 	.word	0x02ba0382
    de7c:	03820382 	.word	0x03820382
    de80:	03820068 	.word	0x03820068
    de84:	03820382 	.word	0x03820382
    de88:	03820382 	.word	0x03820382
    de8c:	03820382 	.word	0x03820382
    de90:	03820382 	.word	0x03820382
    de94:	00ca0382 	.word	0x00ca0382
    de98:	00ff0065 	.word	0x00ff0065
    de9c:	00ff00ff 	.word	0x00ff00ff
    dea0:	006500ba 	.word	0x006500ba
    dea4:	03820382 	.word	0x03820382
    dea8:	038200bd 	.word	0x038200bd
    deac:	026c024b 	.word	0x026c024b
    deb0:	00c7028b 	.word	0x00c7028b
    deb4:	029d0382 	.word	0x029d0382
    deb8:	02bc0382 	.word	0x02bc0382
    debc:	03820382 	.word	0x03820382
    dec0:	02d7      	.short	0x02d7
    dec2:	232b      	movs	r3, #43	; 0x2b
    dec4:	e007      	b.n	ded6 <_svfprintf_r+0x1aa>
    dec6:	f8d8 5000 	ldr.w	r5, [r8]
    deca:	950e      	str	r5, [sp, #56]	; 0x38
    decc:	2d00      	cmp	r5, #0
    dece:	f108 0204 	add.w	r2, r8, #4
    ded2:	db11      	blt.n	def8 <_svfprintf_r+0x1cc>
    ded4:	4690      	mov	r8, r2
    ded6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ded8:	e78e      	b.n	ddf8 <_svfprintf_r+0xcc>
    deda:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    dede:	e06f      	b.n	dfc0 <_svfprintf_r+0x294>
    dee0:	4cab      	ldr	r4, [pc, #684]	; (e190 <_svfprintf_r+0x464>)
    dee2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    dee6:	941b      	str	r4, [sp, #108]	; 0x6c
    dee8:	e26d      	b.n	e3c6 <_svfprintf_r+0x69a>
    deea:	2b00      	cmp	r3, #0
    deec:	bf08      	it	eq
    deee:	2320      	moveq	r3, #32
    def0:	e7f1      	b.n	ded6 <_svfprintf_r+0x1aa>
    def2:	f047 0701 	orr.w	r7, r7, #1
    def6:	e7ee      	b.n	ded6 <_svfprintf_r+0x1aa>
    def8:	426d      	negs	r5, r5
    defa:	950e      	str	r5, [sp, #56]	; 0x38
    defc:	4690      	mov	r8, r2
    defe:	f047 0704 	orr.w	r7, r7, #4
    df02:	e7e8      	b.n	ded6 <_svfprintf_r+0x1aa>
    df04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    df06:	7825      	ldrb	r5, [r4, #0]
    df08:	9508      	str	r5, [sp, #32]
    df0a:	2d2a      	cmp	r5, #42	; 0x2a
    df0c:	f104 0201 	add.w	r2, r4, #1
    df10:	d002      	beq.n	df18 <_svfprintf_r+0x1ec>
    df12:	f04f 0900 	mov.w	r9, #0
    df16:	e00b      	b.n	df30 <_svfprintf_r+0x204>
    df18:	f8d8 9000 	ldr.w	r9, [r8]
    df1c:	920b      	str	r2, [sp, #44]	; 0x2c
    df1e:	f108 0104 	add.w	r1, r8, #4
    df22:	f1b9 0f00 	cmp.w	r9, #0
    df26:	4688      	mov	r8, r1
    df28:	dad5      	bge.n	ded6 <_svfprintf_r+0x1aa>
    df2a:	f04f 39ff 	mov.w	r9, #4294967295
    df2e:	e7d2      	b.n	ded6 <_svfprintf_r+0x1aa>
    df30:	9d08      	ldr	r5, [sp, #32]
    df32:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
    df36:	2909      	cmp	r1, #9
    df38:	d806      	bhi.n	df48 <_svfprintf_r+0x21c>
    df3a:	200a      	movs	r0, #10
    df3c:	f812 4b01 	ldrb.w	r4, [r2], #1
    df40:	9408      	str	r4, [sp, #32]
    df42:	fb00 1909 	mla	r9, r0, r9, r1
    df46:	e7f3      	b.n	df30 <_svfprintf_r+0x204>
    df48:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
    df4c:	920b      	str	r2, [sp, #44]	; 0x2c
    df4e:	e757      	b.n	de00 <_svfprintf_r+0xd4>
    df50:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    df54:	e7bf      	b.n	ded6 <_svfprintf_r+0x1aa>
    df56:	2400      	movs	r4, #0
    df58:	940e      	str	r4, [sp, #56]	; 0x38
    df5a:	9d08      	ldr	r5, [sp, #32]
    df5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    df5e:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
    df62:	210a      	movs	r1, #10
    df64:	fb01 2404 	mla	r4, r1, r4, r2
    df68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    df6a:	940e      	str	r4, [sp, #56]	; 0x38
    df6c:	f812 5b01 	ldrb.w	r5, [r2], #1
    df70:	9508      	str	r5, [sp, #32]
    df72:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
    df76:	2909      	cmp	r1, #9
    df78:	d8e8      	bhi.n	df4c <_svfprintf_r+0x220>
    df7a:	920b      	str	r2, [sp, #44]	; 0x2c
    df7c:	e7ed      	b.n	df5a <_svfprintf_r+0x22e>
    df7e:	f047 0708 	orr.w	r7, r7, #8
    df82:	e7a8      	b.n	ded6 <_svfprintf_r+0x1aa>
    df84:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    df88:	e7a5      	b.n	ded6 <_svfprintf_r+0x1aa>
    df8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    df8c:	7822      	ldrb	r2, [r4, #0]
    df8e:	2a6c      	cmp	r2, #108	; 0x6c
    df90:	d102      	bne.n	df98 <_svfprintf_r+0x26c>
    df92:	3401      	adds	r4, #1
    df94:	940b      	str	r4, [sp, #44]	; 0x2c
    df96:	e002      	b.n	df9e <_svfprintf_r+0x272>
    df98:	f047 0710 	orr.w	r7, r7, #16
    df9c:	e79b      	b.n	ded6 <_svfprintf_r+0x1aa>
    df9e:	f047 0720 	orr.w	r7, r7, #32
    dfa2:	e798      	b.n	ded6 <_svfprintf_r+0x1aa>
    dfa4:	f8d8 3000 	ldr.w	r3, [r8]
    dfa8:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    dfac:	2500      	movs	r5, #0
    dfae:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    dfb2:	f108 0804 	add.w	r8, r8, #4
    dfb6:	e2b8      	b.n	e52a <_svfprintf_r+0x7fe>
    dfb8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    dfbc:	f047 0710 	orr.w	r7, r7, #16
    dfc0:	06ba      	lsls	r2, r7, #26
    dfc2:	d508      	bpl.n	dfd6 <_svfprintf_r+0x2aa>
    dfc4:	f108 0807 	add.w	r8, r8, #7
    dfc8:	f028 0307 	bic.w	r3, r8, #7
    dfcc:	f103 0808 	add.w	r8, r3, #8
    dfd0:	e9d3 4500 	ldrd	r4, r5, [r3]
    dfd4:	e00f      	b.n	dff6 <_svfprintf_r+0x2ca>
    dfd6:	f017 0f10 	tst.w	r7, #16
    dfda:	f108 0304 	add.w	r3, r8, #4
    dfde:	d002      	beq.n	dfe6 <_svfprintf_r+0x2ba>
    dfe0:	f8d8 4000 	ldr.w	r4, [r8]
    dfe4:	e005      	b.n	dff2 <_svfprintf_r+0x2c6>
    dfe6:	f8d8 4000 	ldr.w	r4, [r8]
    dfea:	f017 0f40 	tst.w	r7, #64	; 0x40
    dfee:	bf18      	it	ne
    dff0:	b224      	sxthne	r4, r4
    dff2:	17e5      	asrs	r5, r4, #31
    dff4:	4698      	mov	r8, r3
    dff6:	2c00      	cmp	r4, #0
    dff8:	f175 0100 	sbcs.w	r1, r5, #0
    dffc:	f280 820e 	bge.w	e41c <_svfprintf_r+0x6f0>
    e000:	232d      	movs	r3, #45	; 0x2d
    e002:	4264      	negs	r4, r4
    e004:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    e008:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e00c:	e206      	b.n	e41c <_svfprintf_r+0x6f0>
    e00e:	9c08      	ldr	r4, [sp, #32]
    e010:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e014:	f108 0807 	add.w	r8, r8, #7
    e018:	f028 0307 	bic.w	r3, r8, #7
    e01c:	970a      	str	r7, [sp, #40]	; 0x28
    e01e:	9411      	str	r4, [sp, #68]	; 0x44
    e020:	e9d3 4500 	ldrd	r4, r5, [r3]
    e024:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    e028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e02c:	f103 0808 	add.w	r8, r3, #8
    e030:	f7fe fbae 	bl	c790 <__fpclassifyd>
    e034:	2801      	cmp	r0, #1
    e036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e03a:	d114      	bne.n	e066 <_svfprintf_r+0x33a>
    e03c:	2200      	movs	r2, #0
    e03e:	2300      	movs	r3, #0
    e040:	f7fe fffa 	bl	d038 <__aeabi_dcmplt>
    e044:	b110      	cbz	r0, e04c <_svfprintf_r+0x320>
    e046:	232d      	movs	r3, #45	; 0x2d
    e048:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e04c:	9d08      	ldr	r5, [sp, #32]
    e04e:	4b51      	ldr	r3, [pc, #324]	; (e194 <_svfprintf_r+0x468>)
    e050:	4a51      	ldr	r2, [pc, #324]	; (e198 <_svfprintf_r+0x46c>)
    e052:	2d47      	cmp	r5, #71	; 0x47
    e054:	bfd8      	it	le
    e056:	461a      	movle	r2, r3
    e058:	9207      	str	r2, [sp, #28]
    e05a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
    e05e:	f04f 0903 	mov.w	r9, #3
    e062:	2500      	movs	r5, #0
    e064:	e268      	b.n	e538 <_svfprintf_r+0x80c>
    e066:	f7fe fb93 	bl	c790 <__fpclassifyd>
    e06a:	b958      	cbnz	r0, e084 <_svfprintf_r+0x358>
    e06c:	4b4b      	ldr	r3, [pc, #300]	; (e19c <_svfprintf_r+0x470>)
    e06e:	4a4c      	ldr	r2, [pc, #304]	; (e1a0 <_svfprintf_r+0x474>)
    e070:	9c08      	ldr	r4, [sp, #32]
    e072:	2c47      	cmp	r4, #71	; 0x47
    e074:	bfd8      	it	le
    e076:	461a      	movle	r2, r3
    e078:	9207      	str	r2, [sp, #28]
    e07a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
    e07e:	f04f 0903 	mov.w	r9, #3
    e082:	e258      	b.n	e536 <_svfprintf_r+0x80a>
    e084:	f1b9 3fff 	cmp.w	r9, #4294967295
    e088:	d00a      	beq.n	e0a0 <_svfprintf_r+0x374>
    e08a:	9d08      	ldr	r5, [sp, #32]
    e08c:	f025 0320 	bic.w	r3, r5, #32
    e090:	2b47      	cmp	r3, #71	; 0x47
    e092:	d107      	bne.n	e0a4 <_svfprintf_r+0x378>
    e094:	f1b9 0f00 	cmp.w	r9, #0
    e098:	bf08      	it	eq
    e09a:	f04f 0901 	moveq.w	r9, #1
    e09e:	e001      	b.n	e0a4 <_svfprintf_r+0x378>
    e0a0:	f04f 0906 	mov.w	r9, #6
    e0a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	f447 7780 	orr.w	r7, r7, #256	; 0x100
    e0ae:	da08      	bge.n	e0c2 <_svfprintf_r+0x396>
    e0b0:	990d      	ldr	r1, [sp, #52]	; 0x34
    e0b2:	980c      	ldr	r0, [sp, #48]	; 0x30
    e0b4:	9012      	str	r0, [sp, #72]	; 0x48
    e0b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    e0ba:	242d      	movs	r4, #45	; 0x2d
    e0bc:	9113      	str	r1, [sp, #76]	; 0x4c
    e0be:	9419      	str	r4, [sp, #100]	; 0x64
    e0c0:	e005      	b.n	e0ce <_svfprintf_r+0x3a2>
    e0c2:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
    e0c6:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    e0ca:	2500      	movs	r5, #0
    e0cc:	9519      	str	r5, [sp, #100]	; 0x64
    e0ce:	9d08      	ldr	r5, [sp, #32]
    e0d0:	f025 0420 	bic.w	r4, r5, #32
    e0d4:	2c46      	cmp	r4, #70	; 0x46
    e0d6:	d004      	beq.n	e0e2 <_svfprintf_r+0x3b6>
    e0d8:	2c45      	cmp	r4, #69	; 0x45
    e0da:	d105      	bne.n	e0e8 <_svfprintf_r+0x3bc>
    e0dc:	f109 0501 	add.w	r5, r9, #1
    e0e0:	e003      	b.n	e0ea <_svfprintf_r+0x3be>
    e0e2:	464d      	mov	r5, r9
    e0e4:	2303      	movs	r3, #3
    e0e6:	e001      	b.n	e0ec <_svfprintf_r+0x3c0>
    e0e8:	464d      	mov	r5, r9
    e0ea:	2302      	movs	r3, #2
    e0ec:	e88d 0028 	stmia.w	sp, {r3, r5}
    e0f0:	ab1f      	add	r3, sp, #124	; 0x7c
    e0f2:	9302      	str	r3, [sp, #8]
    e0f4:	ab20      	add	r3, sp, #128	; 0x80
    e0f6:	9303      	str	r3, [sp, #12]
    e0f8:	ab23      	add	r3, sp, #140	; 0x8c
    e0fa:	9304      	str	r3, [sp, #16]
    e0fc:	4650      	mov	r0, sl
    e0fe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e102:	f001 fb6e 	bl	f7e2 <_dtoa_r>
    e106:	2c47      	cmp	r4, #71	; 0x47
    e108:	9007      	str	r0, [sp, #28]
    e10a:	d10a      	bne.n	e122 <_svfprintf_r+0x3f6>
    e10c:	980a      	ldr	r0, [sp, #40]	; 0x28
    e10e:	07c3      	lsls	r3, r0, #31
    e110:	d407      	bmi.n	e122 <_svfprintf_r+0x3f6>
    e112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e114:	9d07      	ldr	r5, [sp, #28]
    e116:	2c47      	cmp	r4, #71	; 0x47
    e118:	ebc5 0303 	rsb	r3, r5, r3
    e11c:	9309      	str	r3, [sp, #36]	; 0x24
    e11e:	d141      	bne.n	e1a4 <_svfprintf_r+0x478>
    e120:	e02d      	b.n	e17e <_svfprintf_r+0x452>
    e122:	f8dd c01c 	ldr.w	ip, [sp, #28]
    e126:	2c46      	cmp	r4, #70	; 0x46
    e128:	44ac      	add	ip, r5
    e12a:	d113      	bne.n	e154 <_svfprintf_r+0x428>
    e12c:	9807      	ldr	r0, [sp, #28]
    e12e:	7803      	ldrb	r3, [r0, #0]
    e130:	2b30      	cmp	r3, #48	; 0x30
    e132:	d10d      	bne.n	e150 <_svfprintf_r+0x424>
    e134:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    e138:	2200      	movs	r2, #0
    e13a:	2300      	movs	r3, #0
    e13c:	f8cd c018 	str.w	ip, [sp, #24]
    e140:	f7fe ff70 	bl	d024 <__aeabi_dcmpeq>
    e144:	f8dd c018 	ldr.w	ip, [sp, #24]
    e148:	b910      	cbnz	r0, e150 <_svfprintf_r+0x424>
    e14a:	f1c5 0501 	rsb	r5, r5, #1
    e14e:	951f      	str	r5, [sp, #124]	; 0x7c
    e150:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e152:	449c      	add	ip, r3
    e154:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    e158:	2200      	movs	r2, #0
    e15a:	2300      	movs	r3, #0
    e15c:	f8cd c018 	str.w	ip, [sp, #24]
    e160:	f7fe ff60 	bl	d024 <__aeabi_dcmpeq>
    e164:	f8dd c018 	ldr.w	ip, [sp, #24]
    e168:	b108      	cbz	r0, e16e <_svfprintf_r+0x442>
    e16a:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
    e16e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e170:	4563      	cmp	r3, ip
    e172:	d2ce      	bcs.n	e112 <_svfprintf_r+0x3e6>
    e174:	1c5a      	adds	r2, r3, #1
    e176:	9223      	str	r2, [sp, #140]	; 0x8c
    e178:	2230      	movs	r2, #48	; 0x30
    e17a:	701a      	strb	r2, [r3, #0]
    e17c:	e7f7      	b.n	e16e <_svfprintf_r+0x442>
    e17e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e180:	1cdc      	adds	r4, r3, #3
    e182:	db01      	blt.n	e188 <_svfprintf_r+0x45c>
    e184:	454b      	cmp	r3, r9
    e186:	dd6c      	ble.n	e262 <_svfprintf_r+0x536>
    e188:	9c08      	ldr	r4, [sp, #32]
    e18a:	3c02      	subs	r4, #2
    e18c:	9408      	str	r4, [sp, #32]
    e18e:	e00c      	b.n	e1aa <_svfprintf_r+0x47e>
    e190:	00012fe2 	.word	0x00012fe2
    e194:	00012fd2 	.word	0x00012fd2
    e198:	00012fd6 	.word	0x00012fd6
    e19c:	00012fda 	.word	0x00012fda
    e1a0:	00012fde 	.word	0x00012fde
    e1a4:	9d08      	ldr	r5, [sp, #32]
    e1a6:	2d65      	cmp	r5, #101	; 0x65
    e1a8:	dc42      	bgt.n	e230 <_svfprintf_r+0x504>
    e1aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e1ac:	9c08      	ldr	r4, [sp, #32]
    e1ae:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
    e1b2:	3b01      	subs	r3, #1
    e1b4:	2b00      	cmp	r3, #0
    e1b6:	931f      	str	r3, [sp, #124]	; 0x7c
    e1b8:	bfba      	itte	lt
    e1ba:	425b      	neglt	r3, r3
    e1bc:	222d      	movlt	r2, #45	; 0x2d
    e1be:	222b      	movge	r2, #43	; 0x2b
    e1c0:	2b09      	cmp	r3, #9
    e1c2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
    e1c6:	dd1c      	ble.n	e202 <_svfprintf_r+0x4d6>
    e1c8:	f10d 0292 	add.w	r2, sp, #146	; 0x92
    e1cc:	200a      	movs	r0, #10
    e1ce:	fb93 f1f0 	sdiv	r1, r3, r0
    e1d2:	fb00 3311 	mls	r3, r0, r1, r3
    e1d6:	3330      	adds	r3, #48	; 0x30
    e1d8:	2909      	cmp	r1, #9
    e1da:	4614      	mov	r4, r2
    e1dc:	f802 3901 	strb.w	r3, [r2], #-1
    e1e0:	460b      	mov	r3, r1
    e1e2:	dcf3      	bgt.n	e1cc <_svfprintf_r+0x4a0>
    e1e4:	f101 0330 	add.w	r3, r1, #48	; 0x30
    e1e8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e1ec:	f10d 0386 	add.w	r3, sp, #134	; 0x86
    e1f0:	f10d 0293 	add.w	r2, sp, #147	; 0x93
    e1f4:	4294      	cmp	r4, r2
    e1f6:	d20b      	bcs.n	e210 <_svfprintf_r+0x4e4>
    e1f8:	f814 2b01 	ldrb.w	r2, [r4], #1
    e1fc:	f803 2b01 	strb.w	r2, [r3], #1
    e200:	e7f6      	b.n	e1f0 <_svfprintf_r+0x4c4>
    e202:	2230      	movs	r2, #48	; 0x30
    e204:	4413      	add	r3, r2
    e206:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    e20a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
    e20e:	ab22      	add	r3, sp, #136	; 0x88
    e210:	9d09      	ldr	r5, [sp, #36]	; 0x24
    e212:	aa21      	add	r2, sp, #132	; 0x84
    e214:	1a9a      	subs	r2, r3, r2
    e216:	4691      	mov	r9, r2
    e218:	2d01      	cmp	r5, #1
    e21a:	921a      	str	r2, [sp, #104]	; 0x68
    e21c:	44a9      	add	r9, r5
    e21e:	dc03      	bgt.n	e228 <_svfprintf_r+0x4fc>
    e220:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    e222:	f015 0401 	ands.w	r4, r5, #1
    e226:	d037      	beq.n	e298 <_svfprintf_r+0x56c>
    e228:	f109 0901 	add.w	r9, r9, #1
    e22c:	2400      	movs	r4, #0
    e22e:	e033      	b.n	e298 <_svfprintf_r+0x56c>
    e230:	9c08      	ldr	r4, [sp, #32]
    e232:	2c66      	cmp	r4, #102	; 0x66
    e234:	d115      	bne.n	e262 <_svfprintf_r+0x536>
    e236:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e238:	2b00      	cmp	r3, #0
    e23a:	dd09      	ble.n	e250 <_svfprintf_r+0x524>
    e23c:	f1b9 0f00 	cmp.w	r9, #0
    e240:	d102      	bne.n	e248 <_svfprintf_r+0x51c>
    e242:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    e244:	07e8      	lsls	r0, r5, #31
    e246:	d523      	bpl.n	e290 <_svfprintf_r+0x564>
    e248:	f109 0901 	add.w	r9, r9, #1
    e24c:	444b      	add	r3, r9
    e24e:	e01f      	b.n	e290 <_svfprintf_r+0x564>
    e250:	f1b9 0f00 	cmp.w	r9, #0
    e254:	d102      	bne.n	e25c <_svfprintf_r+0x530>
    e256:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e258:	07e1      	lsls	r1, r4, #31
    e25a:	d515      	bpl.n	e288 <_svfprintf_r+0x55c>
    e25c:	f109 0302 	add.w	r3, r9, #2
    e260:	e016      	b.n	e290 <_svfprintf_r+0x564>
    e262:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e264:	9d09      	ldr	r5, [sp, #36]	; 0x24
    e266:	42ab      	cmp	r3, r5
    e268:	db04      	blt.n	e274 <_svfprintf_r+0x548>
    e26a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e26c:	07e2      	lsls	r2, r4, #31
    e26e:	d50d      	bpl.n	e28c <_svfprintf_r+0x560>
    e270:	3301      	adds	r3, #1
    e272:	e006      	b.n	e282 <_svfprintf_r+0x556>
    e274:	2b00      	cmp	r3, #0
    e276:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e278:	bfd4      	ite	le
    e27a:	f1c3 0302 	rsble	r3, r3, #2
    e27e:	2301      	movgt	r3, #1
    e280:	4423      	add	r3, r4
    e282:	2567      	movs	r5, #103	; 0x67
    e284:	9511      	str	r5, [sp, #68]	; 0x44
    e286:	e003      	b.n	e290 <_svfprintf_r+0x564>
    e288:	2301      	movs	r3, #1
    e28a:	e001      	b.n	e290 <_svfprintf_r+0x564>
    e28c:	2467      	movs	r4, #103	; 0x67
    e28e:	9411      	str	r4, [sp, #68]	; 0x44
    e290:	9d11      	ldr	r5, [sp, #68]	; 0x44
    e292:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    e294:	9508      	str	r5, [sp, #32]
    e296:	4699      	mov	r9, r3
    e298:	9d19      	ldr	r5, [sp, #100]	; 0x64
    e29a:	b115      	cbz	r5, e2a2 <_svfprintf_r+0x576>
    e29c:	232d      	movs	r3, #45	; 0x2d
    e29e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e2a2:	2500      	movs	r5, #0
    e2a4:	e149      	b.n	e53a <_svfprintf_r+0x80e>
    e2a6:	f017 0f20 	tst.w	r7, #32
    e2aa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e2ae:	f108 0104 	add.w	r1, r8, #4
    e2b2:	d008      	beq.n	e2c6 <_svfprintf_r+0x59a>
    e2b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    e2b6:	f8d8 0000 	ldr.w	r0, [r8]
    e2ba:	17e5      	asrs	r5, r4, #31
    e2bc:	4622      	mov	r2, r4
    e2be:	462b      	mov	r3, r5
    e2c0:	e9c0 2300 	strd	r2, r3, [r0]
    e2c4:	e00c      	b.n	e2e0 <_svfprintf_r+0x5b4>
    e2c6:	06fb      	lsls	r3, r7, #27
    e2c8:	d406      	bmi.n	e2d8 <_svfprintf_r+0x5ac>
    e2ca:	067d      	lsls	r5, r7, #25
    e2cc:	d504      	bpl.n	e2d8 <_svfprintf_r+0x5ac>
    e2ce:	f8d8 3000 	ldr.w	r3, [r8]
    e2d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    e2d4:	801c      	strh	r4, [r3, #0]
    e2d6:	e003      	b.n	e2e0 <_svfprintf_r+0x5b4>
    e2d8:	f8d8 3000 	ldr.w	r3, [r8]
    e2dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    e2de:	601d      	str	r5, [r3, #0]
    e2e0:	4688      	mov	r8, r1
    e2e2:	e558      	b.n	dd96 <_svfprintf_r+0x6a>
    e2e4:	f047 0710 	orr.w	r7, r7, #16
    e2e8:	f017 0320 	ands.w	r3, r7, #32
    e2ec:	d009      	beq.n	e302 <_svfprintf_r+0x5d6>
    e2ee:	f108 0807 	add.w	r8, r8, #7
    e2f2:	f028 0307 	bic.w	r3, r8, #7
    e2f6:	e9d3 4500 	ldrd	r4, r5, [r3]
    e2fa:	f103 0808 	add.w	r8, r3, #8
    e2fe:	2300      	movs	r3, #0
    e300:	e088      	b.n	e414 <_svfprintf_r+0x6e8>
    e302:	f017 0110 	ands.w	r1, r7, #16
    e306:	f108 0204 	add.w	r2, r8, #4
    e30a:	d107      	bne.n	e31c <_svfprintf_r+0x5f0>
    e30c:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    e310:	d004      	beq.n	e31c <_svfprintf_r+0x5f0>
    e312:	f8b8 4000 	ldrh.w	r4, [r8]
    e316:	2500      	movs	r5, #0
    e318:	4690      	mov	r8, r2
    e31a:	e7f0      	b.n	e2fe <_svfprintf_r+0x5d2>
    e31c:	f8d8 4000 	ldr.w	r4, [r8]
    e320:	2500      	movs	r5, #0
    e322:	4690      	mov	r8, r2
    e324:	e076      	b.n	e414 <_svfprintf_r+0x6e8>
    e326:	2330      	movs	r3, #48	; 0x30
    e328:	2278      	movs	r2, #120	; 0x78
    e32a:	48a8      	ldr	r0, [pc, #672]	; (e5cc <_svfprintf_r+0x8a0>)
    e32c:	f8d8 4000 	ldr.w	r4, [r8]
    e330:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    e334:	2500      	movs	r5, #0
    e336:	f047 0702 	orr.w	r7, r7, #2
    e33a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    e33e:	f108 0804 	add.w	r8, r8, #4
    e342:	901b      	str	r0, [sp, #108]	; 0x6c
    e344:	2302      	movs	r3, #2
    e346:	9208      	str	r2, [sp, #32]
    e348:	e064      	b.n	e414 <_svfprintf_r+0x6e8>
    e34a:	4643      	mov	r3, r8
    e34c:	2500      	movs	r5, #0
    e34e:	681b      	ldr	r3, [r3, #0]
    e350:	9307      	str	r3, [sp, #28]
    e352:	45a9      	cmp	r9, r5
    e354:	f108 0804 	add.w	r8, r8, #4
    e358:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    e35c:	db0d      	blt.n	e37a <_svfprintf_r+0x64e>
    e35e:	4618      	mov	r0, r3
    e360:	4629      	mov	r1, r5
    e362:	464a      	mov	r2, r9
    e364:	f002 fd2a 	bl	10dbc <memchr>
    e368:	2800      	cmp	r0, #0
    e36a:	f000 80e4 	beq.w	e536 <_svfprintf_r+0x80a>
    e36e:	9c07      	ldr	r4, [sp, #28]
    e370:	1b00      	subs	r0, r0, r4
    e372:	4548      	cmp	r0, r9
    e374:	bfb8      	it	lt
    e376:	4681      	movlt	r9, r0
    e378:	e0de      	b.n	e538 <_svfprintf_r+0x80c>
    e37a:	9807      	ldr	r0, [sp, #28]
    e37c:	f003 fb33 	bl	119e6 <strlen>
    e380:	4681      	mov	r9, r0
    e382:	e0d9      	b.n	e538 <_svfprintf_r+0x80c>
    e384:	f047 0710 	orr.w	r7, r7, #16
    e388:	06bc      	lsls	r4, r7, #26
    e38a:	d508      	bpl.n	e39e <_svfprintf_r+0x672>
    e38c:	f108 0807 	add.w	r8, r8, #7
    e390:	f028 0307 	bic.w	r3, r8, #7
    e394:	f103 0808 	add.w	r8, r3, #8
    e398:	e9d3 4500 	ldrd	r4, r5, [r3]
    e39c:	e00d      	b.n	e3ba <_svfprintf_r+0x68e>
    e39e:	f017 0f10 	tst.w	r7, #16
    e3a2:	f108 0304 	add.w	r3, r8, #4
    e3a6:	d104      	bne.n	e3b2 <_svfprintf_r+0x686>
    e3a8:	0678      	lsls	r0, r7, #25
    e3aa:	d502      	bpl.n	e3b2 <_svfprintf_r+0x686>
    e3ac:	f8b8 4000 	ldrh.w	r4, [r8]
    e3b0:	e001      	b.n	e3b6 <_svfprintf_r+0x68a>
    e3b2:	f8d8 4000 	ldr.w	r4, [r8]
    e3b6:	2500      	movs	r5, #0
    e3b8:	4698      	mov	r8, r3
    e3ba:	2301      	movs	r3, #1
    e3bc:	e02a      	b.n	e414 <_svfprintf_r+0x6e8>
    e3be:	4d83      	ldr	r5, [pc, #524]	; (e5cc <_svfprintf_r+0x8a0>)
    e3c0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e3c4:	951b      	str	r5, [sp, #108]	; 0x6c
    e3c6:	06b9      	lsls	r1, r7, #26
    e3c8:	d508      	bpl.n	e3dc <_svfprintf_r+0x6b0>
    e3ca:	f108 0807 	add.w	r8, r8, #7
    e3ce:	f028 0307 	bic.w	r3, r8, #7
    e3d2:	f103 0808 	add.w	r8, r3, #8
    e3d6:	e9d3 4500 	ldrd	r4, r5, [r3]
    e3da:	e00d      	b.n	e3f8 <_svfprintf_r+0x6cc>
    e3dc:	f017 0f10 	tst.w	r7, #16
    e3e0:	f108 0304 	add.w	r3, r8, #4
    e3e4:	d104      	bne.n	e3f0 <_svfprintf_r+0x6c4>
    e3e6:	067a      	lsls	r2, r7, #25
    e3e8:	d502      	bpl.n	e3f0 <_svfprintf_r+0x6c4>
    e3ea:	f8b8 4000 	ldrh.w	r4, [r8]
    e3ee:	e001      	b.n	e3f4 <_svfprintf_r+0x6c8>
    e3f0:	f8d8 4000 	ldr.w	r4, [r8]
    e3f4:	2500      	movs	r5, #0
    e3f6:	4698      	mov	r8, r3
    e3f8:	07fb      	lsls	r3, r7, #31
    e3fa:	d50a      	bpl.n	e412 <_svfprintf_r+0x6e6>
    e3fc:	ea54 0005 	orrs.w	r0, r4, r5
    e400:	d007      	beq.n	e412 <_svfprintf_r+0x6e6>
    e402:	2330      	movs	r3, #48	; 0x30
    e404:	9908      	ldr	r1, [sp, #32]
    e406:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    e40a:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
    e40e:	f047 0702 	orr.w	r7, r7, #2
    e412:	2302      	movs	r3, #2
    e414:	2200      	movs	r2, #0
    e416:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
    e41a:	e000      	b.n	e41e <_svfprintf_r+0x6f2>
    e41c:	2301      	movs	r3, #1
    e41e:	f1b9 0f00 	cmp.w	r9, #0
    e422:	bfa8      	it	ge
    e424:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    e428:	ea54 0205 	orrs.w	r2, r4, r5
    e42c:	d102      	bne.n	e434 <_svfprintf_r+0x708>
    e42e:	f1b9 0f00 	cmp.w	r9, #0
    e432:	d05a      	beq.n	e4ea <_svfprintf_r+0x7be>
    e434:	2b01      	cmp	r3, #1
    e436:	d01f      	beq.n	e478 <_svfprintf_r+0x74c>
    e438:	2b02      	cmp	r3, #2
    e43a:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
    e43e:	d041      	beq.n	e4c4 <_svfprintf_r+0x798>
    e440:	08e1      	lsrs	r1, r4, #3
    e442:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
    e446:	08e9      	lsrs	r1, r5, #3
    e448:	9014      	str	r0, [sp, #80]	; 0x50
    e44a:	9115      	str	r1, [sp, #84]	; 0x54
    e44c:	f004 0207 	and.w	r2, r4, #7
    e450:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
    e454:	3230      	adds	r2, #48	; 0x30
    e456:	ea54 0005 	orrs.w	r0, r4, r5
    e45a:	9307      	str	r3, [sp, #28]
    e45c:	701a      	strb	r2, [r3, #0]
    e45e:	f103 33ff 	add.w	r3, r3, #4294967295
    e462:	d1ed      	bne.n	e440 <_svfprintf_r+0x714>
    e464:	07f8      	lsls	r0, r7, #31
    e466:	9907      	ldr	r1, [sp, #28]
    e468:	d54c      	bpl.n	e504 <_svfprintf_r+0x7d8>
    e46a:	2a30      	cmp	r2, #48	; 0x30
    e46c:	d04a      	beq.n	e504 <_svfprintf_r+0x7d8>
    e46e:	9307      	str	r3, [sp, #28]
    e470:	2330      	movs	r3, #48	; 0x30
    e472:	f801 3c01 	strb.w	r3, [r1, #-1]
    e476:	e045      	b.n	e504 <_svfprintf_r+0x7d8>
    e478:	2d00      	cmp	r5, #0
    e47a:	bf08      	it	eq
    e47c:	2c0a      	cmpeq	r4, #10
    e47e:	d205      	bcs.n	e48c <_svfprintf_r+0x760>
    e480:	3430      	adds	r4, #48	; 0x30
    e482:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    e486:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
    e48a:	e03a      	b.n	e502 <_svfprintf_r+0x7d6>
    e48c:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
    e490:	900a      	str	r0, [sp, #40]	; 0x28
    e492:	990a      	ldr	r1, [sp, #40]	; 0x28
    e494:	9107      	str	r1, [sp, #28]
    e496:	4620      	mov	r0, r4
    e498:	4629      	mov	r1, r5
    e49a:	220a      	movs	r2, #10
    e49c:	2300      	movs	r3, #0
    e49e:	f7fe fe13 	bl	d0c8 <__aeabi_uldivmod>
    e4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e4a4:	3230      	adds	r2, #48	; 0x30
    e4a6:	f803 2901 	strb.w	r2, [r3], #-1
    e4aa:	4620      	mov	r0, r4
    e4ac:	930a      	str	r3, [sp, #40]	; 0x28
    e4ae:	4629      	mov	r1, r5
    e4b0:	220a      	movs	r2, #10
    e4b2:	2300      	movs	r3, #0
    e4b4:	f7fe fe08 	bl	d0c8 <__aeabi_uldivmod>
    e4b8:	4604      	mov	r4, r0
    e4ba:	460d      	mov	r5, r1
    e4bc:	ea54 0005 	orrs.w	r0, r4, r5
    e4c0:	d1e7      	bne.n	e492 <_svfprintf_r+0x766>
    e4c2:	e01f      	b.n	e504 <_svfprintf_r+0x7d8>
    e4c4:	f004 020f 	and.w	r2, r4, #15
    e4c8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e4ca:	9307      	str	r3, [sp, #28]
    e4cc:	5c8a      	ldrb	r2, [r1, r2]
    e4ce:	f803 2901 	strb.w	r2, [r3], #-1
    e4d2:	0922      	lsrs	r2, r4, #4
    e4d4:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
    e4d8:	0929      	lsrs	r1, r5, #4
    e4da:	9016      	str	r0, [sp, #88]	; 0x58
    e4dc:	9117      	str	r1, [sp, #92]	; 0x5c
    e4de:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    e4e2:	ea54 0205 	orrs.w	r2, r4, r5
    e4e6:	d1ed      	bne.n	e4c4 <_svfprintf_r+0x798>
    e4e8:	e00c      	b.n	e504 <_svfprintf_r+0x7d8>
    e4ea:	b933      	cbnz	r3, e4fa <_svfprintf_r+0x7ce>
    e4ec:	07fb      	lsls	r3, r7, #31
    e4ee:	d507      	bpl.n	e500 <_svfprintf_r+0x7d4>
    e4f0:	ac42      	add	r4, sp, #264	; 0x108
    e4f2:	2330      	movs	r3, #48	; 0x30
    e4f4:	f804 3d41 	strb.w	r3, [r4, #-65]!
    e4f8:	e003      	b.n	e502 <_svfprintf_r+0x7d6>
    e4fa:	ad32      	add	r5, sp, #200	; 0xc8
    e4fc:	9507      	str	r5, [sp, #28]
    e4fe:	e001      	b.n	e504 <_svfprintf_r+0x7d8>
    e500:	ac32      	add	r4, sp, #200	; 0xc8
    e502:	9407      	str	r4, [sp, #28]
    e504:	9c07      	ldr	r4, [sp, #28]
    e506:	464d      	mov	r5, r9
    e508:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
    e50c:	ebc4 0909 	rsb	r9, r4, r9
    e510:	2400      	movs	r4, #0
    e512:	e012      	b.n	e53a <_svfprintf_r+0x80e>
    e514:	9d08      	ldr	r5, [sp, #32]
    e516:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    e51a:	2d00      	cmp	r5, #0
    e51c:	f000 8388 	beq.w	ec30 <_svfprintf_r+0xf04>
    e520:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
    e524:	2500      	movs	r5, #0
    e526:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    e52a:	a828      	add	r0, sp, #160	; 0xa0
    e52c:	f04f 0901 	mov.w	r9, #1
    e530:	462c      	mov	r4, r5
    e532:	9007      	str	r0, [sp, #28]
    e534:	e001      	b.n	e53a <_svfprintf_r+0x80e>
    e536:	4605      	mov	r5, r0
    e538:	462c      	mov	r4, r5
    e53a:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    e53e:	45a9      	cmp	r9, r5
    e540:	bfac      	ite	ge
    e542:	4649      	movge	r1, r9
    e544:	4629      	movlt	r1, r5
    e546:	910a      	str	r1, [sp, #40]	; 0x28
    e548:	b10b      	cbz	r3, e54e <_svfprintf_r+0x822>
    e54a:	3101      	adds	r1, #1
    e54c:	910a      	str	r1, [sp, #40]	; 0x28
    e54e:	f017 0302 	ands.w	r3, r7, #2
    e552:	9311      	str	r3, [sp, #68]	; 0x44
    e554:	d002      	beq.n	e55c <_svfprintf_r+0x830>
    e556:	980a      	ldr	r0, [sp, #40]	; 0x28
    e558:	3002      	adds	r0, #2
    e55a:	900a      	str	r0, [sp, #40]	; 0x28
    e55c:	f017 0384 	ands.w	r3, r7, #132	; 0x84
    e560:	9319      	str	r3, [sp, #100]	; 0x64
    e562:	d140      	bne.n	e5e6 <_svfprintf_r+0x8ba>
    e564:	980e      	ldr	r0, [sp, #56]	; 0x38
    e566:	990a      	ldr	r1, [sp, #40]	; 0x28
    e568:	ebc1 0c00 	rsb	ip, r1, r0
    e56c:	f1bc 0f00 	cmp.w	ip, #0
    e570:	dd39      	ble.n	e5e6 <_svfprintf_r+0x8ba>
    e572:	4b17      	ldr	r3, [pc, #92]	; (e5d0 <_svfprintf_r+0x8a4>)
    e574:	6033      	str	r3, [r6, #0]
    e576:	f1bc 0f10 	cmp.w	ip, #16
    e57a:	dd1b      	ble.n	e5b4 <_svfprintf_r+0x888>
    e57c:	2310      	movs	r3, #16
    e57e:	6073      	str	r3, [r6, #4]
    e580:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e582:	3310      	adds	r3, #16
    e584:	9327      	str	r3, [sp, #156]	; 0x9c
    e586:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e588:	3301      	adds	r3, #1
    e58a:	2b07      	cmp	r3, #7
    e58c:	9326      	str	r3, [sp, #152]	; 0x98
    e58e:	dc01      	bgt.n	e594 <_svfprintf_r+0x868>
    e590:	3608      	adds	r6, #8
    e592:	e00c      	b.n	e5ae <_svfprintf_r+0x882>
    e594:	4650      	mov	r0, sl
    e596:	4659      	mov	r1, fp
    e598:	aa25      	add	r2, sp, #148	; 0x94
    e59a:	f8cd c018 	str.w	ip, [sp, #24]
    e59e:	f003 fa2b 	bl	119f8 <__ssprint_r>
    e5a2:	f8dd c018 	ldr.w	ip, [sp, #24]
    e5a6:	2800      	cmp	r0, #0
    e5a8:	f040 8349 	bne.w	ec3e <_svfprintf_r+0xf12>
    e5ac:	ae32      	add	r6, sp, #200	; 0xc8
    e5ae:	f1ac 0c10 	sub.w	ip, ip, #16
    e5b2:	e7de      	b.n	e572 <_svfprintf_r+0x846>
    e5b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e5b6:	f8c6 c004 	str.w	ip, [r6, #4]
    e5ba:	4463      	add	r3, ip
    e5bc:	9327      	str	r3, [sp, #156]	; 0x9c
    e5be:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e5c0:	3301      	adds	r3, #1
    e5c2:	2b07      	cmp	r3, #7
    e5c4:	9326      	str	r3, [sp, #152]	; 0x98
    e5c6:	dc05      	bgt.n	e5d4 <_svfprintf_r+0x8a8>
    e5c8:	3608      	adds	r6, #8
    e5ca:	e00c      	b.n	e5e6 <_svfprintf_r+0x8ba>
    e5cc:	00012ff3 	.word	0x00012ff3
    e5d0:	00012fb2 	.word	0x00012fb2
    e5d4:	4650      	mov	r0, sl
    e5d6:	4659      	mov	r1, fp
    e5d8:	aa25      	add	r2, sp, #148	; 0x94
    e5da:	f003 fa0d 	bl	119f8 <__ssprint_r>
    e5de:	2800      	cmp	r0, #0
    e5e0:	f040 832d 	bne.w	ec3e <_svfprintf_r+0xf12>
    e5e4:	ae32      	add	r6, sp, #200	; 0xc8
    e5e6:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    e5ea:	b1bb      	cbz	r3, e61c <_svfprintf_r+0x8f0>
    e5ec:	f10d 0377 	add.w	r3, sp, #119	; 0x77
    e5f0:	6033      	str	r3, [r6, #0]
    e5f2:	2301      	movs	r3, #1
    e5f4:	6073      	str	r3, [r6, #4]
    e5f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e5f8:	3301      	adds	r3, #1
    e5fa:	9327      	str	r3, [sp, #156]	; 0x9c
    e5fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e5fe:	3301      	adds	r3, #1
    e600:	2b07      	cmp	r3, #7
    e602:	9326      	str	r3, [sp, #152]	; 0x98
    e604:	dc01      	bgt.n	e60a <_svfprintf_r+0x8de>
    e606:	3608      	adds	r6, #8
    e608:	e008      	b.n	e61c <_svfprintf_r+0x8f0>
    e60a:	4650      	mov	r0, sl
    e60c:	4659      	mov	r1, fp
    e60e:	aa25      	add	r2, sp, #148	; 0x94
    e610:	f003 f9f2 	bl	119f8 <__ssprint_r>
    e614:	2800      	cmp	r0, #0
    e616:	f040 8312 	bne.w	ec3e <_svfprintf_r+0xf12>
    e61a:	ae32      	add	r6, sp, #200	; 0xc8
    e61c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e61e:	b1b3      	cbz	r3, e64e <_svfprintf_r+0x922>
    e620:	ab1e      	add	r3, sp, #120	; 0x78
    e622:	6033      	str	r3, [r6, #0]
    e624:	2302      	movs	r3, #2
    e626:	6073      	str	r3, [r6, #4]
    e628:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e62a:	3302      	adds	r3, #2
    e62c:	9327      	str	r3, [sp, #156]	; 0x9c
    e62e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e630:	3301      	adds	r3, #1
    e632:	2b07      	cmp	r3, #7
    e634:	9326      	str	r3, [sp, #152]	; 0x98
    e636:	dc01      	bgt.n	e63c <_svfprintf_r+0x910>
    e638:	3608      	adds	r6, #8
    e63a:	e008      	b.n	e64e <_svfprintf_r+0x922>
    e63c:	4650      	mov	r0, sl
    e63e:	4659      	mov	r1, fp
    e640:	aa25      	add	r2, sp, #148	; 0x94
    e642:	f003 f9d9 	bl	119f8 <__ssprint_r>
    e646:	2800      	cmp	r0, #0
    e648:	f040 82f9 	bne.w	ec3e <_svfprintf_r+0xf12>
    e64c:	ae32      	add	r6, sp, #200	; 0xc8
    e64e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e650:	2b80      	cmp	r3, #128	; 0x80
    e652:	d13c      	bne.n	e6ce <_svfprintf_r+0x9a2>
    e654:	980e      	ldr	r0, [sp, #56]	; 0x38
    e656:	990a      	ldr	r1, [sp, #40]	; 0x28
    e658:	ebc1 0c00 	rsb	ip, r1, r0
    e65c:	f1bc 0f00 	cmp.w	ip, #0
    e660:	dd35      	ble.n	e6ce <_svfprintf_r+0x9a2>
    e662:	4b9c      	ldr	r3, [pc, #624]	; (e8d4 <_svfprintf_r+0xba8>)
    e664:	6033      	str	r3, [r6, #0]
    e666:	f1bc 0f10 	cmp.w	ip, #16
    e66a:	dd1b      	ble.n	e6a4 <_svfprintf_r+0x978>
    e66c:	2310      	movs	r3, #16
    e66e:	6073      	str	r3, [r6, #4]
    e670:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e672:	3310      	adds	r3, #16
    e674:	9327      	str	r3, [sp, #156]	; 0x9c
    e676:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e678:	3301      	adds	r3, #1
    e67a:	2b07      	cmp	r3, #7
    e67c:	9326      	str	r3, [sp, #152]	; 0x98
    e67e:	dc01      	bgt.n	e684 <_svfprintf_r+0x958>
    e680:	3608      	adds	r6, #8
    e682:	e00c      	b.n	e69e <_svfprintf_r+0x972>
    e684:	4650      	mov	r0, sl
    e686:	4659      	mov	r1, fp
    e688:	aa25      	add	r2, sp, #148	; 0x94
    e68a:	f8cd c018 	str.w	ip, [sp, #24]
    e68e:	f003 f9b3 	bl	119f8 <__ssprint_r>
    e692:	f8dd c018 	ldr.w	ip, [sp, #24]
    e696:	2800      	cmp	r0, #0
    e698:	f040 82d1 	bne.w	ec3e <_svfprintf_r+0xf12>
    e69c:	ae32      	add	r6, sp, #200	; 0xc8
    e69e:	f1ac 0c10 	sub.w	ip, ip, #16
    e6a2:	e7de      	b.n	e662 <_svfprintf_r+0x936>
    e6a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e6a6:	f8c6 c004 	str.w	ip, [r6, #4]
    e6aa:	4463      	add	r3, ip
    e6ac:	9327      	str	r3, [sp, #156]	; 0x9c
    e6ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e6b0:	3301      	adds	r3, #1
    e6b2:	2b07      	cmp	r3, #7
    e6b4:	9326      	str	r3, [sp, #152]	; 0x98
    e6b6:	dc01      	bgt.n	e6bc <_svfprintf_r+0x990>
    e6b8:	3608      	adds	r6, #8
    e6ba:	e008      	b.n	e6ce <_svfprintf_r+0x9a2>
    e6bc:	4650      	mov	r0, sl
    e6be:	4659      	mov	r1, fp
    e6c0:	aa25      	add	r2, sp, #148	; 0x94
    e6c2:	f003 f999 	bl	119f8 <__ssprint_r>
    e6c6:	2800      	cmp	r0, #0
    e6c8:	f040 82b9 	bne.w	ec3e <_svfprintf_r+0xf12>
    e6cc:	ae32      	add	r6, sp, #200	; 0xc8
    e6ce:	ebc9 0505 	rsb	r5, r9, r5
    e6d2:	2d00      	cmp	r5, #0
    e6d4:	dd2e      	ble.n	e734 <_svfprintf_r+0xa08>
    e6d6:	4b7f      	ldr	r3, [pc, #508]	; (e8d4 <_svfprintf_r+0xba8>)
    e6d8:	6033      	str	r3, [r6, #0]
    e6da:	2d10      	cmp	r5, #16
    e6dc:	dd16      	ble.n	e70c <_svfprintf_r+0x9e0>
    e6de:	2310      	movs	r3, #16
    e6e0:	6073      	str	r3, [r6, #4]
    e6e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e6e4:	3310      	adds	r3, #16
    e6e6:	9327      	str	r3, [sp, #156]	; 0x9c
    e6e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e6ea:	3301      	adds	r3, #1
    e6ec:	2b07      	cmp	r3, #7
    e6ee:	9326      	str	r3, [sp, #152]	; 0x98
    e6f0:	dc01      	bgt.n	e6f6 <_svfprintf_r+0x9ca>
    e6f2:	3608      	adds	r6, #8
    e6f4:	e008      	b.n	e708 <_svfprintf_r+0x9dc>
    e6f6:	4650      	mov	r0, sl
    e6f8:	4659      	mov	r1, fp
    e6fa:	aa25      	add	r2, sp, #148	; 0x94
    e6fc:	f003 f97c 	bl	119f8 <__ssprint_r>
    e700:	2800      	cmp	r0, #0
    e702:	f040 829c 	bne.w	ec3e <_svfprintf_r+0xf12>
    e706:	ae32      	add	r6, sp, #200	; 0xc8
    e708:	3d10      	subs	r5, #16
    e70a:	e7e4      	b.n	e6d6 <_svfprintf_r+0x9aa>
    e70c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e70e:	6075      	str	r5, [r6, #4]
    e710:	441d      	add	r5, r3
    e712:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e714:	9527      	str	r5, [sp, #156]	; 0x9c
    e716:	3301      	adds	r3, #1
    e718:	2b07      	cmp	r3, #7
    e71a:	9326      	str	r3, [sp, #152]	; 0x98
    e71c:	dc01      	bgt.n	e722 <_svfprintf_r+0x9f6>
    e71e:	3608      	adds	r6, #8
    e720:	e008      	b.n	e734 <_svfprintf_r+0xa08>
    e722:	4650      	mov	r0, sl
    e724:	4659      	mov	r1, fp
    e726:	aa25      	add	r2, sp, #148	; 0x94
    e728:	f003 f966 	bl	119f8 <__ssprint_r>
    e72c:	2800      	cmp	r0, #0
    e72e:	f040 8286 	bne.w	ec3e <_svfprintf_r+0xf12>
    e732:	ae32      	add	r6, sp, #200	; 0xc8
    e734:	05fd      	lsls	r5, r7, #23
    e736:	d405      	bmi.n	e744 <_svfprintf_r+0xa18>
    e738:	9c07      	ldr	r4, [sp, #28]
    e73a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e73c:	e886 0210 	stmia.w	r6, {r4, r9}
    e740:	444b      	add	r3, r9
    e742:	e0da      	b.n	e8fa <_svfprintf_r+0xbce>
    e744:	9d08      	ldr	r5, [sp, #32]
    e746:	2d65      	cmp	r5, #101	; 0x65
    e748:	f340 81a7 	ble.w	ea9a <_svfprintf_r+0xd6e>
    e74c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e750:	2200      	movs	r2, #0
    e752:	2300      	movs	r3, #0
    e754:	f7fe fc66 	bl	d024 <__aeabi_dcmpeq>
    e758:	2800      	cmp	r0, #0
    e75a:	d059      	beq.n	e810 <_svfprintf_r+0xae4>
    e75c:	4b5e      	ldr	r3, [pc, #376]	; (e8d8 <_svfprintf_r+0xbac>)
    e75e:	6033      	str	r3, [r6, #0]
    e760:	2301      	movs	r3, #1
    e762:	6073      	str	r3, [r6, #4]
    e764:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e766:	3301      	adds	r3, #1
    e768:	9327      	str	r3, [sp, #156]	; 0x9c
    e76a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e76c:	3301      	adds	r3, #1
    e76e:	2b07      	cmp	r3, #7
    e770:	9326      	str	r3, [sp, #152]	; 0x98
    e772:	dc01      	bgt.n	e778 <_svfprintf_r+0xa4c>
    e774:	3608      	adds	r6, #8
    e776:	e008      	b.n	e78a <_svfprintf_r+0xa5e>
    e778:	4650      	mov	r0, sl
    e77a:	4659      	mov	r1, fp
    e77c:	aa25      	add	r2, sp, #148	; 0x94
    e77e:	f003 f93b 	bl	119f8 <__ssprint_r>
    e782:	2800      	cmp	r0, #0
    e784:	f040 825b 	bne.w	ec3e <_svfprintf_r+0xf12>
    e788:	ae32      	add	r6, sp, #200	; 0xc8
    e78a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e78c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e78e:	42a3      	cmp	r3, r4
    e790:	db02      	blt.n	e798 <_svfprintf_r+0xa6c>
    e792:	07fc      	lsls	r4, r7, #31
    e794:	f140 8202 	bpl.w	eb9c <_svfprintf_r+0xe70>
    e798:	9c10      	ldr	r4, [sp, #64]	; 0x40
    e79a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e79c:	9d18      	ldr	r5, [sp, #96]	; 0x60
    e79e:	6035      	str	r5, [r6, #0]
    e7a0:	4423      	add	r3, r4
    e7a2:	9327      	str	r3, [sp, #156]	; 0x9c
    e7a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e7a6:	6074      	str	r4, [r6, #4]
    e7a8:	3301      	adds	r3, #1
    e7aa:	2b07      	cmp	r3, #7
    e7ac:	9326      	str	r3, [sp, #152]	; 0x98
    e7ae:	dc01      	bgt.n	e7b4 <_svfprintf_r+0xa88>
    e7b0:	3608      	adds	r6, #8
    e7b2:	e008      	b.n	e7c6 <_svfprintf_r+0xa9a>
    e7b4:	4650      	mov	r0, sl
    e7b6:	4659      	mov	r1, fp
    e7b8:	aa25      	add	r2, sp, #148	; 0x94
    e7ba:	f003 f91d 	bl	119f8 <__ssprint_r>
    e7be:	2800      	cmp	r0, #0
    e7c0:	f040 823d 	bne.w	ec3e <_svfprintf_r+0xf12>
    e7c4:	ae32      	add	r6, sp, #200	; 0xc8
    e7c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    e7c8:	1e6c      	subs	r4, r5, #1
    e7ca:	2c00      	cmp	r4, #0
    e7cc:	f340 81e6 	ble.w	eb9c <_svfprintf_r+0xe70>
    e7d0:	4b40      	ldr	r3, [pc, #256]	; (e8d4 <_svfprintf_r+0xba8>)
    e7d2:	6033      	str	r3, [r6, #0]
    e7d4:	2c10      	cmp	r4, #16
    e7d6:	dd16      	ble.n	e806 <_svfprintf_r+0xada>
    e7d8:	2310      	movs	r3, #16
    e7da:	6073      	str	r3, [r6, #4]
    e7dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e7de:	3310      	adds	r3, #16
    e7e0:	9327      	str	r3, [sp, #156]	; 0x9c
    e7e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e7e4:	3301      	adds	r3, #1
    e7e6:	2b07      	cmp	r3, #7
    e7e8:	9326      	str	r3, [sp, #152]	; 0x98
    e7ea:	dc01      	bgt.n	e7f0 <_svfprintf_r+0xac4>
    e7ec:	3608      	adds	r6, #8
    e7ee:	e008      	b.n	e802 <_svfprintf_r+0xad6>
    e7f0:	4650      	mov	r0, sl
    e7f2:	4659      	mov	r1, fp
    e7f4:	aa25      	add	r2, sp, #148	; 0x94
    e7f6:	f003 f8ff 	bl	119f8 <__ssprint_r>
    e7fa:	2800      	cmp	r0, #0
    e7fc:	f040 821f 	bne.w	ec3e <_svfprintf_r+0xf12>
    e800:	ae32      	add	r6, sp, #200	; 0xc8
    e802:	3c10      	subs	r4, #16
    e804:	e7e4      	b.n	e7d0 <_svfprintf_r+0xaa4>
    e806:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e808:	6074      	str	r4, [r6, #4]
    e80a:	441c      	add	r4, r3
    e80c:	9427      	str	r4, [sp, #156]	; 0x9c
    e80e:	e134      	b.n	ea7a <_svfprintf_r+0xd4e>
    e810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e812:	2b00      	cmp	r3, #0
    e814:	dc73      	bgt.n	e8fe <_svfprintf_r+0xbd2>
    e816:	4b30      	ldr	r3, [pc, #192]	; (e8d8 <_svfprintf_r+0xbac>)
    e818:	6033      	str	r3, [r6, #0]
    e81a:	2301      	movs	r3, #1
    e81c:	6073      	str	r3, [r6, #4]
    e81e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e820:	3301      	adds	r3, #1
    e822:	9327      	str	r3, [sp, #156]	; 0x9c
    e824:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e826:	3301      	adds	r3, #1
    e828:	2b07      	cmp	r3, #7
    e82a:	9326      	str	r3, [sp, #152]	; 0x98
    e82c:	dc01      	bgt.n	e832 <_svfprintf_r+0xb06>
    e82e:	3608      	adds	r6, #8
    e830:	e008      	b.n	e844 <_svfprintf_r+0xb18>
    e832:	4650      	mov	r0, sl
    e834:	4659      	mov	r1, fp
    e836:	aa25      	add	r2, sp, #148	; 0x94
    e838:	f003 f8de 	bl	119f8 <__ssprint_r>
    e83c:	2800      	cmp	r0, #0
    e83e:	f040 81fe 	bne.w	ec3e <_svfprintf_r+0xf12>
    e842:	ae32      	add	r6, sp, #200	; 0xc8
    e844:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e846:	b923      	cbnz	r3, e852 <_svfprintf_r+0xb26>
    e848:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e84a:	b914      	cbnz	r4, e852 <_svfprintf_r+0xb26>
    e84c:	07f8      	lsls	r0, r7, #31
    e84e:	f140 81a5 	bpl.w	eb9c <_svfprintf_r+0xe70>
    e852:	9c10      	ldr	r4, [sp, #64]	; 0x40
    e854:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e856:	9d18      	ldr	r5, [sp, #96]	; 0x60
    e858:	6035      	str	r5, [r6, #0]
    e85a:	4423      	add	r3, r4
    e85c:	9327      	str	r3, [sp, #156]	; 0x9c
    e85e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e860:	6074      	str	r4, [r6, #4]
    e862:	3301      	adds	r3, #1
    e864:	2b07      	cmp	r3, #7
    e866:	9326      	str	r3, [sp, #152]	; 0x98
    e868:	dc01      	bgt.n	e86e <_svfprintf_r+0xb42>
    e86a:	3608      	adds	r6, #8
    e86c:	e008      	b.n	e880 <_svfprintf_r+0xb54>
    e86e:	4650      	mov	r0, sl
    e870:	4659      	mov	r1, fp
    e872:	aa25      	add	r2, sp, #148	; 0x94
    e874:	f003 f8c0 	bl	119f8 <__ssprint_r>
    e878:	2800      	cmp	r0, #0
    e87a:	f040 81e0 	bne.w	ec3e <_svfprintf_r+0xf12>
    e87e:	ae32      	add	r6, sp, #200	; 0xc8
    e880:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    e882:	4264      	negs	r4, r4
    e884:	2c00      	cmp	r4, #0
    e886:	dd32      	ble.n	e8ee <_svfprintf_r+0xbc2>
    e888:	4b12      	ldr	r3, [pc, #72]	; (e8d4 <_svfprintf_r+0xba8>)
    e88a:	6033      	str	r3, [r6, #0]
    e88c:	2c10      	cmp	r4, #16
    e88e:	dd16      	ble.n	e8be <_svfprintf_r+0xb92>
    e890:	2310      	movs	r3, #16
    e892:	6073      	str	r3, [r6, #4]
    e894:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e896:	3310      	adds	r3, #16
    e898:	9327      	str	r3, [sp, #156]	; 0x9c
    e89a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e89c:	3301      	adds	r3, #1
    e89e:	2b07      	cmp	r3, #7
    e8a0:	9326      	str	r3, [sp, #152]	; 0x98
    e8a2:	dc01      	bgt.n	e8a8 <_svfprintf_r+0xb7c>
    e8a4:	3608      	adds	r6, #8
    e8a6:	e008      	b.n	e8ba <_svfprintf_r+0xb8e>
    e8a8:	4650      	mov	r0, sl
    e8aa:	4659      	mov	r1, fp
    e8ac:	aa25      	add	r2, sp, #148	; 0x94
    e8ae:	f003 f8a3 	bl	119f8 <__ssprint_r>
    e8b2:	2800      	cmp	r0, #0
    e8b4:	f040 81c3 	bne.w	ec3e <_svfprintf_r+0xf12>
    e8b8:	ae32      	add	r6, sp, #200	; 0xc8
    e8ba:	3c10      	subs	r4, #16
    e8bc:	e7e4      	b.n	e888 <_svfprintf_r+0xb5c>
    e8be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e8c0:	6074      	str	r4, [r6, #4]
    e8c2:	441c      	add	r4, r3
    e8c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e8c6:	9427      	str	r4, [sp, #156]	; 0x9c
    e8c8:	3301      	adds	r3, #1
    e8ca:	2b07      	cmp	r3, #7
    e8cc:	9326      	str	r3, [sp, #152]	; 0x98
    e8ce:	dc05      	bgt.n	e8dc <_svfprintf_r+0xbb0>
    e8d0:	3608      	adds	r6, #8
    e8d2:	e00c      	b.n	e8ee <_svfprintf_r+0xbc2>
    e8d4:	00012fc2 	.word	0x00012fc2
    e8d8:	00013004 	.word	0x00013004
    e8dc:	4650      	mov	r0, sl
    e8de:	4659      	mov	r1, fp
    e8e0:	aa25      	add	r2, sp, #148	; 0x94
    e8e2:	f003 f889 	bl	119f8 <__ssprint_r>
    e8e6:	2800      	cmp	r0, #0
    e8e8:	f040 81a9 	bne.w	ec3e <_svfprintf_r+0xf12>
    e8ec:	ae32      	add	r6, sp, #200	; 0xc8
    e8ee:	9d07      	ldr	r5, [sp, #28]
    e8f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e8f2:	6035      	str	r5, [r6, #0]
    e8f4:	6074      	str	r4, [r6, #4]
    e8f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e8f8:	4423      	add	r3, r4
    e8fa:	9327      	str	r3, [sp, #156]	; 0x9c
    e8fc:	e0bd      	b.n	ea7a <_svfprintf_r+0xd4e>
    e8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    e900:	9d07      	ldr	r5, [sp, #28]
    e902:	4681      	mov	r9, r0
    e904:	45a1      	cmp	r9, r4
    e906:	bfa8      	it	ge
    e908:	46a1      	movge	r9, r4
    e90a:	f1b9 0f00 	cmp.w	r9, #0
    e90e:	4405      	add	r5, r0
    e910:	dd15      	ble.n	e93e <_svfprintf_r+0xc12>
    e912:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e914:	9907      	ldr	r1, [sp, #28]
    e916:	444b      	add	r3, r9
    e918:	9327      	str	r3, [sp, #156]	; 0x9c
    e91a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e91c:	3301      	adds	r3, #1
    e91e:	2b07      	cmp	r3, #7
    e920:	e886 0202 	stmia.w	r6, {r1, r9}
    e924:	9326      	str	r3, [sp, #152]	; 0x98
    e926:	dc01      	bgt.n	e92c <_svfprintf_r+0xc00>
    e928:	3608      	adds	r6, #8
    e92a:	e008      	b.n	e93e <_svfprintf_r+0xc12>
    e92c:	4650      	mov	r0, sl
    e92e:	4659      	mov	r1, fp
    e930:	aa25      	add	r2, sp, #148	; 0x94
    e932:	f003 f861 	bl	119f8 <__ssprint_r>
    e936:	2800      	cmp	r0, #0
    e938:	f040 8181 	bne.w	ec3e <_svfprintf_r+0xf12>
    e93c:	ae32      	add	r6, sp, #200	; 0xc8
    e93e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    e942:	ebc9 0904 	rsb	r9, r9, r4
    e946:	f1b9 0f00 	cmp.w	r9, #0
    e94a:	dd31      	ble.n	e9b0 <_svfprintf_r+0xc84>
    e94c:	4b9a      	ldr	r3, [pc, #616]	; (ebb8 <_svfprintf_r+0xe8c>)
    e94e:	6033      	str	r3, [r6, #0]
    e950:	f1b9 0f10 	cmp.w	r9, #16
    e954:	dd17      	ble.n	e986 <_svfprintf_r+0xc5a>
    e956:	2310      	movs	r3, #16
    e958:	6073      	str	r3, [r6, #4]
    e95a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e95c:	3310      	adds	r3, #16
    e95e:	9327      	str	r3, [sp, #156]	; 0x9c
    e960:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e962:	3301      	adds	r3, #1
    e964:	2b07      	cmp	r3, #7
    e966:	9326      	str	r3, [sp, #152]	; 0x98
    e968:	dc01      	bgt.n	e96e <_svfprintf_r+0xc42>
    e96a:	3608      	adds	r6, #8
    e96c:	e008      	b.n	e980 <_svfprintf_r+0xc54>
    e96e:	4650      	mov	r0, sl
    e970:	4659      	mov	r1, fp
    e972:	aa25      	add	r2, sp, #148	; 0x94
    e974:	f003 f840 	bl	119f8 <__ssprint_r>
    e978:	2800      	cmp	r0, #0
    e97a:	f040 8160 	bne.w	ec3e <_svfprintf_r+0xf12>
    e97e:	ae32      	add	r6, sp, #200	; 0xc8
    e980:	f1a9 0910 	sub.w	r9, r9, #16
    e984:	e7e2      	b.n	e94c <_svfprintf_r+0xc20>
    e986:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e988:	f8c6 9004 	str.w	r9, [r6, #4]
    e98c:	444b      	add	r3, r9
    e98e:	9327      	str	r3, [sp, #156]	; 0x9c
    e990:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e992:	3301      	adds	r3, #1
    e994:	2b07      	cmp	r3, #7
    e996:	9326      	str	r3, [sp, #152]	; 0x98
    e998:	dc01      	bgt.n	e99e <_svfprintf_r+0xc72>
    e99a:	3608      	adds	r6, #8
    e99c:	e008      	b.n	e9b0 <_svfprintf_r+0xc84>
    e99e:	4650      	mov	r0, sl
    e9a0:	4659      	mov	r1, fp
    e9a2:	aa25      	add	r2, sp, #148	; 0x94
    e9a4:	f003 f828 	bl	119f8 <__ssprint_r>
    e9a8:	2800      	cmp	r0, #0
    e9aa:	f040 8148 	bne.w	ec3e <_svfprintf_r+0xf12>
    e9ae:	ae32      	add	r6, sp, #200	; 0xc8
    e9b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    e9b4:	9a07      	ldr	r2, [sp, #28]
    e9b6:	4283      	cmp	r3, r0
    e9b8:	4414      	add	r4, r2
    e9ba:	db01      	blt.n	e9c0 <_svfprintf_r+0xc94>
    e9bc:	07f9      	lsls	r1, r7, #31
    e9be:	d516      	bpl.n	e9ee <_svfprintf_r+0xcc2>
    e9c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e9c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    e9c4:	9918      	ldr	r1, [sp, #96]	; 0x60
    e9c6:	6031      	str	r1, [r6, #0]
    e9c8:	4413      	add	r3, r2
    e9ca:	9327      	str	r3, [sp, #156]	; 0x9c
    e9cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e9ce:	6072      	str	r2, [r6, #4]
    e9d0:	3301      	adds	r3, #1
    e9d2:	2b07      	cmp	r3, #7
    e9d4:	9326      	str	r3, [sp, #152]	; 0x98
    e9d6:	dc01      	bgt.n	e9dc <_svfprintf_r+0xcb0>
    e9d8:	3608      	adds	r6, #8
    e9da:	e008      	b.n	e9ee <_svfprintf_r+0xcc2>
    e9dc:	4650      	mov	r0, sl
    e9de:	4659      	mov	r1, fp
    e9e0:	aa25      	add	r2, sp, #148	; 0x94
    e9e2:	f003 f809 	bl	119f8 <__ssprint_r>
    e9e6:	2800      	cmp	r0, #0
    e9e8:	f040 8129 	bne.w	ec3e <_svfprintf_r+0xf12>
    e9ec:	ae32      	add	r6, sp, #200	; 0xc8
    e9ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    e9f2:	1b2d      	subs	r5, r5, r4
    e9f4:	1ac3      	subs	r3, r0, r3
    e9f6:	429d      	cmp	r5, r3
    e9f8:	bfa8      	it	ge
    e9fa:	461d      	movge	r5, r3
    e9fc:	2d00      	cmp	r5, #0
    e9fe:	dd14      	ble.n	ea2a <_svfprintf_r+0xcfe>
    ea00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ea02:	442b      	add	r3, r5
    ea04:	9327      	str	r3, [sp, #156]	; 0x9c
    ea06:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ea08:	3301      	adds	r3, #1
    ea0a:	2b07      	cmp	r3, #7
    ea0c:	e886 0030 	stmia.w	r6, {r4, r5}
    ea10:	9326      	str	r3, [sp, #152]	; 0x98
    ea12:	dc01      	bgt.n	ea18 <_svfprintf_r+0xcec>
    ea14:	3608      	adds	r6, #8
    ea16:	e008      	b.n	ea2a <_svfprintf_r+0xcfe>
    ea18:	4650      	mov	r0, sl
    ea1a:	4659      	mov	r1, fp
    ea1c:	aa25      	add	r2, sp, #148	; 0x94
    ea1e:	f002 ffeb 	bl	119f8 <__ssprint_r>
    ea22:	2800      	cmp	r0, #0
    ea24:	f040 810b 	bne.w	ec3e <_svfprintf_r+0xf12>
    ea28:	ae32      	add	r6, sp, #200	; 0xc8
    ea2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ea2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ea2e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    ea32:	1ae3      	subs	r3, r4, r3
    ea34:	1b5d      	subs	r5, r3, r5
    ea36:	2d00      	cmp	r5, #0
    ea38:	f340 80b0 	ble.w	eb9c <_svfprintf_r+0xe70>
    ea3c:	4b5e      	ldr	r3, [pc, #376]	; (ebb8 <_svfprintf_r+0xe8c>)
    ea3e:	6033      	str	r3, [r6, #0]
    ea40:	2d10      	cmp	r5, #16
    ea42:	dd16      	ble.n	ea72 <_svfprintf_r+0xd46>
    ea44:	2310      	movs	r3, #16
    ea46:	6073      	str	r3, [r6, #4]
    ea48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ea4a:	3310      	adds	r3, #16
    ea4c:	9327      	str	r3, [sp, #156]	; 0x9c
    ea4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ea50:	3301      	adds	r3, #1
    ea52:	2b07      	cmp	r3, #7
    ea54:	9326      	str	r3, [sp, #152]	; 0x98
    ea56:	dc01      	bgt.n	ea5c <_svfprintf_r+0xd30>
    ea58:	3608      	adds	r6, #8
    ea5a:	e008      	b.n	ea6e <_svfprintf_r+0xd42>
    ea5c:	4650      	mov	r0, sl
    ea5e:	4659      	mov	r1, fp
    ea60:	aa25      	add	r2, sp, #148	; 0x94
    ea62:	f002 ffc9 	bl	119f8 <__ssprint_r>
    ea66:	2800      	cmp	r0, #0
    ea68:	f040 80e9 	bne.w	ec3e <_svfprintf_r+0xf12>
    ea6c:	ae32      	add	r6, sp, #200	; 0xc8
    ea6e:	3d10      	subs	r5, #16
    ea70:	e7e4      	b.n	ea3c <_svfprintf_r+0xd10>
    ea72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ea74:	6075      	str	r5, [r6, #4]
    ea76:	441d      	add	r5, r3
    ea78:	9527      	str	r5, [sp, #156]	; 0x9c
    ea7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ea7c:	3301      	adds	r3, #1
    ea7e:	2b07      	cmp	r3, #7
    ea80:	9326      	str	r3, [sp, #152]	; 0x98
    ea82:	f340 808a 	ble.w	eb9a <_svfprintf_r+0xe6e>
    ea86:	4650      	mov	r0, sl
    ea88:	4659      	mov	r1, fp
    ea8a:	aa25      	add	r2, sp, #148	; 0x94
    ea8c:	f002 ffb4 	bl	119f8 <__ssprint_r>
    ea90:	2800      	cmp	r0, #0
    ea92:	f040 80d4 	bne.w	ec3e <_svfprintf_r+0xf12>
    ea96:	ae32      	add	r6, sp, #200	; 0xc8
    ea98:	e080      	b.n	eb9c <_svfprintf_r+0xe70>
    ea9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ea9c:	2d01      	cmp	r5, #1
    ea9e:	dc01      	bgt.n	eaa4 <_svfprintf_r+0xd78>
    eaa0:	07fa      	lsls	r2, r7, #31
    eaa2:	d56d      	bpl.n	eb80 <_svfprintf_r+0xe54>
    eaa4:	2301      	movs	r3, #1
    eaa6:	6073      	str	r3, [r6, #4]
    eaa8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eaaa:	9c07      	ldr	r4, [sp, #28]
    eaac:	6034      	str	r4, [r6, #0]
    eaae:	3301      	adds	r3, #1
    eab0:	9327      	str	r3, [sp, #156]	; 0x9c
    eab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    eab4:	3301      	adds	r3, #1
    eab6:	2b07      	cmp	r3, #7
    eab8:	9326      	str	r3, [sp, #152]	; 0x98
    eaba:	dc01      	bgt.n	eac0 <_svfprintf_r+0xd94>
    eabc:	3608      	adds	r6, #8
    eabe:	e008      	b.n	ead2 <_svfprintf_r+0xda6>
    eac0:	4650      	mov	r0, sl
    eac2:	4659      	mov	r1, fp
    eac4:	aa25      	add	r2, sp, #148	; 0x94
    eac6:	f002 ff97 	bl	119f8 <__ssprint_r>
    eaca:	2800      	cmp	r0, #0
    eacc:	f040 80b7 	bne.w	ec3e <_svfprintf_r+0xf12>
    ead0:	ae32      	add	r6, sp, #200	; 0xc8
    ead2:	9c10      	ldr	r4, [sp, #64]	; 0x40
    ead4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ead6:	9d18      	ldr	r5, [sp, #96]	; 0x60
    ead8:	6035      	str	r5, [r6, #0]
    eada:	4423      	add	r3, r4
    eadc:	9327      	str	r3, [sp, #156]	; 0x9c
    eade:	9b26      	ldr	r3, [sp, #152]	; 0x98
    eae0:	6074      	str	r4, [r6, #4]
    eae2:	3301      	adds	r3, #1
    eae4:	2b07      	cmp	r3, #7
    eae6:	9326      	str	r3, [sp, #152]	; 0x98
    eae8:	dc01      	bgt.n	eaee <_svfprintf_r+0xdc2>
    eaea:	3608      	adds	r6, #8
    eaec:	e008      	b.n	eb00 <_svfprintf_r+0xdd4>
    eaee:	4650      	mov	r0, sl
    eaf0:	4659      	mov	r1, fp
    eaf2:	aa25      	add	r2, sp, #148	; 0x94
    eaf4:	f002 ff80 	bl	119f8 <__ssprint_r>
    eaf8:	2800      	cmp	r0, #0
    eafa:	f040 80a0 	bne.w	ec3e <_svfprintf_r+0xf12>
    eafe:	ae32      	add	r6, sp, #200	; 0xc8
    eb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    eb04:	2200      	movs	r2, #0
    eb06:	2300      	movs	r3, #0
    eb08:	f7fe fa8c 	bl	d024 <__aeabi_dcmpeq>
    eb0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    eb0e:	1e6c      	subs	r4, r5, #1
    eb10:	b940      	cbnz	r0, eb24 <_svfprintf_r+0xdf8>
    eb12:	9d07      	ldr	r5, [sp, #28]
    eb14:	1c6b      	adds	r3, r5, #1
    eb16:	e886 0018 	stmia.w	r6, {r3, r4}
    eb1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eb1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    eb1e:	3b01      	subs	r3, #1
    eb20:	4423      	add	r3, r4
    eb22:	e033      	b.n	eb8c <_svfprintf_r+0xe60>
    eb24:	2c00      	cmp	r4, #0
    eb26:	dd34      	ble.n	eb92 <_svfprintf_r+0xe66>
    eb28:	4b23      	ldr	r3, [pc, #140]	; (ebb8 <_svfprintf_r+0xe8c>)
    eb2a:	6033      	str	r3, [r6, #0]
    eb2c:	2c10      	cmp	r4, #16
    eb2e:	dd15      	ble.n	eb5c <_svfprintf_r+0xe30>
    eb30:	2310      	movs	r3, #16
    eb32:	6073      	str	r3, [r6, #4]
    eb34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eb36:	3310      	adds	r3, #16
    eb38:	9327      	str	r3, [sp, #156]	; 0x9c
    eb3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    eb3c:	3301      	adds	r3, #1
    eb3e:	2b07      	cmp	r3, #7
    eb40:	9326      	str	r3, [sp, #152]	; 0x98
    eb42:	dc01      	bgt.n	eb48 <_svfprintf_r+0xe1c>
    eb44:	3608      	adds	r6, #8
    eb46:	e007      	b.n	eb58 <_svfprintf_r+0xe2c>
    eb48:	4650      	mov	r0, sl
    eb4a:	4659      	mov	r1, fp
    eb4c:	aa25      	add	r2, sp, #148	; 0x94
    eb4e:	f002 ff53 	bl	119f8 <__ssprint_r>
    eb52:	2800      	cmp	r0, #0
    eb54:	d173      	bne.n	ec3e <_svfprintf_r+0xf12>
    eb56:	ae32      	add	r6, sp, #200	; 0xc8
    eb58:	3c10      	subs	r4, #16
    eb5a:	e7e5      	b.n	eb28 <_svfprintf_r+0xdfc>
    eb5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eb5e:	6074      	str	r4, [r6, #4]
    eb60:	441c      	add	r4, r3
    eb62:	9427      	str	r4, [sp, #156]	; 0x9c
    eb64:	9b26      	ldr	r3, [sp, #152]	; 0x98
    eb66:	3301      	adds	r3, #1
    eb68:	2b07      	cmp	r3, #7
    eb6a:	9326      	str	r3, [sp, #152]	; 0x98
    eb6c:	dd10      	ble.n	eb90 <_svfprintf_r+0xe64>
    eb6e:	4650      	mov	r0, sl
    eb70:	4659      	mov	r1, fp
    eb72:	aa25      	add	r2, sp, #148	; 0x94
    eb74:	f002 ff40 	bl	119f8 <__ssprint_r>
    eb78:	2800      	cmp	r0, #0
    eb7a:	d160      	bne.n	ec3e <_svfprintf_r+0xf12>
    eb7c:	ae32      	add	r6, sp, #200	; 0xc8
    eb7e:	e008      	b.n	eb92 <_svfprintf_r+0xe66>
    eb80:	2301      	movs	r3, #1
    eb82:	6073      	str	r3, [r6, #4]
    eb84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eb86:	9d07      	ldr	r5, [sp, #28]
    eb88:	6035      	str	r5, [r6, #0]
    eb8a:	3301      	adds	r3, #1
    eb8c:	9327      	str	r3, [sp, #156]	; 0x9c
    eb8e:	e7e9      	b.n	eb64 <_svfprintf_r+0xe38>
    eb90:	3608      	adds	r6, #8
    eb92:	ab21      	add	r3, sp, #132	; 0x84
    eb94:	6033      	str	r3, [r6, #0]
    eb96:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    eb98:	e6ac      	b.n	e8f4 <_svfprintf_r+0xbc8>
    eb9a:	3608      	adds	r6, #8
    eb9c:	077b      	lsls	r3, r7, #29
    eb9e:	d40d      	bmi.n	ebbc <_svfprintf_r+0xe90>
    eba0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    eba2:	980a      	ldr	r0, [sp, #40]	; 0x28
    eba4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    eba6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    eba8:	42a0      	cmp	r0, r4
    ebaa:	bfac      	ite	ge
    ebac:	182d      	addge	r5, r5, r0
    ebae:	192d      	addlt	r5, r5, r4
    ebb0:	950f      	str	r5, [sp, #60]	; 0x3c
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d037      	beq.n	ec26 <_svfprintf_r+0xefa>
    ebb6:	e030      	b.n	ec1a <_svfprintf_r+0xeee>
    ebb8:	00012fc2 	.word	0x00012fc2
    ebbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ebbe:	980a      	ldr	r0, [sp, #40]	; 0x28
    ebc0:	1a2c      	subs	r4, r5, r0
    ebc2:	2c00      	cmp	r4, #0
    ebc4:	ddec      	ble.n	eba0 <_svfprintf_r+0xe74>
    ebc6:	4b23      	ldr	r3, [pc, #140]	; (ec54 <_svfprintf_r+0xf28>)
    ebc8:	6033      	str	r3, [r6, #0]
    ebca:	2c10      	cmp	r4, #16
    ebcc:	dd14      	ble.n	ebf8 <_svfprintf_r+0xecc>
    ebce:	2310      	movs	r3, #16
    ebd0:	6073      	str	r3, [r6, #4]
    ebd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ebd4:	3310      	adds	r3, #16
    ebd6:	9327      	str	r3, [sp, #156]	; 0x9c
    ebd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ebda:	3301      	adds	r3, #1
    ebdc:	2b07      	cmp	r3, #7
    ebde:	9326      	str	r3, [sp, #152]	; 0x98
    ebe0:	dc01      	bgt.n	ebe6 <_svfprintf_r+0xeba>
    ebe2:	3608      	adds	r6, #8
    ebe4:	e006      	b.n	ebf4 <_svfprintf_r+0xec8>
    ebe6:	4650      	mov	r0, sl
    ebe8:	4659      	mov	r1, fp
    ebea:	aa25      	add	r2, sp, #148	; 0x94
    ebec:	f002 ff04 	bl	119f8 <__ssprint_r>
    ebf0:	bb28      	cbnz	r0, ec3e <_svfprintf_r+0xf12>
    ebf2:	ae32      	add	r6, sp, #200	; 0xc8
    ebf4:	3c10      	subs	r4, #16
    ebf6:	e7e6      	b.n	ebc6 <_svfprintf_r+0xe9a>
    ebf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ebfa:	6074      	str	r4, [r6, #4]
    ebfc:	441c      	add	r4, r3
    ebfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ec00:	9427      	str	r4, [sp, #156]	; 0x9c
    ec02:	3301      	adds	r3, #1
    ec04:	2b07      	cmp	r3, #7
    ec06:	9326      	str	r3, [sp, #152]	; 0x98
    ec08:	ddca      	ble.n	eba0 <_svfprintf_r+0xe74>
    ec0a:	4650      	mov	r0, sl
    ec0c:	4659      	mov	r1, fp
    ec0e:	aa25      	add	r2, sp, #148	; 0x94
    ec10:	f002 fef2 	bl	119f8 <__ssprint_r>
    ec14:	2800      	cmp	r0, #0
    ec16:	d0c3      	beq.n	eba0 <_svfprintf_r+0xe74>
    ec18:	e011      	b.n	ec3e <_svfprintf_r+0xf12>
    ec1a:	4650      	mov	r0, sl
    ec1c:	4659      	mov	r1, fp
    ec1e:	aa25      	add	r2, sp, #148	; 0x94
    ec20:	f002 feea 	bl	119f8 <__ssprint_r>
    ec24:	b958      	cbnz	r0, ec3e <_svfprintf_r+0xf12>
    ec26:	2300      	movs	r3, #0
    ec28:	9326      	str	r3, [sp, #152]	; 0x98
    ec2a:	ae32      	add	r6, sp, #200	; 0xc8
    ec2c:	f7ff b8b3 	b.w	dd96 <_svfprintf_r+0x6a>
    ec30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ec32:	b123      	cbz	r3, ec3e <_svfprintf_r+0xf12>
    ec34:	4650      	mov	r0, sl
    ec36:	4659      	mov	r1, fp
    ec38:	aa25      	add	r2, sp, #148	; 0x94
    ec3a:	f002 fedd 	bl	119f8 <__ssprint_r>
    ec3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    ec42:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ec44:	f013 0f40 	tst.w	r3, #64	; 0x40
    ec48:	bf18      	it	ne
    ec4a:	f04f 30ff 	movne.w	r0, #4294967295
    ec4e:	b043      	add	sp, #268	; 0x10c
    ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec54:	00012fb2 	.word	0x00012fb2

0000ec58 <__sprint_r>:
    ec58:	6893      	ldr	r3, [r2, #8]
    ec5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec5e:	4681      	mov	r9, r0
    ec60:	460f      	mov	r7, r1
    ec62:	4614      	mov	r4, r2
    ec64:	b91b      	cbnz	r3, ec6e <__sprint_r+0x16>
    ec66:	6053      	str	r3, [r2, #4]
    ec68:	4618      	mov	r0, r3
    ec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ec6e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ec70:	049d      	lsls	r5, r3, #18
    ec72:	d51d      	bpl.n	ecb0 <__sprint_r+0x58>
    ec74:	6815      	ldr	r5, [r2, #0]
    ec76:	68a3      	ldr	r3, [r4, #8]
    ec78:	3508      	adds	r5, #8
    ec7a:	b1bb      	cbz	r3, ecac <__sprint_r+0x54>
    ec7c:	f855 3c04 	ldr.w	r3, [r5, #-4]
    ec80:	f855 ac08 	ldr.w	sl, [r5, #-8]
    ec84:	ea4f 0893 	mov.w	r8, r3, lsr #2
    ec88:	2600      	movs	r6, #0
    ec8a:	4546      	cmp	r6, r8
    ec8c:	da09      	bge.n	eca2 <__sprint_r+0x4a>
    ec8e:	4648      	mov	r0, r9
    ec90:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    ec94:	463a      	mov	r2, r7
    ec96:	f001 fcf3 	bl	10680 <_fputwc_r>
    ec9a:	1c43      	adds	r3, r0, #1
    ec9c:	d00a      	beq.n	ecb4 <__sprint_r+0x5c>
    ec9e:	3601      	adds	r6, #1
    eca0:	e7f3      	b.n	ec8a <__sprint_r+0x32>
    eca2:	68a3      	ldr	r3, [r4, #8]
    eca4:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
    eca8:	60a3      	str	r3, [r4, #8]
    ecaa:	e7e4      	b.n	ec76 <__sprint_r+0x1e>
    ecac:	4618      	mov	r0, r3
    ecae:	e001      	b.n	ecb4 <__sprint_r+0x5c>
    ecb0:	f001 fe58 	bl	10964 <__sfvwrite_r>
    ecb4:	2300      	movs	r3, #0
    ecb6:	60a3      	str	r3, [r4, #8]
    ecb8:	6063      	str	r3, [r4, #4]
    ecba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ecbe <_vfiprintf_r>:
    ecbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecc2:	b0ad      	sub	sp, #180	; 0xb4
    ecc4:	4688      	mov	r8, r1
    ecc6:	9202      	str	r2, [sp, #8]
    ecc8:	461c      	mov	r4, r3
    ecca:	461e      	mov	r6, r3
    eccc:	4683      	mov	fp, r0
    ecce:	b118      	cbz	r0, ecd8 <_vfiprintf_r+0x1a>
    ecd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ecd2:	b90b      	cbnz	r3, ecd8 <_vfiprintf_r+0x1a>
    ecd4:	f001 fc0a 	bl	104ec <__sinit>
    ecd8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ecdc:	0498      	lsls	r0, r3, #18
    ecde:	d409      	bmi.n	ecf4 <_vfiprintf_r+0x36>
    ece0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ece4:	f8a8 300c 	strh.w	r3, [r8, #12]
    ece8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
    ecec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ecf0:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
    ecf4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ecf8:	0719      	lsls	r1, r3, #28
    ecfa:	d509      	bpl.n	ed10 <_vfiprintf_r+0x52>
    ecfc:	f8d8 3010 	ldr.w	r3, [r8, #16]
    ed00:	b133      	cbz	r3, ed10 <_vfiprintf_r+0x52>
    ed02:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ed06:	f003 031a 	and.w	r3, r3, #26
    ed0a:	2b0a      	cmp	r3, #10
    ed0c:	d114      	bne.n	ed38 <_vfiprintf_r+0x7a>
    ed0e:	e008      	b.n	ed22 <_vfiprintf_r+0x64>
    ed10:	4658      	mov	r0, fp
    ed12:	4641      	mov	r1, r8
    ed14:	f000 fc28 	bl	f568 <__swsetup_r>
    ed18:	2800      	cmp	r0, #0
    ed1a:	d0f2      	beq.n	ed02 <_vfiprintf_r+0x44>
    ed1c:	f04f 30ff 	mov.w	r0, #4294967295
    ed20:	e3db      	b.n	f4da <_vfiprintf_r+0x81c>
    ed22:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
    ed26:	2b00      	cmp	r3, #0
    ed28:	db06      	blt.n	ed38 <_vfiprintf_r+0x7a>
    ed2a:	4658      	mov	r0, fp
    ed2c:	4641      	mov	r1, r8
    ed2e:	9a02      	ldr	r2, [sp, #8]
    ed30:	4623      	mov	r3, r4
    ed32:	f000 fbe3 	bl	f4fc <__sbprintf>
    ed36:	e3d0      	b.n	f4da <_vfiprintf_r+0x81c>
    ed38:	2300      	movs	r3, #0
    ed3a:	aa1c      	add	r2, sp, #112	; 0x70
    ed3c:	920f      	str	r2, [sp, #60]	; 0x3c
    ed3e:	9311      	str	r3, [sp, #68]	; 0x44
    ed40:	9310      	str	r3, [sp, #64]	; 0x40
    ed42:	4694      	mov	ip, r2
    ed44:	930a      	str	r3, [sp, #40]	; 0x28
    ed46:	9305      	str	r3, [sp, #20]
    ed48:	9b02      	ldr	r3, [sp, #8]
    ed4a:	461c      	mov	r4, r3
    ed4c:	f813 2b01 	ldrb.w	r2, [r3], #1
    ed50:	b91a      	cbnz	r2, ed5a <_vfiprintf_r+0x9c>
    ed52:	9802      	ldr	r0, [sp, #8]
    ed54:	1a25      	subs	r5, r4, r0
    ed56:	d103      	bne.n	ed60 <_vfiprintf_r+0xa2>
    ed58:	e01d      	b.n	ed96 <_vfiprintf_r+0xd8>
    ed5a:	2a25      	cmp	r2, #37	; 0x25
    ed5c:	d1f5      	bne.n	ed4a <_vfiprintf_r+0x8c>
    ed5e:	e7f8      	b.n	ed52 <_vfiprintf_r+0x94>
    ed60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed62:	9902      	ldr	r1, [sp, #8]
    ed64:	442b      	add	r3, r5
    ed66:	9311      	str	r3, [sp, #68]	; 0x44
    ed68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed6a:	3301      	adds	r3, #1
    ed6c:	2b07      	cmp	r3, #7
    ed6e:	e88c 0022 	stmia.w	ip, {r1, r5}
    ed72:	9310      	str	r3, [sp, #64]	; 0x40
    ed74:	dc02      	bgt.n	ed7c <_vfiprintf_r+0xbe>
    ed76:	f10c 0c08 	add.w	ip, ip, #8
    ed7a:	e009      	b.n	ed90 <_vfiprintf_r+0xd2>
    ed7c:	4658      	mov	r0, fp
    ed7e:	4641      	mov	r1, r8
    ed80:	aa0f      	add	r2, sp, #60	; 0x3c
    ed82:	f7ff ff69 	bl	ec58 <__sprint_r>
    ed86:	2800      	cmp	r0, #0
    ed88:	f040 83a1 	bne.w	f4ce <_vfiprintf_r+0x810>
    ed8c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    ed90:	9a05      	ldr	r2, [sp, #20]
    ed92:	442a      	add	r2, r5
    ed94:	9205      	str	r2, [sp, #20]
    ed96:	7823      	ldrb	r3, [r4, #0]
    ed98:	2b00      	cmp	r3, #0
    ed9a:	f000 8391 	beq.w	f4c0 <_vfiprintf_r+0x802>
    ed9e:	2200      	movs	r2, #0
    eda0:	3401      	adds	r4, #1
    eda2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    eda6:	f04f 3aff 	mov.w	sl, #4294967295
    edaa:	9204      	str	r2, [sp, #16]
    edac:	4617      	mov	r7, r2
    edae:	1c65      	adds	r5, r4, #1
    edb0:	7823      	ldrb	r3, [r4, #0]
    edb2:	9502      	str	r5, [sp, #8]
    edb4:	2b58      	cmp	r3, #88	; 0x58
    edb6:	d065      	beq.n	ee84 <_vfiprintf_r+0x1c6>
    edb8:	dc2e      	bgt.n	ee18 <_vfiprintf_r+0x15a>
    edba:	2b2e      	cmp	r3, #46	; 0x2e
    edbc:	d077      	beq.n	eeae <_vfiprintf_r+0x1f0>
    edbe:	dc12      	bgt.n	ede6 <_vfiprintf_r+0x128>
    edc0:	2b2a      	cmp	r3, #42	; 0x2a
    edc2:	d067      	beq.n	ee94 <_vfiprintf_r+0x1d6>
    edc4:	dc08      	bgt.n	edd8 <_vfiprintf_r+0x11a>
    edc6:	2b20      	cmp	r3, #32
    edc8:	d060      	beq.n	ee8c <_vfiprintf_r+0x1ce>
    edca:	2b23      	cmp	r3, #35	; 0x23
    edcc:	f040 8202 	bne.w	f1d4 <_vfiprintf_r+0x516>
    edd0:	f047 0701 	orr.w	r7, r7, #1
    edd4:	9c02      	ldr	r4, [sp, #8]
    edd6:	e7ea      	b.n	edae <_vfiprintf_r+0xf0>
    edd8:	2b2b      	cmp	r3, #43	; 0x2b
    edda:	d101      	bne.n	ede0 <_vfiprintf_r+0x122>
    eddc:	461a      	mov	r2, r3
    edde:	e7f9      	b.n	edd4 <_vfiprintf_r+0x116>
    ede0:	2b2d      	cmp	r3, #45	; 0x2d
    ede2:	d061      	beq.n	eea8 <_vfiprintf_r+0x1ea>
    ede4:	e1f6      	b.n	f1d4 <_vfiprintf_r+0x516>
    ede6:	2b39      	cmp	r3, #57	; 0x39
    ede8:	dc08      	bgt.n	edfc <_vfiprintf_r+0x13e>
    edea:	2b31      	cmp	r3, #49	; 0x31
    edec:	f280 8081 	bge.w	eef2 <_vfiprintf_r+0x234>
    edf0:	2b30      	cmp	r3, #48	; 0x30
    edf2:	f040 81ef 	bne.w	f1d4 <_vfiprintf_r+0x516>
    edf6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    edfa:	e7eb      	b.n	edd4 <_vfiprintf_r+0x116>
    edfc:	2b4f      	cmp	r3, #79	; 0x4f
    edfe:	f000 80e1 	beq.w	efc4 <_vfiprintf_r+0x306>
    ee02:	2b55      	cmp	r3, #85	; 0x55
    ee04:	f000 8121 	beq.w	f04a <_vfiprintf_r+0x38c>
    ee08:	2b44      	cmp	r3, #68	; 0x44
    ee0a:	f040 81e3 	bne.w	f1d4 <_vfiprintf_r+0x516>
    ee0e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    ee12:	f047 0710 	orr.w	r7, r7, #16
    ee16:	e095      	b.n	ef44 <_vfiprintf_r+0x286>
    ee18:	2b6e      	cmp	r3, #110	; 0x6e
    ee1a:	f000 80b7 	beq.w	ef8c <_vfiprintf_r+0x2ce>
    ee1e:	dc0d      	bgt.n	ee3c <_vfiprintf_r+0x17e>
    ee20:	2b68      	cmp	r3, #104	; 0x68
    ee22:	d077      	beq.n	ef14 <_vfiprintf_r+0x256>
    ee24:	dc05      	bgt.n	ee32 <_vfiprintf_r+0x174>
    ee26:	2b63      	cmp	r3, #99	; 0x63
    ee28:	f000 8084 	beq.w	ef34 <_vfiprintf_r+0x276>
    ee2c:	2b64      	cmp	r3, #100	; 0x64
    ee2e:	d026      	beq.n	ee7e <_vfiprintf_r+0x1c0>
    ee30:	e1d0      	b.n	f1d4 <_vfiprintf_r+0x516>
    ee32:	2b69      	cmp	r3, #105	; 0x69
    ee34:	d023      	beq.n	ee7e <_vfiprintf_r+0x1c0>
    ee36:	2b6c      	cmp	r3, #108	; 0x6c
    ee38:	d06f      	beq.n	ef1a <_vfiprintf_r+0x25c>
    ee3a:	e1cb      	b.n	f1d4 <_vfiprintf_r+0x516>
    ee3c:	2b71      	cmp	r3, #113	; 0x71
    ee3e:	d076      	beq.n	ef2e <_vfiprintf_r+0x270>
    ee40:	dc13      	bgt.n	ee6a <_vfiprintf_r+0x1ac>
    ee42:	2b6f      	cmp	r3, #111	; 0x6f
    ee44:	f000 80c0 	beq.w	efc8 <_vfiprintf_r+0x30a>
    ee48:	2b70      	cmp	r3, #112	; 0x70
    ee4a:	f040 81c3 	bne.w	f1d4 <_vfiprintf_r+0x516>
    ee4e:	2330      	movs	r3, #48	; 0x30
    ee50:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    ee54:	489f      	ldr	r0, [pc, #636]	; (f0d4 <_vfiprintf_r+0x416>)
    ee56:	6834      	ldr	r4, [r6, #0]
    ee58:	900a      	str	r0, [sp, #40]	; 0x28
    ee5a:	2378      	movs	r3, #120	; 0x78
    ee5c:	2500      	movs	r5, #0
    ee5e:	f047 0702 	orr.w	r7, r7, #2
    ee62:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    ee66:	3604      	adds	r6, #4
    ee68:	e12f      	b.n	f0ca <_vfiprintf_r+0x40c>
    ee6a:	2b75      	cmp	r3, #117	; 0x75
    ee6c:	f000 80ef 	beq.w	f04e <_vfiprintf_r+0x390>
    ee70:	2b78      	cmp	r3, #120	; 0x78
    ee72:	f000 8104 	beq.w	f07e <_vfiprintf_r+0x3c0>
    ee76:	2b73      	cmp	r3, #115	; 0x73
    ee78:	f040 81ac 	bne.w	f1d4 <_vfiprintf_r+0x516>
    ee7c:	e0c0      	b.n	f000 <_vfiprintf_r+0x342>
    ee7e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    ee82:	e05f      	b.n	ef44 <_vfiprintf_r+0x286>
    ee84:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    ee88:	4c93      	ldr	r4, [pc, #588]	; (f0d8 <_vfiprintf_r+0x41a>)
    ee8a:	e0fb      	b.n	f084 <_vfiprintf_r+0x3c6>
    ee8c:	2a00      	cmp	r2, #0
    ee8e:	bf08      	it	eq
    ee90:	2220      	moveq	r2, #32
    ee92:	e79f      	b.n	edd4 <_vfiprintf_r+0x116>
    ee94:	1d33      	adds	r3, r6, #4
    ee96:	6836      	ldr	r6, [r6, #0]
    ee98:	9604      	str	r6, [sp, #16]
    ee9a:	2e00      	cmp	r6, #0
    ee9c:	db01      	blt.n	eea2 <_vfiprintf_r+0x1e4>
    ee9e:	461e      	mov	r6, r3
    eea0:	e798      	b.n	edd4 <_vfiprintf_r+0x116>
    eea2:	4275      	negs	r5, r6
    eea4:	9504      	str	r5, [sp, #16]
    eea6:	461e      	mov	r6, r3
    eea8:	f047 0704 	orr.w	r7, r7, #4
    eeac:	e792      	b.n	edd4 <_vfiprintf_r+0x116>
    eeae:	9c02      	ldr	r4, [sp, #8]
    eeb0:	7823      	ldrb	r3, [r4, #0]
    eeb2:	2b2a      	cmp	r3, #42	; 0x2a
    eeb4:	f104 0101 	add.w	r1, r4, #1
    eeb8:	d002      	beq.n	eec0 <_vfiprintf_r+0x202>
    eeba:	f04f 0a00 	mov.w	sl, #0
    eebe:	e00a      	b.n	eed6 <_vfiprintf_r+0x218>
    eec0:	f8d6 a000 	ldr.w	sl, [r6]
    eec4:	9102      	str	r1, [sp, #8]
    eec6:	1d33      	adds	r3, r6, #4
    eec8:	f1ba 0f00 	cmp.w	sl, #0
    eecc:	461e      	mov	r6, r3
    eece:	da81      	bge.n	edd4 <_vfiprintf_r+0x116>
    eed0:	f04f 3aff 	mov.w	sl, #4294967295
    eed4:	e77e      	b.n	edd4 <_vfiprintf_r+0x116>
    eed6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    eeda:	2809      	cmp	r0, #9
    eedc:	d805      	bhi.n	eeea <_vfiprintf_r+0x22c>
    eede:	230a      	movs	r3, #10
    eee0:	fb03 0a0a 	mla	sl, r3, sl, r0
    eee4:	f811 3b01 	ldrb.w	r3, [r1], #1
    eee8:	e7f5      	b.n	eed6 <_vfiprintf_r+0x218>
    eeea:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
    eeee:	9102      	str	r1, [sp, #8]
    eef0:	e760      	b.n	edb4 <_vfiprintf_r+0xf6>
    eef2:	2500      	movs	r5, #0
    eef4:	9504      	str	r5, [sp, #16]
    eef6:	9c04      	ldr	r4, [sp, #16]
    eef8:	3b30      	subs	r3, #48	; 0x30
    eefa:	210a      	movs	r1, #10
    eefc:	fb01 3404 	mla	r4, r1, r4, r3
    ef00:	9902      	ldr	r1, [sp, #8]
    ef02:	9404      	str	r4, [sp, #16]
    ef04:	f811 3b01 	ldrb.w	r3, [r1], #1
    ef08:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    ef0c:	2809      	cmp	r0, #9
    ef0e:	d8ee      	bhi.n	eeee <_vfiprintf_r+0x230>
    ef10:	9102      	str	r1, [sp, #8]
    ef12:	e7f0      	b.n	eef6 <_vfiprintf_r+0x238>
    ef14:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    ef18:	e75c      	b.n	edd4 <_vfiprintf_r+0x116>
    ef1a:	9d02      	ldr	r5, [sp, #8]
    ef1c:	782b      	ldrb	r3, [r5, #0]
    ef1e:	2b6c      	cmp	r3, #108	; 0x6c
    ef20:	d102      	bne.n	ef28 <_vfiprintf_r+0x26a>
    ef22:	3501      	adds	r5, #1
    ef24:	9502      	str	r5, [sp, #8]
    ef26:	e002      	b.n	ef2e <_vfiprintf_r+0x270>
    ef28:	f047 0710 	orr.w	r7, r7, #16
    ef2c:	e752      	b.n	edd4 <_vfiprintf_r+0x116>
    ef2e:	f047 0720 	orr.w	r7, r7, #32
    ef32:	e74f      	b.n	edd4 <_vfiprintf_r+0x116>
    ef34:	6833      	ldr	r3, [r6, #0]
    ef36:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ef3a:	2500      	movs	r5, #0
    ef3c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    ef40:	3604      	adds	r6, #4
    ef42:	e151      	b.n	f1e8 <_vfiprintf_r+0x52a>
    ef44:	06ba      	lsls	r2, r7, #26
    ef46:	d507      	bpl.n	ef58 <_vfiprintf_r+0x29a>
    ef48:	3607      	adds	r6, #7
    ef4a:	f026 0307 	bic.w	r3, r6, #7
    ef4e:	f103 0608 	add.w	r6, r3, #8
    ef52:	e9d3 4500 	ldrd	r4, r5, [r3]
    ef56:	e00d      	b.n	ef74 <_vfiprintf_r+0x2b6>
    ef58:	f017 0f10 	tst.w	r7, #16
    ef5c:	f106 0304 	add.w	r3, r6, #4
    ef60:	d001      	beq.n	ef66 <_vfiprintf_r+0x2a8>
    ef62:	6834      	ldr	r4, [r6, #0]
    ef64:	e004      	b.n	ef70 <_vfiprintf_r+0x2b2>
    ef66:	6834      	ldr	r4, [r6, #0]
    ef68:	f017 0f40 	tst.w	r7, #64	; 0x40
    ef6c:	bf18      	it	ne
    ef6e:	b224      	sxthne	r4, r4
    ef70:	17e5      	asrs	r5, r4, #31
    ef72:	461e      	mov	r6, r3
    ef74:	2c00      	cmp	r4, #0
    ef76:	f175 0000 	sbcs.w	r0, r5, #0
    ef7a:	f280 80af 	bge.w	f0dc <_vfiprintf_r+0x41e>
    ef7e:	232d      	movs	r3, #45	; 0x2d
    ef80:	4264      	negs	r4, r4
    ef82:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    ef86:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    ef8a:	e0a7      	b.n	f0dc <_vfiprintf_r+0x41e>
    ef8c:	f017 0f20 	tst.w	r7, #32
    ef90:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    ef94:	f106 0104 	add.w	r1, r6, #4
    ef98:	d007      	beq.n	efaa <_vfiprintf_r+0x2ec>
    ef9a:	9c05      	ldr	r4, [sp, #20]
    ef9c:	6830      	ldr	r0, [r6, #0]
    ef9e:	17e5      	asrs	r5, r4, #31
    efa0:	4622      	mov	r2, r4
    efa2:	462b      	mov	r3, r5
    efa4:	e9c0 2300 	strd	r2, r3, [r0]
    efa8:	e00a      	b.n	efc0 <_vfiprintf_r+0x302>
    efaa:	06fb      	lsls	r3, r7, #27
    efac:	d405      	bmi.n	efba <_vfiprintf_r+0x2fc>
    efae:	067f      	lsls	r7, r7, #25
    efb0:	d503      	bpl.n	efba <_vfiprintf_r+0x2fc>
    efb2:	6833      	ldr	r3, [r6, #0]
    efb4:	9c05      	ldr	r4, [sp, #20]
    efb6:	801c      	strh	r4, [r3, #0]
    efb8:	e002      	b.n	efc0 <_vfiprintf_r+0x302>
    efba:	6833      	ldr	r3, [r6, #0]
    efbc:	9d05      	ldr	r5, [sp, #20]
    efbe:	601d      	str	r5, [r3, #0]
    efc0:	460e      	mov	r6, r1
    efc2:	e6c1      	b.n	ed48 <_vfiprintf_r+0x8a>
    efc4:	f047 0710 	orr.w	r7, r7, #16
    efc8:	f017 0320 	ands.w	r3, r7, #32
    efcc:	d008      	beq.n	efe0 <_vfiprintf_r+0x322>
    efce:	3607      	adds	r6, #7
    efd0:	f026 0307 	bic.w	r3, r6, #7
    efd4:	e9d3 4500 	ldrd	r4, r5, [r3]
    efd8:	f103 0608 	add.w	r6, r3, #8
    efdc:	2300      	movs	r3, #0
    efde:	e075      	b.n	f0cc <_vfiprintf_r+0x40e>
    efe0:	f017 0110 	ands.w	r1, r7, #16
    efe4:	f106 0204 	add.w	r2, r6, #4
    efe8:	d106      	bne.n	eff8 <_vfiprintf_r+0x33a>
    efea:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    efee:	d003      	beq.n	eff8 <_vfiprintf_r+0x33a>
    eff0:	8834      	ldrh	r4, [r6, #0]
    eff2:	2500      	movs	r5, #0
    eff4:	4616      	mov	r6, r2
    eff6:	e7f1      	b.n	efdc <_vfiprintf_r+0x31e>
    eff8:	6834      	ldr	r4, [r6, #0]
    effa:	2500      	movs	r5, #0
    effc:	4616      	mov	r6, r2
    effe:	e065      	b.n	f0cc <_vfiprintf_r+0x40e>
    f000:	f8d6 9000 	ldr.w	r9, [r6]
    f004:	2300      	movs	r3, #0
    f006:	459a      	cmp	sl, r3
    f008:	f106 0604 	add.w	r6, r6, #4
    f00c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    f010:	4648      	mov	r0, r9
    f012:	db11      	blt.n	f038 <_vfiprintf_r+0x37a>
    f014:	4619      	mov	r1, r3
    f016:	4652      	mov	r2, sl
    f018:	f8cd c004 	str.w	ip, [sp, #4]
    f01c:	f001 fece 	bl	10dbc <memchr>
    f020:	f8dd c004 	ldr.w	ip, [sp, #4]
    f024:	2800      	cmp	r0, #0
    f026:	f000 80e4 	beq.w	f1f2 <_vfiprintf_r+0x534>
    f02a:	ebc9 0000 	rsb	r0, r9, r0
    f02e:	4550      	cmp	r0, sl
    f030:	bfb8      	it	lt
    f032:	4682      	movlt	sl, r0
    f034:	2500      	movs	r5, #0
    f036:	e0dd      	b.n	f1f4 <_vfiprintf_r+0x536>
    f038:	f8cd c004 	str.w	ip, [sp, #4]
    f03c:	f002 fcd3 	bl	119e6 <strlen>
    f040:	2500      	movs	r5, #0
    f042:	4682      	mov	sl, r0
    f044:	f8dd c004 	ldr.w	ip, [sp, #4]
    f048:	e0d4      	b.n	f1f4 <_vfiprintf_r+0x536>
    f04a:	f047 0710 	orr.w	r7, r7, #16
    f04e:	06bd      	lsls	r5, r7, #26
    f050:	d507      	bpl.n	f062 <_vfiprintf_r+0x3a4>
    f052:	3607      	adds	r6, #7
    f054:	f026 0307 	bic.w	r3, r6, #7
    f058:	f103 0608 	add.w	r6, r3, #8
    f05c:	e9d3 4500 	ldrd	r4, r5, [r3]
    f060:	e00b      	b.n	f07a <_vfiprintf_r+0x3bc>
    f062:	f017 0f10 	tst.w	r7, #16
    f066:	f106 0304 	add.w	r3, r6, #4
    f06a:	d103      	bne.n	f074 <_vfiprintf_r+0x3b6>
    f06c:	067c      	lsls	r4, r7, #25
    f06e:	d501      	bpl.n	f074 <_vfiprintf_r+0x3b6>
    f070:	8834      	ldrh	r4, [r6, #0]
    f072:	e000      	b.n	f076 <_vfiprintf_r+0x3b8>
    f074:	6834      	ldr	r4, [r6, #0]
    f076:	2500      	movs	r5, #0
    f078:	461e      	mov	r6, r3
    f07a:	2301      	movs	r3, #1
    f07c:	e026      	b.n	f0cc <_vfiprintf_r+0x40e>
    f07e:	4c15      	ldr	r4, [pc, #84]	; (f0d4 <_vfiprintf_r+0x416>)
    f080:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    f084:	06b8      	lsls	r0, r7, #26
    f086:	940a      	str	r4, [sp, #40]	; 0x28
    f088:	d507      	bpl.n	f09a <_vfiprintf_r+0x3dc>
    f08a:	3607      	adds	r6, #7
    f08c:	f026 0207 	bic.w	r2, r6, #7
    f090:	f102 0608 	add.w	r6, r2, #8
    f094:	e9d2 4500 	ldrd	r4, r5, [r2]
    f098:	e00b      	b.n	f0b2 <_vfiprintf_r+0x3f4>
    f09a:	f017 0f10 	tst.w	r7, #16
    f09e:	f106 0204 	add.w	r2, r6, #4
    f0a2:	d103      	bne.n	f0ac <_vfiprintf_r+0x3ee>
    f0a4:	0679      	lsls	r1, r7, #25
    f0a6:	d501      	bpl.n	f0ac <_vfiprintf_r+0x3ee>
    f0a8:	8834      	ldrh	r4, [r6, #0]
    f0aa:	e000      	b.n	f0ae <_vfiprintf_r+0x3f0>
    f0ac:	6834      	ldr	r4, [r6, #0]
    f0ae:	2500      	movs	r5, #0
    f0b0:	4616      	mov	r6, r2
    f0b2:	07fa      	lsls	r2, r7, #31
    f0b4:	d509      	bpl.n	f0ca <_vfiprintf_r+0x40c>
    f0b6:	ea54 0005 	orrs.w	r0, r4, r5
    f0ba:	d006      	beq.n	f0ca <_vfiprintf_r+0x40c>
    f0bc:	2230      	movs	r2, #48	; 0x30
    f0be:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    f0c2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    f0c6:	f047 0702 	orr.w	r7, r7, #2
    f0ca:	2302      	movs	r3, #2
    f0cc:	2200      	movs	r2, #0
    f0ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    f0d2:	e004      	b.n	f0de <_vfiprintf_r+0x420>
    f0d4:	00012ff3 	.word	0x00012ff3
    f0d8:	00012fe2 	.word	0x00012fe2
    f0dc:	2301      	movs	r3, #1
    f0de:	f1ba 0f00 	cmp.w	sl, #0
    f0e2:	bfa8      	it	ge
    f0e4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    f0e8:	ea54 0105 	orrs.w	r1, r4, r5
    f0ec:	d102      	bne.n	f0f4 <_vfiprintf_r+0x436>
    f0ee:	f1ba 0f00 	cmp.w	sl, #0
    f0f2:	d05e      	beq.n	f1b2 <_vfiprintf_r+0x4f4>
    f0f4:	2b01      	cmp	r3, #1
    f0f6:	d01f      	beq.n	f138 <_vfiprintf_r+0x47a>
    f0f8:	2b02      	cmp	r3, #2
    f0fa:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
    f0fe:	d045      	beq.n	f18c <_vfiprintf_r+0x4ce>
    f100:	08e0      	lsrs	r0, r4, #3
    f102:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
    f106:	08e8      	lsrs	r0, r5, #3
    f108:	9106      	str	r1, [sp, #24]
    f10a:	9007      	str	r0, [sp, #28]
    f10c:	f004 0207 	and.w	r2, r4, #7
    f110:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    f114:	3230      	adds	r2, #48	; 0x30
    f116:	ea54 0105 	orrs.w	r1, r4, r5
    f11a:	4699      	mov	r9, r3
    f11c:	701a      	strb	r2, [r3, #0]
    f11e:	f103 33ff 	add.w	r3, r3, #4294967295
    f122:	d1ed      	bne.n	f100 <_vfiprintf_r+0x442>
    f124:	07f8      	lsls	r0, r7, #31
    f126:	4649      	mov	r1, r9
    f128:	d54e      	bpl.n	f1c8 <_vfiprintf_r+0x50a>
    f12a:	2a30      	cmp	r2, #48	; 0x30
    f12c:	d04c      	beq.n	f1c8 <_vfiprintf_r+0x50a>
    f12e:	4699      	mov	r9, r3
    f130:	2330      	movs	r3, #48	; 0x30
    f132:	f801 3c01 	strb.w	r3, [r1, #-1]
    f136:	e047      	b.n	f1c8 <_vfiprintf_r+0x50a>
    f138:	2d00      	cmp	r5, #0
    f13a:	bf08      	it	eq
    f13c:	2c0a      	cmpeq	r4, #10
    f13e:	d205      	bcs.n	f14c <_vfiprintf_r+0x48e>
    f140:	3430      	adds	r4, #48	; 0x30
    f142:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    f146:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
    f14a:	e03d      	b.n	f1c8 <_vfiprintf_r+0x50a>
    f14c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
    f150:	9203      	str	r2, [sp, #12]
    f152:	4620      	mov	r0, r4
    f154:	4629      	mov	r1, r5
    f156:	220a      	movs	r2, #10
    f158:	2300      	movs	r3, #0
    f15a:	f8cd c004 	str.w	ip, [sp, #4]
    f15e:	f7fd ffb3 	bl	d0c8 <__aeabi_uldivmod>
    f162:	9b03      	ldr	r3, [sp, #12]
    f164:	f8dd 900c 	ldr.w	r9, [sp, #12]
    f168:	3230      	adds	r2, #48	; 0x30
    f16a:	f803 2901 	strb.w	r2, [r3], #-1
    f16e:	4620      	mov	r0, r4
    f170:	9303      	str	r3, [sp, #12]
    f172:	4629      	mov	r1, r5
    f174:	220a      	movs	r2, #10
    f176:	2300      	movs	r3, #0
    f178:	f7fd ffa6 	bl	d0c8 <__aeabi_uldivmod>
    f17c:	4604      	mov	r4, r0
    f17e:	460d      	mov	r5, r1
    f180:	ea54 0005 	orrs.w	r0, r4, r5
    f184:	f8dd c004 	ldr.w	ip, [sp, #4]
    f188:	d1e3      	bne.n	f152 <_vfiprintf_r+0x494>
    f18a:	e01d      	b.n	f1c8 <_vfiprintf_r+0x50a>
    f18c:	f004 020f 	and.w	r2, r4, #15
    f190:	990a      	ldr	r1, [sp, #40]	; 0x28
    f192:	5c8a      	ldrb	r2, [r1, r2]
    f194:	4699      	mov	r9, r3
    f196:	f803 2901 	strb.w	r2, [r3], #-1
    f19a:	0922      	lsrs	r2, r4, #4
    f19c:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
    f1a0:	0929      	lsrs	r1, r5, #4
    f1a2:	9008      	str	r0, [sp, #32]
    f1a4:	9109      	str	r1, [sp, #36]	; 0x24
    f1a6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    f1aa:	ea54 0205 	orrs.w	r2, r4, r5
    f1ae:	d1ed      	bne.n	f18c <_vfiprintf_r+0x4ce>
    f1b0:	e00a      	b.n	f1c8 <_vfiprintf_r+0x50a>
    f1b2:	b93b      	cbnz	r3, f1c4 <_vfiprintf_r+0x506>
    f1b4:	07f9      	lsls	r1, r7, #31
    f1b6:	d505      	bpl.n	f1c4 <_vfiprintf_r+0x506>
    f1b8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    f1bc:	2330      	movs	r3, #48	; 0x30
    f1be:	f809 3d41 	strb.w	r3, [r9, #-65]!
    f1c2:	e001      	b.n	f1c8 <_vfiprintf_r+0x50a>
    f1c4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    f1c8:	4655      	mov	r5, sl
    f1ca:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    f1ce:	ebc9 0a0a 	rsb	sl, r9, sl
    f1d2:	e00f      	b.n	f1f4 <_vfiprintf_r+0x536>
    f1d4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    f1d8:	2b00      	cmp	r3, #0
    f1da:	f000 8171 	beq.w	f4c0 <_vfiprintf_r+0x802>
    f1de:	2500      	movs	r5, #0
    f1e0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    f1e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    f1e8:	f04f 0a01 	mov.w	sl, #1
    f1ec:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    f1f0:	e000      	b.n	f1f4 <_vfiprintf_r+0x536>
    f1f2:	4605      	mov	r5, r0
    f1f4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    f1f8:	45aa      	cmp	sl, r5
    f1fa:	bfac      	ite	ge
    f1fc:	4654      	movge	r4, sl
    f1fe:	462c      	movlt	r4, r5
    f200:	b103      	cbz	r3, f204 <_vfiprintf_r+0x546>
    f202:	3401      	adds	r4, #1
    f204:	f017 0302 	ands.w	r3, r7, #2
    f208:	9303      	str	r3, [sp, #12]
    f20a:	bf18      	it	ne
    f20c:	3402      	addne	r4, #2
    f20e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
    f212:	930b      	str	r3, [sp, #44]	; 0x2c
    f214:	d13b      	bne.n	f28e <_vfiprintf_r+0x5d0>
    f216:	9804      	ldr	r0, [sp, #16]
    f218:	1b03      	subs	r3, r0, r4
    f21a:	2b00      	cmp	r3, #0
    f21c:	dd37      	ble.n	f28e <_vfiprintf_r+0x5d0>
    f21e:	4aa6      	ldr	r2, [pc, #664]	; (f4b8 <_vfiprintf_r+0x7fa>)
    f220:	f8cc 2000 	str.w	r2, [ip]
    f224:	2b10      	cmp	r3, #16
    f226:	dd1b      	ble.n	f260 <_vfiprintf_r+0x5a2>
    f228:	2210      	movs	r2, #16
    f22a:	f8cc 2004 	str.w	r2, [ip, #4]
    f22e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f230:	3210      	adds	r2, #16
    f232:	9211      	str	r2, [sp, #68]	; 0x44
    f234:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f236:	3201      	adds	r2, #1
    f238:	2a07      	cmp	r2, #7
    f23a:	9210      	str	r2, [sp, #64]	; 0x40
    f23c:	dc02      	bgt.n	f244 <_vfiprintf_r+0x586>
    f23e:	f10c 0c08 	add.w	ip, ip, #8
    f242:	e00b      	b.n	f25c <_vfiprintf_r+0x59e>
    f244:	4658      	mov	r0, fp
    f246:	4641      	mov	r1, r8
    f248:	aa0f      	add	r2, sp, #60	; 0x3c
    f24a:	9301      	str	r3, [sp, #4]
    f24c:	f7ff fd04 	bl	ec58 <__sprint_r>
    f250:	9b01      	ldr	r3, [sp, #4]
    f252:	2800      	cmp	r0, #0
    f254:	f040 813b 	bne.w	f4ce <_vfiprintf_r+0x810>
    f258:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f25c:	3b10      	subs	r3, #16
    f25e:	e7de      	b.n	f21e <_vfiprintf_r+0x560>
    f260:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f262:	f8cc 3004 	str.w	r3, [ip, #4]
    f266:	4413      	add	r3, r2
    f268:	9311      	str	r3, [sp, #68]	; 0x44
    f26a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f26c:	3301      	adds	r3, #1
    f26e:	2b07      	cmp	r3, #7
    f270:	9310      	str	r3, [sp, #64]	; 0x40
    f272:	dc02      	bgt.n	f27a <_vfiprintf_r+0x5bc>
    f274:	f10c 0c08 	add.w	ip, ip, #8
    f278:	e009      	b.n	f28e <_vfiprintf_r+0x5d0>
    f27a:	4658      	mov	r0, fp
    f27c:	4641      	mov	r1, r8
    f27e:	aa0f      	add	r2, sp, #60	; 0x3c
    f280:	f7ff fcea 	bl	ec58 <__sprint_r>
    f284:	2800      	cmp	r0, #0
    f286:	f040 8122 	bne.w	f4ce <_vfiprintf_r+0x810>
    f28a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f28e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    f292:	b1db      	cbz	r3, f2cc <_vfiprintf_r+0x60e>
    f294:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    f298:	f8cc 3000 	str.w	r3, [ip]
    f29c:	2301      	movs	r3, #1
    f29e:	f8cc 3004 	str.w	r3, [ip, #4]
    f2a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f2a4:	3301      	adds	r3, #1
    f2a6:	9311      	str	r3, [sp, #68]	; 0x44
    f2a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2aa:	3301      	adds	r3, #1
    f2ac:	2b07      	cmp	r3, #7
    f2ae:	9310      	str	r3, [sp, #64]	; 0x40
    f2b0:	dc02      	bgt.n	f2b8 <_vfiprintf_r+0x5fa>
    f2b2:	f10c 0c08 	add.w	ip, ip, #8
    f2b6:	e009      	b.n	f2cc <_vfiprintf_r+0x60e>
    f2b8:	4658      	mov	r0, fp
    f2ba:	4641      	mov	r1, r8
    f2bc:	aa0f      	add	r2, sp, #60	; 0x3c
    f2be:	f7ff fccb 	bl	ec58 <__sprint_r>
    f2c2:	2800      	cmp	r0, #0
    f2c4:	f040 8103 	bne.w	f4ce <_vfiprintf_r+0x810>
    f2c8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f2cc:	9b03      	ldr	r3, [sp, #12]
    f2ce:	b1d3      	cbz	r3, f306 <_vfiprintf_r+0x648>
    f2d0:	ab0e      	add	r3, sp, #56	; 0x38
    f2d2:	f8cc 3000 	str.w	r3, [ip]
    f2d6:	2302      	movs	r3, #2
    f2d8:	f8cc 3004 	str.w	r3, [ip, #4]
    f2dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f2de:	3302      	adds	r3, #2
    f2e0:	9311      	str	r3, [sp, #68]	; 0x44
    f2e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2e4:	3301      	adds	r3, #1
    f2e6:	2b07      	cmp	r3, #7
    f2e8:	9310      	str	r3, [sp, #64]	; 0x40
    f2ea:	dc02      	bgt.n	f2f2 <_vfiprintf_r+0x634>
    f2ec:	f10c 0c08 	add.w	ip, ip, #8
    f2f0:	e009      	b.n	f306 <_vfiprintf_r+0x648>
    f2f2:	4658      	mov	r0, fp
    f2f4:	4641      	mov	r1, r8
    f2f6:	aa0f      	add	r2, sp, #60	; 0x3c
    f2f8:	f7ff fcae 	bl	ec58 <__sprint_r>
    f2fc:	2800      	cmp	r0, #0
    f2fe:	f040 80e6 	bne.w	f4ce <_vfiprintf_r+0x810>
    f302:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f308:	2b80      	cmp	r3, #128	; 0x80
    f30a:	d13f      	bne.n	f38c <_vfiprintf_r+0x6ce>
    f30c:	9b04      	ldr	r3, [sp, #16]
    f30e:	1b1b      	subs	r3, r3, r4
    f310:	2b00      	cmp	r3, #0
    f312:	9303      	str	r3, [sp, #12]
    f314:	dd3a      	ble.n	f38c <_vfiprintf_r+0x6ce>
    f316:	9b03      	ldr	r3, [sp, #12]
    f318:	2b10      	cmp	r3, #16
    f31a:	4b68      	ldr	r3, [pc, #416]	; (f4bc <_vfiprintf_r+0x7fe>)
    f31c:	f8cc 3000 	str.w	r3, [ip]
    f320:	dd1b      	ble.n	f35a <_vfiprintf_r+0x69c>
    f322:	2310      	movs	r3, #16
    f324:	f8cc 3004 	str.w	r3, [ip, #4]
    f328:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f32a:	3310      	adds	r3, #16
    f32c:	9311      	str	r3, [sp, #68]	; 0x44
    f32e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f330:	3301      	adds	r3, #1
    f332:	2b07      	cmp	r3, #7
    f334:	9310      	str	r3, [sp, #64]	; 0x40
    f336:	dc02      	bgt.n	f33e <_vfiprintf_r+0x680>
    f338:	f10c 0c08 	add.w	ip, ip, #8
    f33c:	e009      	b.n	f352 <_vfiprintf_r+0x694>
    f33e:	4658      	mov	r0, fp
    f340:	4641      	mov	r1, r8
    f342:	aa0f      	add	r2, sp, #60	; 0x3c
    f344:	f7ff fc88 	bl	ec58 <__sprint_r>
    f348:	2800      	cmp	r0, #0
    f34a:	f040 80c0 	bne.w	f4ce <_vfiprintf_r+0x810>
    f34e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f352:	9b03      	ldr	r3, [sp, #12]
    f354:	3b10      	subs	r3, #16
    f356:	9303      	str	r3, [sp, #12]
    f358:	e7dd      	b.n	f316 <_vfiprintf_r+0x658>
    f35a:	9b03      	ldr	r3, [sp, #12]
    f35c:	f8cc 3004 	str.w	r3, [ip, #4]
    f360:	9803      	ldr	r0, [sp, #12]
    f362:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f364:	4403      	add	r3, r0
    f366:	9311      	str	r3, [sp, #68]	; 0x44
    f368:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f36a:	3301      	adds	r3, #1
    f36c:	2b07      	cmp	r3, #7
    f36e:	9310      	str	r3, [sp, #64]	; 0x40
    f370:	dc02      	bgt.n	f378 <_vfiprintf_r+0x6ba>
    f372:	f10c 0c08 	add.w	ip, ip, #8
    f376:	e009      	b.n	f38c <_vfiprintf_r+0x6ce>
    f378:	4658      	mov	r0, fp
    f37a:	4641      	mov	r1, r8
    f37c:	aa0f      	add	r2, sp, #60	; 0x3c
    f37e:	f7ff fc6b 	bl	ec58 <__sprint_r>
    f382:	2800      	cmp	r0, #0
    f384:	f040 80a3 	bne.w	f4ce <_vfiprintf_r+0x810>
    f388:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f38c:	ebca 0505 	rsb	r5, sl, r5
    f390:	2d00      	cmp	r5, #0
    f392:	dd34      	ble.n	f3fe <_vfiprintf_r+0x740>
    f394:	4b49      	ldr	r3, [pc, #292]	; (f4bc <_vfiprintf_r+0x7fe>)
    f396:	f8cc 3000 	str.w	r3, [ip]
    f39a:	2d10      	cmp	r5, #16
    f39c:	dd19      	ble.n	f3d2 <_vfiprintf_r+0x714>
    f39e:	2310      	movs	r3, #16
    f3a0:	f8cc 3004 	str.w	r3, [ip, #4]
    f3a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f3a6:	3310      	adds	r3, #16
    f3a8:	9311      	str	r3, [sp, #68]	; 0x44
    f3aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f3ac:	3301      	adds	r3, #1
    f3ae:	2b07      	cmp	r3, #7
    f3b0:	9310      	str	r3, [sp, #64]	; 0x40
    f3b2:	dc02      	bgt.n	f3ba <_vfiprintf_r+0x6fc>
    f3b4:	f10c 0c08 	add.w	ip, ip, #8
    f3b8:	e009      	b.n	f3ce <_vfiprintf_r+0x710>
    f3ba:	4658      	mov	r0, fp
    f3bc:	4641      	mov	r1, r8
    f3be:	aa0f      	add	r2, sp, #60	; 0x3c
    f3c0:	f7ff fc4a 	bl	ec58 <__sprint_r>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	f040 8082 	bne.w	f4ce <_vfiprintf_r+0x810>
    f3ca:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f3ce:	3d10      	subs	r5, #16
    f3d0:	e7e0      	b.n	f394 <_vfiprintf_r+0x6d6>
    f3d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f3d4:	f8cc 5004 	str.w	r5, [ip, #4]
    f3d8:	441d      	add	r5, r3
    f3da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f3dc:	9511      	str	r5, [sp, #68]	; 0x44
    f3de:	3301      	adds	r3, #1
    f3e0:	2b07      	cmp	r3, #7
    f3e2:	9310      	str	r3, [sp, #64]	; 0x40
    f3e4:	dc02      	bgt.n	f3ec <_vfiprintf_r+0x72e>
    f3e6:	f10c 0c08 	add.w	ip, ip, #8
    f3ea:	e008      	b.n	f3fe <_vfiprintf_r+0x740>
    f3ec:	4658      	mov	r0, fp
    f3ee:	4641      	mov	r1, r8
    f3f0:	aa0f      	add	r2, sp, #60	; 0x3c
    f3f2:	f7ff fc31 	bl	ec58 <__sprint_r>
    f3f6:	2800      	cmp	r0, #0
    f3f8:	d169      	bne.n	f4ce <_vfiprintf_r+0x810>
    f3fa:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f3fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f400:	4453      	add	r3, sl
    f402:	9311      	str	r3, [sp, #68]	; 0x44
    f404:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f406:	3301      	adds	r3, #1
    f408:	2b07      	cmp	r3, #7
    f40a:	e88c 0600 	stmia.w	ip, {r9, sl}
    f40e:	9310      	str	r3, [sp, #64]	; 0x40
    f410:	dc02      	bgt.n	f418 <_vfiprintf_r+0x75a>
    f412:	f10c 0308 	add.w	r3, ip, #8
    f416:	e007      	b.n	f428 <_vfiprintf_r+0x76a>
    f418:	4658      	mov	r0, fp
    f41a:	4641      	mov	r1, r8
    f41c:	aa0f      	add	r2, sp, #60	; 0x3c
    f41e:	f7ff fc1b 	bl	ec58 <__sprint_r>
    f422:	2800      	cmp	r0, #0
    f424:	d153      	bne.n	f4ce <_vfiprintf_r+0x810>
    f426:	ab1c      	add	r3, sp, #112	; 0x70
    f428:	077a      	lsls	r2, r7, #29
    f42a:	d40a      	bmi.n	f442 <_vfiprintf_r+0x784>
    f42c:	9d05      	ldr	r5, [sp, #20]
    f42e:	9804      	ldr	r0, [sp, #16]
    f430:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f432:	4284      	cmp	r4, r0
    f434:	bfac      	ite	ge
    f436:	192d      	addge	r5, r5, r4
    f438:	182d      	addlt	r5, r5, r0
    f43a:	9505      	str	r5, [sp, #20]
    f43c:	2b00      	cmp	r3, #0
    f43e:	d035      	beq.n	f4ac <_vfiprintf_r+0x7ee>
    f440:	e02e      	b.n	f4a0 <_vfiprintf_r+0x7e2>
    f442:	9904      	ldr	r1, [sp, #16]
    f444:	1b0d      	subs	r5, r1, r4
    f446:	2d00      	cmp	r5, #0
    f448:	ddf0      	ble.n	f42c <_vfiprintf_r+0x76e>
    f44a:	4a1b      	ldr	r2, [pc, #108]	; (f4b8 <_vfiprintf_r+0x7fa>)
    f44c:	601a      	str	r2, [r3, #0]
    f44e:	2d10      	cmp	r5, #16
    f450:	dd15      	ble.n	f47e <_vfiprintf_r+0x7c0>
    f452:	2210      	movs	r2, #16
    f454:	605a      	str	r2, [r3, #4]
    f456:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f458:	3210      	adds	r2, #16
    f45a:	9211      	str	r2, [sp, #68]	; 0x44
    f45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f45e:	3201      	adds	r2, #1
    f460:	2a07      	cmp	r2, #7
    f462:	9210      	str	r2, [sp, #64]	; 0x40
    f464:	dc01      	bgt.n	f46a <_vfiprintf_r+0x7ac>
    f466:	3308      	adds	r3, #8
    f468:	e007      	b.n	f47a <_vfiprintf_r+0x7bc>
    f46a:	4658      	mov	r0, fp
    f46c:	4641      	mov	r1, r8
    f46e:	aa0f      	add	r2, sp, #60	; 0x3c
    f470:	f7ff fbf2 	bl	ec58 <__sprint_r>
    f474:	2800      	cmp	r0, #0
    f476:	d12a      	bne.n	f4ce <_vfiprintf_r+0x810>
    f478:	ab1c      	add	r3, sp, #112	; 0x70
    f47a:	3d10      	subs	r5, #16
    f47c:	e7e5      	b.n	f44a <_vfiprintf_r+0x78c>
    f47e:	605d      	str	r5, [r3, #4]
    f480:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f482:	441d      	add	r5, r3
    f484:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f486:	9511      	str	r5, [sp, #68]	; 0x44
    f488:	3301      	adds	r3, #1
    f48a:	2b07      	cmp	r3, #7
    f48c:	9310      	str	r3, [sp, #64]	; 0x40
    f48e:	ddcd      	ble.n	f42c <_vfiprintf_r+0x76e>
    f490:	4658      	mov	r0, fp
    f492:	4641      	mov	r1, r8
    f494:	aa0f      	add	r2, sp, #60	; 0x3c
    f496:	f7ff fbdf 	bl	ec58 <__sprint_r>
    f49a:	2800      	cmp	r0, #0
    f49c:	d0c6      	beq.n	f42c <_vfiprintf_r+0x76e>
    f49e:	e016      	b.n	f4ce <_vfiprintf_r+0x810>
    f4a0:	4658      	mov	r0, fp
    f4a2:	4641      	mov	r1, r8
    f4a4:	aa0f      	add	r2, sp, #60	; 0x3c
    f4a6:	f7ff fbd7 	bl	ec58 <__sprint_r>
    f4aa:	b980      	cbnz	r0, f4ce <_vfiprintf_r+0x810>
    f4ac:	2300      	movs	r3, #0
    f4ae:	9310      	str	r3, [sp, #64]	; 0x40
    f4b0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    f4b4:	e448      	b.n	ed48 <_vfiprintf_r+0x8a>
    f4b6:	bf00      	nop
    f4b8:	00013006 	.word	0x00013006
    f4bc:	00013016 	.word	0x00013016
    f4c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f4c2:	b123      	cbz	r3, f4ce <_vfiprintf_r+0x810>
    f4c4:	4658      	mov	r0, fp
    f4c6:	4641      	mov	r1, r8
    f4c8:	aa0f      	add	r2, sp, #60	; 0x3c
    f4ca:	f7ff fbc5 	bl	ec58 <__sprint_r>
    f4ce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    f4d2:	065b      	lsls	r3, r3, #25
    f4d4:	f53f ac22 	bmi.w	ed1c <_vfiprintf_r+0x5e>
    f4d8:	9805      	ldr	r0, [sp, #20]
    f4da:	b02d      	add	sp, #180	; 0xb4
    f4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f4e0 <vfiprintf>:
    f4e0:	b530      	push	{r4, r5, lr}
    f4e2:	4613      	mov	r3, r2
    f4e4:	4a04      	ldr	r2, [pc, #16]	; (f4f8 <vfiprintf+0x18>)
    f4e6:	4605      	mov	r5, r0
    f4e8:	460c      	mov	r4, r1
    f4ea:	6810      	ldr	r0, [r2, #0]
    f4ec:	4629      	mov	r1, r5
    f4ee:	4622      	mov	r2, r4
    f4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f4f4:	f7ff bbe3 	b.w	ecbe <_vfiprintf_r>
    f4f8:	200004c0 	.word	0x200004c0

0000f4fc <__sbprintf>:
    f4fc:	b570      	push	{r4, r5, r6, lr}
    f4fe:	460c      	mov	r4, r1
    f500:	8989      	ldrh	r1, [r1, #12]
    f502:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    f506:	f021 0102 	bic.w	r1, r1, #2
    f50a:	f8ad 100c 	strh.w	r1, [sp, #12]
    f50e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    f510:	9119      	str	r1, [sp, #100]	; 0x64
    f512:	89e1      	ldrh	r1, [r4, #14]
    f514:	f8ad 100e 	strh.w	r1, [sp, #14]
    f518:	69e1      	ldr	r1, [r4, #28]
    f51a:	9107      	str	r1, [sp, #28]
    f51c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f51e:	9109      	str	r1, [sp, #36]	; 0x24
    f520:	a91a      	add	r1, sp, #104	; 0x68
    f522:	9100      	str	r1, [sp, #0]
    f524:	9104      	str	r1, [sp, #16]
    f526:	f44f 6180 	mov.w	r1, #1024	; 0x400
    f52a:	9102      	str	r1, [sp, #8]
    f52c:	9105      	str	r1, [sp, #20]
    f52e:	2100      	movs	r1, #0
    f530:	9106      	str	r1, [sp, #24]
    f532:	4669      	mov	r1, sp
    f534:	4606      	mov	r6, r0
    f536:	f7ff fbc2 	bl	ecbe <_vfiprintf_r>
    f53a:	1e05      	subs	r5, r0, #0
    f53c:	db07      	blt.n	f54e <__sbprintf+0x52>
    f53e:	4630      	mov	r0, r6
    f540:	4669      	mov	r1, sp
    f542:	f000 ff89 	bl	10458 <_fflush_r>
    f546:	2800      	cmp	r0, #0
    f548:	bf18      	it	ne
    f54a:	f04f 35ff 	movne.w	r5, #4294967295
    f54e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    f552:	065b      	lsls	r3, r3, #25
    f554:	d503      	bpl.n	f55e <__sbprintf+0x62>
    f556:	89a3      	ldrh	r3, [r4, #12]
    f558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f55c:	81a3      	strh	r3, [r4, #12]
    f55e:	4628      	mov	r0, r5
    f560:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    f564:	bd70      	pop	{r4, r5, r6, pc}
    f566:	bf00      	nop

0000f568 <__swsetup_r>:
    f568:	b538      	push	{r3, r4, r5, lr}
    f56a:	4b2b      	ldr	r3, [pc, #172]	; (f618 <__swsetup_r+0xb0>)
    f56c:	4605      	mov	r5, r0
    f56e:	6818      	ldr	r0, [r3, #0]
    f570:	460c      	mov	r4, r1
    f572:	b118      	cbz	r0, f57c <__swsetup_r+0x14>
    f574:	6b83      	ldr	r3, [r0, #56]	; 0x38
    f576:	b90b      	cbnz	r3, f57c <__swsetup_r+0x14>
    f578:	f000 ffb8 	bl	104ec <__sinit>
    f57c:	89a2      	ldrh	r2, [r4, #12]
    f57e:	b293      	uxth	r3, r2
    f580:	0718      	lsls	r0, r3, #28
    f582:	d420      	bmi.n	f5c6 <__swsetup_r+0x5e>
    f584:	06d9      	lsls	r1, r3, #27
    f586:	d405      	bmi.n	f594 <__swsetup_r+0x2c>
    f588:	2309      	movs	r3, #9
    f58a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f58e:	602b      	str	r3, [r5, #0]
    f590:	81a2      	strh	r2, [r4, #12]
    f592:	e03b      	b.n	f60c <__swsetup_r+0xa4>
    f594:	0758      	lsls	r0, r3, #29
    f596:	d512      	bpl.n	f5be <__swsetup_r+0x56>
    f598:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f59a:	b141      	cbz	r1, f5ae <__swsetup_r+0x46>
    f59c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f5a0:	4299      	cmp	r1, r3
    f5a2:	d002      	beq.n	f5aa <__swsetup_r+0x42>
    f5a4:	4628      	mov	r0, r5
    f5a6:	f001 f925 	bl	107f4 <_free_r>
    f5aa:	2300      	movs	r3, #0
    f5ac:	6323      	str	r3, [r4, #48]	; 0x30
    f5ae:	89a3      	ldrh	r3, [r4, #12]
    f5b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    f5b4:	81a3      	strh	r3, [r4, #12]
    f5b6:	2300      	movs	r3, #0
    f5b8:	6063      	str	r3, [r4, #4]
    f5ba:	6923      	ldr	r3, [r4, #16]
    f5bc:	6023      	str	r3, [r4, #0]
    f5be:	89a3      	ldrh	r3, [r4, #12]
    f5c0:	f043 0308 	orr.w	r3, r3, #8
    f5c4:	81a3      	strh	r3, [r4, #12]
    f5c6:	6923      	ldr	r3, [r4, #16]
    f5c8:	b94b      	cbnz	r3, f5de <__swsetup_r+0x76>
    f5ca:	89a3      	ldrh	r3, [r4, #12]
    f5cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
    f5d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    f5d4:	d003      	beq.n	f5de <__swsetup_r+0x76>
    f5d6:	4628      	mov	r0, r5
    f5d8:	4621      	mov	r1, r4
    f5da:	f001 fb8b 	bl	10cf4 <__smakebuf_r>
    f5de:	89a3      	ldrh	r3, [r4, #12]
    f5e0:	f013 0201 	ands.w	r2, r3, #1
    f5e4:	d005      	beq.n	f5f2 <__swsetup_r+0x8a>
    f5e6:	2200      	movs	r2, #0
    f5e8:	60a2      	str	r2, [r4, #8]
    f5ea:	6962      	ldr	r2, [r4, #20]
    f5ec:	4252      	negs	r2, r2
    f5ee:	61a2      	str	r2, [r4, #24]
    f5f0:	e003      	b.n	f5fa <__swsetup_r+0x92>
    f5f2:	0799      	lsls	r1, r3, #30
    f5f4:	bf58      	it	pl
    f5f6:	6962      	ldrpl	r2, [r4, #20]
    f5f8:	60a2      	str	r2, [r4, #8]
    f5fa:	6922      	ldr	r2, [r4, #16]
    f5fc:	b94a      	cbnz	r2, f612 <__swsetup_r+0xaa>
    f5fe:	f003 0080 	and.w	r0, r3, #128	; 0x80
    f602:	b280      	uxth	r0, r0
    f604:	b130      	cbz	r0, f614 <__swsetup_r+0xac>
    f606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f60a:	81a3      	strh	r3, [r4, #12]
    f60c:	f04f 30ff 	mov.w	r0, #4294967295
    f610:	bd38      	pop	{r3, r4, r5, pc}
    f612:	2000      	movs	r0, #0
    f614:	bd38      	pop	{r3, r4, r5, pc}
    f616:	bf00      	nop
    f618:	200004c0 	.word	0x200004c0

0000f61c <__register_exitproc>:
    f61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f620:	4698      	mov	r8, r3
    f622:	4b22      	ldr	r3, [pc, #136]	; (f6ac <__register_exitproc+0x90>)
    f624:	681c      	ldr	r4, [r3, #0]
    f626:	4606      	mov	r6, r0
    f628:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    f62c:	460f      	mov	r7, r1
    f62e:	4691      	mov	r9, r2
    f630:	b918      	cbnz	r0, f63a <__register_exitproc+0x1e>
    f632:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    f636:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    f63a:	6843      	ldr	r3, [r0, #4]
    f63c:	2b1f      	cmp	r3, #31
    f63e:	dd16      	ble.n	f66e <__register_exitproc+0x52>
    f640:	4b1b      	ldr	r3, [pc, #108]	; (f6b0 <__register_exitproc+0x94>)
    f642:	b91b      	cbnz	r3, f64c <__register_exitproc+0x30>
    f644:	f04f 30ff 	mov.w	r0, #4294967295
    f648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f64c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f650:	f7fe f878 	bl	d744 <malloc>
    f654:	2800      	cmp	r0, #0
    f656:	d0f5      	beq.n	f644 <__register_exitproc+0x28>
    f658:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    f65c:	6001      	str	r1, [r0, #0]
    f65e:	2500      	movs	r5, #0
    f660:	6045      	str	r5, [r0, #4]
    f662:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    f666:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    f66a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    f66e:	6844      	ldr	r4, [r0, #4]
    f670:	b19e      	cbz	r6, f69a <__register_exitproc+0x7e>
    f672:	eb00 0584 	add.w	r5, r0, r4, lsl #2
    f676:	2201      	movs	r2, #1
    f678:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
    f67c:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    f680:	40a2      	lsls	r2, r4
    f682:	4311      	orrs	r1, r2
    f684:	2e02      	cmp	r6, #2
    f686:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    f68a:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    f68e:	d104      	bne.n	f69a <__register_exitproc+0x7e>
    f690:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    f694:	431a      	orrs	r2, r3
    f696:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    f69a:	1c63      	adds	r3, r4, #1
    f69c:	3402      	adds	r4, #2
    f69e:	6043      	str	r3, [r0, #4]
    f6a0:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
    f6a4:	2000      	movs	r0, #0
    f6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f6aa:	bf00      	nop
    f6ac:	00012fac 	.word	0x00012fac
    f6b0:	0000d745 	.word	0x0000d745

0000f6b4 <register_fini>:
    f6b4:	4b02      	ldr	r3, [pc, #8]	; (f6c0 <register_fini+0xc>)
    f6b6:	b113      	cbz	r3, f6be <register_fini+0xa>
    f6b8:	4802      	ldr	r0, [pc, #8]	; (f6c4 <register_fini+0x10>)
    f6ba:	f7fd bfdb 	b.w	d674 <atexit>
    f6be:	4770      	bx	lr
    f6c0:	00000000 	.word	0x00000000
    f6c4:	0000d68d 	.word	0x0000d68d

0000f6c8 <quorem>:
    f6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6cc:	6903      	ldr	r3, [r0, #16]
    f6ce:	690c      	ldr	r4, [r1, #16]
    f6d0:	42a3      	cmp	r3, r4
    f6d2:	4680      	mov	r8, r0
    f6d4:	f2c0 8081 	blt.w	f7da <quorem+0x112>
    f6d8:	3c01      	subs	r4, #1
    f6da:	f101 0714 	add.w	r7, r1, #20
    f6de:	00a2      	lsls	r2, r4, #2
    f6e0:	f100 0514 	add.w	r5, r0, #20
    f6e4:	4691      	mov	r9, r2
    f6e6:	9200      	str	r2, [sp, #0]
    f6e8:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
    f6ec:	442a      	add	r2, r5
    f6ee:	9201      	str	r2, [sp, #4]
    f6f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    f6f4:	3601      	adds	r6, #1
    f6f6:	fbb2 f6f6 	udiv	r6, r2, r6
    f6fa:	44b9      	add	r9, r7
    f6fc:	2e00      	cmp	r6, #0
    f6fe:	d03a      	beq.n	f776 <quorem+0xae>
    f700:	f04f 0e00 	mov.w	lr, #0
    f704:	463a      	mov	r2, r7
    f706:	4628      	mov	r0, r5
    f708:	46f3      	mov	fp, lr
    f70a:	f852 cb04 	ldr.w	ip, [r2], #4
    f70e:	6803      	ldr	r3, [r0, #0]
    f710:	fa1f fa8c 	uxth.w	sl, ip
    f714:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    f718:	fb0a ea06 	mla	sl, sl, r6, lr
    f71c:	fb0c fc06 	mul.w	ip, ip, r6
    f720:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
    f724:	fa1f fa8a 	uxth.w	sl, sl
    f728:	ebca 0a0b 	rsb	sl, sl, fp
    f72c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    f730:	fa1f fc8c 	uxth.w	ip, ip
    f734:	fa1a fa83 	uxtah	sl, sl, r3
    f738:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
    f73c:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
    f740:	fa1f fa8a 	uxth.w	sl, sl
    f744:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
    f748:	454a      	cmp	r2, r9
    f74a:	ea4f 4b2c 	mov.w	fp, ip, asr #16
    f74e:	f840 ab04 	str.w	sl, [r0], #4
    f752:	d9da      	bls.n	f70a <quorem+0x42>
    f754:	9a00      	ldr	r2, [sp, #0]
    f756:	58ab      	ldr	r3, [r5, r2]
    f758:	b96b      	cbnz	r3, f776 <quorem+0xae>
    f75a:	9a01      	ldr	r2, [sp, #4]
    f75c:	1f13      	subs	r3, r2, #4
    f75e:	42ab      	cmp	r3, r5
    f760:	461a      	mov	r2, r3
    f762:	d802      	bhi.n	f76a <quorem+0xa2>
    f764:	f8c8 4010 	str.w	r4, [r8, #16]
    f768:	e005      	b.n	f776 <quorem+0xae>
    f76a:	6812      	ldr	r2, [r2, #0]
    f76c:	3b04      	subs	r3, #4
    f76e:	2a00      	cmp	r2, #0
    f770:	d1f8      	bne.n	f764 <quorem+0x9c>
    f772:	3c01      	subs	r4, #1
    f774:	e7f3      	b.n	f75e <quorem+0x96>
    f776:	4640      	mov	r0, r8
    f778:	f001 fd7f 	bl	1127a <__mcmp>
    f77c:	2800      	cmp	r0, #0
    f77e:	db2a      	blt.n	f7d6 <quorem+0x10e>
    f780:	3601      	adds	r6, #1
    f782:	462b      	mov	r3, r5
    f784:	2000      	movs	r0, #0
    f786:	f857 cb04 	ldr.w	ip, [r7], #4
    f78a:	681a      	ldr	r2, [r3, #0]
    f78c:	fa1f f18c 	uxth.w	r1, ip
    f790:	1a41      	subs	r1, r0, r1
    f792:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    f796:	fa11 f182 	uxtah	r1, r1, r2
    f79a:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
    f79e:	eb02 4221 	add.w	r2, r2, r1, asr #16
    f7a2:	b289      	uxth	r1, r1
    f7a4:	1410      	asrs	r0, r2, #16
    f7a6:	454f      	cmp	r7, r9
    f7a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    f7ac:	f843 2b04 	str.w	r2, [r3], #4
    f7b0:	d9e9      	bls.n	f786 <quorem+0xbe>
    f7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    f7b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    f7ba:	b962      	cbnz	r2, f7d6 <quorem+0x10e>
    f7bc:	3b04      	subs	r3, #4
    f7be:	42ab      	cmp	r3, r5
    f7c0:	461a      	mov	r2, r3
    f7c2:	d802      	bhi.n	f7ca <quorem+0x102>
    f7c4:	f8c8 4010 	str.w	r4, [r8, #16]
    f7c8:	e005      	b.n	f7d6 <quorem+0x10e>
    f7ca:	6812      	ldr	r2, [r2, #0]
    f7cc:	3b04      	subs	r3, #4
    f7ce:	2a00      	cmp	r2, #0
    f7d0:	d1f8      	bne.n	f7c4 <quorem+0xfc>
    f7d2:	3c01      	subs	r4, #1
    f7d4:	e7f3      	b.n	f7be <quorem+0xf6>
    f7d6:	4630      	mov	r0, r6
    f7d8:	e000      	b.n	f7dc <quorem+0x114>
    f7da:	2000      	movs	r0, #0
    f7dc:	b003      	add	sp, #12
    f7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f7e2 <_dtoa_r>:
    f7e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7e6:	6c01      	ldr	r1, [r0, #64]	; 0x40
    f7e8:	b09b      	sub	sp, #108	; 0x6c
    f7ea:	4682      	mov	sl, r0
    f7ec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    f7ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    f7f2:	b151      	cbz	r1, f80a <_dtoa_r+0x28>
    f7f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    f7f6:	604b      	str	r3, [r1, #4]
    f7f8:	2201      	movs	r2, #1
    f7fa:	fa02 f303 	lsl.w	r3, r2, r3
    f7fe:	608b      	str	r3, [r1, #8]
    f800:	f001 fb36 	bl	10e70 <_Bfree>
    f804:	2300      	movs	r3, #0
    f806:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    f80a:	9805      	ldr	r0, [sp, #20]
    f80c:	2800      	cmp	r0, #0
    f80e:	da05      	bge.n	f81c <_dtoa_r+0x3a>
    f810:	2301      	movs	r3, #1
    f812:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    f816:	6023      	str	r3, [r4, #0]
    f818:	9105      	str	r1, [sp, #20]
    f81a:	e001      	b.n	f820 <_dtoa_r+0x3e>
    f81c:	2300      	movs	r3, #0
    f81e:	6023      	str	r3, [r4, #0]
    f820:	9f05      	ldr	r7, [sp, #20]
    f822:	4a9b      	ldr	r2, [pc, #620]	; (fa90 <_dtoa_r+0x2ae>)
    f824:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
    f828:	0d1b      	lsrs	r3, r3, #20
    f82a:	051b      	lsls	r3, r3, #20
    f82c:	4293      	cmp	r3, r2
    f82e:	d11d      	bne.n	f86c <_dtoa_r+0x8a>
    f830:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f832:	f242 730f 	movw	r3, #9999	; 0x270f
    f836:	6013      	str	r3, [r2, #0]
    f838:	9b04      	ldr	r3, [sp, #16]
    f83a:	b943      	cbnz	r3, f84e <_dtoa_r+0x6c>
    f83c:	4b95      	ldr	r3, [pc, #596]	; (fa94 <_dtoa_r+0x2b2>)
    f83e:	4a96      	ldr	r2, [pc, #600]	; (fa98 <_dtoa_r+0x2b6>)
    f840:	f3c7 0013 	ubfx	r0, r7, #0, #20
    f844:	2800      	cmp	r0, #0
    f846:	bf0c      	ite	eq
    f848:	4610      	moveq	r0, r2
    f84a:	4618      	movne	r0, r3
    f84c:	e000      	b.n	f850 <_dtoa_r+0x6e>
    f84e:	4891      	ldr	r0, [pc, #580]	; (fa94 <_dtoa_r+0x2b2>)
    f850:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    f852:	2f00      	cmp	r7, #0
    f854:	f000 856d 	beq.w	10332 <_dtoa_r+0xb50>
    f858:	78c3      	ldrb	r3, [r0, #3]
    f85a:	b113      	cbz	r3, f862 <_dtoa_r+0x80>
    f85c:	f100 0308 	add.w	r3, r0, #8
    f860:	e000      	b.n	f864 <_dtoa_r+0x82>
    f862:	1cc3      	adds	r3, r0, #3
    f864:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    f866:	603b      	str	r3, [r7, #0]
    f868:	f000 bd63 	b.w	10332 <_dtoa_r+0xb50>
    f86c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    f870:	2200      	movs	r2, #0
    f872:	4620      	mov	r0, r4
    f874:	4629      	mov	r1, r5
    f876:	2300      	movs	r3, #0
    f878:	f7fd fbd4 	bl	d024 <__aeabi_dcmpeq>
    f87c:	4680      	mov	r8, r0
    f87e:	b158      	cbz	r0, f898 <_dtoa_r+0xb6>
    f880:	9f26      	ldr	r7, [sp, #152]	; 0x98
    f882:	2301      	movs	r3, #1
    f884:	603b      	str	r3, [r7, #0]
    f886:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    f888:	2f00      	cmp	r7, #0
    f88a:	f000 854f 	beq.w	1032c <_dtoa_r+0xb4a>
    f88e:	4883      	ldr	r0, [pc, #524]	; (fa9c <_dtoa_r+0x2ba>)
    f890:	6038      	str	r0, [r7, #0]
    f892:	3801      	subs	r0, #1
    f894:	f000 bd4d 	b.w	10332 <_dtoa_r+0xb50>
    f898:	ab19      	add	r3, sp, #100	; 0x64
    f89a:	9300      	str	r3, [sp, #0]
    f89c:	ab18      	add	r3, sp, #96	; 0x60
    f89e:	9301      	str	r3, [sp, #4]
    f8a0:	4650      	mov	r0, sl
    f8a2:	4622      	mov	r2, r4
    f8a4:	462b      	mov	r3, r5
    f8a6:	f001 fdd8 	bl	1145a <__d2b>
    f8aa:	f3c7 560a 	ubfx	r6, r7, #20, #11
    f8ae:	4683      	mov	fp, r0
    f8b0:	b15e      	cbz	r6, f8ca <_dtoa_r+0xe8>
    f8b2:	f3c5 0313 	ubfx	r3, r5, #0, #20
    f8b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    f8ba:	4620      	mov	r0, r4
    f8bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    f8c0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    f8c4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    f8c8:	e01c      	b.n	f904 <_dtoa_r+0x122>
    f8ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f8cc:	9e18      	ldr	r6, [sp, #96]	; 0x60
    f8ce:	441e      	add	r6, r3
    f8d0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
    f8d4:	429e      	cmp	r6, r3
    f8d6:	db09      	blt.n	f8ec <_dtoa_r+0x10a>
    f8d8:	9904      	ldr	r1, [sp, #16]
    f8da:	331f      	adds	r3, #31
    f8dc:	f206 4012 	addw	r0, r6, #1042	; 0x412
    f8e0:	1b9b      	subs	r3, r3, r6
    f8e2:	fa21 f000 	lsr.w	r0, r1, r0
    f8e6:	409f      	lsls	r7, r3
    f8e8:	4338      	orrs	r0, r7
    f8ea:	e004      	b.n	f8f6 <_dtoa_r+0x114>
    f8ec:	486c      	ldr	r0, [pc, #432]	; (faa0 <_dtoa_r+0x2be>)
    f8ee:	9a04      	ldr	r2, [sp, #16]
    f8f0:	1b80      	subs	r0, r0, r6
    f8f2:	fa02 f000 	lsl.w	r0, r2, r0
    f8f6:	f7fd f8b7 	bl	ca68 <__aeabi_ui2d>
    f8fa:	2701      	movs	r7, #1
    f8fc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    f900:	3e01      	subs	r6, #1
    f902:	9715      	str	r7, [sp, #84]	; 0x54
    f904:	2200      	movs	r2, #0
    f906:	4b67      	ldr	r3, [pc, #412]	; (faa4 <_dtoa_r+0x2c2>)
    f908:	f7fc ff70 	bl	c7ec <__aeabi_dsub>
    f90c:	a35a      	add	r3, pc, #360	; (adr r3, fa78 <_dtoa_r+0x296>)
    f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f912:	f7fd f91f 	bl	cb54 <__aeabi_dmul>
    f916:	a35a      	add	r3, pc, #360	; (adr r3, fa80 <_dtoa_r+0x29e>)
    f918:	e9d3 2300 	ldrd	r2, r3, [r3]
    f91c:	f7fc ff68 	bl	c7f0 <__adddf3>
    f920:	4604      	mov	r4, r0
    f922:	4630      	mov	r0, r6
    f924:	460d      	mov	r5, r1
    f926:	f7fd f8af 	bl	ca88 <__aeabi_i2d>
    f92a:	a357      	add	r3, pc, #348	; (adr r3, fa88 <_dtoa_r+0x2a6>)
    f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f930:	f7fd f910 	bl	cb54 <__aeabi_dmul>
    f934:	4602      	mov	r2, r0
    f936:	460b      	mov	r3, r1
    f938:	4620      	mov	r0, r4
    f93a:	4629      	mov	r1, r5
    f93c:	f7fc ff58 	bl	c7f0 <__adddf3>
    f940:	4604      	mov	r4, r0
    f942:	460d      	mov	r5, r1
    f944:	f002 fe4c 	bl	125e0 <__aeabi_d2iz>
    f948:	4629      	mov	r1, r5
    f94a:	4681      	mov	r9, r0
    f94c:	2200      	movs	r2, #0
    f94e:	4620      	mov	r0, r4
    f950:	2300      	movs	r3, #0
    f952:	f7fd fb71 	bl	d038 <__aeabi_dcmplt>
    f956:	b158      	cbz	r0, f970 <_dtoa_r+0x18e>
    f958:	4648      	mov	r0, r9
    f95a:	f7fd f895 	bl	ca88 <__aeabi_i2d>
    f95e:	4602      	mov	r2, r0
    f960:	460b      	mov	r3, r1
    f962:	4620      	mov	r0, r4
    f964:	4629      	mov	r1, r5
    f966:	f7fd fb5d 	bl	d024 <__aeabi_dcmpeq>
    f96a:	b908      	cbnz	r0, f970 <_dtoa_r+0x18e>
    f96c:	f109 39ff 	add.w	r9, r9, #4294967295
    f970:	f1b9 0f16 	cmp.w	r9, #22
    f974:	d80d      	bhi.n	f992 <_dtoa_r+0x1b0>
    f976:	4b4c      	ldr	r3, [pc, #304]	; (faa8 <_dtoa_r+0x2c6>)
    f978:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    f97c:	e9d3 0100 	ldrd	r0, r1, [r3]
    f980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f984:	f7fd fb76 	bl	d074 <__aeabi_dcmpgt>
    f988:	b130      	cbz	r0, f998 <_dtoa_r+0x1b6>
    f98a:	f109 39ff 	add.w	r9, r9, #4294967295
    f98e:	2700      	movs	r7, #0
    f990:	e000      	b.n	f994 <_dtoa_r+0x1b2>
    f992:	2701      	movs	r7, #1
    f994:	9714      	str	r7, [sp, #80]	; 0x50
    f996:	e000      	b.n	f99a <_dtoa_r+0x1b8>
    f998:	9014      	str	r0, [sp, #80]	; 0x50
    f99a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f99c:	1b9e      	subs	r6, r3, r6
    f99e:	3e01      	subs	r6, #1
    f9a0:	960a      	str	r6, [sp, #40]	; 0x28
    f9a2:	d504      	bpl.n	f9ae <_dtoa_r+0x1cc>
    f9a4:	4277      	negs	r7, r6
    f9a6:	9708      	str	r7, [sp, #32]
    f9a8:	2700      	movs	r7, #0
    f9aa:	970a      	str	r7, [sp, #40]	; 0x28
    f9ac:	e001      	b.n	f9b2 <_dtoa_r+0x1d0>
    f9ae:	2700      	movs	r7, #0
    f9b0:	9708      	str	r7, [sp, #32]
    f9b2:	f1b9 0f00 	cmp.w	r9, #0
    f9b6:	db07      	blt.n	f9c8 <_dtoa_r+0x1e6>
    f9b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    f9ba:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    f9be:	444f      	add	r7, r9
    f9c0:	970a      	str	r7, [sp, #40]	; 0x28
    f9c2:	2700      	movs	r7, #0
    f9c4:	970e      	str	r7, [sp, #56]	; 0x38
    f9c6:	e008      	b.n	f9da <_dtoa_r+0x1f8>
    f9c8:	9f08      	ldr	r7, [sp, #32]
    f9ca:	ebc9 0707 	rsb	r7, r9, r7
    f9ce:	9708      	str	r7, [sp, #32]
    f9d0:	f1c9 0700 	rsb	r7, r9, #0
    f9d4:	970e      	str	r7, [sp, #56]	; 0x38
    f9d6:	2700      	movs	r7, #0
    f9d8:	9711      	str	r7, [sp, #68]	; 0x44
    f9da:	9f24      	ldr	r7, [sp, #144]	; 0x90
    f9dc:	2f09      	cmp	r7, #9
    f9de:	d828      	bhi.n	fa32 <_dtoa_r+0x250>
    f9e0:	2f05      	cmp	r7, #5
    f9e2:	bfc4      	itt	gt
    f9e4:	3f04      	subgt	r7, #4
    f9e6:	9724      	strgt	r7, [sp, #144]	; 0x90
    f9e8:	9f24      	ldr	r7, [sp, #144]	; 0x90
    f9ea:	f1a7 0302 	sub.w	r3, r7, #2
    f9ee:	bfcc      	ite	gt
    f9f0:	2400      	movgt	r4, #0
    f9f2:	2401      	movle	r4, #1
    f9f4:	2b03      	cmp	r3, #3
    f9f6:	d821      	bhi.n	fa3c <_dtoa_r+0x25a>
    f9f8:	e8df f003 	tbb	[pc, r3]
    f9fc:	04020f06 	.word	0x04020f06
    fa00:	2701      	movs	r7, #1
    fa02:	e002      	b.n	fa0a <_dtoa_r+0x228>
    fa04:	2701      	movs	r7, #1
    fa06:	e009      	b.n	fa1c <_dtoa_r+0x23a>
    fa08:	2700      	movs	r7, #0
    fa0a:	970f      	str	r7, [sp, #60]	; 0x3c
    fa0c:	9f25      	ldr	r7, [sp, #148]	; 0x94
    fa0e:	2f00      	cmp	r7, #0
    fa10:	dd1e      	ble.n	fa50 <_dtoa_r+0x26e>
    fa12:	970b      	str	r7, [sp, #44]	; 0x2c
    fa14:	9707      	str	r7, [sp, #28]
    fa16:	463b      	mov	r3, r7
    fa18:	e01f      	b.n	fa5a <_dtoa_r+0x278>
    fa1a:	2700      	movs	r7, #0
    fa1c:	970f      	str	r7, [sp, #60]	; 0x3c
    fa1e:	9f25      	ldr	r7, [sp, #148]	; 0x94
    fa20:	444f      	add	r7, r9
    fa22:	970b      	str	r7, [sp, #44]	; 0x2c
    fa24:	3701      	adds	r7, #1
    fa26:	463b      	mov	r3, r7
    fa28:	9707      	str	r7, [sp, #28]
    fa2a:	2b01      	cmp	r3, #1
    fa2c:	bfb8      	it	lt
    fa2e:	2301      	movlt	r3, #1
    fa30:	e013      	b.n	fa5a <_dtoa_r+0x278>
    fa32:	2401      	movs	r4, #1
    fa34:	2700      	movs	r7, #0
    fa36:	9724      	str	r7, [sp, #144]	; 0x90
    fa38:	940f      	str	r4, [sp, #60]	; 0x3c
    fa3a:	e001      	b.n	fa40 <_dtoa_r+0x25e>
    fa3c:	2701      	movs	r7, #1
    fa3e:	970f      	str	r7, [sp, #60]	; 0x3c
    fa40:	f04f 37ff 	mov.w	r7, #4294967295
    fa44:	970b      	str	r7, [sp, #44]	; 0x2c
    fa46:	9707      	str	r7, [sp, #28]
    fa48:	2700      	movs	r7, #0
    fa4a:	2312      	movs	r3, #18
    fa4c:	9725      	str	r7, [sp, #148]	; 0x94
    fa4e:	e004      	b.n	fa5a <_dtoa_r+0x278>
    fa50:	2701      	movs	r7, #1
    fa52:	970b      	str	r7, [sp, #44]	; 0x2c
    fa54:	9707      	str	r7, [sp, #28]
    fa56:	463b      	mov	r3, r7
    fa58:	9725      	str	r7, [sp, #148]	; 0x94
    fa5a:	2200      	movs	r2, #0
    fa5c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
    fa60:	2204      	movs	r2, #4
    fa62:	f102 0114 	add.w	r1, r2, #20
    fa66:	4299      	cmp	r1, r3
    fa68:	d820      	bhi.n	faac <_dtoa_r+0x2ca>
    fa6a:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
    fa6e:	3101      	adds	r1, #1
    fa70:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
    fa74:	0052      	lsls	r2, r2, #1
    fa76:	e7f4      	b.n	fa62 <_dtoa_r+0x280>
    fa78:	636f4361 	.word	0x636f4361
    fa7c:	3fd287a7 	.word	0x3fd287a7
    fa80:	8b60c8b3 	.word	0x8b60c8b3
    fa84:	3fc68a28 	.word	0x3fc68a28
    fa88:	509f79fb 	.word	0x509f79fb
    fa8c:	3fd34413 	.word	0x3fd34413
    fa90:	7ff00000 	.word	0x7ff00000
    fa94:	0001302f 	.word	0x0001302f
    fa98:	00013026 	.word	0x00013026
    fa9c:	00013005 	.word	0x00013005
    faa0:	fffffbee 	.word	0xfffffbee
    faa4:	3ff80000 	.word	0x3ff80000
    faa8:	00013050 	.word	0x00013050
    faac:	4650      	mov	r0, sl
    faae:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
    fab2:	f001 f9b7 	bl	10e24 <_Balloc>
    fab6:	9f07      	ldr	r7, [sp, #28]
    fab8:	9009      	str	r0, [sp, #36]	; 0x24
    faba:	2f0e      	cmp	r7, #14
    fabc:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
    fac0:	f200 816a 	bhi.w	fd98 <_dtoa_r+0x5b6>
    fac4:	2c00      	cmp	r4, #0
    fac6:	f000 8167 	beq.w	fd98 <_dtoa_r+0x5b6>
    faca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    face:	f1b9 0f00 	cmp.w	r9, #0
    fad2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    fad6:	dd31      	ble.n	fb3c <_dtoa_r+0x35a>
    fad8:	4a80      	ldr	r2, [pc, #512]	; (fcdc <_dtoa_r+0x4fa>)
    fada:	f009 030f 	and.w	r3, r9, #15
    fade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    fae2:	e9d3 0100 	ldrd	r0, r1, [r3]
    fae6:	ea4f 1429 	mov.w	r4, r9, asr #4
    faea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    faee:	06e0      	lsls	r0, r4, #27
    faf0:	d50c      	bpl.n	fb0c <_dtoa_r+0x32a>
    faf2:	4b7b      	ldr	r3, [pc, #492]	; (fce0 <_dtoa_r+0x4fe>)
    faf4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    faf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    fafc:	f7fd f954 	bl	cda8 <__aeabi_ddiv>
    fb00:	f004 040f 	and.w	r4, r4, #15
    fb04:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fb08:	2703      	movs	r7, #3
    fb0a:	e000      	b.n	fb0e <_dtoa_r+0x32c>
    fb0c:	2702      	movs	r7, #2
    fb0e:	4d74      	ldr	r5, [pc, #464]	; (fce0 <_dtoa_r+0x4fe>)
    fb10:	b16c      	cbz	r4, fb2e <_dtoa_r+0x34c>
    fb12:	07e1      	lsls	r1, r4, #31
    fb14:	d508      	bpl.n	fb28 <_dtoa_r+0x346>
    fb16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    fb1a:	e9d5 2300 	ldrd	r2, r3, [r5]
    fb1e:	f7fd f819 	bl	cb54 <__aeabi_dmul>
    fb22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    fb26:	3701      	adds	r7, #1
    fb28:	1064      	asrs	r4, r4, #1
    fb2a:	3508      	adds	r5, #8
    fb2c:	e7f0      	b.n	fb10 <_dtoa_r+0x32e>
    fb2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    fb32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    fb36:	f7fd f937 	bl	cda8 <__aeabi_ddiv>
    fb3a:	e01b      	b.n	fb74 <_dtoa_r+0x392>
    fb3c:	f1c9 0400 	rsb	r4, r9, #0
    fb40:	b1dc      	cbz	r4, fb7a <_dtoa_r+0x398>
    fb42:	4b66      	ldr	r3, [pc, #408]	; (fcdc <_dtoa_r+0x4fa>)
    fb44:	4d66      	ldr	r5, [pc, #408]	; (fce0 <_dtoa_r+0x4fe>)
    fb46:	f004 020f 	and.w	r2, r4, #15
    fb4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    fb4e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb56:	f7fc fffd 	bl	cb54 <__aeabi_dmul>
    fb5a:	1124      	asrs	r4, r4, #4
    fb5c:	2702      	movs	r7, #2
    fb5e:	b14c      	cbz	r4, fb74 <_dtoa_r+0x392>
    fb60:	07e2      	lsls	r2, r4, #31
    fb62:	d504      	bpl.n	fb6e <_dtoa_r+0x38c>
    fb64:	e9d5 2300 	ldrd	r2, r3, [r5]
    fb68:	3701      	adds	r7, #1
    fb6a:	f7fc fff3 	bl	cb54 <__aeabi_dmul>
    fb6e:	1064      	asrs	r4, r4, #1
    fb70:	3508      	adds	r5, #8
    fb72:	e7f4      	b.n	fb5e <_dtoa_r+0x37c>
    fb74:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fb78:	e000      	b.n	fb7c <_dtoa_r+0x39a>
    fb7a:	2702      	movs	r7, #2
    fb7c:	9914      	ldr	r1, [sp, #80]	; 0x50
    fb7e:	b1e9      	cbz	r1, fbbc <_dtoa_r+0x3da>
    fb80:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    fb84:	2200      	movs	r2, #0
    fb86:	4620      	mov	r0, r4
    fb88:	4629      	mov	r1, r5
    fb8a:	4b56      	ldr	r3, [pc, #344]	; (fce4 <_dtoa_r+0x502>)
    fb8c:	f7fd fa54 	bl	d038 <__aeabi_dcmplt>
    fb90:	b1c8      	cbz	r0, fbc6 <_dtoa_r+0x3e4>
    fb92:	9a07      	ldr	r2, [sp, #28]
    fb94:	b1e2      	cbz	r2, fbd0 <_dtoa_r+0x3ee>
    fb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fb98:	2b00      	cmp	r3, #0
    fb9a:	f340 80f9 	ble.w	fd90 <_dtoa_r+0x5ae>
    fb9e:	f109 30ff 	add.w	r0, r9, #4294967295
    fba2:	9010      	str	r0, [sp, #64]	; 0x40
    fba4:	4629      	mov	r1, r5
    fba6:	4620      	mov	r0, r4
    fba8:	2200      	movs	r2, #0
    fbaa:	4b4f      	ldr	r3, [pc, #316]	; (fce8 <_dtoa_r+0x506>)
    fbac:	f7fc ffd2 	bl	cb54 <__aeabi_dmul>
    fbb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fbb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fbb6:	910c      	str	r1, [sp, #48]	; 0x30
    fbb8:	3701      	adds	r7, #1
    fbba:	e00d      	b.n	fbd8 <_dtoa_r+0x3f6>
    fbbc:	9a07      	ldr	r2, [sp, #28]
    fbbe:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    fbc2:	920c      	str	r2, [sp, #48]	; 0x30
    fbc4:	e008      	b.n	fbd8 <_dtoa_r+0x3f6>
    fbc6:	9b07      	ldr	r3, [sp, #28]
    fbc8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    fbcc:	930c      	str	r3, [sp, #48]	; 0x30
    fbce:	e003      	b.n	fbd8 <_dtoa_r+0x3f6>
    fbd0:	9807      	ldr	r0, [sp, #28]
    fbd2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    fbd6:	900c      	str	r0, [sp, #48]	; 0x30
    fbd8:	4638      	mov	r0, r7
    fbda:	f7fc ff55 	bl	ca88 <__aeabi_i2d>
    fbde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fbe2:	f7fc ffb7 	bl	cb54 <__aeabi_dmul>
    fbe6:	2200      	movs	r2, #0
    fbe8:	4b40      	ldr	r3, [pc, #256]	; (fcec <_dtoa_r+0x50a>)
    fbea:	f7fc fe01 	bl	c7f0 <__adddf3>
    fbee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    fbf0:	4604      	mov	r4, r0
    fbf2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    fbf6:	b9cf      	cbnz	r7, fc2c <_dtoa_r+0x44a>
    fbf8:	2200      	movs	r2, #0
    fbfa:	4b3d      	ldr	r3, [pc, #244]	; (fcf0 <_dtoa_r+0x50e>)
    fbfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    fc00:	f7fc fdf4 	bl	c7ec <__aeabi_dsub>
    fc04:	4622      	mov	r2, r4
    fc06:	462b      	mov	r3, r5
    fc08:	4606      	mov	r6, r0
    fc0a:	460f      	mov	r7, r1
    fc0c:	f7fd fa32 	bl	d074 <__aeabi_dcmpgt>
    fc10:	2800      	cmp	r0, #0
    fc12:	f040 8252 	bne.w	100ba <_dtoa_r+0x8d8>
    fc16:	4622      	mov	r2, r4
    fc18:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    fc1c:	4630      	mov	r0, r6
    fc1e:	4639      	mov	r1, r7
    fc20:	f7fd fa0a 	bl	d038 <__aeabi_dcmplt>
    fc24:	2800      	cmp	r0, #0
    fc26:	f040 823e 	bne.w	100a6 <_dtoa_r+0x8c4>
    fc2a:	e0b1      	b.n	fd90 <_dtoa_r+0x5ae>
    fc2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    fc2e:	4b2b      	ldr	r3, [pc, #172]	; (fcdc <_dtoa_r+0x4fa>)
    fc30:	1e7a      	subs	r2, r7, #1
    fc32:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    fc34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    fc38:	2f00      	cmp	r7, #0
    fc3a:	d05d      	beq.n	fcf8 <_dtoa_r+0x516>
    fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc40:	2000      	movs	r0, #0
    fc42:	492c      	ldr	r1, [pc, #176]	; (fcf4 <_dtoa_r+0x512>)
    fc44:	f7fd f8b0 	bl	cda8 <__aeabi_ddiv>
    fc48:	4622      	mov	r2, r4
    fc4a:	462b      	mov	r3, r5
    fc4c:	f7fc fdce 	bl	c7ec <__aeabi_dsub>
    fc50:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fc54:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    fc58:	4604      	mov	r4, r0
    fc5a:	460d      	mov	r5, r1
    fc5c:	4639      	mov	r1, r7
    fc5e:	4630      	mov	r0, r6
    fc60:	f002 fcbe 	bl	125e0 <__aeabi_d2iz>
    fc64:	9002      	str	r0, [sp, #8]
    fc66:	f7fc ff0f 	bl	ca88 <__aeabi_i2d>
    fc6a:	4602      	mov	r2, r0
    fc6c:	460b      	mov	r3, r1
    fc6e:	4630      	mov	r0, r6
    fc70:	4639      	mov	r1, r7
    fc72:	f7fc fdbb 	bl	c7ec <__aeabi_dsub>
    fc76:	f8dd c008 	ldr.w	ip, [sp, #8]
    fc7a:	f10c 0330 	add.w	r3, ip, #48	; 0x30
    fc7e:	f808 3b01 	strb.w	r3, [r8], #1
    fc82:	4622      	mov	r2, r4
    fc84:	462b      	mov	r3, r5
    fc86:	4606      	mov	r6, r0
    fc88:	460f      	mov	r7, r1
    fc8a:	f7fd f9d5 	bl	d038 <__aeabi_dcmplt>
    fc8e:	2800      	cmp	r0, #0
    fc90:	f040 833a 	bne.w	10308 <_dtoa_r+0xb26>
    fc94:	4632      	mov	r2, r6
    fc96:	463b      	mov	r3, r7
    fc98:	2000      	movs	r0, #0
    fc9a:	4912      	ldr	r1, [pc, #72]	; (fce4 <_dtoa_r+0x502>)
    fc9c:	f7fc fda6 	bl	c7ec <__aeabi_dsub>
    fca0:	4622      	mov	r2, r4
    fca2:	462b      	mov	r3, r5
    fca4:	f7fd f9c8 	bl	d038 <__aeabi_dcmplt>
    fca8:	2800      	cmp	r0, #0
    fcaa:	f040 80d4 	bne.w	fe56 <_dtoa_r+0x674>
    fcae:	9809      	ldr	r0, [sp, #36]	; 0x24
    fcb0:	990c      	ldr	r1, [sp, #48]	; 0x30
    fcb2:	ebc0 0308 	rsb	r3, r0, r8
    fcb6:	428b      	cmp	r3, r1
    fcb8:	da6a      	bge.n	fd90 <_dtoa_r+0x5ae>
    fcba:	4620      	mov	r0, r4
    fcbc:	4629      	mov	r1, r5
    fcbe:	2200      	movs	r2, #0
    fcc0:	4b09      	ldr	r3, [pc, #36]	; (fce8 <_dtoa_r+0x506>)
    fcc2:	f7fc ff47 	bl	cb54 <__aeabi_dmul>
    fcc6:	2200      	movs	r2, #0
    fcc8:	4604      	mov	r4, r0
    fcca:	460d      	mov	r5, r1
    fccc:	4630      	mov	r0, r6
    fcce:	4639      	mov	r1, r7
    fcd0:	4b05      	ldr	r3, [pc, #20]	; (fce8 <_dtoa_r+0x506>)
    fcd2:	f7fc ff3f 	bl	cb54 <__aeabi_dmul>
    fcd6:	4606      	mov	r6, r0
    fcd8:	460f      	mov	r7, r1
    fcda:	e7bf      	b.n	fc5c <_dtoa_r+0x47a>
    fcdc:	00013050 	.word	0x00013050
    fce0:	00013140 	.word	0x00013140
    fce4:	3ff00000 	.word	0x3ff00000
    fce8:	40240000 	.word	0x40240000
    fcec:	401c0000 	.word	0x401c0000
    fcf0:	40140000 	.word	0x40140000
    fcf4:	3fe00000 	.word	0x3fe00000
    fcf8:	4622      	mov	r2, r4
    fcfa:	e9d3 0100 	ldrd	r0, r1, [r3]
    fcfe:	462b      	mov	r3, r5
    fd00:	f7fc ff28 	bl	cb54 <__aeabi_dmul>
    fd04:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    fd08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fd0c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    fd10:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fd14:	4490      	add	r8, r2
    fd16:	4639      	mov	r1, r7
    fd18:	4630      	mov	r0, r6
    fd1a:	f002 fc61 	bl	125e0 <__aeabi_d2iz>
    fd1e:	4605      	mov	r5, r0
    fd20:	f7fc feb2 	bl	ca88 <__aeabi_i2d>
    fd24:	3530      	adds	r5, #48	; 0x30
    fd26:	4602      	mov	r2, r0
    fd28:	460b      	mov	r3, r1
    fd2a:	4630      	mov	r0, r6
    fd2c:	4639      	mov	r1, r7
    fd2e:	f7fc fd5d 	bl	c7ec <__aeabi_dsub>
    fd32:	f804 5b01 	strb.w	r5, [r4], #1
    fd36:	4544      	cmp	r4, r8
    fd38:	4606      	mov	r6, r0
    fd3a:	460f      	mov	r7, r1
    fd3c:	d121      	bne.n	fd82 <_dtoa_r+0x5a0>
    fd3e:	2200      	movs	r2, #0
    fd40:	4b87      	ldr	r3, [pc, #540]	; (ff60 <_dtoa_r+0x77e>)
    fd42:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    fd46:	f7fc fd53 	bl	c7f0 <__adddf3>
    fd4a:	4602      	mov	r2, r0
    fd4c:	460b      	mov	r3, r1
    fd4e:	4630      	mov	r0, r6
    fd50:	4639      	mov	r1, r7
    fd52:	f7fd f98f 	bl	d074 <__aeabi_dcmpgt>
    fd56:	2800      	cmp	r0, #0
    fd58:	d17d      	bne.n	fe56 <_dtoa_r+0x674>
    fd5a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    fd5e:	2000      	movs	r0, #0
    fd60:	497f      	ldr	r1, [pc, #508]	; (ff60 <_dtoa_r+0x77e>)
    fd62:	f7fc fd43 	bl	c7ec <__aeabi_dsub>
    fd66:	4602      	mov	r2, r0
    fd68:	460b      	mov	r3, r1
    fd6a:	4630      	mov	r0, r6
    fd6c:	4639      	mov	r1, r7
    fd6e:	f7fd f963 	bl	d038 <__aeabi_dcmplt>
    fd72:	b168      	cbz	r0, fd90 <_dtoa_r+0x5ae>
    fd74:	46a0      	mov	r8, r4
    fd76:	3c01      	subs	r4, #1
    fd78:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    fd7c:	2b30      	cmp	r3, #48	; 0x30
    fd7e:	d0f9      	beq.n	fd74 <_dtoa_r+0x592>
    fd80:	e2c2      	b.n	10308 <_dtoa_r+0xb26>
    fd82:	2200      	movs	r2, #0
    fd84:	4b77      	ldr	r3, [pc, #476]	; (ff64 <_dtoa_r+0x782>)
    fd86:	f7fc fee5 	bl	cb54 <__aeabi_dmul>
    fd8a:	4606      	mov	r6, r0
    fd8c:	460f      	mov	r7, r1
    fd8e:	e7c2      	b.n	fd16 <_dtoa_r+0x534>
    fd90:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    fd94:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fd98:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	db7c      	blt.n	fe98 <_dtoa_r+0x6b6>
    fd9e:	f1b9 0f0e 	cmp.w	r9, #14
    fda2:	dc79      	bgt.n	fe98 <_dtoa_r+0x6b6>
    fda4:	4b70      	ldr	r3, [pc, #448]	; (ff68 <_dtoa_r+0x786>)
    fda6:	9f25      	ldr	r7, [sp, #148]	; 0x94
    fda8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    fdac:	2f00      	cmp	r7, #0
    fdae:	e9d3 4500 	ldrd	r4, r5, [r3]
    fdb2:	da14      	bge.n	fdde <_dtoa_r+0x5fc>
    fdb4:	9f07      	ldr	r7, [sp, #28]
    fdb6:	2f00      	cmp	r7, #0
    fdb8:	dc11      	bgt.n	fdde <_dtoa_r+0x5fc>
    fdba:	f040 8176 	bne.w	100aa <_dtoa_r+0x8c8>
    fdbe:	4620      	mov	r0, r4
    fdc0:	4629      	mov	r1, r5
    fdc2:	2200      	movs	r2, #0
    fdc4:	4b69      	ldr	r3, [pc, #420]	; (ff6c <_dtoa_r+0x78a>)
    fdc6:	f7fc fec5 	bl	cb54 <__aeabi_dmul>
    fdca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fdce:	f7fd f947 	bl	d060 <__aeabi_dcmpge>
    fdd2:	9d07      	ldr	r5, [sp, #28]
    fdd4:	462c      	mov	r4, r5
    fdd6:	2800      	cmp	r0, #0
    fdd8:	f040 8169 	bne.w	100ae <_dtoa_r+0x8cc>
    fddc:	e171      	b.n	100c2 <_dtoa_r+0x8e0>
    fdde:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    fde2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    fde6:	4622      	mov	r2, r4
    fde8:	462b      	mov	r3, r5
    fdea:	4630      	mov	r0, r6
    fdec:	4639      	mov	r1, r7
    fdee:	f7fc ffdb 	bl	cda8 <__aeabi_ddiv>
    fdf2:	f002 fbf5 	bl	125e0 <__aeabi_d2iz>
    fdf6:	9004      	str	r0, [sp, #16]
    fdf8:	f7fc fe46 	bl	ca88 <__aeabi_i2d>
    fdfc:	4622      	mov	r2, r4
    fdfe:	462b      	mov	r3, r5
    fe00:	f7fc fea8 	bl	cb54 <__aeabi_dmul>
    fe04:	4602      	mov	r2, r0
    fe06:	460b      	mov	r3, r1
    fe08:	4630      	mov	r0, r6
    fe0a:	4639      	mov	r1, r7
    fe0c:	f7fc fcee 	bl	c7ec <__aeabi_dsub>
    fe10:	9f04      	ldr	r7, [sp, #16]
    fe12:	f107 0630 	add.w	r6, r7, #48	; 0x30
    fe16:	f808 6b01 	strb.w	r6, [r8], #1
    fe1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fe1c:	ebc7 0608 	rsb	r6, r7, r8
    fe20:	9f07      	ldr	r7, [sp, #28]
    fe22:	42be      	cmp	r6, r7
    fe24:	4602      	mov	r2, r0
    fe26:	460b      	mov	r3, r1
    fe28:	d129      	bne.n	fe7e <_dtoa_r+0x69c>
    fe2a:	f7fc fce1 	bl	c7f0 <__adddf3>
    fe2e:	4622      	mov	r2, r4
    fe30:	462b      	mov	r3, r5
    fe32:	4606      	mov	r6, r0
    fe34:	460f      	mov	r7, r1
    fe36:	f7fd f91d 	bl	d074 <__aeabi_dcmpgt>
    fe3a:	b970      	cbnz	r0, fe5a <_dtoa_r+0x678>
    fe3c:	4630      	mov	r0, r6
    fe3e:	4639      	mov	r1, r7
    fe40:	4622      	mov	r2, r4
    fe42:	462b      	mov	r3, r5
    fe44:	f7fd f8ee 	bl	d024 <__aeabi_dcmpeq>
    fe48:	2800      	cmp	r0, #0
    fe4a:	f000 825f 	beq.w	1030c <_dtoa_r+0xb2a>
    fe4e:	9f04      	ldr	r7, [sp, #16]
    fe50:	07fb      	lsls	r3, r7, #31
    fe52:	d402      	bmi.n	fe5a <_dtoa_r+0x678>
    fe54:	e25a      	b.n	1030c <_dtoa_r+0xb2a>
    fe56:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    fe5a:	4643      	mov	r3, r8
    fe5c:	4698      	mov	r8, r3
    fe5e:	3b01      	subs	r3, #1
    fe60:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    fe64:	2a39      	cmp	r2, #57	; 0x39
    fe66:	d106      	bne.n	fe76 <_dtoa_r+0x694>
    fe68:	9f09      	ldr	r7, [sp, #36]	; 0x24
    fe6a:	429f      	cmp	r7, r3
    fe6c:	d1f6      	bne.n	fe5c <_dtoa_r+0x67a>
    fe6e:	2230      	movs	r2, #48	; 0x30
    fe70:	f109 0901 	add.w	r9, r9, #1
    fe74:	703a      	strb	r2, [r7, #0]
    fe76:	781a      	ldrb	r2, [r3, #0]
    fe78:	3201      	adds	r2, #1
    fe7a:	701a      	strb	r2, [r3, #0]
    fe7c:	e246      	b.n	1030c <_dtoa_r+0xb2a>
    fe7e:	2200      	movs	r2, #0
    fe80:	4b38      	ldr	r3, [pc, #224]	; (ff64 <_dtoa_r+0x782>)
    fe82:	f7fc fe67 	bl	cb54 <__aeabi_dmul>
    fe86:	2200      	movs	r2, #0
    fe88:	2300      	movs	r3, #0
    fe8a:	4606      	mov	r6, r0
    fe8c:	460f      	mov	r7, r1
    fe8e:	f7fd f8c9 	bl	d024 <__aeabi_dcmpeq>
    fe92:	2800      	cmp	r0, #0
    fe94:	d0a7      	beq.n	fde6 <_dtoa_r+0x604>
    fe96:	e239      	b.n	1030c <_dtoa_r+0xb2a>
    fe98:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    fe9a:	2f00      	cmp	r7, #0
    fe9c:	d030      	beq.n	ff00 <_dtoa_r+0x71e>
    fe9e:	9f24      	ldr	r7, [sp, #144]	; 0x90
    fea0:	2f01      	cmp	r7, #1
    fea2:	dc0a      	bgt.n	feba <_dtoa_r+0x6d8>
    fea4:	9f15      	ldr	r7, [sp, #84]	; 0x54
    fea6:	b117      	cbz	r7, feae <_dtoa_r+0x6cc>
    fea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
    feac:	e002      	b.n	feb4 <_dtoa_r+0x6d2>
    feae:	9b18      	ldr	r3, [sp, #96]	; 0x60
    feb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    feb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    feb6:	9e08      	ldr	r6, [sp, #32]
    feb8:	e016      	b.n	fee8 <_dtoa_r+0x706>
    feba:	9f07      	ldr	r7, [sp, #28]
    febc:	1e7d      	subs	r5, r7, #1
    febe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    fec0:	42af      	cmp	r7, r5
    fec2:	db01      	blt.n	fec8 <_dtoa_r+0x6e6>
    fec4:	1b7d      	subs	r5, r7, r5
    fec6:	e006      	b.n	fed6 <_dtoa_r+0x6f4>
    fec8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    feca:	950e      	str	r5, [sp, #56]	; 0x38
    fecc:	1beb      	subs	r3, r5, r7
    fece:	9f11      	ldr	r7, [sp, #68]	; 0x44
    fed0:	441f      	add	r7, r3
    fed2:	9711      	str	r7, [sp, #68]	; 0x44
    fed4:	2500      	movs	r5, #0
    fed6:	9f07      	ldr	r7, [sp, #28]
    fed8:	2f00      	cmp	r7, #0
    feda:	da03      	bge.n	fee4 <_dtoa_r+0x702>
    fedc:	9808      	ldr	r0, [sp, #32]
    fede:	2300      	movs	r3, #0
    fee0:	1bc6      	subs	r6, r0, r7
    fee2:	e001      	b.n	fee8 <_dtoa_r+0x706>
    fee4:	9e08      	ldr	r6, [sp, #32]
    fee6:	9b07      	ldr	r3, [sp, #28]
    fee8:	9f08      	ldr	r7, [sp, #32]
    feea:	441f      	add	r7, r3
    feec:	9708      	str	r7, [sp, #32]
    feee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    fef0:	4650      	mov	r0, sl
    fef2:	441f      	add	r7, r3
    fef4:	2101      	movs	r1, #1
    fef6:	970a      	str	r7, [sp, #40]	; 0x28
    fef8:	f001 f88c 	bl	11014 <__i2b>
    fefc:	4604      	mov	r4, r0
    fefe:	e002      	b.n	ff06 <_dtoa_r+0x724>
    ff00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ff02:	9e08      	ldr	r6, [sp, #32]
    ff04:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ff06:	b16e      	cbz	r6, ff24 <_dtoa_r+0x742>
    ff08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ff0a:	2f00      	cmp	r7, #0
    ff0c:	dd0a      	ble.n	ff24 <_dtoa_r+0x742>
    ff0e:	463b      	mov	r3, r7
    ff10:	9f08      	ldr	r7, [sp, #32]
    ff12:	42b3      	cmp	r3, r6
    ff14:	bfa8      	it	ge
    ff16:	4633      	movge	r3, r6
    ff18:	1aff      	subs	r7, r7, r3
    ff1a:	9708      	str	r7, [sp, #32]
    ff1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ff1e:	1aff      	subs	r7, r7, r3
    ff20:	1af6      	subs	r6, r6, r3
    ff22:	970a      	str	r7, [sp, #40]	; 0x28
    ff24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ff26:	2f00      	cmp	r7, #0
    ff28:	dd28      	ble.n	ff7c <_dtoa_r+0x79a>
    ff2a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    ff2c:	b307      	cbz	r7, ff70 <_dtoa_r+0x78e>
    ff2e:	2d00      	cmp	r5, #0
    ff30:	dd10      	ble.n	ff54 <_dtoa_r+0x772>
    ff32:	4621      	mov	r1, r4
    ff34:	462a      	mov	r2, r5
    ff36:	4650      	mov	r0, sl
    ff38:	f001 f90d 	bl	11156 <__pow5mult>
    ff3c:	4604      	mov	r4, r0
    ff3e:	465a      	mov	r2, fp
    ff40:	4621      	mov	r1, r4
    ff42:	4650      	mov	r0, sl
    ff44:	f001 f86f 	bl	11026 <__multiply>
    ff48:	4659      	mov	r1, fp
    ff4a:	4607      	mov	r7, r0
    ff4c:	4650      	mov	r0, sl
    ff4e:	f000 ff8f 	bl	10e70 <_Bfree>
    ff52:	46bb      	mov	fp, r7
    ff54:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ff56:	1b7a      	subs	r2, r7, r5
    ff58:	d010      	beq.n	ff7c <_dtoa_r+0x79a>
    ff5a:	4650      	mov	r0, sl
    ff5c:	4659      	mov	r1, fp
    ff5e:	e00a      	b.n	ff76 <_dtoa_r+0x794>
    ff60:	3fe00000 	.word	0x3fe00000
    ff64:	40240000 	.word	0x40240000
    ff68:	00013050 	.word	0x00013050
    ff6c:	40140000 	.word	0x40140000
    ff70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ff72:	4650      	mov	r0, sl
    ff74:	4659      	mov	r1, fp
    ff76:	f001 f8ee 	bl	11156 <__pow5mult>
    ff7a:	4683      	mov	fp, r0
    ff7c:	4650      	mov	r0, sl
    ff7e:	2101      	movs	r1, #1
    ff80:	f001 f848 	bl	11014 <__i2b>
    ff84:	9f11      	ldr	r7, [sp, #68]	; 0x44
    ff86:	2f00      	cmp	r7, #0
    ff88:	4605      	mov	r5, r0
    ff8a:	dd05      	ble.n	ff98 <_dtoa_r+0x7b6>
    ff8c:	4629      	mov	r1, r5
    ff8e:	4650      	mov	r0, sl
    ff90:	463a      	mov	r2, r7
    ff92:	f001 f8e0 	bl	11156 <__pow5mult>
    ff96:	4605      	mov	r5, r0
    ff98:	9f24      	ldr	r7, [sp, #144]	; 0x90
    ff9a:	2f01      	cmp	r7, #1
    ff9c:	dc12      	bgt.n	ffc4 <_dtoa_r+0x7e2>
    ff9e:	9804      	ldr	r0, [sp, #16]
    ffa0:	b980      	cbnz	r0, ffc4 <_dtoa_r+0x7e2>
    ffa2:	9905      	ldr	r1, [sp, #20]
    ffa4:	f3c1 0313 	ubfx	r3, r1, #0, #20
    ffa8:	b973      	cbnz	r3, ffc8 <_dtoa_r+0x7e6>
    ffaa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    ffae:	0d3f      	lsrs	r7, r7, #20
    ffb0:	053f      	lsls	r7, r7, #20
    ffb2:	b157      	cbz	r7, ffca <_dtoa_r+0x7e8>
    ffb4:	9f08      	ldr	r7, [sp, #32]
    ffb6:	3701      	adds	r7, #1
    ffb8:	9708      	str	r7, [sp, #32]
    ffba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ffbc:	3701      	adds	r7, #1
    ffbe:	970a      	str	r7, [sp, #40]	; 0x28
    ffc0:	2701      	movs	r7, #1
    ffc2:	e002      	b.n	ffca <_dtoa_r+0x7e8>
    ffc4:	2700      	movs	r7, #0
    ffc6:	e000      	b.n	ffca <_dtoa_r+0x7e8>
    ffc8:	9f04      	ldr	r7, [sp, #16]
    ffca:	9811      	ldr	r0, [sp, #68]	; 0x44
    ffcc:	b140      	cbz	r0, ffe0 <_dtoa_r+0x7fe>
    ffce:	692b      	ldr	r3, [r5, #16]
    ffd0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ffd4:	6918      	ldr	r0, [r3, #16]
    ffd6:	f000 ffd0 	bl	10f7a <__hi0bits>
    ffda:	f1c0 0020 	rsb	r0, r0, #32
    ffde:	e000      	b.n	ffe2 <_dtoa_r+0x800>
    ffe0:	2001      	movs	r0, #1
    ffe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ffe4:	4403      	add	r3, r0
    ffe6:	f013 031f 	ands.w	r3, r3, #31
    ffea:	d00f      	beq.n	1000c <_dtoa_r+0x82a>
    ffec:	f1c3 0220 	rsb	r2, r3, #32
    fff0:	2a04      	cmp	r2, #4
    fff2:	dd09      	ble.n	10008 <_dtoa_r+0x826>
    fff4:	9908      	ldr	r1, [sp, #32]
    fff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fff8:	f1c3 031c 	rsb	r3, r3, #28
    fffc:	4419      	add	r1, r3
    fffe:	441a      	add	r2, r3
   10000:	9108      	str	r1, [sp, #32]
   10002:	441e      	add	r6, r3
   10004:	920a      	str	r2, [sp, #40]	; 0x28
   10006:	e009      	b.n	1001c <_dtoa_r+0x83a>
   10008:	d008      	beq.n	1001c <_dtoa_r+0x83a>
   1000a:	4613      	mov	r3, r2
   1000c:	9808      	ldr	r0, [sp, #32]
   1000e:	990a      	ldr	r1, [sp, #40]	; 0x28
   10010:	331c      	adds	r3, #28
   10012:	4418      	add	r0, r3
   10014:	4419      	add	r1, r3
   10016:	9008      	str	r0, [sp, #32]
   10018:	441e      	add	r6, r3
   1001a:	910a      	str	r1, [sp, #40]	; 0x28
   1001c:	9a08      	ldr	r2, [sp, #32]
   1001e:	2a00      	cmp	r2, #0
   10020:	dd04      	ble.n	1002c <_dtoa_r+0x84a>
   10022:	4659      	mov	r1, fp
   10024:	4650      	mov	r0, sl
   10026:	f001 f8d5 	bl	111d4 <__lshift>
   1002a:	4683      	mov	fp, r0
   1002c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1002e:	2b00      	cmp	r3, #0
   10030:	dd05      	ble.n	1003e <_dtoa_r+0x85c>
   10032:	4629      	mov	r1, r5
   10034:	4650      	mov	r0, sl
   10036:	461a      	mov	r2, r3
   10038:	f001 f8cc 	bl	111d4 <__lshift>
   1003c:	4605      	mov	r5, r0
   1003e:	9814      	ldr	r0, [sp, #80]	; 0x50
   10040:	b1e0      	cbz	r0, 1007c <_dtoa_r+0x89a>
   10042:	4658      	mov	r0, fp
   10044:	4629      	mov	r1, r5
   10046:	f001 f918 	bl	1127a <__mcmp>
   1004a:	2800      	cmp	r0, #0
   1004c:	da16      	bge.n	1007c <_dtoa_r+0x89a>
   1004e:	4659      	mov	r1, fp
   10050:	4650      	mov	r0, sl
   10052:	220a      	movs	r2, #10
   10054:	2300      	movs	r3, #0
   10056:	f000 ff14 	bl	10e82 <__multadd>
   1005a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1005c:	f109 39ff 	add.w	r9, r9, #4294967295
   10060:	4683      	mov	fp, r0
   10062:	b149      	cbz	r1, 10078 <_dtoa_r+0x896>
   10064:	4621      	mov	r1, r4
   10066:	220a      	movs	r2, #10
   10068:	4650      	mov	r0, sl
   1006a:	2300      	movs	r3, #0
   1006c:	f000 ff09 	bl	10e82 <__multadd>
   10070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10072:	9207      	str	r2, [sp, #28]
   10074:	4604      	mov	r4, r0
   10076:	e001      	b.n	1007c <_dtoa_r+0x89a>
   10078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1007a:	9307      	str	r3, [sp, #28]
   1007c:	9807      	ldr	r0, [sp, #28]
   1007e:	2800      	cmp	r0, #0
   10080:	dc29      	bgt.n	100d6 <_dtoa_r+0x8f4>
   10082:	9924      	ldr	r1, [sp, #144]	; 0x90
   10084:	2902      	cmp	r1, #2
   10086:	dd26      	ble.n	100d6 <_dtoa_r+0x8f4>
   10088:	b988      	cbnz	r0, 100ae <_dtoa_r+0x8cc>
   1008a:	4629      	mov	r1, r5
   1008c:	2205      	movs	r2, #5
   1008e:	9b07      	ldr	r3, [sp, #28]
   10090:	4650      	mov	r0, sl
   10092:	f000 fef6 	bl	10e82 <__multadd>
   10096:	4605      	mov	r5, r0
   10098:	4629      	mov	r1, r5
   1009a:	4658      	mov	r0, fp
   1009c:	f001 f8ed 	bl	1127a <__mcmp>
   100a0:	2800      	cmp	r0, #0
   100a2:	dc0e      	bgt.n	100c2 <_dtoa_r+0x8e0>
   100a4:	e003      	b.n	100ae <_dtoa_r+0x8cc>
   100a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   100a8:	e000      	b.n	100ac <_dtoa_r+0x8ca>
   100aa:	2500      	movs	r5, #0
   100ac:	462c      	mov	r4, r5
   100ae:	9f25      	ldr	r7, [sp, #148]	; 0x94
   100b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   100b4:	ea6f 0907 	mvn.w	r9, r7
   100b8:	e00a      	b.n	100d0 <_dtoa_r+0x8ee>
   100ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   100bc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   100c0:	462c      	mov	r4, r5
   100c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   100c4:	2331      	movs	r3, #49	; 0x31
   100c6:	f107 0801 	add.w	r8, r7, #1
   100ca:	703b      	strb	r3, [r7, #0]
   100cc:	f109 0901 	add.w	r9, r9, #1
   100d0:	4627      	mov	r7, r4
   100d2:	2400      	movs	r4, #0
   100d4:	e107      	b.n	102e6 <_dtoa_r+0xb04>
   100d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   100d8:	2800      	cmp	r0, #0
   100da:	f000 80bb 	beq.w	10254 <_dtoa_r+0xa72>
   100de:	2e00      	cmp	r6, #0
   100e0:	dd05      	ble.n	100ee <_dtoa_r+0x90c>
   100e2:	4621      	mov	r1, r4
   100e4:	4650      	mov	r0, sl
   100e6:	4632      	mov	r2, r6
   100e8:	f001 f874 	bl	111d4 <__lshift>
   100ec:	4604      	mov	r4, r0
   100ee:	b19f      	cbz	r7, 10118 <_dtoa_r+0x936>
   100f0:	6861      	ldr	r1, [r4, #4]
   100f2:	4650      	mov	r0, sl
   100f4:	f000 fe96 	bl	10e24 <_Balloc>
   100f8:	6922      	ldr	r2, [r4, #16]
   100fa:	3202      	adds	r2, #2
   100fc:	4606      	mov	r6, r0
   100fe:	f104 010c 	add.w	r1, r4, #12
   10102:	0092      	lsls	r2, r2, #2
   10104:	300c      	adds	r0, #12
   10106:	f000 fe68 	bl	10dda <memcpy>
   1010a:	4650      	mov	r0, sl
   1010c:	4631      	mov	r1, r6
   1010e:	2201      	movs	r2, #1
   10110:	f001 f860 	bl	111d4 <__lshift>
   10114:	4607      	mov	r7, r0
   10116:	e000      	b.n	1011a <_dtoa_r+0x938>
   10118:	4627      	mov	r7, r4
   1011a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1011c:	4629      	mov	r1, r5
   1011e:	4658      	mov	r0, fp
   10120:	f7ff fad2 	bl	f6c8 <quorem>
   10124:	4621      	mov	r1, r4
   10126:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   1012a:	4680      	mov	r8, r0
   1012c:	4658      	mov	r0, fp
   1012e:	f8cd c008 	str.w	ip, [sp, #8]
   10132:	f001 f8a2 	bl	1127a <__mcmp>
   10136:	463a      	mov	r2, r7
   10138:	9008      	str	r0, [sp, #32]
   1013a:	4629      	mov	r1, r5
   1013c:	4650      	mov	r0, sl
   1013e:	f001 f8b9 	bl	112b4 <__mdiff>
   10142:	68c3      	ldr	r3, [r0, #12]
   10144:	f8dd c008 	ldr.w	ip, [sp, #8]
   10148:	4602      	mov	r2, r0
   1014a:	b94b      	cbnz	r3, 10160 <_dtoa_r+0x97e>
   1014c:	4611      	mov	r1, r2
   1014e:	4658      	mov	r0, fp
   10150:	9203      	str	r2, [sp, #12]
   10152:	f001 f892 	bl	1127a <__mcmp>
   10156:	9a03      	ldr	r2, [sp, #12]
   10158:	f8dd c008 	ldr.w	ip, [sp, #8]
   1015c:	4603      	mov	r3, r0
   1015e:	e000      	b.n	10162 <_dtoa_r+0x980>
   10160:	2301      	movs	r3, #1
   10162:	4650      	mov	r0, sl
   10164:	4611      	mov	r1, r2
   10166:	9303      	str	r3, [sp, #12]
   10168:	f8cd c008 	str.w	ip, [sp, #8]
   1016c:	f000 fe80 	bl	10e70 <_Bfree>
   10170:	9b03      	ldr	r3, [sp, #12]
   10172:	f8dd c008 	ldr.w	ip, [sp, #8]
   10176:	b963      	cbnz	r3, 10192 <_dtoa_r+0x9b0>
   10178:	9924      	ldr	r1, [sp, #144]	; 0x90
   1017a:	b951      	cbnz	r1, 10192 <_dtoa_r+0x9b0>
   1017c:	9804      	ldr	r0, [sp, #16]
   1017e:	f000 0201 	and.w	r2, r0, #1
   10182:	b932      	cbnz	r2, 10192 <_dtoa_r+0x9b0>
   10184:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   10188:	d035      	beq.n	101f6 <_dtoa_r+0xa14>
   1018a:	9b08      	ldr	r3, [sp, #32]
   1018c:	2b00      	cmp	r3, #0
   1018e:	dc24      	bgt.n	101da <_dtoa_r+0x9f8>
   10190:	e025      	b.n	101de <_dtoa_r+0x9fc>
   10192:	9808      	ldr	r0, [sp, #32]
   10194:	2800      	cmp	r0, #0
   10196:	da02      	bge.n	1019e <_dtoa_r+0x9bc>
   10198:	2b00      	cmp	r3, #0
   1019a:	dc08      	bgt.n	101ae <_dtoa_r+0x9cc>
   1019c:	e01f      	b.n	101de <_dtoa_r+0x9fc>
   1019e:	d123      	bne.n	101e8 <_dtoa_r+0xa06>
   101a0:	9924      	ldr	r1, [sp, #144]	; 0x90
   101a2:	bb09      	cbnz	r1, 101e8 <_dtoa_r+0xa06>
   101a4:	9804      	ldr	r0, [sp, #16]
   101a6:	f000 0201 	and.w	r2, r0, #1
   101aa:	b9ea      	cbnz	r2, 101e8 <_dtoa_r+0xa06>
   101ac:	e7f4      	b.n	10198 <_dtoa_r+0x9b6>
   101ae:	4659      	mov	r1, fp
   101b0:	2201      	movs	r2, #1
   101b2:	4650      	mov	r0, sl
   101b4:	f8cd c008 	str.w	ip, [sp, #8]
   101b8:	f001 f80c 	bl	111d4 <__lshift>
   101bc:	4629      	mov	r1, r5
   101be:	4683      	mov	fp, r0
   101c0:	f001 f85b 	bl	1127a <__mcmp>
   101c4:	2800      	cmp	r0, #0
   101c6:	f8dd c008 	ldr.w	ip, [sp, #8]
   101ca:	dc03      	bgt.n	101d4 <_dtoa_r+0x9f2>
   101cc:	d107      	bne.n	101de <_dtoa_r+0x9fc>
   101ce:	f01c 0f01 	tst.w	ip, #1
   101d2:	d004      	beq.n	101de <_dtoa_r+0x9fc>
   101d4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   101d8:	d00d      	beq.n	101f6 <_dtoa_r+0xa14>
   101da:	f108 0c31 	add.w	ip, r8, #49	; 0x31
   101de:	f106 0801 	add.w	r8, r6, #1
   101e2:	f886 c000 	strb.w	ip, [r6]
   101e6:	e07e      	b.n	102e6 <_dtoa_r+0xb04>
   101e8:	2b00      	cmp	r3, #0
   101ea:	f106 0801 	add.w	r8, r6, #1
   101ee:	dd09      	ble.n	10204 <_dtoa_r+0xa22>
   101f0:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
   101f4:	d103      	bne.n	101fe <_dtoa_r+0xa1c>
   101f6:	2339      	movs	r3, #57	; 0x39
   101f8:	7033      	strb	r3, [r6, #0]
   101fa:	3601      	adds	r6, #1
   101fc:	e05b      	b.n	102b6 <_dtoa_r+0xad4>
   101fe:	f10c 0301 	add.w	r3, ip, #1
   10202:	e068      	b.n	102d6 <_dtoa_r+0xaf4>
   10204:	9909      	ldr	r1, [sp, #36]	; 0x24
   10206:	9a07      	ldr	r2, [sp, #28]
   10208:	4646      	mov	r6, r8
   1020a:	ebc1 0308 	rsb	r3, r1, r8
   1020e:	4293      	cmp	r3, r2
   10210:	f806 cc01 	strb.w	ip, [r6, #-1]
   10214:	d03c      	beq.n	10290 <_dtoa_r+0xaae>
   10216:	4659      	mov	r1, fp
   10218:	220a      	movs	r2, #10
   1021a:	2300      	movs	r3, #0
   1021c:	4650      	mov	r0, sl
   1021e:	f000 fe30 	bl	10e82 <__multadd>
   10222:	42bc      	cmp	r4, r7
   10224:	4683      	mov	fp, r0
   10226:	4621      	mov	r1, r4
   10228:	4650      	mov	r0, sl
   1022a:	f04f 020a 	mov.w	r2, #10
   1022e:	f04f 0300 	mov.w	r3, #0
   10232:	d104      	bne.n	1023e <_dtoa_r+0xa5c>
   10234:	f000 fe25 	bl	10e82 <__multadd>
   10238:	4604      	mov	r4, r0
   1023a:	4607      	mov	r7, r0
   1023c:	e76e      	b.n	1011c <_dtoa_r+0x93a>
   1023e:	f000 fe20 	bl	10e82 <__multadd>
   10242:	4639      	mov	r1, r7
   10244:	4604      	mov	r4, r0
   10246:	220a      	movs	r2, #10
   10248:	4650      	mov	r0, sl
   1024a:	2300      	movs	r3, #0
   1024c:	f000 fe19 	bl	10e82 <__multadd>
   10250:	4607      	mov	r7, r0
   10252:	e763      	b.n	1011c <_dtoa_r+0x93a>
   10254:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   10256:	4658      	mov	r0, fp
   10258:	4629      	mov	r1, r5
   1025a:	f7ff fa35 	bl	f6c8 <quorem>
   1025e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10260:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   10264:	f807 c006 	strb.w	ip, [r7, r6]
   10268:	9f07      	ldr	r7, [sp, #28]
   1026a:	3601      	adds	r6, #1
   1026c:	42be      	cmp	r6, r7
   1026e:	db07      	blt.n	10280 <_dtoa_r+0xa9e>
   10270:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10272:	2f01      	cmp	r7, #1
   10274:	bfac      	ite	ge
   10276:	19f6      	addge	r6, r6, r7
   10278:	3601      	addlt	r6, #1
   1027a:	4627      	mov	r7, r4
   1027c:	2400      	movs	r4, #0
   1027e:	e007      	b.n	10290 <_dtoa_r+0xaae>
   10280:	4659      	mov	r1, fp
   10282:	4650      	mov	r0, sl
   10284:	220a      	movs	r2, #10
   10286:	2300      	movs	r3, #0
   10288:	f000 fdfb 	bl	10e82 <__multadd>
   1028c:	4683      	mov	fp, r0
   1028e:	e7e2      	b.n	10256 <_dtoa_r+0xa74>
   10290:	4659      	mov	r1, fp
   10292:	2201      	movs	r2, #1
   10294:	4650      	mov	r0, sl
   10296:	f8cd c008 	str.w	ip, [sp, #8]
   1029a:	f000 ff9b 	bl	111d4 <__lshift>
   1029e:	4629      	mov	r1, r5
   102a0:	4683      	mov	fp, r0
   102a2:	f000 ffea 	bl	1127a <__mcmp>
   102a6:	2800      	cmp	r0, #0
   102a8:	f8dd c008 	ldr.w	ip, [sp, #8]
   102ac:	dc03      	bgt.n	102b6 <_dtoa_r+0xad4>
   102ae:	d114      	bne.n	102da <_dtoa_r+0xaf8>
   102b0:	f01c 0f01 	tst.w	ip, #1
   102b4:	d011      	beq.n	102da <_dtoa_r+0xaf8>
   102b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   102ba:	2b39      	cmp	r3, #57	; 0x39
   102bc:	46b0      	mov	r8, r6
   102be:	f106 36ff 	add.w	r6, r6, #4294967295
   102c2:	d107      	bne.n	102d4 <_dtoa_r+0xaf2>
   102c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   102c6:	42b0      	cmp	r0, r6
   102c8:	d1f5      	bne.n	102b6 <_dtoa_r+0xad4>
   102ca:	2331      	movs	r3, #49	; 0x31
   102cc:	f109 0901 	add.w	r9, r9, #1
   102d0:	7003      	strb	r3, [r0, #0]
   102d2:	e008      	b.n	102e6 <_dtoa_r+0xb04>
   102d4:	3301      	adds	r3, #1
   102d6:	7033      	strb	r3, [r6, #0]
   102d8:	e005      	b.n	102e6 <_dtoa_r+0xb04>
   102da:	46b0      	mov	r8, r6
   102dc:	3e01      	subs	r6, #1
   102de:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   102e2:	2b30      	cmp	r3, #48	; 0x30
   102e4:	d0f9      	beq.n	102da <_dtoa_r+0xaf8>
   102e6:	4650      	mov	r0, sl
   102e8:	4629      	mov	r1, r5
   102ea:	f000 fdc1 	bl	10e70 <_Bfree>
   102ee:	b16f      	cbz	r7, 1030c <_dtoa_r+0xb2a>
   102f0:	b12c      	cbz	r4, 102fe <_dtoa_r+0xb1c>
   102f2:	42bc      	cmp	r4, r7
   102f4:	d003      	beq.n	102fe <_dtoa_r+0xb1c>
   102f6:	4650      	mov	r0, sl
   102f8:	4621      	mov	r1, r4
   102fa:	f000 fdb9 	bl	10e70 <_Bfree>
   102fe:	4650      	mov	r0, sl
   10300:	4639      	mov	r1, r7
   10302:	f000 fdb5 	bl	10e70 <_Bfree>
   10306:	e001      	b.n	1030c <_dtoa_r+0xb2a>
   10308:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1030c:	4650      	mov	r0, sl
   1030e:	4659      	mov	r1, fp
   10310:	f000 fdae 	bl	10e70 <_Bfree>
   10314:	2300      	movs	r3, #0
   10316:	9f26      	ldr	r7, [sp, #152]	; 0x98
   10318:	f888 3000 	strb.w	r3, [r8]
   1031c:	f109 0301 	add.w	r3, r9, #1
   10320:	603b      	str	r3, [r7, #0]
   10322:	9f28      	ldr	r7, [sp, #160]	; 0xa0
   10324:	b127      	cbz	r7, 10330 <_dtoa_r+0xb4e>
   10326:	f8c7 8000 	str.w	r8, [r7]
   1032a:	e001      	b.n	10330 <_dtoa_r+0xb4e>
   1032c:	4802      	ldr	r0, [pc, #8]	; (10338 <_dtoa_r+0xb56>)
   1032e:	e000      	b.n	10332 <_dtoa_r+0xb50>
   10330:	9809      	ldr	r0, [sp, #36]	; 0x24
   10332:	b01b      	add	sp, #108	; 0x6c
   10334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10338:	00013004 	.word	0x00013004
   1033c:	f3af 8000 	nop.w

00010340 <__sflush_r>:
   10340:	898a      	ldrh	r2, [r1, #12]
   10342:	b293      	uxth	r3, r2
   10344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10348:	4605      	mov	r5, r0
   1034a:	0718      	lsls	r0, r3, #28
   1034c:	460c      	mov	r4, r1
   1034e:	d45e      	bmi.n	1040e <__sflush_r+0xce>
   10350:	684b      	ldr	r3, [r1, #4]
   10352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10356:	2b00      	cmp	r3, #0
   10358:	818a      	strh	r2, [r1, #12]
   1035a:	dc02      	bgt.n	10362 <__sflush_r+0x22>
   1035c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1035e:	2b00      	cmp	r3, #0
   10360:	dd18      	ble.n	10394 <__sflush_r+0x54>
   10362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10364:	b1b6      	cbz	r6, 10394 <__sflush_r+0x54>
   10366:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   1036a:	2300      	movs	r3, #0
   1036c:	b292      	uxth	r2, r2
   1036e:	682f      	ldr	r7, [r5, #0]
   10370:	602b      	str	r3, [r5, #0]
   10372:	b10a      	cbz	r2, 10378 <__sflush_r+0x38>
   10374:	6d22      	ldr	r2, [r4, #80]	; 0x50
   10376:	e010      	b.n	1039a <__sflush_r+0x5a>
   10378:	69e1      	ldr	r1, [r4, #28]
   1037a:	4628      	mov	r0, r5
   1037c:	2301      	movs	r3, #1
   1037e:	47b0      	blx	r6
   10380:	1c41      	adds	r1, r0, #1
   10382:	4602      	mov	r2, r0
   10384:	d109      	bne.n	1039a <__sflush_r+0x5a>
   10386:	682b      	ldr	r3, [r5, #0]
   10388:	b13b      	cbz	r3, 1039a <__sflush_r+0x5a>
   1038a:	2b1d      	cmp	r3, #29
   1038c:	d001      	beq.n	10392 <__sflush_r+0x52>
   1038e:	2b16      	cmp	r3, #22
   10390:	d14b      	bne.n	1042a <__sflush_r+0xea>
   10392:	602f      	str	r7, [r5, #0]
   10394:	2000      	movs	r0, #0
   10396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1039a:	89a3      	ldrh	r3, [r4, #12]
   1039c:	075b      	lsls	r3, r3, #29
   1039e:	d505      	bpl.n	103ac <__sflush_r+0x6c>
   103a0:	6863      	ldr	r3, [r4, #4]
   103a2:	1ad2      	subs	r2, r2, r3
   103a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   103a6:	b10b      	cbz	r3, 103ac <__sflush_r+0x6c>
   103a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   103aa:	1ad2      	subs	r2, r2, r3
   103ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   103ae:	69e1      	ldr	r1, [r4, #28]
   103b0:	4628      	mov	r0, r5
   103b2:	2300      	movs	r3, #0
   103b4:	47b0      	blx	r6
   103b6:	1c46      	adds	r6, r0, #1
   103b8:	89a2      	ldrh	r2, [r4, #12]
   103ba:	d105      	bne.n	103c8 <__sflush_r+0x88>
   103bc:	682b      	ldr	r3, [r5, #0]
   103be:	b11b      	cbz	r3, 103c8 <__sflush_r+0x88>
   103c0:	2b1d      	cmp	r3, #29
   103c2:	d001      	beq.n	103c8 <__sflush_r+0x88>
   103c4:	2b16      	cmp	r3, #22
   103c6:	d11d      	bne.n	10404 <__sflush_r+0xc4>
   103c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   103cc:	b292      	uxth	r2, r2
   103ce:	2300      	movs	r3, #0
   103d0:	6063      	str	r3, [r4, #4]
   103d2:	04d1      	lsls	r1, r2, #19
   103d4:	6923      	ldr	r3, [r4, #16]
   103d6:	81a2      	strh	r2, [r4, #12]
   103d8:	6023      	str	r3, [r4, #0]
   103da:	d504      	bpl.n	103e6 <__sflush_r+0xa6>
   103dc:	1c42      	adds	r2, r0, #1
   103de:	d101      	bne.n	103e4 <__sflush_r+0xa4>
   103e0:	682b      	ldr	r3, [r5, #0]
   103e2:	b903      	cbnz	r3, 103e6 <__sflush_r+0xa6>
   103e4:	6520      	str	r0, [r4, #80]	; 0x50
   103e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   103e8:	602f      	str	r7, [r5, #0]
   103ea:	2900      	cmp	r1, #0
   103ec:	d0d2      	beq.n	10394 <__sflush_r+0x54>
   103ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   103f2:	4299      	cmp	r1, r3
   103f4:	d002      	beq.n	103fc <__sflush_r+0xbc>
   103f6:	4628      	mov	r0, r5
   103f8:	f000 f9fc 	bl	107f4 <_free_r>
   103fc:	2000      	movs	r0, #0
   103fe:	6320      	str	r0, [r4, #48]	; 0x30
   10400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10408:	81a2      	strh	r2, [r4, #12]
   1040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1040e:	690e      	ldr	r6, [r1, #16]
   10410:	2e00      	cmp	r6, #0
   10412:	d0bf      	beq.n	10394 <__sflush_r+0x54>
   10414:	079b      	lsls	r3, r3, #30
   10416:	680a      	ldr	r2, [r1, #0]
   10418:	bf08      	it	eq
   1041a:	694b      	ldreq	r3, [r1, #20]
   1041c:	600e      	str	r6, [r1, #0]
   1041e:	bf18      	it	ne
   10420:	2300      	movne	r3, #0
   10422:	ebc6 0802 	rsb	r8, r6, r2
   10426:	608b      	str	r3, [r1, #8]
   10428:	e012      	b.n	10450 <__sflush_r+0x110>
   1042a:	89a3      	ldrh	r3, [r4, #12]
   1042c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10430:	81a3      	strh	r3, [r4, #12]
   10432:	f04f 30ff 	mov.w	r0, #4294967295
   10436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1043a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1043c:	69e1      	ldr	r1, [r4, #28]
   1043e:	4628      	mov	r0, r5
   10440:	4632      	mov	r2, r6
   10442:	4643      	mov	r3, r8
   10444:	47b8      	blx	r7
   10446:	2800      	cmp	r0, #0
   10448:	ddef      	ble.n	1042a <__sflush_r+0xea>
   1044a:	4406      	add	r6, r0
   1044c:	ebc0 0808 	rsb	r8, r0, r8
   10450:	f1b8 0f00 	cmp.w	r8, #0
   10454:	dcf1      	bgt.n	1043a <__sflush_r+0xfa>
   10456:	e79d      	b.n	10394 <__sflush_r+0x54>

00010458 <_fflush_r>:
   10458:	b538      	push	{r3, r4, r5, lr}
   1045a:	460c      	mov	r4, r1
   1045c:	4605      	mov	r5, r0
   1045e:	b118      	cbz	r0, 10468 <_fflush_r+0x10>
   10460:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10462:	b90b      	cbnz	r3, 10468 <_fflush_r+0x10>
   10464:	f000 f842 	bl	104ec <__sinit>
   10468:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1046c:	b128      	cbz	r0, 1047a <_fflush_r+0x22>
   1046e:	4628      	mov	r0, r5
   10470:	4621      	mov	r1, r4
   10472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10476:	f7ff bf63 	b.w	10340 <__sflush_r>
   1047a:	bd38      	pop	{r3, r4, r5, pc}

0001047c <fflush>:
   1047c:	4601      	mov	r1, r0
   1047e:	b920      	cbnz	r0, 1048a <fflush+0xe>
   10480:	4b04      	ldr	r3, [pc, #16]	; (10494 <fflush+0x18>)
   10482:	4905      	ldr	r1, [pc, #20]	; (10498 <fflush+0x1c>)
   10484:	6818      	ldr	r0, [r3, #0]
   10486:	f000 bbd5 	b.w	10c34 <_fwalk_reent>
   1048a:	4b04      	ldr	r3, [pc, #16]	; (1049c <fflush+0x20>)
   1048c:	6818      	ldr	r0, [r3, #0]
   1048e:	f7ff bfe3 	b.w	10458 <_fflush_r>
   10492:	bf00      	nop
   10494:	00012fac 	.word	0x00012fac
   10498:	00010459 	.word	0x00010459
   1049c:	200004c0 	.word	0x200004c0

000104a0 <__fp_lock>:
   104a0:	2000      	movs	r0, #0
   104a2:	4770      	bx	lr

000104a4 <__fp_unlock>:
   104a4:	2000      	movs	r0, #0
   104a6:	4770      	bx	lr

000104a8 <_cleanup_r>:
   104a8:	4901      	ldr	r1, [pc, #4]	; (104b0 <_cleanup_r+0x8>)
   104aa:	f000 bba7 	b.w	10bfc <_fwalk>
   104ae:	bf00      	nop
   104b0:	00012545 	.word	0x00012545

000104b4 <__sfmoreglue>:
   104b4:	b570      	push	{r4, r5, r6, lr}
   104b6:	1e4b      	subs	r3, r1, #1
   104b8:	2568      	movs	r5, #104	; 0x68
   104ba:	435d      	muls	r5, r3
   104bc:	460e      	mov	r6, r1
   104be:	f105 0174 	add.w	r1, r5, #116	; 0x74
   104c2:	f7fd f94f 	bl	d764 <_malloc_r>
   104c6:	4604      	mov	r4, r0
   104c8:	b140      	cbz	r0, 104dc <__sfmoreglue+0x28>
   104ca:	2100      	movs	r1, #0
   104cc:	e880 0042 	stmia.w	r0, {r1, r6}
   104d0:	300c      	adds	r0, #12
   104d2:	60a0      	str	r0, [r4, #8]
   104d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   104d8:	f7fd fb4e 	bl	db78 <memset>
   104dc:	4620      	mov	r0, r4
   104de:	bd70      	pop	{r4, r5, r6, pc}

000104e0 <_cleanup>:
   104e0:	4b01      	ldr	r3, [pc, #4]	; (104e8 <_cleanup+0x8>)
   104e2:	6818      	ldr	r0, [r3, #0]
   104e4:	f7ff bfe0 	b.w	104a8 <_cleanup_r>
   104e8:	00012fac 	.word	0x00012fac

000104ec <__sinit>:
   104ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
   104f2:	4606      	mov	r6, r0
   104f4:	2c00      	cmp	r4, #0
   104f6:	d162      	bne.n	105be <__sinit+0xd2>
   104f8:	4b32      	ldr	r3, [pc, #200]	; (105c4 <__sinit+0xd8>)
   104fa:	63c3      	str	r3, [r0, #60]	; 0x3c
   104fc:	2303      	movs	r3, #3
   104fe:	6845      	ldr	r5, [r0, #4]
   10500:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   10504:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   10508:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   1050c:	2304      	movs	r3, #4
   1050e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   10512:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 105cc <__sinit+0xe0>
   10516:	81ab      	strh	r3, [r5, #12]
   10518:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 105d0 <__sinit+0xe4>
   1051c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 105d4 <__sinit+0xe8>
   10520:	4f29      	ldr	r7, [pc, #164]	; (105c8 <__sinit+0xdc>)
   10522:	602c      	str	r4, [r5, #0]
   10524:	606c      	str	r4, [r5, #4]
   10526:	60ac      	str	r4, [r5, #8]
   10528:	666c      	str	r4, [r5, #100]	; 0x64
   1052a:	81ec      	strh	r4, [r5, #14]
   1052c:	612c      	str	r4, [r5, #16]
   1052e:	616c      	str	r4, [r5, #20]
   10530:	61ac      	str	r4, [r5, #24]
   10532:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   10536:	4621      	mov	r1, r4
   10538:	2208      	movs	r2, #8
   1053a:	f7fd fb1d 	bl	db78 <memset>
   1053e:	61ed      	str	r5, [r5, #28]
   10540:	f8c5 a020 	str.w	sl, [r5, #32]
   10544:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   10548:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   1054c:	62ef      	str	r7, [r5, #44]	; 0x2c
   1054e:	68b5      	ldr	r5, [r6, #8]
   10550:	2309      	movs	r3, #9
   10552:	f04f 0b01 	mov.w	fp, #1
   10556:	81ab      	strh	r3, [r5, #12]
   10558:	602c      	str	r4, [r5, #0]
   1055a:	606c      	str	r4, [r5, #4]
   1055c:	60ac      	str	r4, [r5, #8]
   1055e:	666c      	str	r4, [r5, #100]	; 0x64
   10560:	f8a5 b00e 	strh.w	fp, [r5, #14]
   10564:	612c      	str	r4, [r5, #16]
   10566:	616c      	str	r4, [r5, #20]
   10568:	61ac      	str	r4, [r5, #24]
   1056a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   1056e:	4621      	mov	r1, r4
   10570:	2208      	movs	r2, #8
   10572:	f7fd fb01 	bl	db78 <memset>
   10576:	61ed      	str	r5, [r5, #28]
   10578:	f8c5 a020 	str.w	sl, [r5, #32]
   1057c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   10580:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   10584:	62ef      	str	r7, [r5, #44]	; 0x2c
   10586:	68f5      	ldr	r5, [r6, #12]
   10588:	2312      	movs	r3, #18
   1058a:	81ab      	strh	r3, [r5, #12]
   1058c:	2302      	movs	r3, #2
   1058e:	602c      	str	r4, [r5, #0]
   10590:	606c      	str	r4, [r5, #4]
   10592:	60ac      	str	r4, [r5, #8]
   10594:	666c      	str	r4, [r5, #100]	; 0x64
   10596:	81eb      	strh	r3, [r5, #14]
   10598:	612c      	str	r4, [r5, #16]
   1059a:	616c      	str	r4, [r5, #20]
   1059c:	61ac      	str	r4, [r5, #24]
   1059e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   105a2:	4621      	mov	r1, r4
   105a4:	2208      	movs	r2, #8
   105a6:	f7fd fae7 	bl	db78 <memset>
   105aa:	61ed      	str	r5, [r5, #28]
   105ac:	f8c5 a020 	str.w	sl, [r5, #32]
   105b0:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   105b4:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   105b8:	62ef      	str	r7, [r5, #44]	; 0x2c
   105ba:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   105be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105c2:	bf00      	nop
   105c4:	000104a9 	.word	0x000104a9
   105c8:	000119cb 	.word	0x000119cb
   105cc:	00011949 	.word	0x00011949
   105d0:	0001196f 	.word	0x0001196f
   105d4:	000119a7 	.word	0x000119a7

000105d8 <__sfp>:
   105d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105da:	4b1c      	ldr	r3, [pc, #112]	; (1064c <__sfp+0x74>)
   105dc:	681e      	ldr	r6, [r3, #0]
   105de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   105e0:	4607      	mov	r7, r0
   105e2:	b913      	cbnz	r3, 105ea <__sfp+0x12>
   105e4:	4630      	mov	r0, r6
   105e6:	f7ff ff81 	bl	104ec <__sinit>
   105ea:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   105ee:	68b4      	ldr	r4, [r6, #8]
   105f0:	6873      	ldr	r3, [r6, #4]
   105f2:	3b01      	subs	r3, #1
   105f4:	d404      	bmi.n	10600 <__sfp+0x28>
   105f6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   105fa:	b175      	cbz	r5, 1061a <__sfp+0x42>
   105fc:	3468      	adds	r4, #104	; 0x68
   105fe:	e7f8      	b.n	105f2 <__sfp+0x1a>
   10600:	6833      	ldr	r3, [r6, #0]
   10602:	b92b      	cbnz	r3, 10610 <__sfp+0x38>
   10604:	4638      	mov	r0, r7
   10606:	2104      	movs	r1, #4
   10608:	f7ff ff54 	bl	104b4 <__sfmoreglue>
   1060c:	6030      	str	r0, [r6, #0]
   1060e:	b108      	cbz	r0, 10614 <__sfp+0x3c>
   10610:	6836      	ldr	r6, [r6, #0]
   10612:	e7ec      	b.n	105ee <__sfp+0x16>
   10614:	230c      	movs	r3, #12
   10616:	603b      	str	r3, [r7, #0]
   10618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1061e:	81e3      	strh	r3, [r4, #14]
   10620:	2301      	movs	r3, #1
   10622:	81a3      	strh	r3, [r4, #12]
   10624:	6665      	str	r5, [r4, #100]	; 0x64
   10626:	6025      	str	r5, [r4, #0]
   10628:	60a5      	str	r5, [r4, #8]
   1062a:	6065      	str	r5, [r4, #4]
   1062c:	6125      	str	r5, [r4, #16]
   1062e:	6165      	str	r5, [r4, #20]
   10630:	61a5      	str	r5, [r4, #24]
   10632:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   10636:	4629      	mov	r1, r5
   10638:	2208      	movs	r2, #8
   1063a:	f7fd fa9d 	bl	db78 <memset>
   1063e:	6325      	str	r5, [r4, #48]	; 0x30
   10640:	6365      	str	r5, [r4, #52]	; 0x34
   10642:	6465      	str	r5, [r4, #68]	; 0x44
   10644:	64a5      	str	r5, [r4, #72]	; 0x48
   10646:	4620      	mov	r0, r4
   10648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1064a:	bf00      	nop
   1064c:	00012fac 	.word	0x00012fac

00010650 <__sfp_lock_acquire>:
   10650:	4770      	bx	lr

00010652 <__sfp_lock_release>:
   10652:	4770      	bx	lr

00010654 <__sinit_lock_acquire>:
   10654:	4770      	bx	lr

00010656 <__sinit_lock_release>:
   10656:	4770      	bx	lr

00010658 <__fp_lock_all>:
   10658:	4b02      	ldr	r3, [pc, #8]	; (10664 <__fp_lock_all+0xc>)
   1065a:	4903      	ldr	r1, [pc, #12]	; (10668 <__fp_lock_all+0x10>)
   1065c:	6818      	ldr	r0, [r3, #0]
   1065e:	f000 bacd 	b.w	10bfc <_fwalk>
   10662:	bf00      	nop
   10664:	200004c0 	.word	0x200004c0
   10668:	000104a1 	.word	0x000104a1

0001066c <__fp_unlock_all>:
   1066c:	4b02      	ldr	r3, [pc, #8]	; (10678 <__fp_unlock_all+0xc>)
   1066e:	4903      	ldr	r1, [pc, #12]	; (1067c <__fp_unlock_all+0x10>)
   10670:	6818      	ldr	r0, [r3, #0]
   10672:	f000 bac3 	b.w	10bfc <_fwalk>
   10676:	bf00      	nop
   10678:	200004c0 	.word	0x200004c0
   1067c:	000104a5 	.word	0x000104a5

00010680 <_fputwc_r>:
   10680:	8993      	ldrh	r3, [r2, #12]
   10682:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10686:	460e      	mov	r6, r1
   10688:	0499      	lsls	r1, r3, #18
   1068a:	4680      	mov	r8, r0
   1068c:	4614      	mov	r4, r2
   1068e:	d406      	bmi.n	1069e <_fputwc_r+0x1e>
   10690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   10694:	8193      	strh	r3, [r2, #12]
   10696:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1069c:	6653      	str	r3, [r2, #100]	; 0x64
   1069e:	f000 fb0b 	bl	10cb8 <__locale_mb_cur_max>
   106a2:	2801      	cmp	r0, #1
   106a4:	d106      	bne.n	106b4 <_fputwc_r+0x34>
   106a6:	1e73      	subs	r3, r6, #1
   106a8:	2bfe      	cmp	r3, #254	; 0xfe
   106aa:	d803      	bhi.n	106b4 <_fputwc_r+0x34>
   106ac:	f88d 6004 	strb.w	r6, [sp, #4]
   106b0:	4607      	mov	r7, r0
   106b2:	e00e      	b.n	106d2 <_fputwc_r+0x52>
   106b4:	4632      	mov	r2, r6
   106b6:	4640      	mov	r0, r8
   106b8:	a901      	add	r1, sp, #4
   106ba:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   106be:	f001 fe5b 	bl	12378 <_wcrtomb_r>
   106c2:	1c42      	adds	r2, r0, #1
   106c4:	4607      	mov	r7, r0
   106c6:	d104      	bne.n	106d2 <_fputwc_r+0x52>
   106c8:	89a3      	ldrh	r3, [r4, #12]
   106ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106ce:	81a3      	strh	r3, [r4, #12]
   106d0:	e02b      	b.n	1072a <_fputwc_r+0xaa>
   106d2:	2500      	movs	r5, #0
   106d4:	42bd      	cmp	r5, r7
   106d6:	d024      	beq.n	10722 <_fputwc_r+0xa2>
   106d8:	68a2      	ldr	r2, [r4, #8]
   106da:	3a01      	subs	r2, #1
   106dc:	2a00      	cmp	r2, #0
   106de:	60a2      	str	r2, [r4, #8]
   106e0:	ab01      	add	r3, sp, #4
   106e2:	da16      	bge.n	10712 <_fputwc_r+0x92>
   106e4:	69a1      	ldr	r1, [r4, #24]
   106e6:	428a      	cmp	r2, r1
   106e8:	db08      	blt.n	106fc <_fputwc_r+0x7c>
   106ea:	6822      	ldr	r2, [r4, #0]
   106ec:	5d5b      	ldrb	r3, [r3, r5]
   106ee:	7013      	strb	r3, [r2, #0]
   106f0:	6823      	ldr	r3, [r4, #0]
   106f2:	7819      	ldrb	r1, [r3, #0]
   106f4:	290a      	cmp	r1, #10
   106f6:	d110      	bne.n	1071a <_fputwc_r+0x9a>
   106f8:	4640      	mov	r0, r8
   106fa:	e001      	b.n	10700 <_fputwc_r+0x80>
   106fc:	5d59      	ldrb	r1, [r3, r5]
   106fe:	4640      	mov	r0, r8
   10700:	4622      	mov	r2, r4
   10702:	f001 fde7 	bl	122d4 <__swbuf_r>
   10706:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   1070a:	4258      	negs	r0, r3
   1070c:	4158      	adcs	r0, r3
   1070e:	b130      	cbz	r0, 1071e <_fputwc_r+0x9e>
   10710:	e009      	b.n	10726 <_fputwc_r+0xa6>
   10712:	6822      	ldr	r2, [r4, #0]
   10714:	5d5b      	ldrb	r3, [r3, r5]
   10716:	7013      	strb	r3, [r2, #0]
   10718:	6823      	ldr	r3, [r4, #0]
   1071a:	3301      	adds	r3, #1
   1071c:	6023      	str	r3, [r4, #0]
   1071e:	3501      	adds	r5, #1
   10720:	e7d8      	b.n	106d4 <_fputwc_r+0x54>
   10722:	4630      	mov	r0, r6
   10724:	e001      	b.n	1072a <_fputwc_r+0xaa>
   10726:	f04f 30ff 	mov.w	r0, #4294967295
   1072a:	b002      	add	sp, #8
   1072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010730 <fputwc>:
   10730:	4b08      	ldr	r3, [pc, #32]	; (10754 <fputwc+0x24>)
   10732:	b570      	push	{r4, r5, r6, lr}
   10734:	681c      	ldr	r4, [r3, #0]
   10736:	4606      	mov	r6, r0
   10738:	460d      	mov	r5, r1
   1073a:	b124      	cbz	r4, 10746 <fputwc+0x16>
   1073c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1073e:	b913      	cbnz	r3, 10746 <fputwc+0x16>
   10740:	4620      	mov	r0, r4
   10742:	f7ff fed3 	bl	104ec <__sinit>
   10746:	4620      	mov	r0, r4
   10748:	4631      	mov	r1, r6
   1074a:	462a      	mov	r2, r5
   1074c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10750:	f7ff bf96 	b.w	10680 <_fputwc_r>
   10754:	200004c0 	.word	0x200004c0

00010758 <_malloc_trim_r>:
   10758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1075a:	4d23      	ldr	r5, [pc, #140]	; (107e8 <_malloc_trim_r+0x90>)
   1075c:	460e      	mov	r6, r1
   1075e:	4604      	mov	r4, r0
   10760:	f7fd fa12 	bl	db88 <__malloc_lock>
   10764:	68ab      	ldr	r3, [r5, #8]
   10766:	685f      	ldr	r7, [r3, #4]
   10768:	f027 0703 	bic.w	r7, r7, #3
   1076c:	1bbe      	subs	r6, r7, r6
   1076e:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   10772:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   10776:	f026 060f 	bic.w	r6, r6, #15
   1077a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1077e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   10782:	da04      	bge.n	1078e <_malloc_trim_r+0x36>
   10784:	4620      	mov	r0, r4
   10786:	f7fd fa00 	bl	db8a <__malloc_unlock>
   1078a:	2000      	movs	r0, #0
   1078c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1078e:	4620      	mov	r0, r4
   10790:	2100      	movs	r1, #0
   10792:	f7fd f9fb 	bl	db8c <_sbrk_r>
   10796:	68ab      	ldr	r3, [r5, #8]
   10798:	443b      	add	r3, r7
   1079a:	4298      	cmp	r0, r3
   1079c:	d1f2      	bne.n	10784 <_malloc_trim_r+0x2c>
   1079e:	4620      	mov	r0, r4
   107a0:	4271      	negs	r1, r6
   107a2:	f7fd f9f3 	bl	db8c <_sbrk_r>
   107a6:	3001      	adds	r0, #1
   107a8:	d110      	bne.n	107cc <_malloc_trim_r+0x74>
   107aa:	4620      	mov	r0, r4
   107ac:	2100      	movs	r1, #0
   107ae:	f7fd f9ed 	bl	db8c <_sbrk_r>
   107b2:	68ab      	ldr	r3, [r5, #8]
   107b4:	1ac2      	subs	r2, r0, r3
   107b6:	2a0f      	cmp	r2, #15
   107b8:	dde4      	ble.n	10784 <_malloc_trim_r+0x2c>
   107ba:	490c      	ldr	r1, [pc, #48]	; (107ec <_malloc_trim_r+0x94>)
   107bc:	6809      	ldr	r1, [r1, #0]
   107be:	1a40      	subs	r0, r0, r1
   107c0:	490b      	ldr	r1, [pc, #44]	; (107f0 <_malloc_trim_r+0x98>)
   107c2:	f042 0201 	orr.w	r2, r2, #1
   107c6:	6008      	str	r0, [r1, #0]
   107c8:	605a      	str	r2, [r3, #4]
   107ca:	e7db      	b.n	10784 <_malloc_trim_r+0x2c>
   107cc:	68ab      	ldr	r3, [r5, #8]
   107ce:	1bbf      	subs	r7, r7, r6
   107d0:	f047 0701 	orr.w	r7, r7, #1
   107d4:	605f      	str	r7, [r3, #4]
   107d6:	4b06      	ldr	r3, [pc, #24]	; (107f0 <_malloc_trim_r+0x98>)
   107d8:	681a      	ldr	r2, [r3, #0]
   107da:	4620      	mov	r0, r4
   107dc:	1b96      	subs	r6, r2, r6
   107de:	601e      	str	r6, [r3, #0]
   107e0:	f7fd f9d3 	bl	db8a <__malloc_unlock>
   107e4:	2001      	movs	r0, #1
   107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   107e8:	200008f0 	.word	0x200008f0
   107ec:	20000cf8 	.word	0x20000cf8
   107f0:	20000e3c 	.word	0x20000e3c

000107f4 <_free_r>:
   107f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107f6:	4606      	mov	r6, r0
   107f8:	460d      	mov	r5, r1
   107fa:	2900      	cmp	r1, #0
   107fc:	f000 80a9 	beq.w	10952 <_free_r+0x15e>
   10800:	f7fd f9c2 	bl	db88 <__malloc_lock>
   10804:	f855 cc04 	ldr.w	ip, [r5, #-4]
   10808:	4c52      	ldr	r4, [pc, #328]	; (10954 <_free_r+0x160>)
   1080a:	f1a5 0308 	sub.w	r3, r5, #8
   1080e:	f02c 0201 	bic.w	r2, ip, #1
   10812:	1898      	adds	r0, r3, r2
   10814:	68a1      	ldr	r1, [r4, #8]
   10816:	6847      	ldr	r7, [r0, #4]
   10818:	4288      	cmp	r0, r1
   1081a:	f027 0703 	bic.w	r7, r7, #3
   1081e:	f00c 0101 	and.w	r1, ip, #1
   10822:	d11b      	bne.n	1085c <_free_r+0x68>
   10824:	443a      	add	r2, r7
   10826:	b939      	cbnz	r1, 10838 <_free_r+0x44>
   10828:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1082c:	1a5b      	subs	r3, r3, r1
   1082e:	440a      	add	r2, r1
   10830:	6898      	ldr	r0, [r3, #8]
   10832:	68d9      	ldr	r1, [r3, #12]
   10834:	60c1      	str	r1, [r0, #12]
   10836:	6088      	str	r0, [r1, #8]
   10838:	f042 0101 	orr.w	r1, r2, #1
   1083c:	6059      	str	r1, [r3, #4]
   1083e:	60a3      	str	r3, [r4, #8]
   10840:	4b45      	ldr	r3, [pc, #276]	; (10958 <_free_r+0x164>)
   10842:	681b      	ldr	r3, [r3, #0]
   10844:	429a      	cmp	r2, r3
   10846:	d304      	bcc.n	10852 <_free_r+0x5e>
   10848:	4b44      	ldr	r3, [pc, #272]	; (1095c <_free_r+0x168>)
   1084a:	4630      	mov	r0, r6
   1084c:	6819      	ldr	r1, [r3, #0]
   1084e:	f7ff ff83 	bl	10758 <_malloc_trim_r>
   10852:	4630      	mov	r0, r6
   10854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10858:	f7fd b997 	b.w	db8a <__malloc_unlock>
   1085c:	6047      	str	r7, [r0, #4]
   1085e:	b979      	cbnz	r1, 10880 <_free_r+0x8c>
   10860:	f855 5c08 	ldr.w	r5, [r5, #-8]
   10864:	1b5b      	subs	r3, r3, r5
   10866:	442a      	add	r2, r5
   10868:	689d      	ldr	r5, [r3, #8]
   1086a:	f104 0c08 	add.w	ip, r4, #8
   1086e:	4565      	cmp	r5, ip
   10870:	d008      	beq.n	10884 <_free_r+0x90>
   10872:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   10876:	f8c5 c00c 	str.w	ip, [r5, #12]
   1087a:	f8cc 5008 	str.w	r5, [ip, #8]
   1087e:	e002      	b.n	10886 <_free_r+0x92>
   10880:	2100      	movs	r1, #0
   10882:	e000      	b.n	10886 <_free_r+0x92>
   10884:	2101      	movs	r1, #1
   10886:	19c5      	adds	r5, r0, r7
   10888:	686d      	ldr	r5, [r5, #4]
   1088a:	07ed      	lsls	r5, r5, #31
   1088c:	d40e      	bmi.n	108ac <_free_r+0xb8>
   1088e:	443a      	add	r2, r7
   10890:	6885      	ldr	r5, [r0, #8]
   10892:	b941      	cbnz	r1, 108a6 <_free_r+0xb2>
   10894:	4f32      	ldr	r7, [pc, #200]	; (10960 <_free_r+0x16c>)
   10896:	42bd      	cmp	r5, r7
   10898:	d105      	bne.n	108a6 <_free_r+0xb2>
   1089a:	6163      	str	r3, [r4, #20]
   1089c:	6123      	str	r3, [r4, #16]
   1089e:	2101      	movs	r1, #1
   108a0:	60dd      	str	r5, [r3, #12]
   108a2:	609d      	str	r5, [r3, #8]
   108a4:	e002      	b.n	108ac <_free_r+0xb8>
   108a6:	68c0      	ldr	r0, [r0, #12]
   108a8:	60e8      	str	r0, [r5, #12]
   108aa:	6085      	str	r5, [r0, #8]
   108ac:	f042 0001 	orr.w	r0, r2, #1
   108b0:	6058      	str	r0, [r3, #4]
   108b2:	509a      	str	r2, [r3, r2]
   108b4:	2900      	cmp	r1, #0
   108b6:	d1cc      	bne.n	10852 <_free_r+0x5e>
   108b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   108bc:	d20e      	bcs.n	108dc <_free_r+0xe8>
   108be:	08d2      	lsrs	r2, r2, #3
   108c0:	1091      	asrs	r1, r2, #2
   108c2:	2001      	movs	r0, #1
   108c4:	4088      	lsls	r0, r1
   108c6:	6861      	ldr	r1, [r4, #4]
   108c8:	4301      	orrs	r1, r0
   108ca:	6061      	str	r1, [r4, #4]
   108cc:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   108d0:	68a2      	ldr	r2, [r4, #8]
   108d2:	609a      	str	r2, [r3, #8]
   108d4:	60dc      	str	r4, [r3, #12]
   108d6:	60a3      	str	r3, [r4, #8]
   108d8:	60d3      	str	r3, [r2, #12]
   108da:	e7ba      	b.n	10852 <_free_r+0x5e>
   108dc:	0a51      	lsrs	r1, r2, #9
   108de:	2904      	cmp	r1, #4
   108e0:	d802      	bhi.n	108e8 <_free_r+0xf4>
   108e2:	0991      	lsrs	r1, r2, #6
   108e4:	3138      	adds	r1, #56	; 0x38
   108e6:	e015      	b.n	10914 <_free_r+0x120>
   108e8:	2914      	cmp	r1, #20
   108ea:	d801      	bhi.n	108f0 <_free_r+0xfc>
   108ec:	315b      	adds	r1, #91	; 0x5b
   108ee:	e011      	b.n	10914 <_free_r+0x120>
   108f0:	2954      	cmp	r1, #84	; 0x54
   108f2:	d802      	bhi.n	108fa <_free_r+0x106>
   108f4:	0b11      	lsrs	r1, r2, #12
   108f6:	316e      	adds	r1, #110	; 0x6e
   108f8:	e00c      	b.n	10914 <_free_r+0x120>
   108fa:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   108fe:	d802      	bhi.n	10906 <_free_r+0x112>
   10900:	0bd1      	lsrs	r1, r2, #15
   10902:	3177      	adds	r1, #119	; 0x77
   10904:	e006      	b.n	10914 <_free_r+0x120>
   10906:	f240 5054 	movw	r0, #1364	; 0x554
   1090a:	4281      	cmp	r1, r0
   1090c:	bf9a      	itte	ls
   1090e:	0c91      	lsrls	r1, r2, #18
   10910:	317c      	addls	r1, #124	; 0x7c
   10912:	217e      	movhi	r1, #126	; 0x7e
   10914:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   10918:	480e      	ldr	r0, [pc, #56]	; (10954 <_free_r+0x160>)
   1091a:	68a5      	ldr	r5, [r4, #8]
   1091c:	42a5      	cmp	r5, r4
   1091e:	d001      	beq.n	10924 <_free_r+0x130>
   10920:	4629      	mov	r1, r5
   10922:	e00b      	b.n	1093c <_free_r+0x148>
   10924:	2201      	movs	r2, #1
   10926:	1089      	asrs	r1, r1, #2
   10928:	fa02 f101 	lsl.w	r1, r2, r1
   1092c:	6842      	ldr	r2, [r0, #4]
   1092e:	430a      	orrs	r2, r1
   10930:	6042      	str	r2, [r0, #4]
   10932:	4629      	mov	r1, r5
   10934:	e008      	b.n	10948 <_free_r+0x154>
   10936:	6889      	ldr	r1, [r1, #8]
   10938:	42a1      	cmp	r1, r4
   1093a:	d004      	beq.n	10946 <_free_r+0x152>
   1093c:	6848      	ldr	r0, [r1, #4]
   1093e:	f020 0003 	bic.w	r0, r0, #3
   10942:	4282      	cmp	r2, r0
   10944:	d3f7      	bcc.n	10936 <_free_r+0x142>
   10946:	68cd      	ldr	r5, [r1, #12]
   10948:	60dd      	str	r5, [r3, #12]
   1094a:	6099      	str	r1, [r3, #8]
   1094c:	60ab      	str	r3, [r5, #8]
   1094e:	60cb      	str	r3, [r1, #12]
   10950:	e77f      	b.n	10852 <_free_r+0x5e>
   10952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10954:	200008f0 	.word	0x200008f0
   10958:	20000cfc 	.word	0x20000cfc
   1095c:	20000e38 	.word	0x20000e38
   10960:	200008f8 	.word	0x200008f8

00010964 <__sfvwrite_r>:
   10964:	6893      	ldr	r3, [r2, #8]
   10966:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1096a:	4680      	mov	r8, r0
   1096c:	460c      	mov	r4, r1
   1096e:	4691      	mov	r9, r2
   10970:	b90b      	cbnz	r3, 10976 <__sfvwrite_r+0x12>
   10972:	2000      	movs	r0, #0
   10974:	e13c      	b.n	10bf0 <__sfvwrite_r+0x28c>
   10976:	898b      	ldrh	r3, [r1, #12]
   10978:	0718      	lsls	r0, r3, #28
   1097a:	d50e      	bpl.n	1099a <__sfvwrite_r+0x36>
   1097c:	690b      	ldr	r3, [r1, #16]
   1097e:	b163      	cbz	r3, 1099a <__sfvwrite_r+0x36>
   10980:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   10984:	f8d9 6000 	ldr.w	r6, [r9]
   10988:	f00a 0c02 	and.w	ip, sl, #2
   1098c:	fa1f f38c 	uxth.w	r3, ip
   10990:	b333      	cbz	r3, 109e0 <__sfvwrite_r+0x7c>
   10992:	f04f 0a00 	mov.w	sl, #0
   10996:	4657      	mov	r7, sl
   10998:	e01b      	b.n	109d2 <__sfvwrite_r+0x6e>
   1099a:	4640      	mov	r0, r8
   1099c:	4621      	mov	r1, r4
   1099e:	f7fe fde3 	bl	f568 <__swsetup_r>
   109a2:	2800      	cmp	r0, #0
   109a4:	d0ec      	beq.n	10980 <__sfvwrite_r+0x1c>
   109a6:	e121      	b.n	10bec <__sfvwrite_r+0x288>
   109a8:	4b93      	ldr	r3, [pc, #588]	; (10bf8 <__sfvwrite_r+0x294>)
   109aa:	69e1      	ldr	r1, [r4, #28]
   109ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
   109ae:	429f      	cmp	r7, r3
   109b0:	bf38      	it	cc
   109b2:	463b      	movcc	r3, r7
   109b4:	4640      	mov	r0, r8
   109b6:	4652      	mov	r2, sl
   109b8:	47a8      	blx	r5
   109ba:	2800      	cmp	r0, #0
   109bc:	f340 8112 	ble.w	10be4 <__sfvwrite_r+0x280>
   109c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   109c4:	4482      	add	sl, r0
   109c6:	1a3f      	subs	r7, r7, r0
   109c8:	1a18      	subs	r0, r3, r0
   109ca:	f8c9 0008 	str.w	r0, [r9, #8]
   109ce:	2800      	cmp	r0, #0
   109d0:	d0cf      	beq.n	10972 <__sfvwrite_r+0xe>
   109d2:	2f00      	cmp	r7, #0
   109d4:	d1e8      	bne.n	109a8 <__sfvwrite_r+0x44>
   109d6:	f8d6 a000 	ldr.w	sl, [r6]
   109da:	6877      	ldr	r7, [r6, #4]
   109dc:	3608      	adds	r6, #8
   109de:	e7f8      	b.n	109d2 <__sfvwrite_r+0x6e>
   109e0:	f01a 0a01 	ands.w	sl, sl, #1
   109e4:	d004      	beq.n	109f0 <__sfvwrite_r+0x8c>
   109e6:	469b      	mov	fp, r3
   109e8:	9301      	str	r3, [sp, #4]
   109ea:	461f      	mov	r7, r3
   109ec:	469a      	mov	sl, r3
   109ee:	e0bf      	b.n	10b70 <__sfvwrite_r+0x20c>
   109f0:	4655      	mov	r5, sl
   109f2:	b925      	cbnz	r5, 109fe <__sfvwrite_r+0x9a>
   109f4:	f8d6 a000 	ldr.w	sl, [r6]
   109f8:	6875      	ldr	r5, [r6, #4]
   109fa:	3608      	adds	r6, #8
   109fc:	e7f9      	b.n	109f2 <__sfvwrite_r+0x8e>
   109fe:	89a2      	ldrh	r2, [r4, #12]
   10a00:	68a7      	ldr	r7, [r4, #8]
   10a02:	0591      	lsls	r1, r2, #22
   10a04:	d552      	bpl.n	10aac <__sfvwrite_r+0x148>
   10a06:	42bd      	cmp	r5, r7
   10a08:	d342      	bcc.n	10a90 <__sfvwrite_r+0x12c>
   10a0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   10a0e:	d03d      	beq.n	10a8c <__sfvwrite_r+0x128>
   10a10:	6921      	ldr	r1, [r4, #16]
   10a12:	6823      	ldr	r3, [r4, #0]
   10a14:	1a5b      	subs	r3, r3, r1
   10a16:	9301      	str	r3, [sp, #4]
   10a18:	6963      	ldr	r3, [r4, #20]
   10a1a:	2002      	movs	r0, #2
   10a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10a20:	fb93 fbf0 	sdiv	fp, r3, r0
   10a24:	9b01      	ldr	r3, [sp, #4]
   10a26:	1c58      	adds	r0, r3, #1
   10a28:	4428      	add	r0, r5
   10a2a:	4583      	cmp	fp, r0
   10a2c:	bf38      	it	cc
   10a2e:	4683      	movcc	fp, r0
   10a30:	0553      	lsls	r3, r2, #21
   10a32:	4640      	mov	r0, r8
   10a34:	d50f      	bpl.n	10a56 <__sfvwrite_r+0xf2>
   10a36:	4659      	mov	r1, fp
   10a38:	f7fc fe94 	bl	d764 <_malloc_r>
   10a3c:	4607      	mov	r7, r0
   10a3e:	b1b8      	cbz	r0, 10a70 <__sfvwrite_r+0x10c>
   10a40:	9a01      	ldr	r2, [sp, #4]
   10a42:	6921      	ldr	r1, [r4, #16]
   10a44:	f000 f9c9 	bl	10dda <memcpy>
   10a48:	89a2      	ldrh	r2, [r4, #12]
   10a4a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   10a4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10a52:	81a2      	strh	r2, [r4, #12]
   10a54:	e010      	b.n	10a78 <__sfvwrite_r+0x114>
   10a56:	465a      	mov	r2, fp
   10a58:	f000 fdce 	bl	115f8 <_realloc_r>
   10a5c:	4607      	mov	r7, r0
   10a5e:	b958      	cbnz	r0, 10a78 <__sfvwrite_r+0x114>
   10a60:	4640      	mov	r0, r8
   10a62:	6921      	ldr	r1, [r4, #16]
   10a64:	f7ff fec6 	bl	107f4 <_free_r>
   10a68:	89a3      	ldrh	r3, [r4, #12]
   10a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10a6e:	81a3      	strh	r3, [r4, #12]
   10a70:	230c      	movs	r3, #12
   10a72:	f8c8 3000 	str.w	r3, [r8]
   10a76:	e0b5      	b.n	10be4 <__sfvwrite_r+0x280>
   10a78:	9b01      	ldr	r3, [sp, #4]
   10a7a:	6127      	str	r7, [r4, #16]
   10a7c:	441f      	add	r7, r3
   10a7e:	ebc3 030b 	rsb	r3, r3, fp
   10a82:	6027      	str	r7, [r4, #0]
   10a84:	f8c4 b014 	str.w	fp, [r4, #20]
   10a88:	462f      	mov	r7, r5
   10a8a:	60a3      	str	r3, [r4, #8]
   10a8c:	42bd      	cmp	r5, r7
   10a8e:	d200      	bcs.n	10a92 <__sfvwrite_r+0x12e>
   10a90:	462f      	mov	r7, r5
   10a92:	463a      	mov	r2, r7
   10a94:	6820      	ldr	r0, [r4, #0]
   10a96:	4651      	mov	r1, sl
   10a98:	f000 f9a8 	bl	10dec <memmove>
   10a9c:	68a3      	ldr	r3, [r4, #8]
   10a9e:	1bdb      	subs	r3, r3, r7
   10aa0:	60a3      	str	r3, [r4, #8]
   10aa2:	6823      	ldr	r3, [r4, #0]
   10aa4:	441f      	add	r7, r3
   10aa6:	6027      	str	r7, [r4, #0]
   10aa8:	462f      	mov	r7, r5
   10aaa:	e02a      	b.n	10b02 <__sfvwrite_r+0x19e>
   10aac:	6820      	ldr	r0, [r4, #0]
   10aae:	6923      	ldr	r3, [r4, #16]
   10ab0:	4298      	cmp	r0, r3
   10ab2:	d802      	bhi.n	10aba <__sfvwrite_r+0x156>
   10ab4:	6963      	ldr	r3, [r4, #20]
   10ab6:	429d      	cmp	r5, r3
   10ab8:	d213      	bcs.n	10ae2 <__sfvwrite_r+0x17e>
   10aba:	42bd      	cmp	r5, r7
   10abc:	bf38      	it	cc
   10abe:	462f      	movcc	r7, r5
   10ac0:	463a      	mov	r2, r7
   10ac2:	4651      	mov	r1, sl
   10ac4:	f000 f992 	bl	10dec <memmove>
   10ac8:	68a3      	ldr	r3, [r4, #8]
   10aca:	6822      	ldr	r2, [r4, #0]
   10acc:	1bdb      	subs	r3, r3, r7
   10ace:	443a      	add	r2, r7
   10ad0:	60a3      	str	r3, [r4, #8]
   10ad2:	6022      	str	r2, [r4, #0]
   10ad4:	b9ab      	cbnz	r3, 10b02 <__sfvwrite_r+0x19e>
   10ad6:	4640      	mov	r0, r8
   10ad8:	4621      	mov	r1, r4
   10ada:	f7ff fcbd 	bl	10458 <_fflush_r>
   10ade:	b180      	cbz	r0, 10b02 <__sfvwrite_r+0x19e>
   10ae0:	e080      	b.n	10be4 <__sfvwrite_r+0x280>
   10ae2:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   10ae6:	4575      	cmp	r5, lr
   10ae8:	bf38      	it	cc
   10aea:	46ae      	movcc	lr, r5
   10aec:	fb9e fef3 	sdiv	lr, lr, r3
   10af0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10af2:	69e1      	ldr	r1, [r4, #28]
   10af4:	4640      	mov	r0, r8
   10af6:	4652      	mov	r2, sl
   10af8:	fb03 f30e 	mul.w	r3, r3, lr
   10afc:	47b8      	blx	r7
   10afe:	1e07      	subs	r7, r0, #0
   10b00:	dd70      	ble.n	10be4 <__sfvwrite_r+0x280>
   10b02:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10b06:	44ba      	add	sl, r7
   10b08:	1bed      	subs	r5, r5, r7
   10b0a:	1bdf      	subs	r7, r3, r7
   10b0c:	f8c9 7008 	str.w	r7, [r9, #8]
   10b10:	2f00      	cmp	r7, #0
   10b12:	f47f af6e 	bne.w	109f2 <__sfvwrite_r+0x8e>
   10b16:	e72c      	b.n	10972 <__sfvwrite_r+0xe>
   10b18:	9d01      	ldr	r5, [sp, #4]
   10b1a:	2d00      	cmp	r5, #0
   10b1c:	d031      	beq.n	10b82 <__sfvwrite_r+0x21e>
   10b1e:	6820      	ldr	r0, [r4, #0]
   10b20:	6922      	ldr	r2, [r4, #16]
   10b22:	68a5      	ldr	r5, [r4, #8]
   10b24:	f8d4 e014 	ldr.w	lr, [r4, #20]
   10b28:	45d3      	cmp	fp, sl
   10b2a:	bf34      	ite	cc
   10b2c:	465b      	movcc	r3, fp
   10b2e:	4653      	movcs	r3, sl
   10b30:	4290      	cmp	r0, r2
   10b32:	d936      	bls.n	10ba2 <__sfvwrite_r+0x23e>
   10b34:	4475      	add	r5, lr
   10b36:	42ab      	cmp	r3, r5
   10b38:	dd33      	ble.n	10ba2 <__sfvwrite_r+0x23e>
   10b3a:	4639      	mov	r1, r7
   10b3c:	462a      	mov	r2, r5
   10b3e:	f000 f955 	bl	10dec <memmove>
   10b42:	6823      	ldr	r3, [r4, #0]
   10b44:	442b      	add	r3, r5
   10b46:	6023      	str	r3, [r4, #0]
   10b48:	4640      	mov	r0, r8
   10b4a:	4621      	mov	r1, r4
   10b4c:	f7ff fc84 	bl	10458 <_fflush_r>
   10b50:	2800      	cmp	r0, #0
   10b52:	d147      	bne.n	10be4 <__sfvwrite_r+0x280>
   10b54:	ebbb 0b05 	subs.w	fp, fp, r5
   10b58:	d03c      	beq.n	10bd4 <__sfvwrite_r+0x270>
   10b5a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10b5e:	442f      	add	r7, r5
   10b60:	ebc5 0a0a 	rsb	sl, r5, sl
   10b64:	1b5d      	subs	r5, r3, r5
   10b66:	f8c9 5008 	str.w	r5, [r9, #8]
   10b6a:	2d00      	cmp	r5, #0
   10b6c:	f43f af01 	beq.w	10972 <__sfvwrite_r+0xe>
   10b70:	f1ba 0f00 	cmp.w	sl, #0
   10b74:	d1d0      	bne.n	10b18 <__sfvwrite_r+0x1b4>
   10b76:	2500      	movs	r5, #0
   10b78:	e896 0480 	ldmia.w	r6, {r7, sl}
   10b7c:	9501      	str	r5, [sp, #4]
   10b7e:	3608      	adds	r6, #8
   10b80:	e7f6      	b.n	10b70 <__sfvwrite_r+0x20c>
   10b82:	4638      	mov	r0, r7
   10b84:	210a      	movs	r1, #10
   10b86:	4652      	mov	r2, sl
   10b88:	f000 f918 	bl	10dbc <memchr>
   10b8c:	b120      	cbz	r0, 10b98 <__sfvwrite_r+0x234>
   10b8e:	f100 0c01 	add.w	ip, r0, #1
   10b92:	ebc7 0b0c 	rsb	fp, r7, ip
   10b96:	e001      	b.n	10b9c <__sfvwrite_r+0x238>
   10b98:	f10a 0b01 	add.w	fp, sl, #1
   10b9c:	2501      	movs	r5, #1
   10b9e:	9501      	str	r5, [sp, #4]
   10ba0:	e7bd      	b.n	10b1e <__sfvwrite_r+0x1ba>
   10ba2:	4573      	cmp	r3, lr
   10ba4:	db08      	blt.n	10bb8 <__sfvwrite_r+0x254>
   10ba6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10ba8:	69e1      	ldr	r1, [r4, #28]
   10baa:	4640      	mov	r0, r8
   10bac:	463a      	mov	r2, r7
   10bae:	4673      	mov	r3, lr
   10bb0:	47a8      	blx	r5
   10bb2:	1e05      	subs	r5, r0, #0
   10bb4:	dcce      	bgt.n	10b54 <__sfvwrite_r+0x1f0>
   10bb6:	e015      	b.n	10be4 <__sfvwrite_r+0x280>
   10bb8:	461a      	mov	r2, r3
   10bba:	4639      	mov	r1, r7
   10bbc:	9300      	str	r3, [sp, #0]
   10bbe:	f000 f915 	bl	10dec <memmove>
   10bc2:	9b00      	ldr	r3, [sp, #0]
   10bc4:	68a2      	ldr	r2, [r4, #8]
   10bc6:	1ad2      	subs	r2, r2, r3
   10bc8:	60a2      	str	r2, [r4, #8]
   10bca:	6822      	ldr	r2, [r4, #0]
   10bcc:	441a      	add	r2, r3
   10bce:	6022      	str	r2, [r4, #0]
   10bd0:	461d      	mov	r5, r3
   10bd2:	e7bf      	b.n	10b54 <__sfvwrite_r+0x1f0>
   10bd4:	4640      	mov	r0, r8
   10bd6:	4621      	mov	r1, r4
   10bd8:	f7ff fc3e 	bl	10458 <_fflush_r>
   10bdc:	b910      	cbnz	r0, 10be4 <__sfvwrite_r+0x280>
   10bde:	f8cd b004 	str.w	fp, [sp, #4]
   10be2:	e7ba      	b.n	10b5a <__sfvwrite_r+0x1f6>
   10be4:	89a3      	ldrh	r3, [r4, #12]
   10be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10bea:	81a3      	strh	r3, [r4, #12]
   10bec:	f04f 30ff 	mov.w	r0, #4294967295
   10bf0:	b003      	add	sp, #12
   10bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bf6:	bf00      	nop
   10bf8:	7ffffc00 	.word	0x7ffffc00

00010bfc <_fwalk>:
   10bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c00:	4688      	mov	r8, r1
   10c02:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   10c06:	2600      	movs	r6, #0
   10c08:	b18c      	cbz	r4, 10c2e <_fwalk+0x32>
   10c0a:	68a5      	ldr	r5, [r4, #8]
   10c0c:	6867      	ldr	r7, [r4, #4]
   10c0e:	3f01      	subs	r7, #1
   10c10:	d40b      	bmi.n	10c2a <_fwalk+0x2e>
   10c12:	89ab      	ldrh	r3, [r5, #12]
   10c14:	2b01      	cmp	r3, #1
   10c16:	d906      	bls.n	10c26 <_fwalk+0x2a>
   10c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   10c1c:	3301      	adds	r3, #1
   10c1e:	d002      	beq.n	10c26 <_fwalk+0x2a>
   10c20:	4628      	mov	r0, r5
   10c22:	47c0      	blx	r8
   10c24:	4306      	orrs	r6, r0
   10c26:	3568      	adds	r5, #104	; 0x68
   10c28:	e7f1      	b.n	10c0e <_fwalk+0x12>
   10c2a:	6824      	ldr	r4, [r4, #0]
   10c2c:	e7ec      	b.n	10c08 <_fwalk+0xc>
   10c2e:	4630      	mov	r0, r6
   10c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c34 <_fwalk_reent>:
   10c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c38:	4680      	mov	r8, r0
   10c3a:	4689      	mov	r9, r1
   10c3c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   10c40:	2600      	movs	r6, #0
   10c42:	b194      	cbz	r4, 10c6a <_fwalk_reent+0x36>
   10c44:	68a5      	ldr	r5, [r4, #8]
   10c46:	6867      	ldr	r7, [r4, #4]
   10c48:	3f01      	subs	r7, #1
   10c4a:	d40c      	bmi.n	10c66 <_fwalk_reent+0x32>
   10c4c:	89ab      	ldrh	r3, [r5, #12]
   10c4e:	2b01      	cmp	r3, #1
   10c50:	d907      	bls.n	10c62 <_fwalk_reent+0x2e>
   10c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   10c56:	3301      	adds	r3, #1
   10c58:	d003      	beq.n	10c62 <_fwalk_reent+0x2e>
   10c5a:	4640      	mov	r0, r8
   10c5c:	4629      	mov	r1, r5
   10c5e:	47c8      	blx	r9
   10c60:	4306      	orrs	r6, r0
   10c62:	3568      	adds	r5, #104	; 0x68
   10c64:	e7f0      	b.n	10c48 <_fwalk_reent+0x14>
   10c66:	6824      	ldr	r4, [r4, #0]
   10c68:	e7eb      	b.n	10c42 <_fwalk_reent+0xe>
   10c6a:	4630      	mov	r0, r6
   10c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010c70 <_setlocale_r>:
   10c70:	b510      	push	{r4, lr}
   10c72:	4614      	mov	r4, r2
   10c74:	b90a      	cbnz	r2, 10c7a <_setlocale_r+0xa>
   10c76:	480b      	ldr	r0, [pc, #44]	; (10ca4 <_setlocale_r+0x34>)
   10c78:	bd10      	pop	{r4, pc}
   10c7a:	4610      	mov	r0, r2
   10c7c:	490a      	ldr	r1, [pc, #40]	; (10ca8 <_setlocale_r+0x38>)
   10c7e:	f000 fea8 	bl	119d2 <strcmp>
   10c82:	2800      	cmp	r0, #0
   10c84:	d0f7      	beq.n	10c76 <_setlocale_r+0x6>
   10c86:	4620      	mov	r0, r4
   10c88:	4906      	ldr	r1, [pc, #24]	; (10ca4 <_setlocale_r+0x34>)
   10c8a:	f000 fea2 	bl	119d2 <strcmp>
   10c8e:	2800      	cmp	r0, #0
   10c90:	d0f1      	beq.n	10c76 <_setlocale_r+0x6>
   10c92:	4620      	mov	r0, r4
   10c94:	4905      	ldr	r1, [pc, #20]	; (10cac <_setlocale_r+0x3c>)
   10c96:	f000 fe9c 	bl	119d2 <strcmp>
   10c9a:	2800      	cmp	r0, #0
   10c9c:	4801      	ldr	r0, [pc, #4]	; (10ca4 <_setlocale_r+0x34>)
   10c9e:	bf18      	it	ne
   10ca0:	2000      	movne	r0, #0
   10ca2:	bd10      	pop	{r4, pc}
   10ca4:	00012fb0 	.word	0x00012fb0
   10ca8:	00013033 	.word	0x00013033
   10cac:	0001303a 	.word	0x0001303a

00010cb0 <__locale_charset>:
   10cb0:	4800      	ldr	r0, [pc, #0]	; (10cb4 <__locale_charset+0x4>)
   10cb2:	4770      	bx	lr
   10cb4:	20000d00 	.word	0x20000d00

00010cb8 <__locale_mb_cur_max>:
   10cb8:	4b01      	ldr	r3, [pc, #4]	; (10cc0 <__locale_mb_cur_max+0x8>)
   10cba:	6a18      	ldr	r0, [r3, #32]
   10cbc:	4770      	bx	lr
   10cbe:	bf00      	nop
   10cc0:	20000d00 	.word	0x20000d00

00010cc4 <__locale_msgcharset>:
   10cc4:	4800      	ldr	r0, [pc, #0]	; (10cc8 <__locale_msgcharset+0x4>)
   10cc6:	4770      	bx	lr
   10cc8:	20000d24 	.word	0x20000d24

00010ccc <__locale_cjk_lang>:
   10ccc:	2000      	movs	r0, #0
   10cce:	4770      	bx	lr

00010cd0 <_localeconv_r>:
   10cd0:	4800      	ldr	r0, [pc, #0]	; (10cd4 <_localeconv_r+0x4>)
   10cd2:	4770      	bx	lr
   10cd4:	20000d44 	.word	0x20000d44

00010cd8 <setlocale>:
   10cd8:	460a      	mov	r2, r1
   10cda:	4903      	ldr	r1, [pc, #12]	; (10ce8 <setlocale+0x10>)
   10cdc:	4603      	mov	r3, r0
   10cde:	6808      	ldr	r0, [r1, #0]
   10ce0:	4619      	mov	r1, r3
   10ce2:	f7ff bfc5 	b.w	10c70 <_setlocale_r>
   10ce6:	bf00      	nop
   10ce8:	200004c0 	.word	0x200004c0

00010cec <localeconv>:
   10cec:	4800      	ldr	r0, [pc, #0]	; (10cf0 <localeconv+0x4>)
   10cee:	4770      	bx	lr
   10cf0:	20000d44 	.word	0x20000d44

00010cf4 <__smakebuf_r>:
   10cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cf6:	898b      	ldrh	r3, [r1, #12]
   10cf8:	079d      	lsls	r5, r3, #30
   10cfa:	b091      	sub	sp, #68	; 0x44
   10cfc:	4606      	mov	r6, r0
   10cfe:	460c      	mov	r4, r1
   10d00:	d43a      	bmi.n	10d78 <__smakebuf_r+0x84>
   10d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10d06:	2900      	cmp	r1, #0
   10d08:	da0b      	bge.n	10d22 <__smakebuf_r+0x2e>
   10d0a:	89a3      	ldrh	r3, [r4, #12]
   10d0c:	f013 0f80 	tst.w	r3, #128	; 0x80
   10d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   10d14:	bf0c      	ite	eq
   10d16:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   10d1a:	2540      	movne	r5, #64	; 0x40
   10d1c:	81a3      	strh	r3, [r4, #12]
   10d1e:	2700      	movs	r7, #0
   10d20:	e01f      	b.n	10d62 <__smakebuf_r+0x6e>
   10d22:	aa01      	add	r2, sp, #4
   10d24:	f001 fc16 	bl	12554 <_fstat_r>
   10d28:	2800      	cmp	r0, #0
   10d2a:	dbee      	blt.n	10d0a <__smakebuf_r+0x16>
   10d2c:	9b02      	ldr	r3, [sp, #8]
   10d2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   10d32:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   10d36:	424f      	negs	r7, r1
   10d38:	414f      	adcs	r7, r1
   10d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10d3e:	89a3      	ldrh	r3, [r4, #12]
   10d40:	d10a      	bne.n	10d58 <__smakebuf_r+0x64>
   10d42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10d44:	491b      	ldr	r1, [pc, #108]	; (10db4 <__smakebuf_r+0xc0>)
   10d46:	428a      	cmp	r2, r1
   10d48:	d106      	bne.n	10d58 <__smakebuf_r+0x64>
   10d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   10d4e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   10d52:	81a3      	strh	r3, [r4, #12]
   10d54:	64e5      	str	r5, [r4, #76]	; 0x4c
   10d56:	e004      	b.n	10d62 <__smakebuf_r+0x6e>
   10d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   10d5c:	81a3      	strh	r3, [r4, #12]
   10d5e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   10d62:	4630      	mov	r0, r6
   10d64:	4629      	mov	r1, r5
   10d66:	f7fc fcfd 	bl	d764 <_malloc_r>
   10d6a:	b960      	cbnz	r0, 10d86 <__smakebuf_r+0x92>
   10d6c:	89a3      	ldrh	r3, [r4, #12]
   10d6e:	059a      	lsls	r2, r3, #22
   10d70:	d41d      	bmi.n	10dae <__smakebuf_r+0xba>
   10d72:	f043 0302 	orr.w	r3, r3, #2
   10d76:	81a3      	strh	r3, [r4, #12]
   10d78:	f104 0343 	add.w	r3, r4, #67	; 0x43
   10d7c:	6023      	str	r3, [r4, #0]
   10d7e:	6123      	str	r3, [r4, #16]
   10d80:	2301      	movs	r3, #1
   10d82:	6163      	str	r3, [r4, #20]
   10d84:	e013      	b.n	10dae <__smakebuf_r+0xba>
   10d86:	4b0c      	ldr	r3, [pc, #48]	; (10db8 <__smakebuf_r+0xc4>)
   10d88:	63f3      	str	r3, [r6, #60]	; 0x3c
   10d8a:	89a3      	ldrh	r3, [r4, #12]
   10d8c:	6020      	str	r0, [r4, #0]
   10d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10d92:	81a3      	strh	r3, [r4, #12]
   10d94:	6120      	str	r0, [r4, #16]
   10d96:	6165      	str	r5, [r4, #20]
   10d98:	b14f      	cbz	r7, 10dae <__smakebuf_r+0xba>
   10d9a:	4630      	mov	r0, r6
   10d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10da0:	f001 fbea 	bl	12578 <_isatty_r>
   10da4:	b118      	cbz	r0, 10dae <__smakebuf_r+0xba>
   10da6:	89a3      	ldrh	r3, [r4, #12]
   10da8:	f043 0301 	orr.w	r3, r3, #1
   10dac:	81a3      	strh	r3, [r4, #12]
   10dae:	b011      	add	sp, #68	; 0x44
   10db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10db2:	bf00      	nop
   10db4:	000119a7 	.word	0x000119a7
   10db8:	000104a9 	.word	0x000104a9

00010dbc <memchr>:
   10dbc:	b510      	push	{r4, lr}
   10dbe:	b2c9      	uxtb	r1, r1
   10dc0:	4402      	add	r2, r0
   10dc2:	4290      	cmp	r0, r2
   10dc4:	4603      	mov	r3, r0
   10dc6:	d006      	beq.n	10dd6 <memchr+0x1a>
   10dc8:	781c      	ldrb	r4, [r3, #0]
   10dca:	428c      	cmp	r4, r1
   10dcc:	f100 0001 	add.w	r0, r0, #1
   10dd0:	d1f7      	bne.n	10dc2 <memchr+0x6>
   10dd2:	4618      	mov	r0, r3
   10dd4:	bd10      	pop	{r4, pc}
   10dd6:	2000      	movs	r0, #0
   10dd8:	bd10      	pop	{r4, pc}

00010dda <memcpy>:
   10dda:	b510      	push	{r4, lr}
   10ddc:	2300      	movs	r3, #0
   10dde:	4293      	cmp	r3, r2
   10de0:	d003      	beq.n	10dea <memcpy+0x10>
   10de2:	5ccc      	ldrb	r4, [r1, r3]
   10de4:	54c4      	strb	r4, [r0, r3]
   10de6:	3301      	adds	r3, #1
   10de8:	e7f9      	b.n	10dde <memcpy+0x4>
   10dea:	bd10      	pop	{r4, pc}

00010dec <memmove>:
   10dec:	4281      	cmp	r1, r0
   10dee:	b570      	push	{r4, r5, r6, lr}
   10df0:	d301      	bcc.n	10df6 <memmove+0xa>
   10df2:	2300      	movs	r3, #0
   10df4:	e00e      	b.n	10e14 <memmove+0x28>
   10df6:	188c      	adds	r4, r1, r2
   10df8:	42a0      	cmp	r0, r4
   10dfa:	d2fa      	bcs.n	10df2 <memmove+0x6>
   10dfc:	1885      	adds	r5, r0, r2
   10dfe:	4613      	mov	r3, r2
   10e00:	f113 33ff 	adds.w	r3, r3, #4294967295
   10e04:	d305      	bcc.n	10e12 <memmove+0x26>
   10e06:	4251      	negs	r1, r2
   10e08:	1866      	adds	r6, r4, r1
   10e0a:	4429      	add	r1, r5
   10e0c:	5cf6      	ldrb	r6, [r6, r3]
   10e0e:	54ce      	strb	r6, [r1, r3]
   10e10:	e7f6      	b.n	10e00 <memmove+0x14>
   10e12:	bd70      	pop	{r4, r5, r6, pc}
   10e14:	4293      	cmp	r3, r2
   10e16:	d003      	beq.n	10e20 <memmove+0x34>
   10e18:	5ccc      	ldrb	r4, [r1, r3]
   10e1a:	54c4      	strb	r4, [r0, r3]
   10e1c:	3301      	adds	r3, #1
   10e1e:	e7f9      	b.n	10e14 <memmove+0x28>
   10e20:	bd70      	pop	{r4, r5, r6, pc}
	...

00010e24 <_Balloc>:
   10e24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   10e26:	b570      	push	{r4, r5, r6, lr}
   10e28:	4605      	mov	r5, r0
   10e2a:	460c      	mov	r4, r1
   10e2c:	b13b      	cbz	r3, 10e3e <_Balloc+0x1a>
   10e2e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   10e30:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   10e34:	b160      	cbz	r0, 10e50 <_Balloc+0x2c>
   10e36:	6801      	ldr	r1, [r0, #0]
   10e38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   10e3c:	e014      	b.n	10e68 <_Balloc+0x44>
   10e3e:	2104      	movs	r1, #4
   10e40:	2221      	movs	r2, #33	; 0x21
   10e42:	f001 fb03 	bl	1244c <_calloc_r>
   10e46:	64e8      	str	r0, [r5, #76]	; 0x4c
   10e48:	2800      	cmp	r0, #0
   10e4a:	d1f0      	bne.n	10e2e <_Balloc+0xa>
   10e4c:	2000      	movs	r0, #0
   10e4e:	bd70      	pop	{r4, r5, r6, pc}
   10e50:	2101      	movs	r1, #1
   10e52:	fa01 f604 	lsl.w	r6, r1, r4
   10e56:	1d72      	adds	r2, r6, #5
   10e58:	4628      	mov	r0, r5
   10e5a:	0092      	lsls	r2, r2, #2
   10e5c:	f001 faf6 	bl	1244c <_calloc_r>
   10e60:	2800      	cmp	r0, #0
   10e62:	d0f3      	beq.n	10e4c <_Balloc+0x28>
   10e64:	6044      	str	r4, [r0, #4]
   10e66:	6086      	str	r6, [r0, #8]
   10e68:	2200      	movs	r2, #0
   10e6a:	6102      	str	r2, [r0, #16]
   10e6c:	60c2      	str	r2, [r0, #12]
   10e6e:	bd70      	pop	{r4, r5, r6, pc}

00010e70 <_Bfree>:
   10e70:	b131      	cbz	r1, 10e80 <_Bfree+0x10>
   10e72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   10e74:	684a      	ldr	r2, [r1, #4]
   10e76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10e7a:	6008      	str	r0, [r1, #0]
   10e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   10e80:	4770      	bx	lr

00010e82 <__multadd>:
   10e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e86:	460c      	mov	r4, r1
   10e88:	461e      	mov	r6, r3
   10e8a:	690d      	ldr	r5, [r1, #16]
   10e8c:	4607      	mov	r7, r0
   10e8e:	3114      	adds	r1, #20
   10e90:	2300      	movs	r3, #0
   10e92:	6808      	ldr	r0, [r1, #0]
   10e94:	fa1f fc80 	uxth.w	ip, r0
   10e98:	0c00      	lsrs	r0, r0, #16
   10e9a:	fb02 6c0c 	mla	ip, r2, ip, r6
   10e9e:	4350      	muls	r0, r2
   10ea0:	eb00 401c 	add.w	r0, r0, ip, lsr #16
   10ea4:	3301      	adds	r3, #1
   10ea6:	fa1f fc8c 	uxth.w	ip, ip
   10eaa:	0c06      	lsrs	r6, r0, #16
   10eac:	42ab      	cmp	r3, r5
   10eae:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   10eb2:	f841 0b04 	str.w	r0, [r1], #4
   10eb6:	dbec      	blt.n	10e92 <__multadd+0x10>
   10eb8:	b1d6      	cbz	r6, 10ef0 <__multadd+0x6e>
   10eba:	68a3      	ldr	r3, [r4, #8]
   10ebc:	429d      	cmp	r5, r3
   10ebe:	db12      	blt.n	10ee6 <__multadd+0x64>
   10ec0:	6861      	ldr	r1, [r4, #4]
   10ec2:	4638      	mov	r0, r7
   10ec4:	3101      	adds	r1, #1
   10ec6:	f7ff ffad 	bl	10e24 <_Balloc>
   10eca:	6922      	ldr	r2, [r4, #16]
   10ecc:	3202      	adds	r2, #2
   10ece:	f104 010c 	add.w	r1, r4, #12
   10ed2:	4680      	mov	r8, r0
   10ed4:	0092      	lsls	r2, r2, #2
   10ed6:	300c      	adds	r0, #12
   10ed8:	f7ff ff7f 	bl	10dda <memcpy>
   10edc:	4621      	mov	r1, r4
   10ede:	4638      	mov	r0, r7
   10ee0:	f7ff ffc6 	bl	10e70 <_Bfree>
   10ee4:	4644      	mov	r4, r8
   10ee6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   10eea:	3501      	adds	r5, #1
   10eec:	615e      	str	r6, [r3, #20]
   10eee:	6125      	str	r5, [r4, #16]
   10ef0:	4620      	mov	r0, r4
   10ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010ef6 <__s2b>:
   10ef6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10efa:	4614      	mov	r4, r2
   10efc:	4698      	mov	r8, r3
   10efe:	f103 0208 	add.w	r2, r3, #8
   10f02:	2309      	movs	r3, #9
   10f04:	460d      	mov	r5, r1
   10f06:	fb92 f2f3 	sdiv	r2, r2, r3
   10f0a:	4606      	mov	r6, r0
   10f0c:	2301      	movs	r3, #1
   10f0e:	2100      	movs	r1, #0
   10f10:	429a      	cmp	r2, r3
   10f12:	dd02      	ble.n	10f1a <__s2b+0x24>
   10f14:	005b      	lsls	r3, r3, #1
   10f16:	3101      	adds	r1, #1
   10f18:	e7fa      	b.n	10f10 <__s2b+0x1a>
   10f1a:	4630      	mov	r0, r6
   10f1c:	f7ff ff82 	bl	10e24 <_Balloc>
   10f20:	9b08      	ldr	r3, [sp, #32]
   10f22:	6143      	str	r3, [r0, #20]
   10f24:	2c09      	cmp	r4, #9
   10f26:	f04f 0301 	mov.w	r3, #1
   10f2a:	4601      	mov	r1, r0
   10f2c:	6103      	str	r3, [r0, #16]
   10f2e:	dd11      	ble.n	10f54 <__s2b+0x5e>
   10f30:	f105 0909 	add.w	r9, r5, #9
   10f34:	464f      	mov	r7, r9
   10f36:	4425      	add	r5, r4
   10f38:	f817 3b01 	ldrb.w	r3, [r7], #1
   10f3c:	4630      	mov	r0, r6
   10f3e:	220a      	movs	r2, #10
   10f40:	3b30      	subs	r3, #48	; 0x30
   10f42:	f7ff ff9e 	bl	10e82 <__multadd>
   10f46:	42af      	cmp	r7, r5
   10f48:	4601      	mov	r1, r0
   10f4a:	d1f5      	bne.n	10f38 <__s2b+0x42>
   10f4c:	eb09 0704 	add.w	r7, r9, r4
   10f50:	3f08      	subs	r7, #8
   10f52:	e002      	b.n	10f5a <__s2b+0x64>
   10f54:	f105 070a 	add.w	r7, r5, #10
   10f58:	2409      	movs	r4, #9
   10f5a:	4625      	mov	r5, r4
   10f5c:	4545      	cmp	r5, r8
   10f5e:	da09      	bge.n	10f74 <__s2b+0x7e>
   10f60:	1b3b      	subs	r3, r7, r4
   10f62:	4630      	mov	r0, r6
   10f64:	5d5b      	ldrb	r3, [r3, r5]
   10f66:	220a      	movs	r2, #10
   10f68:	3b30      	subs	r3, #48	; 0x30
   10f6a:	f7ff ff8a 	bl	10e82 <__multadd>
   10f6e:	3501      	adds	r5, #1
   10f70:	4601      	mov	r1, r0
   10f72:	e7f3      	b.n	10f5c <__s2b+0x66>
   10f74:	4608      	mov	r0, r1
   10f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010f7a <__hi0bits>:
   10f7a:	0c03      	lsrs	r3, r0, #16
   10f7c:	041b      	lsls	r3, r3, #16
   10f7e:	b913      	cbnz	r3, 10f86 <__hi0bits+0xc>
   10f80:	0400      	lsls	r0, r0, #16
   10f82:	2310      	movs	r3, #16
   10f84:	e000      	b.n	10f88 <__hi0bits+0xe>
   10f86:	2300      	movs	r3, #0
   10f88:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   10f8c:	bf04      	itt	eq
   10f8e:	0200      	lsleq	r0, r0, #8
   10f90:	3308      	addeq	r3, #8
   10f92:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   10f96:	bf04      	itt	eq
   10f98:	0100      	lsleq	r0, r0, #4
   10f9a:	3304      	addeq	r3, #4
   10f9c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   10fa0:	bf04      	itt	eq
   10fa2:	0080      	lsleq	r0, r0, #2
   10fa4:	3302      	addeq	r3, #2
   10fa6:	2800      	cmp	r0, #0
   10fa8:	db03      	blt.n	10fb2 <__hi0bits+0x38>
   10faa:	0042      	lsls	r2, r0, #1
   10fac:	d503      	bpl.n	10fb6 <__hi0bits+0x3c>
   10fae:	1c58      	adds	r0, r3, #1
   10fb0:	4770      	bx	lr
   10fb2:	4618      	mov	r0, r3
   10fb4:	4770      	bx	lr
   10fb6:	2020      	movs	r0, #32
   10fb8:	4770      	bx	lr

00010fba <__lo0bits>:
   10fba:	6803      	ldr	r3, [r0, #0]
   10fbc:	f013 0207 	ands.w	r2, r3, #7
   10fc0:	d00b      	beq.n	10fda <__lo0bits+0x20>
   10fc2:	07d9      	lsls	r1, r3, #31
   10fc4:	d422      	bmi.n	1100c <__lo0bits+0x52>
   10fc6:	079a      	lsls	r2, r3, #30
   10fc8:	d503      	bpl.n	10fd2 <__lo0bits+0x18>
   10fca:	085b      	lsrs	r3, r3, #1
   10fcc:	6003      	str	r3, [r0, #0]
   10fce:	2001      	movs	r0, #1
   10fd0:	4770      	bx	lr
   10fd2:	089b      	lsrs	r3, r3, #2
   10fd4:	6003      	str	r3, [r0, #0]
   10fd6:	2002      	movs	r0, #2
   10fd8:	4770      	bx	lr
   10fda:	b299      	uxth	r1, r3
   10fdc:	b909      	cbnz	r1, 10fe2 <__lo0bits+0x28>
   10fde:	0c1b      	lsrs	r3, r3, #16
   10fe0:	2210      	movs	r2, #16
   10fe2:	f013 0fff 	tst.w	r3, #255	; 0xff
   10fe6:	bf04      	itt	eq
   10fe8:	0a1b      	lsreq	r3, r3, #8
   10fea:	3208      	addeq	r2, #8
   10fec:	0719      	lsls	r1, r3, #28
   10fee:	bf04      	itt	eq
   10ff0:	091b      	lsreq	r3, r3, #4
   10ff2:	3204      	addeq	r2, #4
   10ff4:	0799      	lsls	r1, r3, #30
   10ff6:	bf04      	itt	eq
   10ff8:	089b      	lsreq	r3, r3, #2
   10ffa:	3202      	addeq	r2, #2
   10ffc:	07d9      	lsls	r1, r3, #31
   10ffe:	d402      	bmi.n	11006 <__lo0bits+0x4c>
   11000:	085b      	lsrs	r3, r3, #1
   11002:	d005      	beq.n	11010 <__lo0bits+0x56>
   11004:	3201      	adds	r2, #1
   11006:	6003      	str	r3, [r0, #0]
   11008:	4610      	mov	r0, r2
   1100a:	4770      	bx	lr
   1100c:	2000      	movs	r0, #0
   1100e:	4770      	bx	lr
   11010:	2020      	movs	r0, #32
   11012:	4770      	bx	lr

00011014 <__i2b>:
   11014:	b510      	push	{r4, lr}
   11016:	460c      	mov	r4, r1
   11018:	2101      	movs	r1, #1
   1101a:	f7ff ff03 	bl	10e24 <_Balloc>
   1101e:	2201      	movs	r2, #1
   11020:	6144      	str	r4, [r0, #20]
   11022:	6102      	str	r2, [r0, #16]
   11024:	bd10      	pop	{r4, pc}

00011026 <__multiply>:
   11026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1102a:	4616      	mov	r6, r2
   1102c:	690a      	ldr	r2, [r1, #16]
   1102e:	6933      	ldr	r3, [r6, #16]
   11030:	429a      	cmp	r2, r3
   11032:	b085      	sub	sp, #20
   11034:	460d      	mov	r5, r1
   11036:	da01      	bge.n	1103c <__multiply+0x16>
   11038:	4635      	mov	r5, r6
   1103a:	460e      	mov	r6, r1
   1103c:	f8d5 8010 	ldr.w	r8, [r5, #16]
   11040:	6937      	ldr	r7, [r6, #16]
   11042:	68ab      	ldr	r3, [r5, #8]
   11044:	6869      	ldr	r1, [r5, #4]
   11046:	eb08 0407 	add.w	r4, r8, r7
   1104a:	429c      	cmp	r4, r3
   1104c:	bfc8      	it	gt
   1104e:	3101      	addgt	r1, #1
   11050:	f7ff fee8 	bl	10e24 <_Balloc>
   11054:	f100 0314 	add.w	r3, r0, #20
   11058:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   1105c:	9101      	str	r1, [sp, #4]
   1105e:	461a      	mov	r2, r3
   11060:	f8dd a004 	ldr.w	sl, [sp, #4]
   11064:	4552      	cmp	r2, sl
   11066:	d203      	bcs.n	11070 <__multiply+0x4a>
   11068:	2100      	movs	r1, #0
   1106a:	f842 1b04 	str.w	r1, [r2], #4
   1106e:	e7f7      	b.n	11060 <__multiply+0x3a>
   11070:	f105 0114 	add.w	r1, r5, #20
   11074:	f106 0214 	add.w	r2, r6, #20
   11078:	eb01 0888 	add.w	r8, r1, r8, lsl #2
   1107c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   11080:	f8cd 8008 	str.w	r8, [sp, #8]
   11084:	9703      	str	r7, [sp, #12]
   11086:	9e03      	ldr	r6, [sp, #12]
   11088:	42b2      	cmp	r2, r6
   1108a:	4615      	mov	r5, r2
   1108c:	d256      	bcs.n	1113c <__multiply+0x116>
   1108e:	f8b5 c000 	ldrh.w	ip, [r5]
   11092:	3204      	adds	r2, #4
   11094:	f1bc 0f00 	cmp.w	ip, #0
   11098:	d025      	beq.n	110e6 <__multiply+0xc0>
   1109a:	460f      	mov	r7, r1
   1109c:	461d      	mov	r5, r3
   1109e:	2600      	movs	r6, #0
   110a0:	f857 9b04 	ldr.w	r9, [r7], #4
   110a4:	f8d5 8000 	ldr.w	r8, [r5]
   110a8:	fa1f fb89 	uxth.w	fp, r9
   110ac:	fa1f fa88 	uxth.w	sl, r8
   110b0:	fb0c aa0b 	mla	sl, ip, fp, sl
   110b4:	ea4f 4919 	mov.w	r9, r9, lsr #16
   110b8:	ea4f 4818 	mov.w	r8, r8, lsr #16
   110bc:	44b2      	add	sl, r6
   110be:	fb0c 8809 	mla	r8, ip, r9, r8
   110c2:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   110c6:	fa1f fa8a 	uxth.w	sl, sl
   110ca:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
   110ce:	ea4f 4618 	mov.w	r6, r8, lsr #16
   110d2:	f8dd 8008 	ldr.w	r8, [sp, #8]
   110d6:	46ab      	mov	fp, r5
   110d8:	45b8      	cmp	r8, r7
   110da:	f84b ab04 	str.w	sl, [fp], #4
   110de:	d901      	bls.n	110e4 <__multiply+0xbe>
   110e0:	465d      	mov	r5, fp
   110e2:	e7dd      	b.n	110a0 <__multiply+0x7a>
   110e4:	606e      	str	r6, [r5, #4]
   110e6:	f832 8c02 	ldrh.w	r8, [r2, #-2]
   110ea:	f1b8 0f00 	cmp.w	r8, #0
   110ee:	d023      	beq.n	11138 <__multiply+0x112>
   110f0:	681e      	ldr	r6, [r3, #0]
   110f2:	460f      	mov	r7, r1
   110f4:	461d      	mov	r5, r3
   110f6:	f04f 0900 	mov.w	r9, #0
   110fa:	f8b7 a000 	ldrh.w	sl, [r7]
   110fe:	f8b5 c002 	ldrh.w	ip, [r5, #2]
   11102:	fb08 cc0a 	mla	ip, r8, sl, ip
   11106:	44e1      	add	r9, ip
   11108:	b2b6      	uxth	r6, r6
   1110a:	46ac      	mov	ip, r5
   1110c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   11110:	f84c 6b04 	str.w	r6, [ip], #4
   11114:	f857 6b04 	ldr.w	r6, [r7], #4
   11118:	f8b5 a004 	ldrh.w	sl, [r5, #4]
   1111c:	0c36      	lsrs	r6, r6, #16
   1111e:	fb08 a606 	mla	r6, r8, r6, sl
   11122:	f8dd a008 	ldr.w	sl, [sp, #8]
   11126:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   1112a:	4557      	cmp	r7, sl
   1112c:	ea4f 4916 	mov.w	r9, r6, lsr #16
   11130:	d201      	bcs.n	11136 <__multiply+0x110>
   11132:	4665      	mov	r5, ip
   11134:	e7e1      	b.n	110fa <__multiply+0xd4>
   11136:	606e      	str	r6, [r5, #4]
   11138:	3304      	adds	r3, #4
   1113a:	e7a4      	b.n	11086 <__multiply+0x60>
   1113c:	9b01      	ldr	r3, [sp, #4]
   1113e:	2c00      	cmp	r4, #0
   11140:	dc03      	bgt.n	1114a <__multiply+0x124>
   11142:	6104      	str	r4, [r0, #16]
   11144:	b005      	add	sp, #20
   11146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1114a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1114e:	2a00      	cmp	r2, #0
   11150:	d1f7      	bne.n	11142 <__multiply+0x11c>
   11152:	3c01      	subs	r4, #1
   11154:	e7f3      	b.n	1113e <__multiply+0x118>

00011156 <__pow5mult>:
   11156:	f012 0303 	ands.w	r3, r2, #3
   1115a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1115e:	4605      	mov	r5, r0
   11160:	460e      	mov	r6, r1
   11162:	4617      	mov	r7, r2
   11164:	d007      	beq.n	11176 <__pow5mult+0x20>
   11166:	3b01      	subs	r3, #1
   11168:	4a19      	ldr	r2, [pc, #100]	; (111d0 <__pow5mult+0x7a>)
   1116a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1116e:	2300      	movs	r3, #0
   11170:	f7ff fe87 	bl	10e82 <__multadd>
   11174:	4606      	mov	r6, r0
   11176:	10bf      	asrs	r7, r7, #2
   11178:	d027      	beq.n	111ca <__pow5mult+0x74>
   1117a:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1117c:	b974      	cbnz	r4, 1119c <__pow5mult+0x46>
   1117e:	4628      	mov	r0, r5
   11180:	f240 2171 	movw	r1, #625	; 0x271
   11184:	f7ff ff46 	bl	11014 <__i2b>
   11188:	2300      	movs	r3, #0
   1118a:	64a8      	str	r0, [r5, #72]	; 0x48
   1118c:	4604      	mov	r4, r0
   1118e:	6003      	str	r3, [r0, #0]
   11190:	e004      	b.n	1119c <__pow5mult+0x46>
   11192:	107f      	asrs	r7, r7, #1
   11194:	d019      	beq.n	111ca <__pow5mult+0x74>
   11196:	6820      	ldr	r0, [r4, #0]
   11198:	b170      	cbz	r0, 111b8 <__pow5mult+0x62>
   1119a:	4604      	mov	r4, r0
   1119c:	07fb      	lsls	r3, r7, #31
   1119e:	d5f8      	bpl.n	11192 <__pow5mult+0x3c>
   111a0:	4631      	mov	r1, r6
   111a2:	4622      	mov	r2, r4
   111a4:	4628      	mov	r0, r5
   111a6:	f7ff ff3e 	bl	11026 <__multiply>
   111aa:	4631      	mov	r1, r6
   111ac:	4680      	mov	r8, r0
   111ae:	4628      	mov	r0, r5
   111b0:	f7ff fe5e 	bl	10e70 <_Bfree>
   111b4:	4646      	mov	r6, r8
   111b6:	e7ec      	b.n	11192 <__pow5mult+0x3c>
   111b8:	4628      	mov	r0, r5
   111ba:	4621      	mov	r1, r4
   111bc:	4622      	mov	r2, r4
   111be:	f7ff ff32 	bl	11026 <__multiply>
   111c2:	2300      	movs	r3, #0
   111c4:	6020      	str	r0, [r4, #0]
   111c6:	6003      	str	r3, [r0, #0]
   111c8:	e7e7      	b.n	1119a <__pow5mult+0x44>
   111ca:	4630      	mov	r0, r6
   111cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111d0:	00013040 	.word	0x00013040

000111d4 <__lshift>:
   111d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   111d8:	460c      	mov	r4, r1
   111da:	ea4f 1a62 	mov.w	sl, r2, asr #5
   111de:	6923      	ldr	r3, [r4, #16]
   111e0:	6849      	ldr	r1, [r1, #4]
   111e2:	eb0a 0903 	add.w	r9, sl, r3
   111e6:	68a3      	ldr	r3, [r4, #8]
   111e8:	4680      	mov	r8, r0
   111ea:	4615      	mov	r5, r2
   111ec:	f109 0701 	add.w	r7, r9, #1
   111f0:	429f      	cmp	r7, r3
   111f2:	dd02      	ble.n	111fa <__lshift+0x26>
   111f4:	3101      	adds	r1, #1
   111f6:	005b      	lsls	r3, r3, #1
   111f8:	e7fa      	b.n	111f0 <__lshift+0x1c>
   111fa:	4640      	mov	r0, r8
   111fc:	f7ff fe12 	bl	10e24 <_Balloc>
   11200:	2300      	movs	r3, #0
   11202:	4606      	mov	r6, r0
   11204:	f100 0214 	add.w	r2, r0, #20
   11208:	4553      	cmp	r3, sl
   1120a:	da04      	bge.n	11216 <__lshift+0x42>
   1120c:	2100      	movs	r1, #0
   1120e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   11212:	3301      	adds	r3, #1
   11214:	e7f8      	b.n	11208 <__lshift+0x34>
   11216:	6920      	ldr	r0, [r4, #16]
   11218:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
   1121c:	f104 0314 	add.w	r3, r4, #20
   11220:	f015 0c1f 	ands.w	ip, r5, #31
   11224:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   11228:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   1122c:	d016      	beq.n	1125c <__lshift+0x88>
   1122e:	f1cc 0a20 	rsb	sl, ip, #32
   11232:	2500      	movs	r5, #0
   11234:	6818      	ldr	r0, [r3, #0]
   11236:	460a      	mov	r2, r1
   11238:	fa00 f00c 	lsl.w	r0, r0, ip
   1123c:	4305      	orrs	r5, r0
   1123e:	f842 5b04 	str.w	r5, [r2], #4
   11242:	f853 5b04 	ldr.w	r5, [r3], #4
   11246:	4573      	cmp	r3, lr
   11248:	fa25 f50a 	lsr.w	r5, r5, sl
   1124c:	d201      	bcs.n	11252 <__lshift+0x7e>
   1124e:	4611      	mov	r1, r2
   11250:	e7f0      	b.n	11234 <__lshift+0x60>
   11252:	604d      	str	r5, [r1, #4]
   11254:	b145      	cbz	r5, 11268 <__lshift+0x94>
   11256:	f109 0702 	add.w	r7, r9, #2
   1125a:	e005      	b.n	11268 <__lshift+0x94>
   1125c:	f853 2b04 	ldr.w	r2, [r3], #4
   11260:	f841 2b04 	str.w	r2, [r1], #4
   11264:	4573      	cmp	r3, lr
   11266:	d3f9      	bcc.n	1125c <__lshift+0x88>
   11268:	3f01      	subs	r7, #1
   1126a:	4640      	mov	r0, r8
   1126c:	6137      	str	r7, [r6, #16]
   1126e:	4621      	mov	r1, r4
   11270:	f7ff fdfe 	bl	10e70 <_Bfree>
   11274:	4630      	mov	r0, r6
   11276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001127a <__mcmp>:
   1127a:	6902      	ldr	r2, [r0, #16]
   1127c:	690b      	ldr	r3, [r1, #16]
   1127e:	1ad2      	subs	r2, r2, r3
   11280:	b510      	push	{r4, lr}
   11282:	d113      	bne.n	112ac <__mcmp+0x32>
   11284:	009c      	lsls	r4, r3, #2
   11286:	3014      	adds	r0, #20
   11288:	f101 0214 	add.w	r2, r1, #20
   1128c:	1903      	adds	r3, r0, r4
   1128e:	4422      	add	r2, r4
   11290:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   11294:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   11298:	428c      	cmp	r4, r1
   1129a:	d003      	beq.n	112a4 <__mcmp+0x2a>
   1129c:	d208      	bcs.n	112b0 <__mcmp+0x36>
   1129e:	f04f 30ff 	mov.w	r0, #4294967295
   112a2:	bd10      	pop	{r4, pc}
   112a4:	4298      	cmp	r0, r3
   112a6:	d3f3      	bcc.n	11290 <__mcmp+0x16>
   112a8:	2000      	movs	r0, #0
   112aa:	bd10      	pop	{r4, pc}
   112ac:	4610      	mov	r0, r2
   112ae:	bd10      	pop	{r4, pc}
   112b0:	2001      	movs	r0, #1
   112b2:	bd10      	pop	{r4, pc}

000112b4 <__mdiff>:
   112b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   112b8:	4606      	mov	r6, r0
   112ba:	460c      	mov	r4, r1
   112bc:	4608      	mov	r0, r1
   112be:	4611      	mov	r1, r2
   112c0:	4615      	mov	r5, r2
   112c2:	f7ff ffda 	bl	1127a <__mcmp>
   112c6:	1e07      	subs	r7, r0, #0
   112c8:	d108      	bne.n	112dc <__mdiff+0x28>
   112ca:	4630      	mov	r0, r6
   112cc:	4639      	mov	r1, r7
   112ce:	f7ff fda9 	bl	10e24 <_Balloc>
   112d2:	2301      	movs	r3, #1
   112d4:	6103      	str	r3, [r0, #16]
   112d6:	6147      	str	r7, [r0, #20]
   112d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112dc:	db01      	blt.n	112e2 <__mdiff+0x2e>
   112de:	2700      	movs	r7, #0
   112e0:	e003      	b.n	112ea <__mdiff+0x36>
   112e2:	4623      	mov	r3, r4
   112e4:	2701      	movs	r7, #1
   112e6:	462c      	mov	r4, r5
   112e8:	461d      	mov	r5, r3
   112ea:	6861      	ldr	r1, [r4, #4]
   112ec:	4630      	mov	r0, r6
   112ee:	f7ff fd99 	bl	10e24 <_Balloc>
   112f2:	6922      	ldr	r2, [r4, #16]
   112f4:	692b      	ldr	r3, [r5, #16]
   112f6:	60c7      	str	r7, [r0, #12]
   112f8:	3414      	adds	r4, #20
   112fa:	f105 0614 	add.w	r6, r5, #20
   112fe:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
   11302:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
   11306:	f100 0314 	add.w	r3, r0, #20
   1130a:	2100      	movs	r1, #0
   1130c:	f854 7b04 	ldr.w	r7, [r4], #4
   11310:	f856 9b04 	ldr.w	r9, [r6], #4
   11314:	fa11 f187 	uxtah	r1, r1, r7
   11318:	fa1f f589 	uxth.w	r5, r9
   1131c:	ea4f 4919 	mov.w	r9, r9, lsr #16
   11320:	ebc5 0801 	rsb	r8, r5, r1
   11324:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
   11328:	eb07 4728 	add.w	r7, r7, r8, asr #16
   1132c:	fa1f f888 	uxth.w	r8, r8
   11330:	1439      	asrs	r1, r7, #16
   11332:	45b2      	cmp	sl, r6
   11334:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   11338:	4625      	mov	r5, r4
   1133a:	f843 7b04 	str.w	r7, [r3], #4
   1133e:	d8e5      	bhi.n	1130c <__mdiff+0x58>
   11340:	4565      	cmp	r5, ip
   11342:	d20d      	bcs.n	11360 <__mdiff+0xac>
   11344:	f855 4b04 	ldr.w	r4, [r5], #4
   11348:	fa11 f684 	uxtah	r6, r1, r4
   1134c:	0c24      	lsrs	r4, r4, #16
   1134e:	eb04 4426 	add.w	r4, r4, r6, asr #16
   11352:	b2b6      	uxth	r6, r6
   11354:	1421      	asrs	r1, r4, #16
   11356:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   1135a:	f843 4b04 	str.w	r4, [r3], #4
   1135e:	e7ef      	b.n	11340 <__mdiff+0x8c>
   11360:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11364:	b909      	cbnz	r1, 1136a <__mdiff+0xb6>
   11366:	3a01      	subs	r2, #1
   11368:	e7fa      	b.n	11360 <__mdiff+0xac>
   1136a:	6102      	str	r2, [r0, #16]
   1136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011370 <__ulp>:
   11370:	4b0f      	ldr	r3, [pc, #60]	; (113b0 <__ulp+0x40>)
   11372:	400b      	ands	r3, r1
   11374:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   11378:	2b00      	cmp	r3, #0
   1137a:	dd01      	ble.n	11380 <__ulp+0x10>
   1137c:	4619      	mov	r1, r3
   1137e:	e009      	b.n	11394 <__ulp+0x24>
   11380:	425b      	negs	r3, r3
   11382:	151b      	asrs	r3, r3, #20
   11384:	2b13      	cmp	r3, #19
   11386:	f04f 0100 	mov.w	r1, #0
   1138a:	dc05      	bgt.n	11398 <__ulp+0x28>
   1138c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   11390:	fa42 f103 	asr.w	r1, r2, r3
   11394:	2000      	movs	r0, #0
   11396:	4770      	bx	lr
   11398:	2b32      	cmp	r3, #50	; 0x32
   1139a:	f04f 0201 	mov.w	r2, #1
   1139e:	bfda      	itte	le
   113a0:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   113a4:	fa02 f303 	lslle.w	r3, r2, r3
   113a8:	4613      	movgt	r3, r2
   113aa:	4618      	mov	r0, r3
   113ac:	4770      	bx	lr
   113ae:	bf00      	nop
   113b0:	7ff00000 	.word	0x7ff00000

000113b4 <__b2d>:
   113b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113b8:	6906      	ldr	r6, [r0, #16]
   113ba:	f100 0714 	add.w	r7, r0, #20
   113be:	eb07 0686 	add.w	r6, r7, r6, lsl #2
   113c2:	4688      	mov	r8, r1
   113c4:	f856 4c04 	ldr.w	r4, [r6, #-4]
   113c8:	4620      	mov	r0, r4
   113ca:	f7ff fdd6 	bl	10f7a <__hi0bits>
   113ce:	f1c0 0320 	rsb	r3, r0, #32
   113d2:	280a      	cmp	r0, #10
   113d4:	f1a6 0504 	sub.w	r5, r6, #4
   113d8:	f8c8 3000 	str.w	r3, [r8]
   113dc:	dc14      	bgt.n	11408 <__b2d+0x54>
   113de:	42bd      	cmp	r5, r7
   113e0:	f1c0 010b 	rsb	r1, r0, #11
   113e4:	bf88      	it	hi
   113e6:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   113ea:	fa24 fc01 	lsr.w	ip, r4, r1
   113ee:	bf98      	it	ls
   113f0:	2500      	movls	r5, #0
   113f2:	3015      	adds	r0, #21
   113f4:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   113f8:	fa25 f101 	lsr.w	r1, r5, r1
   113fc:	4084      	lsls	r4, r0
   113fe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   11402:	ea41 0204 	orr.w	r2, r1, r4
   11406:	e024      	b.n	11452 <__b2d+0x9e>
   11408:	42bd      	cmp	r5, r7
   1140a:	bf86      	itte	hi
   1140c:	f1a6 0508 	subhi.w	r5, r6, #8
   11410:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
   11414:	2100      	movls	r1, #0
   11416:	f1b0 060b 	subs.w	r6, r0, #11
   1141a:	d015      	beq.n	11448 <__b2d+0x94>
   1141c:	40b4      	lsls	r4, r6
   1141e:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
   11422:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   11426:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   1142a:	fa21 fc00 	lsr.w	ip, r1, r0
   1142e:	42bd      	cmp	r5, r7
   11430:	ea44 030c 	orr.w	r3, r4, ip
   11434:	bf8c      	ite	hi
   11436:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   1143a:	2400      	movls	r4, #0
   1143c:	fa24 f000 	lsr.w	r0, r4, r0
   11440:	40b1      	lsls	r1, r6
   11442:	ea40 0201 	orr.w	r2, r0, r1
   11446:	e004      	b.n	11452 <__b2d+0x9e>
   11448:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   1144c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   11450:	460a      	mov	r2, r1
   11452:	4610      	mov	r0, r2
   11454:	4619      	mov	r1, r3
   11456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001145a <__d2b>:
   1145a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1145e:	2101      	movs	r1, #1
   11460:	461d      	mov	r5, r3
   11462:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   11466:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1146a:	4614      	mov	r4, r2
   1146c:	f7ff fcda 	bl	10e24 <_Balloc>
   11470:	f3c5 570a 	ubfx	r7, r5, #20, #11
   11474:	4606      	mov	r6, r0
   11476:	f3c5 0313 	ubfx	r3, r5, #0, #20
   1147a:	b10f      	cbz	r7, 11480 <__d2b+0x26>
   1147c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11480:	9301      	str	r3, [sp, #4]
   11482:	b1d4      	cbz	r4, 114ba <__d2b+0x60>
   11484:	a802      	add	r0, sp, #8
   11486:	f840 4d08 	str.w	r4, [r0, #-8]!
   1148a:	4668      	mov	r0, sp
   1148c:	f7ff fd95 	bl	10fba <__lo0bits>
   11490:	9b00      	ldr	r3, [sp, #0]
   11492:	b148      	cbz	r0, 114a8 <__d2b+0x4e>
   11494:	9a01      	ldr	r2, [sp, #4]
   11496:	f1c0 0120 	rsb	r1, r0, #32
   1149a:	fa02 f101 	lsl.w	r1, r2, r1
   1149e:	430b      	orrs	r3, r1
   114a0:	40c2      	lsrs	r2, r0
   114a2:	6173      	str	r3, [r6, #20]
   114a4:	9201      	str	r2, [sp, #4]
   114a6:	e000      	b.n	114aa <__d2b+0x50>
   114a8:	6173      	str	r3, [r6, #20]
   114aa:	9b01      	ldr	r3, [sp, #4]
   114ac:	61b3      	str	r3, [r6, #24]
   114ae:	2b00      	cmp	r3, #0
   114b0:	bf0c      	ite	eq
   114b2:	2401      	moveq	r4, #1
   114b4:	2402      	movne	r4, #2
   114b6:	6134      	str	r4, [r6, #16]
   114b8:	e007      	b.n	114ca <__d2b+0x70>
   114ba:	a801      	add	r0, sp, #4
   114bc:	f7ff fd7d 	bl	10fba <__lo0bits>
   114c0:	2401      	movs	r4, #1
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	6173      	str	r3, [r6, #20]
   114c6:	6134      	str	r4, [r6, #16]
   114c8:	3020      	adds	r0, #32
   114ca:	b13f      	cbz	r7, 114dc <__d2b+0x82>
   114cc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   114d0:	4407      	add	r7, r0
   114d2:	f8c9 7000 	str.w	r7, [r9]
   114d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   114da:	e00a      	b.n	114f2 <__d2b+0x98>
   114dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   114e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   114e4:	f8c9 0000 	str.w	r0, [r9]
   114e8:	6918      	ldr	r0, [r3, #16]
   114ea:	f7ff fd46 	bl	10f7a <__hi0bits>
   114ee:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   114f2:	f8c8 0000 	str.w	r0, [r8]
   114f6:	4630      	mov	r0, r6
   114f8:	b003      	add	sp, #12
   114fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000114fe <__ratio>:
   114fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11502:	460e      	mov	r6, r1
   11504:	4669      	mov	r1, sp
   11506:	4680      	mov	r8, r0
   11508:	f7ff ff54 	bl	113b4 <__b2d>
   1150c:	460d      	mov	r5, r1
   1150e:	4604      	mov	r4, r0
   11510:	a901      	add	r1, sp, #4
   11512:	4630      	mov	r0, r6
   11514:	f7ff ff4e 	bl	113b4 <__b2d>
   11518:	9f00      	ldr	r7, [sp, #0]
   1151a:	460b      	mov	r3, r1
   1151c:	9901      	ldr	r1, [sp, #4]
   1151e:	4602      	mov	r2, r0
   11520:	1a7f      	subs	r7, r7, r1
   11522:	f8d8 0010 	ldr.w	r0, [r8, #16]
   11526:	6931      	ldr	r1, [r6, #16]
   11528:	1a41      	subs	r1, r0, r1
   1152a:	eb07 1141 	add.w	r1, r7, r1, lsl #5
   1152e:	2900      	cmp	r1, #0
   11530:	bfcc      	ite	gt
   11532:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   11536:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
   1153a:	4620      	mov	r0, r4
   1153c:	4629      	mov	r1, r5
   1153e:	f7fb fc33 	bl	cda8 <__aeabi_ddiv>
   11542:	b002      	add	sp, #8
   11544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011548 <_mprec_log10>:
   11548:	2817      	cmp	r0, #23
   1154a:	b510      	push	{r4, lr}
   1154c:	4604      	mov	r4, r0
   1154e:	dc05      	bgt.n	1155c <_mprec_log10+0x14>
   11550:	4b07      	ldr	r3, [pc, #28]	; (11570 <_mprec_log10+0x28>)
   11552:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   11556:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1155a:	bd10      	pop	{r4, pc}
   1155c:	4905      	ldr	r1, [pc, #20]	; (11574 <_mprec_log10+0x2c>)
   1155e:	2000      	movs	r0, #0
   11560:	2200      	movs	r2, #0
   11562:	4b05      	ldr	r3, [pc, #20]	; (11578 <_mprec_log10+0x30>)
   11564:	f7fb faf6 	bl	cb54 <__aeabi_dmul>
   11568:	3c01      	subs	r4, #1
   1156a:	d1f9      	bne.n	11560 <_mprec_log10+0x18>
   1156c:	bd10      	pop	{r4, pc}
   1156e:	bf00      	nop
   11570:	00013040 	.word	0x00013040
   11574:	3ff00000 	.word	0x3ff00000
   11578:	40240000 	.word	0x40240000

0001157c <__copybits>:
   1157c:	b510      	push	{r4, lr}
   1157e:	3901      	subs	r1, #1
   11580:	f102 0314 	add.w	r3, r2, #20
   11584:	1149      	asrs	r1, r1, #5
   11586:	6912      	ldr	r2, [r2, #16]
   11588:	3101      	adds	r1, #1
   1158a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1158e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   11592:	4293      	cmp	r3, r2
   11594:	d204      	bcs.n	115a0 <__copybits+0x24>
   11596:	f853 4b04 	ldr.w	r4, [r3], #4
   1159a:	f840 4b04 	str.w	r4, [r0], #4
   1159e:	e7f8      	b.n	11592 <__copybits+0x16>
   115a0:	4288      	cmp	r0, r1
   115a2:	d203      	bcs.n	115ac <__copybits+0x30>
   115a4:	2300      	movs	r3, #0
   115a6:	f840 3b04 	str.w	r3, [r0], #4
   115aa:	e7f9      	b.n	115a0 <__copybits+0x24>
   115ac:	bd10      	pop	{r4, pc}

000115ae <__any_on>:
   115ae:	f100 0214 	add.w	r2, r0, #20
   115b2:	6900      	ldr	r0, [r0, #16]
   115b4:	114b      	asrs	r3, r1, #5
   115b6:	4283      	cmp	r3, r0
   115b8:	b510      	push	{r4, lr}
   115ba:	dc0c      	bgt.n	115d6 <__any_on+0x28>
   115bc:	da0c      	bge.n	115d8 <__any_on+0x2a>
   115be:	f011 011f 	ands.w	r1, r1, #31
   115c2:	d009      	beq.n	115d8 <__any_on+0x2a>
   115c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   115c8:	fa20 f401 	lsr.w	r4, r0, r1
   115cc:	fa04 f101 	lsl.w	r1, r4, r1
   115d0:	4281      	cmp	r1, r0
   115d2:	d10e      	bne.n	115f2 <__any_on+0x44>
   115d4:	e000      	b.n	115d8 <__any_on+0x2a>
   115d6:	4603      	mov	r3, r0
   115d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   115dc:	4293      	cmp	r3, r2
   115de:	4619      	mov	r1, r3
   115e0:	d905      	bls.n	115ee <__any_on+0x40>
   115e2:	f851 1c04 	ldr.w	r1, [r1, #-4]
   115e6:	3b04      	subs	r3, #4
   115e8:	2900      	cmp	r1, #0
   115ea:	d0f7      	beq.n	115dc <__any_on+0x2e>
   115ec:	e001      	b.n	115f2 <__any_on+0x44>
   115ee:	2000      	movs	r0, #0
   115f0:	bd10      	pop	{r4, pc}
   115f2:	2001      	movs	r0, #1
   115f4:	bd10      	pop	{r4, pc}
   115f6:	bf00      	nop

000115f8 <_realloc_r>:
   115f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115fc:	4681      	mov	r9, r0
   115fe:	460c      	mov	r4, r1
   11600:	b929      	cbnz	r1, 1160e <_realloc_r+0x16>
   11602:	4611      	mov	r1, r2
   11604:	b003      	add	sp, #12
   11606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1160a:	f7fc b8ab 	b.w	d764 <_malloc_r>
   1160e:	9201      	str	r2, [sp, #4]
   11610:	f7fc faba 	bl	db88 <__malloc_lock>
   11614:	9a01      	ldr	r2, [sp, #4]
   11616:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1161a:	f102 070b 	add.w	r7, r2, #11
   1161e:	2f16      	cmp	r7, #22
   11620:	f1a4 0808 	sub.w	r8, r4, #8
   11624:	f025 0603 	bic.w	r6, r5, #3
   11628:	d903      	bls.n	11632 <_realloc_r+0x3a>
   1162a:	f037 0707 	bics.w	r7, r7, #7
   1162e:	d501      	bpl.n	11634 <_realloc_r+0x3c>
   11630:	e002      	b.n	11638 <_realloc_r+0x40>
   11632:	2710      	movs	r7, #16
   11634:	4297      	cmp	r7, r2
   11636:	d204      	bcs.n	11642 <_realloc_r+0x4a>
   11638:	230c      	movs	r3, #12
   1163a:	f8c9 3000 	str.w	r3, [r9]
   1163e:	2000      	movs	r0, #0
   11640:	e17e      	b.n	11940 <_realloc_r+0x348>
   11642:	42be      	cmp	r6, r7
   11644:	f280 8154 	bge.w	118f0 <_realloc_r+0x2f8>
   11648:	49a2      	ldr	r1, [pc, #648]	; (118d4 <_realloc_r+0x2dc>)
   1164a:	f8d1 e008 	ldr.w	lr, [r1, #8]
   1164e:	eb08 0306 	add.w	r3, r8, r6
   11652:	4573      	cmp	r3, lr
   11654:	468b      	mov	fp, r1
   11656:	6858      	ldr	r0, [r3, #4]
   11658:	d005      	beq.n	11666 <_realloc_r+0x6e>
   1165a:	f020 0101 	bic.w	r1, r0, #1
   1165e:	4419      	add	r1, r3
   11660:	6849      	ldr	r1, [r1, #4]
   11662:	07c9      	lsls	r1, r1, #31
   11664:	d425      	bmi.n	116b2 <_realloc_r+0xba>
   11666:	f020 0003 	bic.w	r0, r0, #3
   1166a:	4573      	cmp	r3, lr
   1166c:	eb00 0106 	add.w	r1, r0, r6
   11670:	d117      	bne.n	116a2 <_realloc_r+0xaa>
   11672:	f107 0c10 	add.w	ip, r7, #16
   11676:	4561      	cmp	r1, ip
   11678:	db1d      	blt.n	116b6 <_realloc_r+0xbe>
   1167a:	eb08 0507 	add.w	r5, r8, r7
   1167e:	1bc9      	subs	r1, r1, r7
   11680:	f041 0101 	orr.w	r1, r1, #1
   11684:	f8cb 5008 	str.w	r5, [fp, #8]
   11688:	6069      	str	r1, [r5, #4]
   1168a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1168e:	f003 0301 	and.w	r3, r3, #1
   11692:	431f      	orrs	r7, r3
   11694:	4648      	mov	r0, r9
   11696:	f844 7c04 	str.w	r7, [r4, #-4]
   1169a:	f7fc fa76 	bl	db8a <__malloc_unlock>
   1169e:	4620      	mov	r0, r4
   116a0:	e14e      	b.n	11940 <_realloc_r+0x348>
   116a2:	42b9      	cmp	r1, r7
   116a4:	db07      	blt.n	116b6 <_realloc_r+0xbe>
   116a6:	68da      	ldr	r2, [r3, #12]
   116a8:	689b      	ldr	r3, [r3, #8]
   116aa:	460e      	mov	r6, r1
   116ac:	60da      	str	r2, [r3, #12]
   116ae:	6093      	str	r3, [r2, #8]
   116b0:	e11e      	b.n	118f0 <_realloc_r+0x2f8>
   116b2:	2000      	movs	r0, #0
   116b4:	4603      	mov	r3, r0
   116b6:	07e9      	lsls	r1, r5, #31
   116b8:	f100 80c9 	bmi.w	1184e <_realloc_r+0x256>
   116bc:	f854 5c08 	ldr.w	r5, [r4, #-8]
   116c0:	ebc5 0508 	rsb	r5, r5, r8
   116c4:	6869      	ldr	r1, [r5, #4]
   116c6:	f021 0103 	bic.w	r1, r1, #3
   116ca:	eb01 0a06 	add.w	sl, r1, r6
   116ce:	2b00      	cmp	r3, #0
   116d0:	f000 8088 	beq.w	117e4 <_realloc_r+0x1ec>
   116d4:	4573      	cmp	r3, lr
   116d6:	d14b      	bne.n	11770 <_realloc_r+0x178>
   116d8:	eb0a 0300 	add.w	r3, sl, r0
   116dc:	f107 0110 	add.w	r1, r7, #16
   116e0:	428b      	cmp	r3, r1
   116e2:	db7f      	blt.n	117e4 <_realloc_r+0x1ec>
   116e4:	46a8      	mov	r8, r5
   116e6:	68ea      	ldr	r2, [r5, #12]
   116e8:	f858 1f08 	ldr.w	r1, [r8, #8]!
   116ec:	60ca      	str	r2, [r1, #12]
   116ee:	6091      	str	r1, [r2, #8]
   116f0:	1f32      	subs	r2, r6, #4
   116f2:	2a24      	cmp	r2, #36	; 0x24
   116f4:	d825      	bhi.n	11742 <_realloc_r+0x14a>
   116f6:	2a13      	cmp	r2, #19
   116f8:	d91b      	bls.n	11732 <_realloc_r+0x13a>
   116fa:	6821      	ldr	r1, [r4, #0]
   116fc:	60a9      	str	r1, [r5, #8]
   116fe:	6861      	ldr	r1, [r4, #4]
   11700:	60e9      	str	r1, [r5, #12]
   11702:	2a1b      	cmp	r2, #27
   11704:	d803      	bhi.n	1170e <_realloc_r+0x116>
   11706:	f105 0210 	add.w	r2, r5, #16
   1170a:	3408      	adds	r4, #8
   1170c:	e012      	b.n	11734 <_realloc_r+0x13c>
   1170e:	68a1      	ldr	r1, [r4, #8]
   11710:	6129      	str	r1, [r5, #16]
   11712:	68e1      	ldr	r1, [r4, #12]
   11714:	6169      	str	r1, [r5, #20]
   11716:	2a24      	cmp	r2, #36	; 0x24
   11718:	d003      	beq.n	11722 <_realloc_r+0x12a>
   1171a:	f105 0218 	add.w	r2, r5, #24
   1171e:	3410      	adds	r4, #16
   11720:	e008      	b.n	11734 <_realloc_r+0x13c>
   11722:	6922      	ldr	r2, [r4, #16]
   11724:	61aa      	str	r2, [r5, #24]
   11726:	6961      	ldr	r1, [r4, #20]
   11728:	61e9      	str	r1, [r5, #28]
   1172a:	f105 0220 	add.w	r2, r5, #32
   1172e:	3418      	adds	r4, #24
   11730:	e000      	b.n	11734 <_realloc_r+0x13c>
   11732:	4642      	mov	r2, r8
   11734:	6821      	ldr	r1, [r4, #0]
   11736:	6011      	str	r1, [r2, #0]
   11738:	6861      	ldr	r1, [r4, #4]
   1173a:	6051      	str	r1, [r2, #4]
   1173c:	68a1      	ldr	r1, [r4, #8]
   1173e:	6091      	str	r1, [r2, #8]
   11740:	e005      	b.n	1174e <_realloc_r+0x156>
   11742:	4640      	mov	r0, r8
   11744:	4621      	mov	r1, r4
   11746:	9301      	str	r3, [sp, #4]
   11748:	f7ff fb50 	bl	10dec <memmove>
   1174c:	9b01      	ldr	r3, [sp, #4]
   1174e:	19ea      	adds	r2, r5, r7
   11750:	1bdb      	subs	r3, r3, r7
   11752:	f043 0301 	orr.w	r3, r3, #1
   11756:	f8cb 2008 	str.w	r2, [fp, #8]
   1175a:	6053      	str	r3, [r2, #4]
   1175c:	686b      	ldr	r3, [r5, #4]
   1175e:	f003 0301 	and.w	r3, r3, #1
   11762:	431f      	orrs	r7, r3
   11764:	4648      	mov	r0, r9
   11766:	606f      	str	r7, [r5, #4]
   11768:	f7fc fa0f 	bl	db8a <__malloc_unlock>
   1176c:	4640      	mov	r0, r8
   1176e:	e0e7      	b.n	11940 <_realloc_r+0x348>
   11770:	eb0a 0b00 	add.w	fp, sl, r0
   11774:	45bb      	cmp	fp, r7
   11776:	db35      	blt.n	117e4 <_realloc_r+0x1ec>
   11778:	68da      	ldr	r2, [r3, #12]
   1177a:	689b      	ldr	r3, [r3, #8]
   1177c:	4628      	mov	r0, r5
   1177e:	60da      	str	r2, [r3, #12]
   11780:	6093      	str	r3, [r2, #8]
   11782:	f850 2f08 	ldr.w	r2, [r0, #8]!
   11786:	68eb      	ldr	r3, [r5, #12]
   11788:	60d3      	str	r3, [r2, #12]
   1178a:	609a      	str	r2, [r3, #8]
   1178c:	1f32      	subs	r2, r6, #4
   1178e:	2a24      	cmp	r2, #36	; 0x24
   11790:	d823      	bhi.n	117da <_realloc_r+0x1e2>
   11792:	2a13      	cmp	r2, #19
   11794:	d91a      	bls.n	117cc <_realloc_r+0x1d4>
   11796:	6823      	ldr	r3, [r4, #0]
   11798:	60ab      	str	r3, [r5, #8]
   1179a:	6863      	ldr	r3, [r4, #4]
   1179c:	60eb      	str	r3, [r5, #12]
   1179e:	2a1b      	cmp	r2, #27
   117a0:	d803      	bhi.n	117aa <_realloc_r+0x1b2>
   117a2:	f105 0010 	add.w	r0, r5, #16
   117a6:	3408      	adds	r4, #8
   117a8:	e010      	b.n	117cc <_realloc_r+0x1d4>
   117aa:	68a3      	ldr	r3, [r4, #8]
   117ac:	612b      	str	r3, [r5, #16]
   117ae:	68e3      	ldr	r3, [r4, #12]
   117b0:	616b      	str	r3, [r5, #20]
   117b2:	2a24      	cmp	r2, #36	; 0x24
   117b4:	d003      	beq.n	117be <_realloc_r+0x1c6>
   117b6:	f105 0018 	add.w	r0, r5, #24
   117ba:	3410      	adds	r4, #16
   117bc:	e006      	b.n	117cc <_realloc_r+0x1d4>
   117be:	6923      	ldr	r3, [r4, #16]
   117c0:	61ab      	str	r3, [r5, #24]
   117c2:	6963      	ldr	r3, [r4, #20]
   117c4:	61eb      	str	r3, [r5, #28]
   117c6:	f105 0020 	add.w	r0, r5, #32
   117ca:	3418      	adds	r4, #24
   117cc:	6823      	ldr	r3, [r4, #0]
   117ce:	6003      	str	r3, [r0, #0]
   117d0:	6863      	ldr	r3, [r4, #4]
   117d2:	6043      	str	r3, [r0, #4]
   117d4:	68a3      	ldr	r3, [r4, #8]
   117d6:	6083      	str	r3, [r0, #8]
   117d8:	e002      	b.n	117e0 <_realloc_r+0x1e8>
   117da:	4621      	mov	r1, r4
   117dc:	f7ff fb06 	bl	10dec <memmove>
   117e0:	465e      	mov	r6, fp
   117e2:	e02e      	b.n	11842 <_realloc_r+0x24a>
   117e4:	45ba      	cmp	sl, r7
   117e6:	db32      	blt.n	1184e <_realloc_r+0x256>
   117e8:	4628      	mov	r0, r5
   117ea:	68eb      	ldr	r3, [r5, #12]
   117ec:	f850 2f08 	ldr.w	r2, [r0, #8]!
   117f0:	60d3      	str	r3, [r2, #12]
   117f2:	609a      	str	r2, [r3, #8]
   117f4:	1f32      	subs	r2, r6, #4
   117f6:	2a24      	cmp	r2, #36	; 0x24
   117f8:	d825      	bhi.n	11846 <_realloc_r+0x24e>
   117fa:	2a13      	cmp	r2, #19
   117fc:	d91a      	bls.n	11834 <_realloc_r+0x23c>
   117fe:	6823      	ldr	r3, [r4, #0]
   11800:	60ab      	str	r3, [r5, #8]
   11802:	6863      	ldr	r3, [r4, #4]
   11804:	60eb      	str	r3, [r5, #12]
   11806:	2a1b      	cmp	r2, #27
   11808:	d803      	bhi.n	11812 <_realloc_r+0x21a>
   1180a:	f105 0010 	add.w	r0, r5, #16
   1180e:	3408      	adds	r4, #8
   11810:	e010      	b.n	11834 <_realloc_r+0x23c>
   11812:	68a3      	ldr	r3, [r4, #8]
   11814:	612b      	str	r3, [r5, #16]
   11816:	68e3      	ldr	r3, [r4, #12]
   11818:	616b      	str	r3, [r5, #20]
   1181a:	2a24      	cmp	r2, #36	; 0x24
   1181c:	d003      	beq.n	11826 <_realloc_r+0x22e>
   1181e:	f105 0018 	add.w	r0, r5, #24
   11822:	3410      	adds	r4, #16
   11824:	e006      	b.n	11834 <_realloc_r+0x23c>
   11826:	6923      	ldr	r3, [r4, #16]
   11828:	61ab      	str	r3, [r5, #24]
   1182a:	6963      	ldr	r3, [r4, #20]
   1182c:	61eb      	str	r3, [r5, #28]
   1182e:	f105 0020 	add.w	r0, r5, #32
   11832:	3418      	adds	r4, #24
   11834:	6823      	ldr	r3, [r4, #0]
   11836:	6003      	str	r3, [r0, #0]
   11838:	6863      	ldr	r3, [r4, #4]
   1183a:	6043      	str	r3, [r0, #4]
   1183c:	68a3      	ldr	r3, [r4, #8]
   1183e:	6083      	str	r3, [r0, #8]
   11840:	4656      	mov	r6, sl
   11842:	46a8      	mov	r8, r5
   11844:	e054      	b.n	118f0 <_realloc_r+0x2f8>
   11846:	4621      	mov	r1, r4
   11848:	f7ff fad0 	bl	10dec <memmove>
   1184c:	e7f8      	b.n	11840 <_realloc_r+0x248>
   1184e:	4648      	mov	r0, r9
   11850:	4611      	mov	r1, r2
   11852:	f7fb ff87 	bl	d764 <_malloc_r>
   11856:	4605      	mov	r5, r0
   11858:	2800      	cmp	r0, #0
   1185a:	d044      	beq.n	118e6 <_realloc_r+0x2ee>
   1185c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11860:	f023 0301 	bic.w	r3, r3, #1
   11864:	f1a0 0208 	sub.w	r2, r0, #8
   11868:	4443      	add	r3, r8
   1186a:	429a      	cmp	r2, r3
   1186c:	d105      	bne.n	1187a <_realloc_r+0x282>
   1186e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   11872:	f023 0303 	bic.w	r3, r3, #3
   11876:	441e      	add	r6, r3
   11878:	e03a      	b.n	118f0 <_realloc_r+0x2f8>
   1187a:	1f32      	subs	r2, r6, #4
   1187c:	2a24      	cmp	r2, #36	; 0x24
   1187e:	d82b      	bhi.n	118d8 <_realloc_r+0x2e0>
   11880:	2a13      	cmp	r2, #19
   11882:	d91e      	bls.n	118c2 <_realloc_r+0x2ca>
   11884:	6823      	ldr	r3, [r4, #0]
   11886:	6003      	str	r3, [r0, #0]
   11888:	6863      	ldr	r3, [r4, #4]
   1188a:	6043      	str	r3, [r0, #4]
   1188c:	2a1b      	cmp	r2, #27
   1188e:	d804      	bhi.n	1189a <_realloc_r+0x2a2>
   11890:	f100 0308 	add.w	r3, r0, #8
   11894:	f104 0208 	add.w	r2, r4, #8
   11898:	e015      	b.n	118c6 <_realloc_r+0x2ce>
   1189a:	68a3      	ldr	r3, [r4, #8]
   1189c:	6083      	str	r3, [r0, #8]
   1189e:	68e3      	ldr	r3, [r4, #12]
   118a0:	60c3      	str	r3, [r0, #12]
   118a2:	2a24      	cmp	r2, #36	; 0x24
   118a4:	d004      	beq.n	118b0 <_realloc_r+0x2b8>
   118a6:	f100 0310 	add.w	r3, r0, #16
   118aa:	f104 0210 	add.w	r2, r4, #16
   118ae:	e00a      	b.n	118c6 <_realloc_r+0x2ce>
   118b0:	6923      	ldr	r3, [r4, #16]
   118b2:	6103      	str	r3, [r0, #16]
   118b4:	6961      	ldr	r1, [r4, #20]
   118b6:	6141      	str	r1, [r0, #20]
   118b8:	f100 0318 	add.w	r3, r0, #24
   118bc:	f104 0218 	add.w	r2, r4, #24
   118c0:	e001      	b.n	118c6 <_realloc_r+0x2ce>
   118c2:	4603      	mov	r3, r0
   118c4:	4622      	mov	r2, r4
   118c6:	6811      	ldr	r1, [r2, #0]
   118c8:	6019      	str	r1, [r3, #0]
   118ca:	6851      	ldr	r1, [r2, #4]
   118cc:	6059      	str	r1, [r3, #4]
   118ce:	6892      	ldr	r2, [r2, #8]
   118d0:	609a      	str	r2, [r3, #8]
   118d2:	e004      	b.n	118de <_realloc_r+0x2e6>
   118d4:	200008f0 	.word	0x200008f0
   118d8:	4621      	mov	r1, r4
   118da:	f7ff fa87 	bl	10dec <memmove>
   118de:	4648      	mov	r0, r9
   118e0:	4621      	mov	r1, r4
   118e2:	f7fe ff87 	bl	107f4 <_free_r>
   118e6:	4648      	mov	r0, r9
   118e8:	f7fc f94f 	bl	db8a <__malloc_unlock>
   118ec:	4628      	mov	r0, r5
   118ee:	e027      	b.n	11940 <_realloc_r+0x348>
   118f0:	1bf3      	subs	r3, r6, r7
   118f2:	2b0f      	cmp	r3, #15
   118f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   118f8:	d913      	bls.n	11922 <_realloc_r+0x32a>
   118fa:	eb08 0107 	add.w	r1, r8, r7
   118fe:	f002 0201 	and.w	r2, r2, #1
   11902:	4317      	orrs	r7, r2
   11904:	f043 0201 	orr.w	r2, r3, #1
   11908:	440b      	add	r3, r1
   1190a:	f8c8 7004 	str.w	r7, [r8, #4]
   1190e:	604a      	str	r2, [r1, #4]
   11910:	685a      	ldr	r2, [r3, #4]
   11912:	f042 0201 	orr.w	r2, r2, #1
   11916:	605a      	str	r2, [r3, #4]
   11918:	4648      	mov	r0, r9
   1191a:	3108      	adds	r1, #8
   1191c:	f7fe ff6a 	bl	107f4 <_free_r>
   11920:	e009      	b.n	11936 <_realloc_r+0x33e>
   11922:	f002 0201 	and.w	r2, r2, #1
   11926:	4332      	orrs	r2, r6
   11928:	4446      	add	r6, r8
   1192a:	f8c8 2004 	str.w	r2, [r8, #4]
   1192e:	6873      	ldr	r3, [r6, #4]
   11930:	f043 0301 	orr.w	r3, r3, #1
   11934:	6073      	str	r3, [r6, #4]
   11936:	4648      	mov	r0, r9
   11938:	f7fc f927 	bl	db8a <__malloc_unlock>
   1193c:	f108 0008 	add.w	r0, r8, #8
   11940:	b003      	add	sp, #12
   11942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11946:	bf00      	nop

00011948 <__sread>:
   11948:	b510      	push	{r4, lr}
   1194a:	460c      	mov	r4, r1
   1194c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11950:	f000 fe34 	bl	125bc <_read_r>
   11954:	2800      	cmp	r0, #0
   11956:	db03      	blt.n	11960 <__sread+0x18>
   11958:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1195a:	4403      	add	r3, r0
   1195c:	6523      	str	r3, [r4, #80]	; 0x50
   1195e:	bd10      	pop	{r4, pc}
   11960:	89a3      	ldrh	r3, [r4, #12]
   11962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11966:	81a3      	strh	r3, [r4, #12]
   11968:	bd10      	pop	{r4, pc}

0001196a <__seofread>:
   1196a:	2000      	movs	r0, #0
   1196c:	4770      	bx	lr

0001196e <__swrite>:
   1196e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11972:	461d      	mov	r5, r3
   11974:	898b      	ldrh	r3, [r1, #12]
   11976:	05db      	lsls	r3, r3, #23
   11978:	4607      	mov	r7, r0
   1197a:	460c      	mov	r4, r1
   1197c:	4616      	mov	r6, r2
   1197e:	d505      	bpl.n	1198c <__swrite+0x1e>
   11980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11984:	2200      	movs	r2, #0
   11986:	2302      	movs	r3, #2
   11988:	f000 fe06 	bl	12598 <_lseek_r>
   1198c:	89a3      	ldrh	r3, [r4, #12]
   1198e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11996:	81a3      	strh	r3, [r4, #12]
   11998:	4638      	mov	r0, r7
   1199a:	4632      	mov	r2, r6
   1199c:	462b      	mov	r3, r5
   1199e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   119a2:	f000 bd41 	b.w	12428 <_write_r>

000119a6 <__sseek>:
   119a6:	b510      	push	{r4, lr}
   119a8:	460c      	mov	r4, r1
   119aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   119ae:	f000 fdf3 	bl	12598 <_lseek_r>
   119b2:	1c43      	adds	r3, r0, #1
   119b4:	89a3      	ldrh	r3, [r4, #12]
   119b6:	d103      	bne.n	119c0 <__sseek+0x1a>
   119b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   119bc:	81a3      	strh	r3, [r4, #12]
   119be:	bd10      	pop	{r4, pc}
   119c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   119c4:	81a3      	strh	r3, [r4, #12]
   119c6:	6520      	str	r0, [r4, #80]	; 0x50
   119c8:	bd10      	pop	{r4, pc}

000119ca <__sclose>:
   119ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   119ce:	f000 bd6b 	b.w	124a8 <_close_r>

000119d2 <strcmp>:
   119d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   119d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   119da:	2a01      	cmp	r2, #1
   119dc:	bf28      	it	cs
   119de:	429a      	cmpcs	r2, r3
   119e0:	d0f7      	beq.n	119d2 <strcmp>
   119e2:	1ad0      	subs	r0, r2, r3
   119e4:	4770      	bx	lr

000119e6 <strlen>:
   119e6:	4603      	mov	r3, r0
   119e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   119ec:	2a00      	cmp	r2, #0
   119ee:	d1fb      	bne.n	119e8 <strlen+0x2>
   119f0:	1a18      	subs	r0, r3, r0
   119f2:	3801      	subs	r0, #1
   119f4:	4770      	bx	lr
	...

000119f8 <__ssprint_r>:
   119f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119fc:	4680      	mov	r8, r0
   119fe:	6890      	ldr	r0, [r2, #8]
   11a00:	f8d2 9000 	ldr.w	r9, [r2]
   11a04:	460c      	mov	r4, r1
   11a06:	4615      	mov	r5, r2
   11a08:	b118      	cbz	r0, 11a12 <__ssprint_r+0x1a>
   11a0a:	2300      	movs	r3, #0
   11a0c:	9301      	str	r3, [sp, #4]
   11a0e:	461e      	mov	r6, r3
   11a10:	e008      	b.n	11a24 <__ssprint_r+0x2c>
   11a12:	6050      	str	r0, [r2, #4]
   11a14:	e066      	b.n	11ae4 <__ssprint_r+0xec>
   11a16:	f8d9 3000 	ldr.w	r3, [r9]
   11a1a:	f8d9 6004 	ldr.w	r6, [r9, #4]
   11a1e:	9301      	str	r3, [sp, #4]
   11a20:	f109 0908 	add.w	r9, r9, #8
   11a24:	2e00      	cmp	r6, #0
   11a26:	d0f6      	beq.n	11a16 <__ssprint_r+0x1e>
   11a28:	68a7      	ldr	r7, [r4, #8]
   11a2a:	42be      	cmp	r6, r7
   11a2c:	d347      	bcc.n	11abe <__ssprint_r+0xc6>
   11a2e:	89a2      	ldrh	r2, [r4, #12]
   11a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
   11a34:	d041      	beq.n	11aba <__ssprint_r+0xc2>
   11a36:	6823      	ldr	r3, [r4, #0]
   11a38:	6921      	ldr	r1, [r4, #16]
   11a3a:	ebc1 0a03 	rsb	sl, r1, r3
   11a3e:	6963      	ldr	r3, [r4, #20]
   11a40:	2002      	movs	r0, #2
   11a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11a46:	fb93 fbf0 	sdiv	fp, r3, r0
   11a4a:	f10a 0001 	add.w	r0, sl, #1
   11a4e:	4430      	add	r0, r6
   11a50:	4583      	cmp	fp, r0
   11a52:	bf38      	it	cc
   11a54:	4683      	movcc	fp, r0
   11a56:	0553      	lsls	r3, r2, #21
   11a58:	4640      	mov	r0, r8
   11a5a:	d50f      	bpl.n	11a7c <__ssprint_r+0x84>
   11a5c:	4659      	mov	r1, fp
   11a5e:	f7fb fe81 	bl	d764 <_malloc_r>
   11a62:	4607      	mov	r7, r0
   11a64:	b198      	cbz	r0, 11a8e <__ssprint_r+0x96>
   11a66:	4652      	mov	r2, sl
   11a68:	6921      	ldr	r1, [r4, #16]
   11a6a:	f7ff f9b6 	bl	10dda <memcpy>
   11a6e:	89a2      	ldrh	r2, [r4, #12]
   11a70:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11a78:	81a2      	strh	r2, [r4, #12]
   11a7a:	e015      	b.n	11aa8 <__ssprint_r+0xb0>
   11a7c:	465a      	mov	r2, fp
   11a7e:	f7ff fdbb 	bl	115f8 <_realloc_r>
   11a82:	4607      	mov	r7, r0
   11a84:	b980      	cbnz	r0, 11aa8 <__ssprint_r+0xb0>
   11a86:	4640      	mov	r0, r8
   11a88:	6921      	ldr	r1, [r4, #16]
   11a8a:	f7fe feb3 	bl	107f4 <_free_r>
   11a8e:	230c      	movs	r3, #12
   11a90:	f8c8 3000 	str.w	r3, [r8]
   11a94:	89a3      	ldrh	r3, [r4, #12]
   11a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11a9a:	81a3      	strh	r3, [r4, #12]
   11a9c:	2300      	movs	r3, #0
   11a9e:	60ab      	str	r3, [r5, #8]
   11aa0:	606b      	str	r3, [r5, #4]
   11aa2:	f04f 30ff 	mov.w	r0, #4294967295
   11aa6:	e01d      	b.n	11ae4 <__ssprint_r+0xec>
   11aa8:	6127      	str	r7, [r4, #16]
   11aaa:	ebca 030b 	rsb	r3, sl, fp
   11aae:	4457      	add	r7, sl
   11ab0:	6027      	str	r7, [r4, #0]
   11ab2:	f8c4 b014 	str.w	fp, [r4, #20]
   11ab6:	4637      	mov	r7, r6
   11ab8:	60a3      	str	r3, [r4, #8]
   11aba:	42be      	cmp	r6, r7
   11abc:	d200      	bcs.n	11ac0 <__ssprint_r+0xc8>
   11abe:	4637      	mov	r7, r6
   11ac0:	463a      	mov	r2, r7
   11ac2:	6820      	ldr	r0, [r4, #0]
   11ac4:	9901      	ldr	r1, [sp, #4]
   11ac6:	f7ff f991 	bl	10dec <memmove>
   11aca:	68a3      	ldr	r3, [r4, #8]
   11acc:	1bdb      	subs	r3, r3, r7
   11ace:	60a3      	str	r3, [r4, #8]
   11ad0:	6823      	ldr	r3, [r4, #0]
   11ad2:	441f      	add	r7, r3
   11ad4:	68ab      	ldr	r3, [r5, #8]
   11ad6:	6027      	str	r7, [r4, #0]
   11ad8:	1b9e      	subs	r6, r3, r6
   11ada:	60ae      	str	r6, [r5, #8]
   11adc:	2e00      	cmp	r6, #0
   11ade:	d19a      	bne.n	11a16 <__ssprint_r+0x1e>
   11ae0:	606e      	str	r6, [r5, #4]
   11ae2:	4630      	mov	r0, r6
   11ae4:	b003      	add	sp, #12
   11ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011aea <_svfiprintf_r>:
   11aea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aee:	461e      	mov	r6, r3
   11af0:	898b      	ldrh	r3, [r1, #12]
   11af2:	b0ad      	sub	sp, #180	; 0xb4
   11af4:	4688      	mov	r8, r1
   11af6:	0619      	lsls	r1, r3, #24
   11af8:	4683      	mov	fp, r0
   11afa:	9202      	str	r2, [sp, #8]
   11afc:	d513      	bpl.n	11b26 <_svfiprintf_r+0x3c>
   11afe:	f8d8 3010 	ldr.w	r3, [r8, #16]
   11b02:	b983      	cbnz	r3, 11b26 <_svfiprintf_r+0x3c>
   11b04:	2140      	movs	r1, #64	; 0x40
   11b06:	f7fb fe2d 	bl	d764 <_malloc_r>
   11b0a:	f8c8 0000 	str.w	r0, [r8]
   11b0e:	f8c8 0010 	str.w	r0, [r8, #16]
   11b12:	b928      	cbnz	r0, 11b20 <_svfiprintf_r+0x36>
   11b14:	230c      	movs	r3, #12
   11b16:	f8cb 3000 	str.w	r3, [fp]
   11b1a:	f04f 30ff 	mov.w	r0, #4294967295
   11b1e:	e3d6      	b.n	122ce <_svfiprintf_r+0x7e4>
   11b20:	2340      	movs	r3, #64	; 0x40
   11b22:	f8c8 3014 	str.w	r3, [r8, #20]
   11b26:	2300      	movs	r3, #0
   11b28:	aa1c      	add	r2, sp, #112	; 0x70
   11b2a:	920f      	str	r2, [sp, #60]	; 0x3c
   11b2c:	9311      	str	r3, [sp, #68]	; 0x44
   11b2e:	9310      	str	r3, [sp, #64]	; 0x40
   11b30:	4694      	mov	ip, r2
   11b32:	930a      	str	r3, [sp, #40]	; 0x28
   11b34:	9305      	str	r3, [sp, #20]
   11b36:	9b02      	ldr	r3, [sp, #8]
   11b38:	461c      	mov	r4, r3
   11b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   11b3e:	b91a      	cbnz	r2, 11b48 <_svfiprintf_r+0x5e>
   11b40:	9802      	ldr	r0, [sp, #8]
   11b42:	1a25      	subs	r5, r4, r0
   11b44:	d103      	bne.n	11b4e <_svfiprintf_r+0x64>
   11b46:	e01d      	b.n	11b84 <_svfiprintf_r+0x9a>
   11b48:	2a25      	cmp	r2, #37	; 0x25
   11b4a:	d1f5      	bne.n	11b38 <_svfiprintf_r+0x4e>
   11b4c:	e7f8      	b.n	11b40 <_svfiprintf_r+0x56>
   11b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11b50:	9902      	ldr	r1, [sp, #8]
   11b52:	442b      	add	r3, r5
   11b54:	9311      	str	r3, [sp, #68]	; 0x44
   11b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b58:	3301      	adds	r3, #1
   11b5a:	2b07      	cmp	r3, #7
   11b5c:	e88c 0022 	stmia.w	ip, {r1, r5}
   11b60:	9310      	str	r3, [sp, #64]	; 0x40
   11b62:	dc02      	bgt.n	11b6a <_svfiprintf_r+0x80>
   11b64:	f10c 0c08 	add.w	ip, ip, #8
   11b68:	e009      	b.n	11b7e <_svfiprintf_r+0x94>
   11b6a:	4658      	mov	r0, fp
   11b6c:	4641      	mov	r1, r8
   11b6e:	aa0f      	add	r2, sp, #60	; 0x3c
   11b70:	f7ff ff42 	bl	119f8 <__ssprint_r>
   11b74:	2800      	cmp	r0, #0
   11b76:	f040 83a2 	bne.w	122be <_svfiprintf_r+0x7d4>
   11b7a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   11b7e:	9a05      	ldr	r2, [sp, #20]
   11b80:	442a      	add	r2, r5
   11b82:	9205      	str	r2, [sp, #20]
   11b84:	7823      	ldrb	r3, [r4, #0]
   11b86:	2b00      	cmp	r3, #0
   11b88:	f000 8392 	beq.w	122b0 <_svfiprintf_r+0x7c6>
   11b8c:	2200      	movs	r2, #0
   11b8e:	3401      	adds	r4, #1
   11b90:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11b94:	f04f 3aff 	mov.w	sl, #4294967295
   11b98:	9204      	str	r2, [sp, #16]
   11b9a:	4617      	mov	r7, r2
   11b9c:	1c65      	adds	r5, r4, #1
   11b9e:	7823      	ldrb	r3, [r4, #0]
   11ba0:	9502      	str	r5, [sp, #8]
   11ba2:	2b58      	cmp	r3, #88	; 0x58
   11ba4:	d065      	beq.n	11c72 <_svfiprintf_r+0x188>
   11ba6:	dc2e      	bgt.n	11c06 <_svfiprintf_r+0x11c>
   11ba8:	2b2e      	cmp	r3, #46	; 0x2e
   11baa:	d077      	beq.n	11c9c <_svfiprintf_r+0x1b2>
   11bac:	dc12      	bgt.n	11bd4 <_svfiprintf_r+0xea>
   11bae:	2b2a      	cmp	r3, #42	; 0x2a
   11bb0:	d067      	beq.n	11c82 <_svfiprintf_r+0x198>
   11bb2:	dc08      	bgt.n	11bc6 <_svfiprintf_r+0xdc>
   11bb4:	2b20      	cmp	r3, #32
   11bb6:	d060      	beq.n	11c7a <_svfiprintf_r+0x190>
   11bb8:	2b23      	cmp	r3, #35	; 0x23
   11bba:	f040 8203 	bne.w	11fc4 <_svfiprintf_r+0x4da>
   11bbe:	f047 0701 	orr.w	r7, r7, #1
   11bc2:	9c02      	ldr	r4, [sp, #8]
   11bc4:	e7ea      	b.n	11b9c <_svfiprintf_r+0xb2>
   11bc6:	2b2b      	cmp	r3, #43	; 0x2b
   11bc8:	d101      	bne.n	11bce <_svfiprintf_r+0xe4>
   11bca:	461a      	mov	r2, r3
   11bcc:	e7f9      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11bce:	2b2d      	cmp	r3, #45	; 0x2d
   11bd0:	d061      	beq.n	11c96 <_svfiprintf_r+0x1ac>
   11bd2:	e1f7      	b.n	11fc4 <_svfiprintf_r+0x4da>
   11bd4:	2b39      	cmp	r3, #57	; 0x39
   11bd6:	dc08      	bgt.n	11bea <_svfiprintf_r+0x100>
   11bd8:	2b31      	cmp	r3, #49	; 0x31
   11bda:	f280 8081 	bge.w	11ce0 <_svfiprintf_r+0x1f6>
   11bde:	2b30      	cmp	r3, #48	; 0x30
   11be0:	f040 81f0 	bne.w	11fc4 <_svfiprintf_r+0x4da>
   11be4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   11be8:	e7eb      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11bea:	2b4f      	cmp	r3, #79	; 0x4f
   11bec:	f000 80e1 	beq.w	11db2 <_svfiprintf_r+0x2c8>
   11bf0:	2b55      	cmp	r3, #85	; 0x55
   11bf2:	f000 8121 	beq.w	11e38 <_svfiprintf_r+0x34e>
   11bf6:	2b44      	cmp	r3, #68	; 0x44
   11bf8:	f040 81e4 	bne.w	11fc4 <_svfiprintf_r+0x4da>
   11bfc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11c00:	f047 0710 	orr.w	r7, r7, #16
   11c04:	e095      	b.n	11d32 <_svfiprintf_r+0x248>
   11c06:	2b6e      	cmp	r3, #110	; 0x6e
   11c08:	f000 80b7 	beq.w	11d7a <_svfiprintf_r+0x290>
   11c0c:	dc0d      	bgt.n	11c2a <_svfiprintf_r+0x140>
   11c0e:	2b68      	cmp	r3, #104	; 0x68
   11c10:	d077      	beq.n	11d02 <_svfiprintf_r+0x218>
   11c12:	dc05      	bgt.n	11c20 <_svfiprintf_r+0x136>
   11c14:	2b63      	cmp	r3, #99	; 0x63
   11c16:	f000 8084 	beq.w	11d22 <_svfiprintf_r+0x238>
   11c1a:	2b64      	cmp	r3, #100	; 0x64
   11c1c:	d026      	beq.n	11c6c <_svfiprintf_r+0x182>
   11c1e:	e1d1      	b.n	11fc4 <_svfiprintf_r+0x4da>
   11c20:	2b69      	cmp	r3, #105	; 0x69
   11c22:	d023      	beq.n	11c6c <_svfiprintf_r+0x182>
   11c24:	2b6c      	cmp	r3, #108	; 0x6c
   11c26:	d06f      	beq.n	11d08 <_svfiprintf_r+0x21e>
   11c28:	e1cc      	b.n	11fc4 <_svfiprintf_r+0x4da>
   11c2a:	2b71      	cmp	r3, #113	; 0x71
   11c2c:	d076      	beq.n	11d1c <_svfiprintf_r+0x232>
   11c2e:	dc13      	bgt.n	11c58 <_svfiprintf_r+0x16e>
   11c30:	2b6f      	cmp	r3, #111	; 0x6f
   11c32:	f000 80c0 	beq.w	11db6 <_svfiprintf_r+0x2cc>
   11c36:	2b70      	cmp	r3, #112	; 0x70
   11c38:	f040 81c4 	bne.w	11fc4 <_svfiprintf_r+0x4da>
   11c3c:	2330      	movs	r3, #48	; 0x30
   11c3e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   11c42:	48a0      	ldr	r0, [pc, #640]	; (11ec4 <_svfiprintf_r+0x3da>)
   11c44:	6834      	ldr	r4, [r6, #0]
   11c46:	900a      	str	r0, [sp, #40]	; 0x28
   11c48:	2378      	movs	r3, #120	; 0x78
   11c4a:	2500      	movs	r5, #0
   11c4c:	f047 0702 	orr.w	r7, r7, #2
   11c50:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   11c54:	3604      	adds	r6, #4
   11c56:	e12f      	b.n	11eb8 <_svfiprintf_r+0x3ce>
   11c58:	2b75      	cmp	r3, #117	; 0x75
   11c5a:	f000 80ef 	beq.w	11e3c <_svfiprintf_r+0x352>
   11c5e:	2b78      	cmp	r3, #120	; 0x78
   11c60:	f000 8104 	beq.w	11e6c <_svfiprintf_r+0x382>
   11c64:	2b73      	cmp	r3, #115	; 0x73
   11c66:	f040 81ad 	bne.w	11fc4 <_svfiprintf_r+0x4da>
   11c6a:	e0c0      	b.n	11dee <_svfiprintf_r+0x304>
   11c6c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11c70:	e05f      	b.n	11d32 <_svfiprintf_r+0x248>
   11c72:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11c76:	4c94      	ldr	r4, [pc, #592]	; (11ec8 <_svfiprintf_r+0x3de>)
   11c78:	e0fb      	b.n	11e72 <_svfiprintf_r+0x388>
   11c7a:	2a00      	cmp	r2, #0
   11c7c:	bf08      	it	eq
   11c7e:	2220      	moveq	r2, #32
   11c80:	e79f      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11c82:	1d33      	adds	r3, r6, #4
   11c84:	6836      	ldr	r6, [r6, #0]
   11c86:	9604      	str	r6, [sp, #16]
   11c88:	2e00      	cmp	r6, #0
   11c8a:	db01      	blt.n	11c90 <_svfiprintf_r+0x1a6>
   11c8c:	461e      	mov	r6, r3
   11c8e:	e798      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11c90:	4275      	negs	r5, r6
   11c92:	9504      	str	r5, [sp, #16]
   11c94:	461e      	mov	r6, r3
   11c96:	f047 0704 	orr.w	r7, r7, #4
   11c9a:	e792      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11c9c:	9c02      	ldr	r4, [sp, #8]
   11c9e:	7823      	ldrb	r3, [r4, #0]
   11ca0:	2b2a      	cmp	r3, #42	; 0x2a
   11ca2:	f104 0101 	add.w	r1, r4, #1
   11ca6:	d002      	beq.n	11cae <_svfiprintf_r+0x1c4>
   11ca8:	f04f 0a00 	mov.w	sl, #0
   11cac:	e00a      	b.n	11cc4 <_svfiprintf_r+0x1da>
   11cae:	f8d6 a000 	ldr.w	sl, [r6]
   11cb2:	9102      	str	r1, [sp, #8]
   11cb4:	1d33      	adds	r3, r6, #4
   11cb6:	f1ba 0f00 	cmp.w	sl, #0
   11cba:	461e      	mov	r6, r3
   11cbc:	da81      	bge.n	11bc2 <_svfiprintf_r+0xd8>
   11cbe:	f04f 3aff 	mov.w	sl, #4294967295
   11cc2:	e77e      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11cc4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   11cc8:	2809      	cmp	r0, #9
   11cca:	d805      	bhi.n	11cd8 <_svfiprintf_r+0x1ee>
   11ccc:	230a      	movs	r3, #10
   11cce:	fb03 0a0a 	mla	sl, r3, sl, r0
   11cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
   11cd6:	e7f5      	b.n	11cc4 <_svfiprintf_r+0x1da>
   11cd8:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   11cdc:	9102      	str	r1, [sp, #8]
   11cde:	e760      	b.n	11ba2 <_svfiprintf_r+0xb8>
   11ce0:	2500      	movs	r5, #0
   11ce2:	9504      	str	r5, [sp, #16]
   11ce4:	9c04      	ldr	r4, [sp, #16]
   11ce6:	3b30      	subs	r3, #48	; 0x30
   11ce8:	210a      	movs	r1, #10
   11cea:	fb01 3404 	mla	r4, r1, r4, r3
   11cee:	9902      	ldr	r1, [sp, #8]
   11cf0:	9404      	str	r4, [sp, #16]
   11cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
   11cf6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   11cfa:	2809      	cmp	r0, #9
   11cfc:	d8ee      	bhi.n	11cdc <_svfiprintf_r+0x1f2>
   11cfe:	9102      	str	r1, [sp, #8]
   11d00:	e7f0      	b.n	11ce4 <_svfiprintf_r+0x1fa>
   11d02:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   11d06:	e75c      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11d08:	9d02      	ldr	r5, [sp, #8]
   11d0a:	782b      	ldrb	r3, [r5, #0]
   11d0c:	2b6c      	cmp	r3, #108	; 0x6c
   11d0e:	d102      	bne.n	11d16 <_svfiprintf_r+0x22c>
   11d10:	3501      	adds	r5, #1
   11d12:	9502      	str	r5, [sp, #8]
   11d14:	e002      	b.n	11d1c <_svfiprintf_r+0x232>
   11d16:	f047 0710 	orr.w	r7, r7, #16
   11d1a:	e752      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11d1c:	f047 0720 	orr.w	r7, r7, #32
   11d20:	e74f      	b.n	11bc2 <_svfiprintf_r+0xd8>
   11d22:	6833      	ldr	r3, [r6, #0]
   11d24:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11d28:	2500      	movs	r5, #0
   11d2a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   11d2e:	3604      	adds	r6, #4
   11d30:	e152      	b.n	11fd8 <_svfiprintf_r+0x4ee>
   11d32:	06ba      	lsls	r2, r7, #26
   11d34:	d507      	bpl.n	11d46 <_svfiprintf_r+0x25c>
   11d36:	3607      	adds	r6, #7
   11d38:	f026 0307 	bic.w	r3, r6, #7
   11d3c:	f103 0608 	add.w	r6, r3, #8
   11d40:	e9d3 4500 	ldrd	r4, r5, [r3]
   11d44:	e00d      	b.n	11d62 <_svfiprintf_r+0x278>
   11d46:	f017 0f10 	tst.w	r7, #16
   11d4a:	f106 0304 	add.w	r3, r6, #4
   11d4e:	d001      	beq.n	11d54 <_svfiprintf_r+0x26a>
   11d50:	6834      	ldr	r4, [r6, #0]
   11d52:	e004      	b.n	11d5e <_svfiprintf_r+0x274>
   11d54:	6834      	ldr	r4, [r6, #0]
   11d56:	f017 0f40 	tst.w	r7, #64	; 0x40
   11d5a:	bf18      	it	ne
   11d5c:	b224      	sxthne	r4, r4
   11d5e:	17e5      	asrs	r5, r4, #31
   11d60:	461e      	mov	r6, r3
   11d62:	2c00      	cmp	r4, #0
   11d64:	f175 0000 	sbcs.w	r0, r5, #0
   11d68:	f280 80b0 	bge.w	11ecc <_svfiprintf_r+0x3e2>
   11d6c:	232d      	movs	r3, #45	; 0x2d
   11d6e:	4264      	negs	r4, r4
   11d70:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   11d74:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   11d78:	e0a8      	b.n	11ecc <_svfiprintf_r+0x3e2>
   11d7a:	f017 0f20 	tst.w	r7, #32
   11d7e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11d82:	f106 0104 	add.w	r1, r6, #4
   11d86:	d007      	beq.n	11d98 <_svfiprintf_r+0x2ae>
   11d88:	9c05      	ldr	r4, [sp, #20]
   11d8a:	6830      	ldr	r0, [r6, #0]
   11d8c:	17e5      	asrs	r5, r4, #31
   11d8e:	4622      	mov	r2, r4
   11d90:	462b      	mov	r3, r5
   11d92:	e9c0 2300 	strd	r2, r3, [r0]
   11d96:	e00a      	b.n	11dae <_svfiprintf_r+0x2c4>
   11d98:	06fb      	lsls	r3, r7, #27
   11d9a:	d405      	bmi.n	11da8 <_svfiprintf_r+0x2be>
   11d9c:	067f      	lsls	r7, r7, #25
   11d9e:	d503      	bpl.n	11da8 <_svfiprintf_r+0x2be>
   11da0:	6833      	ldr	r3, [r6, #0]
   11da2:	9c05      	ldr	r4, [sp, #20]
   11da4:	801c      	strh	r4, [r3, #0]
   11da6:	e002      	b.n	11dae <_svfiprintf_r+0x2c4>
   11da8:	6833      	ldr	r3, [r6, #0]
   11daa:	9d05      	ldr	r5, [sp, #20]
   11dac:	601d      	str	r5, [r3, #0]
   11dae:	460e      	mov	r6, r1
   11db0:	e6c1      	b.n	11b36 <_svfiprintf_r+0x4c>
   11db2:	f047 0710 	orr.w	r7, r7, #16
   11db6:	f017 0320 	ands.w	r3, r7, #32
   11dba:	d008      	beq.n	11dce <_svfiprintf_r+0x2e4>
   11dbc:	3607      	adds	r6, #7
   11dbe:	f026 0307 	bic.w	r3, r6, #7
   11dc2:	e9d3 4500 	ldrd	r4, r5, [r3]
   11dc6:	f103 0608 	add.w	r6, r3, #8
   11dca:	2300      	movs	r3, #0
   11dcc:	e075      	b.n	11eba <_svfiprintf_r+0x3d0>
   11dce:	f017 0110 	ands.w	r1, r7, #16
   11dd2:	f106 0204 	add.w	r2, r6, #4
   11dd6:	d106      	bne.n	11de6 <_svfiprintf_r+0x2fc>
   11dd8:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   11ddc:	d003      	beq.n	11de6 <_svfiprintf_r+0x2fc>
   11dde:	8834      	ldrh	r4, [r6, #0]
   11de0:	2500      	movs	r5, #0
   11de2:	4616      	mov	r6, r2
   11de4:	e7f1      	b.n	11dca <_svfiprintf_r+0x2e0>
   11de6:	6834      	ldr	r4, [r6, #0]
   11de8:	2500      	movs	r5, #0
   11dea:	4616      	mov	r6, r2
   11dec:	e065      	b.n	11eba <_svfiprintf_r+0x3d0>
   11dee:	f8d6 9000 	ldr.w	r9, [r6]
   11df2:	2300      	movs	r3, #0
   11df4:	459a      	cmp	sl, r3
   11df6:	f106 0604 	add.w	r6, r6, #4
   11dfa:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   11dfe:	4648      	mov	r0, r9
   11e00:	db11      	blt.n	11e26 <_svfiprintf_r+0x33c>
   11e02:	4619      	mov	r1, r3
   11e04:	4652      	mov	r2, sl
   11e06:	f8cd c004 	str.w	ip, [sp, #4]
   11e0a:	f7fe ffd7 	bl	10dbc <memchr>
   11e0e:	f8dd c004 	ldr.w	ip, [sp, #4]
   11e12:	2800      	cmp	r0, #0
   11e14:	f000 80e5 	beq.w	11fe2 <_svfiprintf_r+0x4f8>
   11e18:	ebc9 0000 	rsb	r0, r9, r0
   11e1c:	4550      	cmp	r0, sl
   11e1e:	bfb8      	it	lt
   11e20:	4682      	movlt	sl, r0
   11e22:	2500      	movs	r5, #0
   11e24:	e0de      	b.n	11fe4 <_svfiprintf_r+0x4fa>
   11e26:	f8cd c004 	str.w	ip, [sp, #4]
   11e2a:	f7ff fddc 	bl	119e6 <strlen>
   11e2e:	2500      	movs	r5, #0
   11e30:	4682      	mov	sl, r0
   11e32:	f8dd c004 	ldr.w	ip, [sp, #4]
   11e36:	e0d5      	b.n	11fe4 <_svfiprintf_r+0x4fa>
   11e38:	f047 0710 	orr.w	r7, r7, #16
   11e3c:	06bd      	lsls	r5, r7, #26
   11e3e:	d507      	bpl.n	11e50 <_svfiprintf_r+0x366>
   11e40:	3607      	adds	r6, #7
   11e42:	f026 0307 	bic.w	r3, r6, #7
   11e46:	f103 0608 	add.w	r6, r3, #8
   11e4a:	e9d3 4500 	ldrd	r4, r5, [r3]
   11e4e:	e00b      	b.n	11e68 <_svfiprintf_r+0x37e>
   11e50:	f017 0f10 	tst.w	r7, #16
   11e54:	f106 0304 	add.w	r3, r6, #4
   11e58:	d103      	bne.n	11e62 <_svfiprintf_r+0x378>
   11e5a:	067c      	lsls	r4, r7, #25
   11e5c:	d501      	bpl.n	11e62 <_svfiprintf_r+0x378>
   11e5e:	8834      	ldrh	r4, [r6, #0]
   11e60:	e000      	b.n	11e64 <_svfiprintf_r+0x37a>
   11e62:	6834      	ldr	r4, [r6, #0]
   11e64:	2500      	movs	r5, #0
   11e66:	461e      	mov	r6, r3
   11e68:	2301      	movs	r3, #1
   11e6a:	e026      	b.n	11eba <_svfiprintf_r+0x3d0>
   11e6c:	4c15      	ldr	r4, [pc, #84]	; (11ec4 <_svfiprintf_r+0x3da>)
   11e6e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11e72:	06b8      	lsls	r0, r7, #26
   11e74:	940a      	str	r4, [sp, #40]	; 0x28
   11e76:	d507      	bpl.n	11e88 <_svfiprintf_r+0x39e>
   11e78:	3607      	adds	r6, #7
   11e7a:	f026 0207 	bic.w	r2, r6, #7
   11e7e:	f102 0608 	add.w	r6, r2, #8
   11e82:	e9d2 4500 	ldrd	r4, r5, [r2]
   11e86:	e00b      	b.n	11ea0 <_svfiprintf_r+0x3b6>
   11e88:	f017 0f10 	tst.w	r7, #16
   11e8c:	f106 0204 	add.w	r2, r6, #4
   11e90:	d103      	bne.n	11e9a <_svfiprintf_r+0x3b0>
   11e92:	0679      	lsls	r1, r7, #25
   11e94:	d501      	bpl.n	11e9a <_svfiprintf_r+0x3b0>
   11e96:	8834      	ldrh	r4, [r6, #0]
   11e98:	e000      	b.n	11e9c <_svfiprintf_r+0x3b2>
   11e9a:	6834      	ldr	r4, [r6, #0]
   11e9c:	2500      	movs	r5, #0
   11e9e:	4616      	mov	r6, r2
   11ea0:	07fa      	lsls	r2, r7, #31
   11ea2:	d509      	bpl.n	11eb8 <_svfiprintf_r+0x3ce>
   11ea4:	ea54 0005 	orrs.w	r0, r4, r5
   11ea8:	d006      	beq.n	11eb8 <_svfiprintf_r+0x3ce>
   11eaa:	2230      	movs	r2, #48	; 0x30
   11eac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   11eb0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   11eb4:	f047 0702 	orr.w	r7, r7, #2
   11eb8:	2302      	movs	r3, #2
   11eba:	2200      	movs	r2, #0
   11ebc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11ec0:	e005      	b.n	11ece <_svfiprintf_r+0x3e4>
   11ec2:	bf00      	nop
   11ec4:	00012ff3 	.word	0x00012ff3
   11ec8:	00012fe2 	.word	0x00012fe2
   11ecc:	2301      	movs	r3, #1
   11ece:	f1ba 0f00 	cmp.w	sl, #0
   11ed2:	bfa8      	it	ge
   11ed4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   11ed8:	ea54 0105 	orrs.w	r1, r4, r5
   11edc:	d102      	bne.n	11ee4 <_svfiprintf_r+0x3fa>
   11ede:	f1ba 0f00 	cmp.w	sl, #0
   11ee2:	d05e      	beq.n	11fa2 <_svfiprintf_r+0x4b8>
   11ee4:	2b01      	cmp	r3, #1
   11ee6:	d01f      	beq.n	11f28 <_svfiprintf_r+0x43e>
   11ee8:	2b02      	cmp	r3, #2
   11eea:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   11eee:	d045      	beq.n	11f7c <_svfiprintf_r+0x492>
   11ef0:	08e0      	lsrs	r0, r4, #3
   11ef2:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   11ef6:	08e8      	lsrs	r0, r5, #3
   11ef8:	9106      	str	r1, [sp, #24]
   11efa:	9007      	str	r0, [sp, #28]
   11efc:	f004 0207 	and.w	r2, r4, #7
   11f00:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   11f04:	3230      	adds	r2, #48	; 0x30
   11f06:	ea54 0105 	orrs.w	r1, r4, r5
   11f0a:	4699      	mov	r9, r3
   11f0c:	701a      	strb	r2, [r3, #0]
   11f0e:	f103 33ff 	add.w	r3, r3, #4294967295
   11f12:	d1ed      	bne.n	11ef0 <_svfiprintf_r+0x406>
   11f14:	07f8      	lsls	r0, r7, #31
   11f16:	4649      	mov	r1, r9
   11f18:	d54e      	bpl.n	11fb8 <_svfiprintf_r+0x4ce>
   11f1a:	2a30      	cmp	r2, #48	; 0x30
   11f1c:	d04c      	beq.n	11fb8 <_svfiprintf_r+0x4ce>
   11f1e:	4699      	mov	r9, r3
   11f20:	2330      	movs	r3, #48	; 0x30
   11f22:	f801 3c01 	strb.w	r3, [r1, #-1]
   11f26:	e047      	b.n	11fb8 <_svfiprintf_r+0x4ce>
   11f28:	2d00      	cmp	r5, #0
   11f2a:	bf08      	it	eq
   11f2c:	2c0a      	cmpeq	r4, #10
   11f2e:	d205      	bcs.n	11f3c <_svfiprintf_r+0x452>
   11f30:	3430      	adds	r4, #48	; 0x30
   11f32:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   11f36:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   11f3a:	e03d      	b.n	11fb8 <_svfiprintf_r+0x4ce>
   11f3c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   11f40:	9203      	str	r2, [sp, #12]
   11f42:	4620      	mov	r0, r4
   11f44:	4629      	mov	r1, r5
   11f46:	220a      	movs	r2, #10
   11f48:	2300      	movs	r3, #0
   11f4a:	f8cd c004 	str.w	ip, [sp, #4]
   11f4e:	f7fb f8bb 	bl	d0c8 <__aeabi_uldivmod>
   11f52:	9b03      	ldr	r3, [sp, #12]
   11f54:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11f58:	3230      	adds	r2, #48	; 0x30
   11f5a:	f803 2901 	strb.w	r2, [r3], #-1
   11f5e:	4620      	mov	r0, r4
   11f60:	9303      	str	r3, [sp, #12]
   11f62:	4629      	mov	r1, r5
   11f64:	220a      	movs	r2, #10
   11f66:	2300      	movs	r3, #0
   11f68:	f7fb f8ae 	bl	d0c8 <__aeabi_uldivmod>
   11f6c:	4604      	mov	r4, r0
   11f6e:	460d      	mov	r5, r1
   11f70:	ea54 0005 	orrs.w	r0, r4, r5
   11f74:	f8dd c004 	ldr.w	ip, [sp, #4]
   11f78:	d1e3      	bne.n	11f42 <_svfiprintf_r+0x458>
   11f7a:	e01d      	b.n	11fb8 <_svfiprintf_r+0x4ce>
   11f7c:	f004 020f 	and.w	r2, r4, #15
   11f80:	990a      	ldr	r1, [sp, #40]	; 0x28
   11f82:	5c8a      	ldrb	r2, [r1, r2]
   11f84:	4699      	mov	r9, r3
   11f86:	f803 2901 	strb.w	r2, [r3], #-1
   11f8a:	0922      	lsrs	r2, r4, #4
   11f8c:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   11f90:	0929      	lsrs	r1, r5, #4
   11f92:	9008      	str	r0, [sp, #32]
   11f94:	9109      	str	r1, [sp, #36]	; 0x24
   11f96:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   11f9a:	ea54 0205 	orrs.w	r2, r4, r5
   11f9e:	d1ed      	bne.n	11f7c <_svfiprintf_r+0x492>
   11fa0:	e00a      	b.n	11fb8 <_svfiprintf_r+0x4ce>
   11fa2:	b93b      	cbnz	r3, 11fb4 <_svfiprintf_r+0x4ca>
   11fa4:	07f9      	lsls	r1, r7, #31
   11fa6:	d505      	bpl.n	11fb4 <_svfiprintf_r+0x4ca>
   11fa8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   11fac:	2330      	movs	r3, #48	; 0x30
   11fae:	f809 3d41 	strb.w	r3, [r9, #-65]!
   11fb2:	e001      	b.n	11fb8 <_svfiprintf_r+0x4ce>
   11fb4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   11fb8:	4655      	mov	r5, sl
   11fba:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   11fbe:	ebc9 0a0a 	rsb	sl, r9, sl
   11fc2:	e00f      	b.n	11fe4 <_svfiprintf_r+0x4fa>
   11fc4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   11fc8:	2b00      	cmp	r3, #0
   11fca:	f000 8171 	beq.w	122b0 <_svfiprintf_r+0x7c6>
   11fce:	2500      	movs	r5, #0
   11fd0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11fd4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   11fd8:	f04f 0a01 	mov.w	sl, #1
   11fdc:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   11fe0:	e000      	b.n	11fe4 <_svfiprintf_r+0x4fa>
   11fe2:	4605      	mov	r5, r0
   11fe4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   11fe8:	45aa      	cmp	sl, r5
   11fea:	bfac      	ite	ge
   11fec:	4654      	movge	r4, sl
   11fee:	462c      	movlt	r4, r5
   11ff0:	b103      	cbz	r3, 11ff4 <_svfiprintf_r+0x50a>
   11ff2:	3401      	adds	r4, #1
   11ff4:	f017 0302 	ands.w	r3, r7, #2
   11ff8:	9303      	str	r3, [sp, #12]
   11ffa:	bf18      	it	ne
   11ffc:	3402      	addne	r4, #2
   11ffe:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   12002:	930b      	str	r3, [sp, #44]	; 0x2c
   12004:	d13b      	bne.n	1207e <_svfiprintf_r+0x594>
   12006:	9804      	ldr	r0, [sp, #16]
   12008:	1b03      	subs	r3, r0, r4
   1200a:	2b00      	cmp	r3, #0
   1200c:	dd37      	ble.n	1207e <_svfiprintf_r+0x594>
   1200e:	4aa6      	ldr	r2, [pc, #664]	; (122a8 <_svfiprintf_r+0x7be>)
   12010:	f8cc 2000 	str.w	r2, [ip]
   12014:	2b10      	cmp	r3, #16
   12016:	dd1b      	ble.n	12050 <_svfiprintf_r+0x566>
   12018:	2210      	movs	r2, #16
   1201a:	f8cc 2004 	str.w	r2, [ip, #4]
   1201e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12020:	3210      	adds	r2, #16
   12022:	9211      	str	r2, [sp, #68]	; 0x44
   12024:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12026:	3201      	adds	r2, #1
   12028:	2a07      	cmp	r2, #7
   1202a:	9210      	str	r2, [sp, #64]	; 0x40
   1202c:	dc02      	bgt.n	12034 <_svfiprintf_r+0x54a>
   1202e:	f10c 0c08 	add.w	ip, ip, #8
   12032:	e00b      	b.n	1204c <_svfiprintf_r+0x562>
   12034:	4658      	mov	r0, fp
   12036:	4641      	mov	r1, r8
   12038:	aa0f      	add	r2, sp, #60	; 0x3c
   1203a:	9301      	str	r3, [sp, #4]
   1203c:	f7ff fcdc 	bl	119f8 <__ssprint_r>
   12040:	9b01      	ldr	r3, [sp, #4]
   12042:	2800      	cmp	r0, #0
   12044:	f040 813b 	bne.w	122be <_svfiprintf_r+0x7d4>
   12048:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   1204c:	3b10      	subs	r3, #16
   1204e:	e7de      	b.n	1200e <_svfiprintf_r+0x524>
   12050:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12052:	f8cc 3004 	str.w	r3, [ip, #4]
   12056:	4413      	add	r3, r2
   12058:	9311      	str	r3, [sp, #68]	; 0x44
   1205a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1205c:	3301      	adds	r3, #1
   1205e:	2b07      	cmp	r3, #7
   12060:	9310      	str	r3, [sp, #64]	; 0x40
   12062:	dc02      	bgt.n	1206a <_svfiprintf_r+0x580>
   12064:	f10c 0c08 	add.w	ip, ip, #8
   12068:	e009      	b.n	1207e <_svfiprintf_r+0x594>
   1206a:	4658      	mov	r0, fp
   1206c:	4641      	mov	r1, r8
   1206e:	aa0f      	add	r2, sp, #60	; 0x3c
   12070:	f7ff fcc2 	bl	119f8 <__ssprint_r>
   12074:	2800      	cmp	r0, #0
   12076:	f040 8122 	bne.w	122be <_svfiprintf_r+0x7d4>
   1207a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   1207e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12082:	b1db      	cbz	r3, 120bc <_svfiprintf_r+0x5d2>
   12084:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   12088:	f8cc 3000 	str.w	r3, [ip]
   1208c:	2301      	movs	r3, #1
   1208e:	f8cc 3004 	str.w	r3, [ip, #4]
   12092:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12094:	3301      	adds	r3, #1
   12096:	9311      	str	r3, [sp, #68]	; 0x44
   12098:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1209a:	3301      	adds	r3, #1
   1209c:	2b07      	cmp	r3, #7
   1209e:	9310      	str	r3, [sp, #64]	; 0x40
   120a0:	dc02      	bgt.n	120a8 <_svfiprintf_r+0x5be>
   120a2:	f10c 0c08 	add.w	ip, ip, #8
   120a6:	e009      	b.n	120bc <_svfiprintf_r+0x5d2>
   120a8:	4658      	mov	r0, fp
   120aa:	4641      	mov	r1, r8
   120ac:	aa0f      	add	r2, sp, #60	; 0x3c
   120ae:	f7ff fca3 	bl	119f8 <__ssprint_r>
   120b2:	2800      	cmp	r0, #0
   120b4:	f040 8103 	bne.w	122be <_svfiprintf_r+0x7d4>
   120b8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   120bc:	9b03      	ldr	r3, [sp, #12]
   120be:	b1d3      	cbz	r3, 120f6 <_svfiprintf_r+0x60c>
   120c0:	ab0e      	add	r3, sp, #56	; 0x38
   120c2:	f8cc 3000 	str.w	r3, [ip]
   120c6:	2302      	movs	r3, #2
   120c8:	f8cc 3004 	str.w	r3, [ip, #4]
   120cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120ce:	3302      	adds	r3, #2
   120d0:	9311      	str	r3, [sp, #68]	; 0x44
   120d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   120d4:	3301      	adds	r3, #1
   120d6:	2b07      	cmp	r3, #7
   120d8:	9310      	str	r3, [sp, #64]	; 0x40
   120da:	dc02      	bgt.n	120e2 <_svfiprintf_r+0x5f8>
   120dc:	f10c 0c08 	add.w	ip, ip, #8
   120e0:	e009      	b.n	120f6 <_svfiprintf_r+0x60c>
   120e2:	4658      	mov	r0, fp
   120e4:	4641      	mov	r1, r8
   120e6:	aa0f      	add	r2, sp, #60	; 0x3c
   120e8:	f7ff fc86 	bl	119f8 <__ssprint_r>
   120ec:	2800      	cmp	r0, #0
   120ee:	f040 80e6 	bne.w	122be <_svfiprintf_r+0x7d4>
   120f2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   120f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120f8:	2b80      	cmp	r3, #128	; 0x80
   120fa:	d13f      	bne.n	1217c <_svfiprintf_r+0x692>
   120fc:	9b04      	ldr	r3, [sp, #16]
   120fe:	1b1b      	subs	r3, r3, r4
   12100:	2b00      	cmp	r3, #0
   12102:	9303      	str	r3, [sp, #12]
   12104:	dd3a      	ble.n	1217c <_svfiprintf_r+0x692>
   12106:	9b03      	ldr	r3, [sp, #12]
   12108:	2b10      	cmp	r3, #16
   1210a:	4b68      	ldr	r3, [pc, #416]	; (122ac <_svfiprintf_r+0x7c2>)
   1210c:	f8cc 3000 	str.w	r3, [ip]
   12110:	dd1b      	ble.n	1214a <_svfiprintf_r+0x660>
   12112:	2310      	movs	r3, #16
   12114:	f8cc 3004 	str.w	r3, [ip, #4]
   12118:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1211a:	3310      	adds	r3, #16
   1211c:	9311      	str	r3, [sp, #68]	; 0x44
   1211e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12120:	3301      	adds	r3, #1
   12122:	2b07      	cmp	r3, #7
   12124:	9310      	str	r3, [sp, #64]	; 0x40
   12126:	dc02      	bgt.n	1212e <_svfiprintf_r+0x644>
   12128:	f10c 0c08 	add.w	ip, ip, #8
   1212c:	e009      	b.n	12142 <_svfiprintf_r+0x658>
   1212e:	4658      	mov	r0, fp
   12130:	4641      	mov	r1, r8
   12132:	aa0f      	add	r2, sp, #60	; 0x3c
   12134:	f7ff fc60 	bl	119f8 <__ssprint_r>
   12138:	2800      	cmp	r0, #0
   1213a:	f040 80c0 	bne.w	122be <_svfiprintf_r+0x7d4>
   1213e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   12142:	9b03      	ldr	r3, [sp, #12]
   12144:	3b10      	subs	r3, #16
   12146:	9303      	str	r3, [sp, #12]
   12148:	e7dd      	b.n	12106 <_svfiprintf_r+0x61c>
   1214a:	9b03      	ldr	r3, [sp, #12]
   1214c:	f8cc 3004 	str.w	r3, [ip, #4]
   12150:	9803      	ldr	r0, [sp, #12]
   12152:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12154:	4403      	add	r3, r0
   12156:	9311      	str	r3, [sp, #68]	; 0x44
   12158:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1215a:	3301      	adds	r3, #1
   1215c:	2b07      	cmp	r3, #7
   1215e:	9310      	str	r3, [sp, #64]	; 0x40
   12160:	dc02      	bgt.n	12168 <_svfiprintf_r+0x67e>
   12162:	f10c 0c08 	add.w	ip, ip, #8
   12166:	e009      	b.n	1217c <_svfiprintf_r+0x692>
   12168:	4658      	mov	r0, fp
   1216a:	4641      	mov	r1, r8
   1216c:	aa0f      	add	r2, sp, #60	; 0x3c
   1216e:	f7ff fc43 	bl	119f8 <__ssprint_r>
   12172:	2800      	cmp	r0, #0
   12174:	f040 80a3 	bne.w	122be <_svfiprintf_r+0x7d4>
   12178:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   1217c:	ebca 0505 	rsb	r5, sl, r5
   12180:	2d00      	cmp	r5, #0
   12182:	dd34      	ble.n	121ee <_svfiprintf_r+0x704>
   12184:	4b49      	ldr	r3, [pc, #292]	; (122ac <_svfiprintf_r+0x7c2>)
   12186:	f8cc 3000 	str.w	r3, [ip]
   1218a:	2d10      	cmp	r5, #16
   1218c:	dd19      	ble.n	121c2 <_svfiprintf_r+0x6d8>
   1218e:	2310      	movs	r3, #16
   12190:	f8cc 3004 	str.w	r3, [ip, #4]
   12194:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12196:	3310      	adds	r3, #16
   12198:	9311      	str	r3, [sp, #68]	; 0x44
   1219a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1219c:	3301      	adds	r3, #1
   1219e:	2b07      	cmp	r3, #7
   121a0:	9310      	str	r3, [sp, #64]	; 0x40
   121a2:	dc02      	bgt.n	121aa <_svfiprintf_r+0x6c0>
   121a4:	f10c 0c08 	add.w	ip, ip, #8
   121a8:	e009      	b.n	121be <_svfiprintf_r+0x6d4>
   121aa:	4658      	mov	r0, fp
   121ac:	4641      	mov	r1, r8
   121ae:	aa0f      	add	r2, sp, #60	; 0x3c
   121b0:	f7ff fc22 	bl	119f8 <__ssprint_r>
   121b4:	2800      	cmp	r0, #0
   121b6:	f040 8082 	bne.w	122be <_svfiprintf_r+0x7d4>
   121ba:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   121be:	3d10      	subs	r5, #16
   121c0:	e7e0      	b.n	12184 <_svfiprintf_r+0x69a>
   121c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   121c4:	f8cc 5004 	str.w	r5, [ip, #4]
   121c8:	441d      	add	r5, r3
   121ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   121cc:	9511      	str	r5, [sp, #68]	; 0x44
   121ce:	3301      	adds	r3, #1
   121d0:	2b07      	cmp	r3, #7
   121d2:	9310      	str	r3, [sp, #64]	; 0x40
   121d4:	dc02      	bgt.n	121dc <_svfiprintf_r+0x6f2>
   121d6:	f10c 0c08 	add.w	ip, ip, #8
   121da:	e008      	b.n	121ee <_svfiprintf_r+0x704>
   121dc:	4658      	mov	r0, fp
   121de:	4641      	mov	r1, r8
   121e0:	aa0f      	add	r2, sp, #60	; 0x3c
   121e2:	f7ff fc09 	bl	119f8 <__ssprint_r>
   121e6:	2800      	cmp	r0, #0
   121e8:	d169      	bne.n	122be <_svfiprintf_r+0x7d4>
   121ea:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   121ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   121f0:	4453      	add	r3, sl
   121f2:	9311      	str	r3, [sp, #68]	; 0x44
   121f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   121f6:	3301      	adds	r3, #1
   121f8:	2b07      	cmp	r3, #7
   121fa:	e88c 0600 	stmia.w	ip, {r9, sl}
   121fe:	9310      	str	r3, [sp, #64]	; 0x40
   12200:	dc02      	bgt.n	12208 <_svfiprintf_r+0x71e>
   12202:	f10c 0308 	add.w	r3, ip, #8
   12206:	e007      	b.n	12218 <_svfiprintf_r+0x72e>
   12208:	4658      	mov	r0, fp
   1220a:	4641      	mov	r1, r8
   1220c:	aa0f      	add	r2, sp, #60	; 0x3c
   1220e:	f7ff fbf3 	bl	119f8 <__ssprint_r>
   12212:	2800      	cmp	r0, #0
   12214:	d153      	bne.n	122be <_svfiprintf_r+0x7d4>
   12216:	ab1c      	add	r3, sp, #112	; 0x70
   12218:	077a      	lsls	r2, r7, #29
   1221a:	d40a      	bmi.n	12232 <_svfiprintf_r+0x748>
   1221c:	9d05      	ldr	r5, [sp, #20]
   1221e:	9804      	ldr	r0, [sp, #16]
   12220:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12222:	4284      	cmp	r4, r0
   12224:	bfac      	ite	ge
   12226:	192d      	addge	r5, r5, r4
   12228:	182d      	addlt	r5, r5, r0
   1222a:	9505      	str	r5, [sp, #20]
   1222c:	2b00      	cmp	r3, #0
   1222e:	d035      	beq.n	1229c <_svfiprintf_r+0x7b2>
   12230:	e02e      	b.n	12290 <_svfiprintf_r+0x7a6>
   12232:	9904      	ldr	r1, [sp, #16]
   12234:	1b0d      	subs	r5, r1, r4
   12236:	2d00      	cmp	r5, #0
   12238:	ddf0      	ble.n	1221c <_svfiprintf_r+0x732>
   1223a:	4a1b      	ldr	r2, [pc, #108]	; (122a8 <_svfiprintf_r+0x7be>)
   1223c:	601a      	str	r2, [r3, #0]
   1223e:	2d10      	cmp	r5, #16
   12240:	dd15      	ble.n	1226e <_svfiprintf_r+0x784>
   12242:	2210      	movs	r2, #16
   12244:	605a      	str	r2, [r3, #4]
   12246:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12248:	3210      	adds	r2, #16
   1224a:	9211      	str	r2, [sp, #68]	; 0x44
   1224c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1224e:	3201      	adds	r2, #1
   12250:	2a07      	cmp	r2, #7
   12252:	9210      	str	r2, [sp, #64]	; 0x40
   12254:	dc01      	bgt.n	1225a <_svfiprintf_r+0x770>
   12256:	3308      	adds	r3, #8
   12258:	e007      	b.n	1226a <_svfiprintf_r+0x780>
   1225a:	4658      	mov	r0, fp
   1225c:	4641      	mov	r1, r8
   1225e:	aa0f      	add	r2, sp, #60	; 0x3c
   12260:	f7ff fbca 	bl	119f8 <__ssprint_r>
   12264:	2800      	cmp	r0, #0
   12266:	d12a      	bne.n	122be <_svfiprintf_r+0x7d4>
   12268:	ab1c      	add	r3, sp, #112	; 0x70
   1226a:	3d10      	subs	r5, #16
   1226c:	e7e5      	b.n	1223a <_svfiprintf_r+0x750>
   1226e:	605d      	str	r5, [r3, #4]
   12270:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12272:	441d      	add	r5, r3
   12274:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12276:	9511      	str	r5, [sp, #68]	; 0x44
   12278:	3301      	adds	r3, #1
   1227a:	2b07      	cmp	r3, #7
   1227c:	9310      	str	r3, [sp, #64]	; 0x40
   1227e:	ddcd      	ble.n	1221c <_svfiprintf_r+0x732>
   12280:	4658      	mov	r0, fp
   12282:	4641      	mov	r1, r8
   12284:	aa0f      	add	r2, sp, #60	; 0x3c
   12286:	f7ff fbb7 	bl	119f8 <__ssprint_r>
   1228a:	2800      	cmp	r0, #0
   1228c:	d0c6      	beq.n	1221c <_svfiprintf_r+0x732>
   1228e:	e016      	b.n	122be <_svfiprintf_r+0x7d4>
   12290:	4658      	mov	r0, fp
   12292:	4641      	mov	r1, r8
   12294:	aa0f      	add	r2, sp, #60	; 0x3c
   12296:	f7ff fbaf 	bl	119f8 <__ssprint_r>
   1229a:	b980      	cbnz	r0, 122be <_svfiprintf_r+0x7d4>
   1229c:	2300      	movs	r3, #0
   1229e:	9310      	str	r3, [sp, #64]	; 0x40
   122a0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   122a4:	e447      	b.n	11b36 <_svfiprintf_r+0x4c>
   122a6:	bf00      	nop
   122a8:	00013168 	.word	0x00013168
   122ac:	00013178 	.word	0x00013178
   122b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   122b2:	b123      	cbz	r3, 122be <_svfiprintf_r+0x7d4>
   122b4:	4658      	mov	r0, fp
   122b6:	4641      	mov	r1, r8
   122b8:	aa0f      	add	r2, sp, #60	; 0x3c
   122ba:	f7ff fb9d 	bl	119f8 <__ssprint_r>
   122be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   122c2:	9805      	ldr	r0, [sp, #20]
   122c4:	f013 0f40 	tst.w	r3, #64	; 0x40
   122c8:	bf18      	it	ne
   122ca:	f04f 30ff 	movne.w	r0, #4294967295
   122ce:	b02d      	add	sp, #180	; 0xb4
   122d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000122d4 <__swbuf_r>:
   122d4:	b570      	push	{r4, r5, r6, lr}
   122d6:	460d      	mov	r5, r1
   122d8:	4614      	mov	r4, r2
   122da:	4606      	mov	r6, r0
   122dc:	b118      	cbz	r0, 122e6 <__swbuf_r+0x12>
   122de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   122e0:	b90b      	cbnz	r3, 122e6 <__swbuf_r+0x12>
   122e2:	f7fe f903 	bl	104ec <__sinit>
   122e6:	69a3      	ldr	r3, [r4, #24]
   122e8:	60a3      	str	r3, [r4, #8]
   122ea:	89a3      	ldrh	r3, [r4, #12]
   122ec:	0719      	lsls	r1, r3, #28
   122ee:	d50d      	bpl.n	1230c <__swbuf_r+0x38>
   122f0:	6923      	ldr	r3, [r4, #16]
   122f2:	b15b      	cbz	r3, 1230c <__swbuf_r+0x38>
   122f4:	89a3      	ldrh	r3, [r4, #12]
   122f6:	049a      	lsls	r2, r3, #18
   122f8:	b2ed      	uxtb	r5, r5
   122fa:	d410      	bmi.n	1231e <__swbuf_r+0x4a>
   122fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   12300:	81a3      	strh	r3, [r4, #12]
   12302:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12308:	6663      	str	r3, [r4, #100]	; 0x64
   1230a:	e008      	b.n	1231e <__swbuf_r+0x4a>
   1230c:	4630      	mov	r0, r6
   1230e:	4621      	mov	r1, r4
   12310:	f7fd f92a 	bl	f568 <__swsetup_r>
   12314:	2800      	cmp	r0, #0
   12316:	d0ed      	beq.n	122f4 <__swbuf_r+0x20>
   12318:	f04f 30ff 	mov.w	r0, #4294967295
   1231c:	bd70      	pop	{r4, r5, r6, pc}
   1231e:	6923      	ldr	r3, [r4, #16]
   12320:	6820      	ldr	r0, [r4, #0]
   12322:	1ac0      	subs	r0, r0, r3
   12324:	6963      	ldr	r3, [r4, #20]
   12326:	4298      	cmp	r0, r3
   12328:	db05      	blt.n	12336 <__swbuf_r+0x62>
   1232a:	4630      	mov	r0, r6
   1232c:	4621      	mov	r1, r4
   1232e:	f7fe f893 	bl	10458 <_fflush_r>
   12332:	2800      	cmp	r0, #0
   12334:	d1f0      	bne.n	12318 <__swbuf_r+0x44>
   12336:	68a3      	ldr	r3, [r4, #8]
   12338:	3b01      	subs	r3, #1
   1233a:	60a3      	str	r3, [r4, #8]
   1233c:	6823      	ldr	r3, [r4, #0]
   1233e:	1c5a      	adds	r2, r3, #1
   12340:	6022      	str	r2, [r4, #0]
   12342:	701d      	strb	r5, [r3, #0]
   12344:	6963      	ldr	r3, [r4, #20]
   12346:	3001      	adds	r0, #1
   12348:	4298      	cmp	r0, r3
   1234a:	d004      	beq.n	12356 <__swbuf_r+0x82>
   1234c:	89a3      	ldrh	r3, [r4, #12]
   1234e:	07db      	lsls	r3, r3, #31
   12350:	d507      	bpl.n	12362 <__swbuf_r+0x8e>
   12352:	2d0a      	cmp	r5, #10
   12354:	d105      	bne.n	12362 <__swbuf_r+0x8e>
   12356:	4630      	mov	r0, r6
   12358:	4621      	mov	r1, r4
   1235a:	f7fe f87d 	bl	10458 <_fflush_r>
   1235e:	2800      	cmp	r0, #0
   12360:	d1da      	bne.n	12318 <__swbuf_r+0x44>
   12362:	4628      	mov	r0, r5
   12364:	bd70      	pop	{r4, r5, r6, pc}

00012366 <__swbuf>:
   12366:	460a      	mov	r2, r1
   12368:	4902      	ldr	r1, [pc, #8]	; (12374 <__swbuf+0xe>)
   1236a:	4603      	mov	r3, r0
   1236c:	6808      	ldr	r0, [r1, #0]
   1236e:	4619      	mov	r1, r3
   12370:	f7ff bfb0 	b.w	122d4 <__swbuf_r>
   12374:	200004c0 	.word	0x200004c0

00012378 <_wcrtomb_r>:
   12378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1237c:	461d      	mov	r5, r3
   1237e:	4b10      	ldr	r3, [pc, #64]	; (123c0 <_wcrtomb_r+0x48>)
   12380:	b086      	sub	sp, #24
   12382:	4604      	mov	r4, r0
   12384:	4690      	mov	r8, r2
   12386:	460e      	mov	r6, r1
   12388:	681f      	ldr	r7, [r3, #0]
   1238a:	b939      	cbnz	r1, 1239c <_wcrtomb_r+0x24>
   1238c:	f7fe fc90 	bl	10cb0 <__locale_charset>
   12390:	9500      	str	r5, [sp, #0]
   12392:	4603      	mov	r3, r0
   12394:	a903      	add	r1, sp, #12
   12396:	4620      	mov	r0, r4
   12398:	4632      	mov	r2, r6
   1239a:	e006      	b.n	123aa <_wcrtomb_r+0x32>
   1239c:	f7fe fc88 	bl	10cb0 <__locale_charset>
   123a0:	9500      	str	r5, [sp, #0]
   123a2:	4603      	mov	r3, r0
   123a4:	4631      	mov	r1, r6
   123a6:	4620      	mov	r0, r4
   123a8:	4642      	mov	r2, r8
   123aa:	47b8      	blx	r7
   123ac:	1c43      	adds	r3, r0, #1
   123ae:	d103      	bne.n	123b8 <_wcrtomb_r+0x40>
   123b0:	2300      	movs	r3, #0
   123b2:	602b      	str	r3, [r5, #0]
   123b4:	238a      	movs	r3, #138	; 0x8a
   123b6:	6023      	str	r3, [r4, #0]
   123b8:	b006      	add	sp, #24
   123ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123be:	bf00      	nop
   123c0:	20000d7c 	.word	0x20000d7c

000123c4 <wcrtomb>:
   123c4:	b530      	push	{r4, r5, lr}
   123c6:	4613      	mov	r3, r2
   123c8:	4a04      	ldr	r2, [pc, #16]	; (123dc <wcrtomb+0x18>)
   123ca:	4605      	mov	r5, r0
   123cc:	460c      	mov	r4, r1
   123ce:	6810      	ldr	r0, [r2, #0]
   123d0:	4629      	mov	r1, r5
   123d2:	4622      	mov	r2, r4
   123d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   123d8:	f7ff bfce 	b.w	12378 <_wcrtomb_r>
   123dc:	200004c0 	.word	0x200004c0

000123e0 <__ascii_wctomb>:
   123e0:	b149      	cbz	r1, 123f6 <__ascii_wctomb+0x16>
   123e2:	2aff      	cmp	r2, #255	; 0xff
   123e4:	d904      	bls.n	123f0 <__ascii_wctomb+0x10>
   123e6:	238a      	movs	r3, #138	; 0x8a
   123e8:	6003      	str	r3, [r0, #0]
   123ea:	f04f 30ff 	mov.w	r0, #4294967295
   123ee:	4770      	bx	lr
   123f0:	700a      	strb	r2, [r1, #0]
   123f2:	2001      	movs	r0, #1
   123f4:	4770      	bx	lr
   123f6:	4608      	mov	r0, r1
   123f8:	4770      	bx	lr

000123fa <_wctomb_r>:
   123fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   123fe:	4698      	mov	r8, r3
   12400:	4b08      	ldr	r3, [pc, #32]	; (12424 <_wctomb_r+0x2a>)
   12402:	4605      	mov	r5, r0
   12404:	681c      	ldr	r4, [r3, #0]
   12406:	460f      	mov	r7, r1
   12408:	4616      	mov	r6, r2
   1240a:	f7fe fc51 	bl	10cb0 <__locale_charset>
   1240e:	f8cd 8000 	str.w	r8, [sp]
   12412:	4603      	mov	r3, r0
   12414:	4639      	mov	r1, r7
   12416:	4628      	mov	r0, r5
   12418:	4632      	mov	r2, r6
   1241a:	47a0      	blx	r4
   1241c:	b002      	add	sp, #8
   1241e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12422:	bf00      	nop
   12424:	20000d7c 	.word	0x20000d7c

00012428 <_write_r>:
   12428:	b538      	push	{r3, r4, r5, lr}
   1242a:	4c07      	ldr	r4, [pc, #28]	; (12448 <_write_r+0x20>)
   1242c:	4605      	mov	r5, r0
   1242e:	2000      	movs	r0, #0
   12430:	6020      	str	r0, [r4, #0]
   12432:	4608      	mov	r0, r1
   12434:	4611      	mov	r1, r2
   12436:	461a      	mov	r2, r3
   12438:	f7ef fc22 	bl	1c80 <_write>
   1243c:	1c43      	adds	r3, r0, #1
   1243e:	d102      	bne.n	12446 <_write_r+0x1e>
   12440:	6823      	ldr	r3, [r4, #0]
   12442:	b103      	cbz	r3, 12446 <_write_r+0x1e>
   12444:	602b      	str	r3, [r5, #0]
   12446:	bd38      	pop	{r3, r4, r5, pc}
   12448:	20001498 	.word	0x20001498

0001244c <_calloc_r>:
   1244c:	b510      	push	{r4, lr}
   1244e:	4351      	muls	r1, r2
   12450:	f7fb f988 	bl	d764 <_malloc_r>
   12454:	4604      	mov	r4, r0
   12456:	b320      	cbz	r0, 124a2 <_calloc_r+0x56>
   12458:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1245c:	f022 0203 	bic.w	r2, r2, #3
   12460:	3a04      	subs	r2, #4
   12462:	2a24      	cmp	r2, #36	; 0x24
   12464:	d81a      	bhi.n	1249c <_calloc_r+0x50>
   12466:	2a13      	cmp	r2, #19
   12468:	d912      	bls.n	12490 <_calloc_r+0x44>
   1246a:	2100      	movs	r1, #0
   1246c:	2a1b      	cmp	r2, #27
   1246e:	6001      	str	r1, [r0, #0]
   12470:	6041      	str	r1, [r0, #4]
   12472:	d802      	bhi.n	1247a <_calloc_r+0x2e>
   12474:	f100 0308 	add.w	r3, r0, #8
   12478:	e00b      	b.n	12492 <_calloc_r+0x46>
   1247a:	2a24      	cmp	r2, #36	; 0x24
   1247c:	6081      	str	r1, [r0, #8]
   1247e:	60c1      	str	r1, [r0, #12]
   12480:	bf11      	iteee	ne
   12482:	f100 0310 	addne.w	r3, r0, #16
   12486:	6101      	streq	r1, [r0, #16]
   12488:	f100 0318 	addeq.w	r3, r0, #24
   1248c:	6141      	streq	r1, [r0, #20]
   1248e:	e000      	b.n	12492 <_calloc_r+0x46>
   12490:	4603      	mov	r3, r0
   12492:	2200      	movs	r2, #0
   12494:	601a      	str	r2, [r3, #0]
   12496:	605a      	str	r2, [r3, #4]
   12498:	609a      	str	r2, [r3, #8]
   1249a:	e002      	b.n	124a2 <_calloc_r+0x56>
   1249c:	2100      	movs	r1, #0
   1249e:	f7fb fb6b 	bl	db78 <memset>
   124a2:	4620      	mov	r0, r4
   124a4:	bd10      	pop	{r4, pc}
	...

000124a8 <_close_r>:
   124a8:	b538      	push	{r3, r4, r5, lr}
   124aa:	4c06      	ldr	r4, [pc, #24]	; (124c4 <_close_r+0x1c>)
   124ac:	2300      	movs	r3, #0
   124ae:	4605      	mov	r5, r0
   124b0:	4608      	mov	r0, r1
   124b2:	6023      	str	r3, [r4, #0]
   124b4:	f7f8 fc3c 	bl	ad30 <_close>
   124b8:	1c43      	adds	r3, r0, #1
   124ba:	d102      	bne.n	124c2 <_close_r+0x1a>
   124bc:	6823      	ldr	r3, [r4, #0]
   124be:	b103      	cbz	r3, 124c2 <_close_r+0x1a>
   124c0:	602b      	str	r3, [r5, #0]
   124c2:	bd38      	pop	{r3, r4, r5, pc}
   124c4:	20001498 	.word	0x20001498

000124c8 <_fclose_r>:
   124c8:	b570      	push	{r4, r5, r6, lr}
   124ca:	4605      	mov	r5, r0
   124cc:	460c      	mov	r4, r1
   124ce:	b909      	cbnz	r1, 124d4 <_fclose_r+0xc>
   124d0:	2000      	movs	r0, #0
   124d2:	bd70      	pop	{r4, r5, r6, pc}
   124d4:	b118      	cbz	r0, 124de <_fclose_r+0x16>
   124d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   124d8:	b90b      	cbnz	r3, 124de <_fclose_r+0x16>
   124da:	f7fe f807 	bl	104ec <__sinit>
   124de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   124e2:	2b00      	cmp	r3, #0
   124e4:	d0f4      	beq.n	124d0 <_fclose_r+0x8>
   124e6:	4628      	mov	r0, r5
   124e8:	4621      	mov	r1, r4
   124ea:	f7fd ffb5 	bl	10458 <_fflush_r>
   124ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   124f0:	4606      	mov	r6, r0
   124f2:	b133      	cbz	r3, 12502 <_fclose_r+0x3a>
   124f4:	4628      	mov	r0, r5
   124f6:	69e1      	ldr	r1, [r4, #28]
   124f8:	4798      	blx	r3
   124fa:	2800      	cmp	r0, #0
   124fc:	bfb8      	it	lt
   124fe:	f04f 36ff 	movlt.w	r6, #4294967295
   12502:	89a3      	ldrh	r3, [r4, #12]
   12504:	061b      	lsls	r3, r3, #24
   12506:	d503      	bpl.n	12510 <_fclose_r+0x48>
   12508:	4628      	mov	r0, r5
   1250a:	6921      	ldr	r1, [r4, #16]
   1250c:	f7fe f972 	bl	107f4 <_free_r>
   12510:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12512:	b141      	cbz	r1, 12526 <_fclose_r+0x5e>
   12514:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12518:	4299      	cmp	r1, r3
   1251a:	d002      	beq.n	12522 <_fclose_r+0x5a>
   1251c:	4628      	mov	r0, r5
   1251e:	f7fe f969 	bl	107f4 <_free_r>
   12522:	2300      	movs	r3, #0
   12524:	6323      	str	r3, [r4, #48]	; 0x30
   12526:	6c61      	ldr	r1, [r4, #68]	; 0x44
   12528:	b121      	cbz	r1, 12534 <_fclose_r+0x6c>
   1252a:	4628      	mov	r0, r5
   1252c:	f7fe f962 	bl	107f4 <_free_r>
   12530:	2300      	movs	r3, #0
   12532:	6463      	str	r3, [r4, #68]	; 0x44
   12534:	f7fe f88c 	bl	10650 <__sfp_lock_acquire>
   12538:	2300      	movs	r3, #0
   1253a:	81a3      	strh	r3, [r4, #12]
   1253c:	f7fe f889 	bl	10652 <__sfp_lock_release>
   12540:	4630      	mov	r0, r6
   12542:	bd70      	pop	{r4, r5, r6, pc}

00012544 <fclose>:
   12544:	4b02      	ldr	r3, [pc, #8]	; (12550 <fclose+0xc>)
   12546:	4601      	mov	r1, r0
   12548:	6818      	ldr	r0, [r3, #0]
   1254a:	f7ff bfbd 	b.w	124c8 <_fclose_r>
   1254e:	bf00      	nop
   12550:	200004c0 	.word	0x200004c0

00012554 <_fstat_r>:
   12554:	b538      	push	{r3, r4, r5, lr}
   12556:	4c07      	ldr	r4, [pc, #28]	; (12574 <_fstat_r+0x20>)
   12558:	2300      	movs	r3, #0
   1255a:	4605      	mov	r5, r0
   1255c:	4608      	mov	r0, r1
   1255e:	4611      	mov	r1, r2
   12560:	6023      	str	r3, [r4, #0]
   12562:	f7f8 fbf1 	bl	ad48 <_fstat>
   12566:	1c43      	adds	r3, r0, #1
   12568:	d102      	bne.n	12570 <_fstat_r+0x1c>
   1256a:	6823      	ldr	r3, [r4, #0]
   1256c:	b103      	cbz	r3, 12570 <_fstat_r+0x1c>
   1256e:	602b      	str	r3, [r5, #0]
   12570:	bd38      	pop	{r3, r4, r5, pc}
   12572:	bf00      	nop
   12574:	20001498 	.word	0x20001498

00012578 <_isatty_r>:
   12578:	b538      	push	{r3, r4, r5, lr}
   1257a:	4c06      	ldr	r4, [pc, #24]	; (12594 <_isatty_r+0x1c>)
   1257c:	2300      	movs	r3, #0
   1257e:	4605      	mov	r5, r0
   12580:	4608      	mov	r0, r1
   12582:	6023      	str	r3, [r4, #0]
   12584:	f7f8 fbf0 	bl	ad68 <_isatty>
   12588:	1c43      	adds	r3, r0, #1
   1258a:	d102      	bne.n	12592 <_isatty_r+0x1a>
   1258c:	6823      	ldr	r3, [r4, #0]
   1258e:	b103      	cbz	r3, 12592 <_isatty_r+0x1a>
   12590:	602b      	str	r3, [r5, #0]
   12592:	bd38      	pop	{r3, r4, r5, pc}
   12594:	20001498 	.word	0x20001498

00012598 <_lseek_r>:
   12598:	b538      	push	{r3, r4, r5, lr}
   1259a:	4c07      	ldr	r4, [pc, #28]	; (125b8 <_lseek_r+0x20>)
   1259c:	4605      	mov	r5, r0
   1259e:	2000      	movs	r0, #0
   125a0:	6020      	str	r0, [r4, #0]
   125a2:	4608      	mov	r0, r1
   125a4:	4611      	mov	r1, r2
   125a6:	461a      	mov	r2, r3
   125a8:	f7f8 fbea 	bl	ad80 <_lseek>
   125ac:	1c43      	adds	r3, r0, #1
   125ae:	d102      	bne.n	125b6 <_lseek_r+0x1e>
   125b0:	6823      	ldr	r3, [r4, #0]
   125b2:	b103      	cbz	r3, 125b6 <_lseek_r+0x1e>
   125b4:	602b      	str	r3, [r5, #0]
   125b6:	bd38      	pop	{r3, r4, r5, pc}
   125b8:	20001498 	.word	0x20001498

000125bc <_read_r>:
   125bc:	b538      	push	{r3, r4, r5, lr}
   125be:	4c07      	ldr	r4, [pc, #28]	; (125dc <_read_r+0x20>)
   125c0:	4605      	mov	r5, r0
   125c2:	2000      	movs	r0, #0
   125c4:	6020      	str	r0, [r4, #0]
   125c6:	4608      	mov	r0, r1
   125c8:	4611      	mov	r1, r2
   125ca:	461a      	mov	r2, r3
   125cc:	f7ef fb2c 	bl	1c28 <_read>
   125d0:	1c43      	adds	r3, r0, #1
   125d2:	d102      	bne.n	125da <_read_r+0x1e>
   125d4:	6823      	ldr	r3, [r4, #0]
   125d6:	b103      	cbz	r3, 125da <_read_r+0x1e>
   125d8:	602b      	str	r3, [r5, #0]
   125da:	bd38      	pop	{r3, r4, r5, pc}
   125dc:	20001498 	.word	0x20001498

000125e0 <__aeabi_d2iz>:
   125e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   125e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   125e8:	d215      	bcs.n	12616 <__aeabi_d2iz+0x36>
   125ea:	d511      	bpl.n	12610 <__aeabi_d2iz+0x30>
   125ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   125f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   125f4:	d912      	bls.n	1261c <__aeabi_d2iz+0x3c>
   125f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   125fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   125fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12602:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12606:	fa23 f002 	lsr.w	r0, r3, r2
   1260a:	bf18      	it	ne
   1260c:	4240      	negne	r0, r0
   1260e:	4770      	bx	lr
   12610:	f04f 0000 	mov.w	r0, #0
   12614:	4770      	bx	lr
   12616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1261a:	d105      	bne.n	12628 <__aeabi_d2iz+0x48>
   1261c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   12620:	bf08      	it	eq
   12622:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12626:	4770      	bx	lr
   12628:	f04f 0000 	mov.w	r0, #0
   1262c:	4770      	bx	lr
   1262e:	bf00      	nop
   12630:	01020101 	.word	0x01020101
   12634:	00000018 	.word	0x00000018

00012638 <sd_mmc_trans_units>:
   12638:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00012654 <sd_trans_multipliers>:
   12654:	00000000 0000000a 0000000c 0000000d     ................
   12664:	0000000f 00000014 00000019 0000001e     ................
   12674:	00000023 00000028 0000002d 00000032     #...(...-...2...
   12684:	00000037 0000003c 00000046 00000050     7...<...F...P...

00012694 <mmc_trans_multipliers>:
   12694:	00000000 0000000a 0000000c 0000000d     ................
   126a4:	0000000f 00000014 0000001a 0000001e     ................
   126b4:	00000023 00000028 0000002d 00000034     #...(...-...4...
   126c4:	00000037 0000003c 00000046 00000050     7...<...F...P...

000126d4 <Tbl>:
   126d4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   126e4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   126f4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   12704:	00d600ff 00f800dc 00d800a3 019200d7     ................
   12714:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   12724:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   12734:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   12744:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   12754:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   12764:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   12774:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   12784:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   12794:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   127a4:	00da00de 00d900db 00dd00fd 00b400af     ................
   127b4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   127c4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000127d4 <tbl_lower.4253>:
   127d4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   127e4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   127f4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   12804:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   12814:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   12824:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   12834:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   12844:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   12854:	01050103 01090107 010d010b 0111010f     ................
   12864:	01150113 01190117 011d011b 0121011f     ..............!.
   12874:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   12884:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   12894:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   128a4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   128b4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   128c4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   128d4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   128e4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   128f4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   12904:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   12914:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   12924:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   12934:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   12944:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   12954:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   12964:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   12974:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   12984:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   12994:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   129a4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

000129b4 <tbl_upper.4254>:
   129b4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   129c4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   129d4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   129e4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   129f4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   12a04:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   12a14:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   12a24:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   12a34:	01040102 01080106 010c010a 0110010e     ................
   12a44:	01140112 01180116 011c011a 0120011e     .............. .
   12a54:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   12a64:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   12a74:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   12a84:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   12a94:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   12aa4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   12ab4:	03940393 03960395 03980397 039a0399     ................
   12ac4:	039c039b 039e039d 03a0039f 03a303a1     ................
   12ad4:	03a503a4 03a703a6 03a903a8 041003aa     ................
   12ae4:	04120411 04140413 04160415 04180417     ................
   12af4:	041a0419 041c041b 041e041d 0420041f     .............. .
   12b04:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   12b14:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   12b24:	04030402 04050404 04070406 04090408     ................
   12b34:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   12b44:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   12b54:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   12b64:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   12b74:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   12b84:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

00012b94 <LfnOfs>:
   12b94:	07050301 12100e09 1c181614 0000001e     ................
   12ba4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   12bb4:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   12bc4:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   12bd4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   12be4:	20205441 00202020                       AT     .

00012bec <excvt.4503>:
   12bec:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   12bfc:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   12c0c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   12c1c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   12c2c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   12c3c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   12c4c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   12c5c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   12c6c:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   12c7c:	22302074 00000000                       t 0"....

00012c84 <lun_desc>:
   12c84:	00001a45 00001a91 00000000 00001ad1     E...............
   12c94:	00001afd 00001b79 00001c05 00012c6c     ....y.......l,..
   12ca4:	64257325 7478742e 00000000 6c696166     %s%d.txt....fail
   12cb4:	00000000 0001c200 000000c0 00000800     ................
   12cc4:	00000000 64257325 0000002c 43202d2d     ....%s%d,...-- C
   12cd4:	65727275 6c20746e 6567676f 2d2d2072     urrent logger --
   12ce4:	2d2d0a0d 4d415320 58204c34 69616c70     ..-- SAM4L Xplai
   12cf4:	2064656e 206f7250 0a0d2d2d 43202d2d     ned Pro --..-- C
   12d04:	69706d6f 3a64656c 6c754a20 20342020     ompiled: Jul  4 
   12d14:	34313032 3a343120 303a3034 2d2d2036     2014 14:40:06 --
   12d24:	0000000d 666e6f43 72756769 20676e69     ....Configuring 
   12d34:	44454c4f 74756220 206e6f74 736e6970     OLED button pins
   12d44:	002e2e2e 0d0a4b4f 00000000 6f727245     ....OK......Erro
   12d54:	68772072 63206e65 69666e6f 69727567     r when configuri
   12d64:	4f20676e 2044454c 74747562 70206e6f     ng OLED button p
   12d74:	0a736e69 0000000d 666e6f43 72756769     ins.....Configur
   12d84:	20676e69 31647373 20363033 736e6970     ing ssd1306 pins
   12d94:	202e2e2e 00000000 6f727245 68772072     ... ....Error wh
   12da4:	63206e65 69666e6f 69727567 7320676e     en configuring s
   12db4:	33316473 70203630 0a736e69 0000000d     sd1306 pins.....
   12dc4:	666e6f43 72756769 20676e69 31647373     Configuring ssd1
   12dd4:	20363033 70736964 2e79616c 00002e2e     306 display.....
   12de4:	74696e49 69746169 6120676e 6f6c616e     Initiating analo
   12df4:	6f742067 67696420 6c617469 6e6f6320     g to digital con
   12e04:	74726576 2e2e7265 0000202e 6f727245     verter... ..Erro
   12e14:	68772072 69206e65 6974696e 6e697461     r when initiatin
   12e24:	44412067 000d0a43 74696e49 69746169     g ADC...Initiati
   12e34:	6120676e 636e7973 6e6f7268 2073756f     ng asynchronous 
   12e44:	656d6974 2e2e2e72 00000020 6f727245     timer... ...Erro
   12e54:	68772072 69206e65 6974696e 6e697461     r when initiatin
   12e64:	73412067 68636e79 6f6e6f72 74207375     g Asynchronous t
   12e74:	72656d69 00000d0a 74696e49 69746169     imer....Initiati
   12e84:	5320676e 4d4d2044 2e2e2e43 00000020     ng SD MMC... ...
   12e94:	74696e49 69746169 5320676e 6c706d61     Initiating Sampl
   12ea4:	20676e69 65646f4d 202e2e2e 00000000     ing Mode... ....
   12eb4:	706d6153 676e696c 2e302520 20416732     Sampling %0.2gA 
   12ec4:	20202020 6d643325 73643225 00202020         %3dm%2ds   .
   12ed4:	74696e49 69746169 5220676e 616c7065     Initiating Repla
   12ee4:	6f4d2079 2e2e6564 0000202e 74697257     y Mode... ..Writ
   12ef4:	20676e69 61746164 206f7420 63204453     ing data to SD c
   12f04:	2e647261 00002e2e 72727563 5f746e65     ard.....current_
   12f14:	61746164 00000000 00004b4f 4c494146     data....OK..FAIL
   12f24:	00000000 6c706552 6e697961 30252067     ....Replaying %0
   12f34:	4166322e 00202020 64332520 6432256d     .2fA   . %3dm%2d
   12f44:	00000073 72727543 20746e65 67676f6c     s...Current logg
   12f54:	00007265 73657250 75422073 6e6f7474     er..Press Button
   12f64:	74203120 7473206f 00747261 70736944      1 to start.Disp
   12f74:	2079616c 61647075 72206574 3a657461     lay update rate:
   12f84:	7a483120 00000000 706d6153 676e696c      1Hz....Sampling
   12f94:	65726620 6e657571 203a7963 7a486425      frequency: %dHz
   12fa4:	00000000 00676f6c                       ....log.

00012fac <_global_impure_ptr>:
   12fac:	200004c8 20200043                                ... C.

00012fb2 <blanks.6743>:
   12fb2:	20202020 20202020 20202020 20202020                     

00012fc2 <zeroes.6744>:
   12fc2:	30303030 30303030 30303030 30303030     0000000000000000
   12fd2:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   12fe2:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   12ff2:	32313000 36353433 61393837 65646362     .0123456789abcde
   13002:	00300066                                f.0.

00013006 <blanks.6701>:
   13006:	20202020 20202020 20202020 20202020                     

00013016 <zeroes.6702>:
   13016:	30303030 30303030 30303030 30303030     0000000000000000
   13026:	69666e49 7974696e 4e614e00 534f5000     Infinity.NaN.POS
   13036:	2e005849 00000000 00050000                       IX........

00013040 <p05.5289>:
   13040:	00000005 00000019 0000007d 00000000     ........}.......

00013050 <__mprec_tens>:
   13050:	00000000 3ff00000 00000000 40240000     .......?......$@
   13060:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   13070:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   13080:	00000000 412e8480 00000000 416312d0     .......A......cA
   13090:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   130a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   130b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   130c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   130d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   130e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   130f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   13100:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   13110:	79d99db4 44ea7843                       ...yCx.D

00013118 <__mprec_tinytens>:
   13118:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   13128:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   13138:	64ac6f43 0ac80628                       Co.d(...

00013140 <__mprec_bigtens>:
   13140:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   13150:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   13160:	7f73bf3c 75154fdd                       <.s..O.u

00013168 <blanks.6687>:
   13168:	20202020 20202020 20202020 20202020                     

00013178 <zeroes.6688>:
   13178:	30303030 30303030 30303030 30303030     0000000000000000

00013188 <_init>:
   13188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1318a:	bf00      	nop
   1318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1318e:	bc08      	pop	{r3}
   13190:	469e      	mov	lr, r3
   13192:	4770      	bx	lr

00013194 <__init_array_start>:
   13194:	0000f6b5 	.word	0x0000f6b5

00013198 <__frame_dummy_init_array_entry>:
   13198:	000001f9                                ....

0001319c <_fini>:
   1319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1319e:	bf00      	nop
   131a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131a2:	bc08      	pop	{r3}
   131a4:	469e      	mov	lr, r3
   131a6:	4770      	bx	lr

000131a8 <__fini_array_start>:
   131a8:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <bpm_ps_no_halt_exec>:
 * \param pmcon BPM_PMCON value to write
 *
 * \return PSOK status, true if set.
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
2000001c:	b480      	push	{r7}
2000001e:	b085      	sub	sp, #20
20000020:	af00      	add	r7, sp, #0
20000022:	6078      	str	r0, [r7, #4]
20000024:	6039      	str	r1, [r7, #0]
	bool b_psok = false;
20000026:	2300      	movs	r3, #0
20000028:	73fb      	strb	r3, [r7, #15]
	bool b_timeout = false;
2000002a:	2300      	movs	r3, #0
2000002c:	73bb      	strb	r3, [r7, #14]
	BPM_UNLOCK(PMCON);
2000002e:	4b15      	ldr	r3, [pc, #84]	; (20000084 <bpm_ps_no_halt_exec+0x68>)
20000030:	4a15      	ldr	r2, [pc, #84]	; (20000088 <bpm_ps_no_halt_exec+0x6c>)
20000032:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000034:	687b      	ldr	r3, [r7, #4]
20000036:	683a      	ldr	r2, [r7, #0]
20000038:	61da      	str	r2, [r3, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000003a:	4b12      	ldr	r3, [pc, #72]	; (20000084 <bpm_ps_no_halt_exec+0x68>)
2000003c:	695b      	ldr	r3, [r3, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b00      	cmp	r3, #0
20000044:	bf0c      	ite	eq
20000046:	2300      	moveq	r3, #0
20000048:	2301      	movne	r3, #1
2000004a:	73fb      	strb	r3, [r7, #15]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000004c:	4b0f      	ldr	r3, [pc, #60]	; (2000008c <bpm_ps_no_halt_exec+0x70>)
2000004e:	681b      	ldr	r3, [r3, #0]
20000050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000054:	2b00      	cmp	r3, #0
20000056:	bf0c      	ite	eq
20000058:	2300      	moveq	r3, #0
2000005a:	2301      	movne	r3, #1
2000005c:	73bb      	strb	r3, [r7, #14]
	} while (!b_psok && !b_timeout);
2000005e:	7bfb      	ldrb	r3, [r7, #15]
20000060:	f083 0301 	eor.w	r3, r3, #1
20000064:	b2db      	uxtb	r3, r3
20000066:	2b00      	cmp	r3, #0
20000068:	d005      	beq.n	20000076 <bpm_ps_no_halt_exec+0x5a>
2000006a:	7bbb      	ldrb	r3, [r7, #14]
2000006c:	f083 0301 	eor.w	r3, r3, #1
20000070:	b2db      	uxtb	r3, r3
20000072:	2b00      	cmp	r3, #0
20000074:	d1e1      	bne.n	2000003a <bpm_ps_no_halt_exec+0x1e>
	return b_psok;
20000076:	7bfb      	ldrb	r3, [r7, #15]
}
20000078:	4618      	mov	r0, r3
2000007a:	3714      	adds	r7, #20
2000007c:	46bd      	mov	sp, r7
2000007e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000082:	4770      	bx	lr
20000084:	400f0000 	.word	0x400f0000
20000088:	aa00001c 	.word	0xaa00001c
2000008c:	e000e010 	.word	0xe000e010

20000090 <font_table>:
20000090:	2000020c 20000210 20000214 20000218     ... ... ... ... 
200000a0:	20000220 20000228 20000230 20000238      .. (.. 0.. 8.. 
200000b0:	2000023c 20000240 20000244 20000248     <.. @.. D.. H.. 
200000c0:	2000024c 20000250 20000254 20000258     L.. P.. T.. X.. 
200000d0:	2000025c 20000264 2000026c 20000274     \.. d.. l.. t.. 
200000e0:	2000027c 20000284 2000028c 20000294     |.. ... ... ... 
200000f0:	2000029c 200002a4 200002ac 200002b0     ... ... ... ... 
20000100:	200002b4 200002bc 200002c4 200002cc     ... ... ... ... 
20000110:	200002d4 200002e0 200002e8 200002f0     ... ... ... ... 
20000120:	200002f8 20000300 20000308 20000310     ... ... ... ... 
20000130:	20000318 20000320 20000324 2000032c     ...  .. $.. ,.. 
20000140:	20000334 2000033c 20000344 2000034c     4.. <.. D.. L.. 
20000150:	20000354 2000035c 20000364 2000036c     T.. \.. d.. l.. 
20000160:	20000374 2000037c 20000384 2000038c     t.. |.. ... ... 
20000170:	20000394 2000039c 200003a4 200003ac     ... ... ... ... 
20000180:	200003b0 200003b4 200003b8 200003bc     ... ... ... ... 
20000190:	200003c0 200003c4 200003cc 200003d4     ... ... ... ... 
200001a0:	200003dc 200003e4 200003ec 200003f0     ... ... ... ... 
200001b0:	200003f8 20000400 20000404 20000408     ... ... ... ... 
200001c0:	20000410 20000414 2000041c 20000424     ... ... ... $.. 
200001d0:	2000042c 20000434 2000043c 20000440     ,.. 4.. <.. @.. 
200001e0:	20000448 2000044c 20000454 2000045c     H.. L.. T.. \.. 
200001f0:	20000464 2000046c 20000474 20000478     d.. l.. t.. x.. 
20000200:	2000047c 20000480 20000484              |.. ... ... 

2000020c <Font08px_32>:
2000020c:	00000002                                ....

20000210 <Font08px_33>:
20000210:	0000be01                                ....

20000214 <Font08px_34>:
20000214:	06000603                                ....

20000218 <Font08px_35>:
20000218:	28fe2805 000028fe                       .(.(.(..

20000220 <Font08px_36>:
20000220:	fe544805 00002454                       .HT.T$..

20000228 <Font08px_37>:
20000228:	10264605 0000c4c8                       .F&.....

20000230 <Font08px_38>:
20000230:	ac926c05 0000a040                       .l..@...

20000238 <Font08px_39>:
20000238:	00000601                                ....

2000023c <Font08px_40>:
2000023c:	82443803                                .8D.

20000240 <Font08px_41>:
20000240:	38448203                                ..D8

20000244 <Font08px_42>:
20000244:	28102803                                .(.(

20000248 <Font08px_43>:
20000248:	10381003                                ..8.

2000024c <Font08px_44>:
2000024c:	0000c001                                ....

20000250 <Font08px_45>:
20000250:	10101003                                ....

20000254 <Font08px_46>:
20000254:	00008001                                ....

20000258 <Font08px_47>:
20000258:	0638c003                                ..8.

2000025c <Font08px_N0>:
2000025c:	92a27c05 00007c8a                       .|...|..

20000264 <Font08px_N1>:
20000264:	fe840005 00000080                       ........

2000026c <Font08px_N2>:
2000026c:	a2c28405 00008c92                       ........

20000274 <Font08px_N3>:
20000274:	92824405 00006c92                       .D...l..

2000027c <Font08px_N4>:
2000027c:	24283005 000020fe                       .0($. ..

20000284 <Font08px_N5>:
20000284:	8a8a5e05 0000728a                       .^...r..

2000028c <Font08px_N6>:
2000028c:	92927c05 00006492                       .|...d..

20000294 <Font08px_N7>:
20000294:	f2020205 0000060a                       ........

2000029c <Font08px_N8>:
2000029c:	92926c05 00006c92                       .l...l..

200002a4 <Font08px_N9>:
200002a4:	92924c05 00007c92                       .L...|..

200002ac <Font08px_58>:
200002ac:	00004401                                .D..

200002b0 <Font08px_59>:
200002b0:	0000c401                                ....

200002b4 <Font08px_60>:
200002b4:	44281004 00000082                       ..(D....

200002bc <Font08px_61>:
200002bc:	28282804 00000028                       .((((...

200002c4 <Font08px_62>:
200002c4:	28448204 00000010                       ..D(....

200002cc <Font08px_63>:
200002cc:	a2020405 00000c12                       ........

200002d4 <Font08px_64>:
200002d4:	92443808 24baaaaa 00000018              .8D....$....

200002e0 <Font08px_UA>:
200002e0:	1214f805 0000f814                       ........

200002e8 <Font08px_UB>:
200002e8:	9292fe04 0000006c                       ....l...

200002f0 <Font08px_UC>:
200002f0:	82827c04 00000044                       .|..D...

200002f8 <Font08px_UD>:
200002f8:	8282fe04 0000007c                       ....|...

20000300 <Font08px_UE>:
20000300:	9292fe04 00000082                       ........

20000308 <Font08px_UF>:
20000308:	1212fe04 00000002                       ........

20000310 <Font08px_UG>:
20000310:	92827c05 0000f492                       .|......

20000318 <Font08px_UH>:
20000318:	1010fe04 000000fe                       ........

20000320 <Font08px_UI>:
20000320:	82fe8203                                ....

20000324 <Font08px_UJ>:
20000324:	80804004 0000007e                       .@..~...

2000032c <Font08px_UK>:
2000032c:	2810fe05 00008244                       ...(D...

20000334 <Font08px_UL>:
20000334:	8080fe04 00000080                       ........

2000033c <Font08px_UM>:
2000033c:	0804fe05 0000fe04                       ........

20000344 <Font08px_UN>:
20000344:	1804fe05 0000fe60                       ....`...

2000034c <Font08px_UO>:
2000034c:	82827c04 0000007c                       .|..|...

20000354 <Font08px_UP>:
20000354:	1212fe04 0000000c                       ........

2000035c <Font08px_UQ>:
2000035c:	a2827c05 0000bc42                       .|..B...

20000364 <Font08px_UR>:
20000364:	3212fe04 000000cc                       ...2....

2000036c <Font08px_US>:
2000036c:	92924c04 00000064                       .L..d...

20000374 <Font08px_UT>:
20000374:	fe020205 00000202                       ........

2000037c <Font08px_UU>:
2000037c:	80807e04 0000007e                       .~..~...

20000384 <Font08px_UV>:
20000384:	c0300e05 00000e30                       ..0.0...

2000038c <Font08px_UW>:
2000038c:	38c03e05 00003ec0                       .>.8.>..

20000394 <Font08px_UX>:
20000394:	1028c605 0000c628                       ..(.(...

2000039c <Font08px_UY>:
2000039c:	f0080605 00000608                       ........

200003a4 <Font08px_UZ>:
200003a4:	92a2c205 0000868a                       ........

200003ac <Font08px_91>:
200003ac:	8282fe03                                ....

200003b0 <Font08px_92>:
200003b0:	c0380603                                ..8.

200003b4 <Font08px_93>:
200003b4:	fe828203                                ....

200003b8 <Font08px_94>:
200003b8:	04020403                                ....

200003bc <Font08px_95>:
200003bc:	80808003                                ....

200003c0 <Font08px_96>:
200003c0:	00040202                                ....

200003c4 <Font08px_la>:
200003c4:	88887004 000000f8                       .p......

200003cc <Font08px_lb>:
200003cc:	8888fe04 00000070                       ....p...

200003d4 <Font08px_lc>:
200003d4:	88887004 00000088                       .p......

200003dc <Font08px_ld>:
200003dc:	88887004 000000fe                       .p......

200003e4 <Font08px_le>:
200003e4:	a8a87004 00000030                       .p..0...

200003ec <Font08px_lf>:
200003ec:	0212fc03                                ....

200003f0 <Font08px_lg>:
200003f0:	a8a81004 00000078                       ....x...

200003f8 <Font08px_lh>:
200003f8:	0810fe04 000000f0                       ........

20000400 <Font08px_li>:
20000400:	0000fa01                                ....

20000404 <Font08px_lj>:
20000404:	007a8002                                ..z.

20000408 <Font08px_lk>:
20000408:	5020fe04 00000088                       .. P....

20000410 <Font08px_ll>:
20000410:	0000fe01                                ....

20000414 <Font08px_lm>:
20000414:	f008f805 0000f008                       ........

2000041c <Font08px_ln>:
2000041c:	0810f804 000000f0                       ........

20000424 <Font08px_lo>:
20000424:	88887004 00000070                       .p..p...

2000042c <Font08px_lp>:
2000042c:	2828f804 00000010                       ..((....

20000434 <Font08px_lq>:
20000434:	28281004 000000f8                       ..((....

2000043c <Font08px_lr>:
2000043c:	0810f803                                ....

20000440 <Font08px_ls>:
20000440:	a8a89004 00000048                       ....H...

20000448 <Font08px_lt>:
20000448:	887c0803                                ..|.

2000044c <Font08px_lu>:
2000044c:	80807804 000000f8                       .x......

20000454 <Font08px_lv>:
20000454:	80601805 00001860                       ..`.`...

2000045c <Font08px_lw>:
2000045c:	30c03805 000038c0                       .8.0.8..

20000464 <Font08px_lx>:
20000464:	20508805 00008850                       ..P P...

2000046c <Font08px_ly>:
2000046c:	a0a01804 00000078                       ....x...

20000474 <Font08px_lz>:
20000474:	98a8c803                                ....

20000478 <Font08px_123>:
20000478:	826c1003                                ..l.

2000047c <Font08px_124>:
2000047c:	0000fe01                                ....

20000480 <Font08px_125>:
20000480:	106c8203                                ..l.

20000484 <Font08px_126>:
20000484:	10081005 00001020                       .... ...

2000048c <sd_mmc_cards>:
	...
20000494:	0000002d 00000000 00000000 00000000     -...............
	...

200004b0 <g_interrupt_enabled>:
200004b0:	00000001                                ....

200004b4 <flashcalw_wait_until_ready>:
200004b4:	0000a8f5                                ....

200004b8 <__fdlib_version>:
200004b8:	00000001 00000000                       ........

200004c0 <_impure_ptr>:
200004c0:	200004c8 00000000                       ... ....

200004c8 <impure_data>:
200004c8:	00000000 200007b4 2000081c 20000884     ....... ... ... 
	...
200004fc:	00012fb0 00000000 00000000 00000000     ./..............
	...
20000570:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000580:	0005deec 0000000b 00000000 00000000     ................
	...

200008f0 <__malloc_av_>:
	...
200008f8:	200008f0 200008f0 200008f8 200008f8     ... ... ... ... 
20000908:	20000900 20000900 20000908 20000908     ... ... ... ... 
20000918:	20000910 20000910 20000918 20000918     ... ... ... ... 
20000928:	20000920 20000920 20000928 20000928      ..  .. (.. (.. 
20000938:	20000930 20000930 20000938 20000938     0.. 0.. 8.. 8.. 
20000948:	20000940 20000940 20000948 20000948     @.. @.. H.. H.. 
20000958:	20000950 20000950 20000958 20000958     P.. P.. X.. X.. 
20000968:	20000960 20000960 20000968 20000968     `.. `.. h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 
20000988:	20000980 20000980 20000988 20000988     ... ... ... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 

20000cf8 <__malloc_sbrk_base>:
20000cf8:	ffffffff                                ....

20000cfc <__malloc_trim_threshold>:
20000cfc:	00020000                                ....

20000d00 <lc_ctype_charset>:
20000d00:	49435341 00000049 00000000 00000000     ASCII...........
	...

20000d20 <__mb_cur_max>:
20000d20:	00000001                                ....

20000d24 <lc_message_charset>:
20000d24:	49435341 00000049 00000000 00000000     ASCII...........
	...

20000d44 <lconv>:
20000d44:	00013039 0001303a 0001303a 0001303a     90..:0..:0..:0..
20000d54:	0001303a 0001303a 0001303a 0001303a     :0..:0..:0..:0..
20000d64:	0001303a 0001303a ffffffff ffffffff     :0..:0..........
20000d74:	ffffffff 0000ffff                       ........

20000d7c <__wctomb>:
20000d7c:	000123e1                                .#..
